{"ast":null,"code":"import _objectSpread from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React from'react';import{useTranslation}from'react-i18next';import{Dropdown}from'@app/components/common/Dropdown/Dropdown';import{kanbanTags}from'constants/kanbanTags';import*as S from'./TagDropdown.styles';import{Tag}from'components/common/Tag/Tag';import{PlusCircleFilled}from'@ant-design/icons';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var TagDropdown=function TagDropdown(_ref){var selectedTags=_ref.selectedTags,setSelectedTags=_ref.setSelectedTags;var _useTranslation=useTranslation(),t=_useTranslation.t;var kanbanTagData=Object.values(kanbanTags);var selectedTagsIds=selectedTags.map(function(item){return item.id;});var onTagClick=function onTagClick(tag){var isExist=selectedTagsIds.includes(tag.id);if(isExist){setSelectedTags(selectedTags.filter(function(item){return item.id!==tag.id;}));}else{setSelectedTags([].concat(_toConsumableArray(selectedTags),[tag]));}};return/*#__PURE__*/_jsx(Dropdown,{trigger:['click'],overlay:/*#__PURE__*/_jsxs(S.EditTagPopover,{children:[kanbanTagData.map(function(tag){return/*#__PURE__*/_jsxs(S.EditTagPopoverLine,{onClick:function onClick(e){onTagClick(tag);e.stopPropagation();},children:[/*#__PURE__*/_jsx(S.PopoverCheckbox,{checked:selectedTagsIds.includes(tag.id)}),/*#__PURE__*/_jsxs(S.TagWrapper,{backgroundColor:tag.bgColor,children:[\"#\",tag.title]})]},tag.id);}),/*#__PURE__*/_jsx(S.RemoveTagWrapper,{children:/*#__PURE__*/_jsx(S.RemoveTag,{})})]}),children:selectedTags&&selectedTags.length>0?/*#__PURE__*/_jsxs(S.TagsWrapper,{children:[selectedTags.map(function(tag){return/*#__PURE__*/_jsx(Tag,_objectSpread(_objectSpread({},tag),{},{removeTag:function removeTag(){return onTagClick(tag);}}),tag.id);}),/*#__PURE__*/_jsx(S.TagPlusWrapper,{children:/*#__PURE__*/_jsx(PlusCircleFilled,{})})]}):/*#__PURE__*/_jsx(S.TagsWrapper,{children:/*#__PURE__*/_jsx(S.AddTag,{children:t('kanban.addTag')})})});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/apps/kanban/newCardForm/TagDropdown/TagDropdown.tsx"],"names":["React","useTranslation","Dropdown","kanbanTags","S","Tag","PlusCircleFilled","TagDropdown","selectedTags","setSelectedTags","t","kanbanTagData","Object","values","selectedTagsIds","map","item","id","onTagClick","tag","isExist","includes","filter","e","stopPropagation","bgColor","title","length"],"mappings":"uVAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,OAASC,QAAT,KAAyB,0CAAzB,CAEA,OAASC,UAAT,KAA2B,sBAA3B,CACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,sBAAnB,CACA,OAASC,GAAT,KAAoB,2BAApB,CACA,OAASC,gBAAT,KAAiC,mBAAjC,C,wFAOA,MAAO,IAAMC,CAAAA,WAAuC,CAAG,QAA1CA,CAAAA,WAA0C,MAAuC,IAApCC,CAAAA,YAAoC,MAApCA,YAAoC,CAAtBC,eAAsB,MAAtBA,eAAsB,CAC5F,oBAAcR,cAAc,EAA5B,CAAQS,CAAR,iBAAQA,CAAR,CAEA,GAAMC,CAAAA,aAAa,CAAGC,MAAM,CAACC,MAAP,CAAcV,UAAd,CAAtB,CACA,GAAMW,CAAAA,eAAe,CAAGN,YAAY,CAACO,GAAb,CAAiB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAf,EAAjB,CAAxB,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,GAAD,CAAe,CAChC,GAAMC,CAAAA,OAAO,CAAGN,eAAe,CAACO,QAAhB,CAAyBF,GAAG,CAACF,EAA7B,CAAhB,CAEA,GAAIG,OAAJ,CAAa,CACXX,eAAe,CAACD,YAAY,CAACc,MAAb,CAAoB,SAACN,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAL,GAAYE,GAAG,CAACF,EAA1B,EAApB,CAAD,CAAf,CACD,CAFD,IAEO,CACLR,eAAe,8BAAKD,YAAL,GAAmBW,GAAnB,GAAf,CACD,CACF,CARD,CAUA,mBACE,KAAC,QAAD,EACE,OAAO,CAAE,CAAC,OAAD,CADX,CAEE,OAAO,cACL,MAAC,CAAD,CAAG,cAAH,YACGR,aAAa,CAACI,GAAd,CAAkB,SAACI,GAAD,qBACjB,MAAC,CAAD,CAAG,kBAAH,EAEE,OAAO,CAAE,iBAACI,CAAD,CAAO,CACdL,UAAU,CAACC,GAAD,CAAV,CACAI,CAAC,CAACC,eAAF,GACD,CALH,wBAOE,KAAC,CAAD,CAAG,eAAH,EAAmB,OAAO,CAAEV,eAAe,CAACO,QAAhB,CAAyBF,GAAG,CAACF,EAA7B,CAA5B,EAPF,cAQE,MAAC,CAAD,CAAG,UAAH,EAAc,eAAe,CAAEE,GAAG,CAACM,OAAnC,eAA8CN,GAAG,CAACO,KAAlD,GARF,GACOP,GAAG,CAACF,EADX,CADiB,EAAlB,CADH,cAaE,KAAC,CAAD,CAAG,gBAAH,wBACE,KAAC,CAAD,CAAG,SAAH,IADF,EAbF,GAHJ,UAsBGT,YAAY,EAAIA,YAAY,CAACmB,MAAb,CAAsB,CAAtC,cACC,MAAC,CAAD,CAAG,WAAH,YACGnB,YAAY,CAACO,GAAb,CAAiB,SAACI,GAAD,qBAChB,KAAC,GAAD,gCAAsBA,GAAtB,MAA2B,SAAS,CAAE,2BAAMD,CAAAA,UAAU,CAACC,GAAD,CAAhB,EAAtC,GAAUA,GAAG,CAACF,EAAd,CADgB,EAAjB,CADH,cAIE,KAAC,CAAD,CAAG,cAAH,wBACE,KAAC,gBAAD,IADF,EAJF,GADD,cAUC,KAAC,CAAD,CAAG,WAAH,wBACE,KAAC,CAAD,CAAG,MAAH,WAAWP,CAAC,CAAC,eAAD,CAAZ,EADF,EAhCJ,EADF,CAuCD,CAvDM","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dropdown } from '@app/components/common/Dropdown/Dropdown';\nimport { Tag as ITag } from '../../interfaces';\nimport { kanbanTags } from 'constants/kanbanTags';\nimport * as S from './TagDropdown.styles';\nimport { Tag } from 'components/common/Tag/Tag';\nimport { PlusCircleFilled } from '@ant-design/icons';\n\ninterface TagDropdownProps {\n  selectedTags: ITag[];\n  setSelectedTags: (state: ITag[]) => void;\n}\n\nexport const TagDropdown: React.FC<TagDropdownProps> = ({ selectedTags, setSelectedTags }) => {\n  const { t } = useTranslation();\n\n  const kanbanTagData = Object.values(kanbanTags);\n  const selectedTagsIds = selectedTags.map((item) => item.id);\n\n  const onTagClick = (tag: ITag) => {\n    const isExist = selectedTagsIds.includes(tag.id);\n\n    if (isExist) {\n      setSelectedTags(selectedTags.filter((item) => item.id !== tag.id));\n    } else {\n      setSelectedTags([...selectedTags, tag]);\n    }\n  };\n\n  return (\n    <Dropdown\n      trigger={['click']}\n      overlay={\n        <S.EditTagPopover>\n          {kanbanTagData.map((tag: ITag) => (\n            <S.EditTagPopoverLine\n              key={tag.id}\n              onClick={(e) => {\n                onTagClick(tag);\n                e.stopPropagation();\n              }}\n            >\n              <S.PopoverCheckbox checked={selectedTagsIds.includes(tag.id)} />\n              <S.TagWrapper backgroundColor={tag.bgColor}>#{tag.title}</S.TagWrapper>\n            </S.EditTagPopoverLine>\n          ))}\n          <S.RemoveTagWrapper>\n            <S.RemoveTag />\n          </S.RemoveTagWrapper>\n        </S.EditTagPopover>\n      }\n    >\n      {selectedTags && selectedTags.length > 0 ? (\n        <S.TagsWrapper>\n          {selectedTags.map((tag) => (\n            <Tag key={tag.id} {...tag} removeTag={() => onTagClick(tag)} />\n          ))}\n          <S.TagPlusWrapper>\n            <PlusCircleFilled />\n          </S.TagPlusWrapper>\n        </S.TagsWrapper>\n      ) : (\n        <S.TagsWrapper>\n          <S.AddTag>{t('kanban.addTag')}</S.AddTag>\n        </S.TagsWrapper>\n      )}\n    </Dropdown>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}