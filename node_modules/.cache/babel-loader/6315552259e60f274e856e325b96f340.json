{"ast":null,"code":"import{BREAKPOINTS,media}from'@app/styles/themes/constants';import{useMediaQuery}from'react-responsive';export var useResponsive=function useResponsive(){var isMobile=useMediaQuery({query:media.xs});var isTablet=useMediaQuery({query:media.md});var isDesktop=useMediaQuery({query:media.xl});var isBigScreen=useMediaQuery({query:media.xxl});var mobileOnly=useMediaQuery({query:\"(max-width: \".concat(BREAKPOINTS.md-0.02,\"px)\")});var tabletOnly=useMediaQuery({query:\"(min-width: \".concat(BREAKPOINTS.md,\"px) and (max-width: \").concat(BREAKPOINTS.xl-0.02,\"px)\")});var desktopOnly=useMediaQuery({query:\"(min-width: \".concat(BREAKPOINTS.xl,\"px) and (max-width: \").concat(BREAKPOINTS.xxl-0.02,\"px)\")});return{isMobile:isMobile,isTablet:isTablet,isDesktop:isDesktop,isBigScreen:isBigScreen,mobileOnly:mobileOnly,tabletOnly:tabletOnly,desktopOnly:desktopOnly,useMediaQuery:useMediaQuery};};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/hooks/useResponsive.ts"],"names":["BREAKPOINTS","media","useMediaQuery","useResponsive","isMobile","query","xs","isTablet","md","isDesktop","xl","isBigScreen","xxl","mobileOnly","tabletOnly","desktopOnly"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,KAAtB,KAAmC,8BAAnC,CACA,OAAqDC,aAArD,KAA0E,kBAA1E,CAiBA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAA8B,CACzD,GAAMC,CAAAA,QAAQ,CAAGF,aAAa,CAAC,CAAEG,KAAK,CAAEJ,KAAK,CAACK,EAAf,CAAD,CAA9B,CACA,GAAMC,CAAAA,QAAQ,CAAGL,aAAa,CAAC,CAAEG,KAAK,CAAEJ,KAAK,CAACO,EAAf,CAAD,CAA9B,CACA,GAAMC,CAAAA,SAAS,CAAGP,aAAa,CAAC,CAAEG,KAAK,CAAEJ,KAAK,CAACS,EAAf,CAAD,CAA/B,CACA,GAAMC,CAAAA,WAAW,CAAGT,aAAa,CAAC,CAAEG,KAAK,CAAEJ,KAAK,CAACW,GAAf,CAAD,CAAjC,CAEA,GAAMC,CAAAA,UAAU,CAAGX,aAAa,CAAC,CAC/BG,KAAK,uBAAiBL,WAAW,CAACQ,EAAZ,CAAiB,IAAlC,OAD0B,CAAD,CAAhC,CAIA,GAAMM,CAAAA,UAAU,CAAGZ,aAAa,CAAC,CAC/BG,KAAK,uBAAiBL,WAAW,CAACQ,EAA7B,gCAAsDR,WAAW,CAACU,EAAZ,CAAiB,IAAvE,OAD0B,CAAD,CAAhC,CAIA,GAAMK,CAAAA,WAAW,CAAGb,aAAa,CAAC,CAChCG,KAAK,uBAAiBL,WAAW,CAACU,EAA7B,gCAAsDV,WAAW,CAACY,GAAZ,CAAkB,IAAxE,OAD2B,CAAD,CAAjC,CAIA,MAAO,CACLR,QAAQ,CAARA,QADK,CAELG,QAAQ,CAARA,QAFK,CAGLE,SAAS,CAATA,SAHK,CAILE,WAAW,CAAXA,WAJK,CAKLE,UAAU,CAAVA,UALK,CAMLC,UAAU,CAAVA,UANK,CAOLC,WAAW,CAAXA,WAPK,CAQLb,aAAa,CAAbA,aARK,CAAP,CAUD,CA5BM","sourcesContent":["import { BREAKPOINTS, media } from '@app/styles/themes/constants';\nimport { MediaQueryAllQueryable, MediaQueryMatchers, useMediaQuery } from 'react-responsive';\n\ninterface ResponsiveReturnValues {\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  isBigScreen: boolean;\n  mobileOnly: boolean;\n  tabletOnly: boolean;\n  desktopOnly: boolean;\n  useMediaQuery: (\n    settings: Partial<MediaQueryAllQueryable & { query?: string | undefined }>,\n    device?: MediaQueryMatchers,\n    callback?: (matches: boolean) => void,\n  ) => boolean;\n}\n\nexport const useResponsive = (): ResponsiveReturnValues => {\n  const isMobile = useMediaQuery({ query: media.xs });\n  const isTablet = useMediaQuery({ query: media.md });\n  const isDesktop = useMediaQuery({ query: media.xl });\n  const isBigScreen = useMediaQuery({ query: media.xxl });\n\n  const mobileOnly = useMediaQuery({\n    query: `(max-width: ${BREAKPOINTS.md - 0.02}px)`,\n  });\n\n  const tabletOnly = useMediaQuery({\n    query: `(min-width: ${BREAKPOINTS.md}px) and (max-width: ${BREAKPOINTS.xl - 0.02}px)`,\n  });\n\n  const desktopOnly = useMediaQuery({\n    query: `(min-width: ${BREAKPOINTS.xl}px) and (max-width: ${BREAKPOINTS.xxl - 0.02}px)`,\n  });\n\n  return {\n    isMobile,\n    isTablet,\n    isDesktop,\n    isBigScreen,\n    mobileOnly,\n    tabletOnly,\n    desktopOnly,\n    useMediaQuery,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}