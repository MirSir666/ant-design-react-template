{"ast":null,"code":"import _objectSpread from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/screeningsCard/ScreeningsChart/ScreeningsChart.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { BaseChart, getDefaultTooltipStyles } from '@app/components/common/charts/BaseChart';\nimport { hexToRGB } from '@app/utils/utils';\nimport { getMarkAreaData } from '@app/utils/utils';\nimport { themeObject } from '@app/styles/themes/themeVariables';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar xAxisData = Array.from({\n  length: 16\n}, function (_, i) {\n  return i + 1;\n});\nexport var ScreeningsChart = function ScreeningsChart(_ref) {\n  _s();\n\n  var firstUser = _ref.firstUser,\n      secondUser = _ref.secondUser;\n  var theme = useAppSelector(function (state) {\n    return state.theme.theme;\n  });\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var option = {\n    color: [themeObject[theme].chartPrimaryGradient, themeObject[theme].chartSecondaryGradient],\n    tooltip: _objectSpread(_objectSpread({}, getDefaultTooltipStyles(themeObject[theme])), {}, {\n      trigger: 'axis',\n      formatter: function formatter(series) {\n        var firstUser = series[1];\n        var secondUser = series[0];\n        var firstUserData = firstUser.data;\n        var secondUserData = secondUser.data;\n        return \"\".concat(firstUser.seriesName, \": \").concat(firstUserData.value, \"%  - \").concat(t('common.day'), \" \").concat(firstUserData.day, \" <br/>\\n                \").concat(secondUser.seriesName, \": \").concat(secondUserData.value, \"% - \").concat(t('common.day'), \" \").concat(secondUserData.day, \"\\n        \");\n      }\n    }),\n    grid: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    },\n    xAxis: [{\n      show: false,\n      type: 'category',\n      boundaryGap: false,\n      data: xAxisData\n    }],\n    yAxis: [{\n      show: false,\n      type: 'value',\n      min: 0,\n      max: 100\n    }],\n    series: [{\n      name: \"\".concat(firstUser === null || firstUser === void 0 ? void 0 : firstUser.name),\n      type: 'line',\n      smooth: true,\n      showSymbol: false,\n      lineStyle: {\n        width: 2,\n        color: themeObject[theme].chartColor1\n      },\n      areaStyle: {\n        opacity: 1\n      },\n      emphasis: {\n        focus: 'series'\n      },\n      data: firstUser === null || firstUser === void 0 ? void 0 : firstUser.data,\n      markArea: {\n        itemStyle: {\n          color: \"rgba(\".concat(hexToRGB(themeObject[theme].chartColor1), \", 0.01)\")\n        },\n        data: getMarkAreaData(xAxisData)\n      }\n    }, {\n      name: \"\".concat(secondUser === null || secondUser === void 0 ? void 0 : secondUser.name),\n      type: 'line',\n      smooth: true,\n      lineStyle: {\n        width: 2,\n        color: themeObject[theme].chartColor5\n      },\n      showSymbol: false,\n      areaStyle: {\n        opacity: 1\n      },\n      emphasis: {\n        focus: 'series'\n      },\n      data: secondUser === null || secondUser === void 0 ? void 0 : secondUser.data,\n      markArea: {\n        itemStyle: {\n          color: \"rgba(\".concat(hexToRGB(themeObject[theme].chartColor1), \", 0.01)\")\n        },\n        data: getMarkAreaData(xAxisData)\n      }\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(BaseChart, {\n    option: option\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(ScreeningsChart, \"ZfDj1CaKqJtDTwhWOPL4pxr2c8k=\", false, function () {\n  return [useAppSelector, useTranslation];\n});\n\n_c = ScreeningsChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScreeningsChart\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/screeningsCard/ScreeningsChart/ScreeningsChart.tsx"],"names":["React","useTranslation","BaseChart","getDefaultTooltipStyles","hexToRGB","getMarkAreaData","themeObject","useAppSelector","xAxisData","Array","from","length","_","i","ScreeningsChart","firstUser","secondUser","theme","state","t","option","color","chartPrimaryGradient","chartSecondaryGradient","tooltip","trigger","formatter","series","firstUserData","data","secondUserData","seriesName","value","day","grid","top","left","right","bottom","xAxis","show","type","boundaryGap","yAxis","min","max","name","smooth","showSymbol","lineStyle","width","chartColor1","areaStyle","opacity","emphasis","focus","markArea","itemStyle","chartColor5"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { BaseChart, getDefaultTooltipStyles } from '@app/components/common/charts/BaseChart';\nimport { hexToRGB } from '@app/utils/utils';\nimport { getMarkAreaData } from '@app/utils/utils';\nimport { ChartSeriesData } from '@app/interfaces/interfaces';\nimport { themeObject } from '@app/styles/themes/themeVariables';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\n\ninterface StatisticsData {\n  day: number;\n  value: string | number;\n}\n\ninterface UserStatistics {\n  name: string;\n  data: StatisticsData[];\n}\n\ninterface ScreeningsChartProps {\n  firstUser?: UserStatistics;\n  secondUser?: UserStatistics;\n}\n\nconst xAxisData = Array.from({ length: 16 }, (_, i) => i + 1);\n\nexport const ScreeningsChart: React.FC<ScreeningsChartProps> = ({ firstUser, secondUser }) => {\n  const theme = useAppSelector((state) => state.theme.theme);\n\n  const { t } = useTranslation();\n\n  const option = {\n    color: [themeObject[theme].chartPrimaryGradient, themeObject[theme].chartSecondaryGradient],\n    tooltip: {\n      ...getDefaultTooltipStyles(themeObject[theme]),\n      trigger: 'axis',\n      formatter: (series: ChartSeriesData) => {\n        const firstUser = series[1];\n        const secondUser = series[0];\n\n        const firstUserData = firstUser.data;\n        const secondUserData = secondUser.data;\n\n        return `${firstUser.seriesName}: ${firstUserData.value}%  - ${t('common.day')} ${firstUserData.day} <br/>\n                ${secondUser.seriesName}: ${secondUserData.value}% - ${t('common.day')} ${secondUserData.day}\n        `;\n      },\n    },\n    grid: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n    },\n    xAxis: [\n      {\n        show: false,\n        type: 'category',\n        boundaryGap: false,\n        data: xAxisData,\n      },\n    ],\n    yAxis: [\n      {\n        show: false,\n        type: 'value',\n        min: 0,\n        max: 100,\n      },\n    ],\n    series: [\n      {\n        name: `${firstUser?.name}`,\n        type: 'line',\n        smooth: true,\n        showSymbol: false,\n        lineStyle: {\n          width: 2,\n          color: themeObject[theme].chartColor1,\n        },\n        areaStyle: {\n          opacity: 1,\n        },\n        emphasis: {\n          focus: 'series',\n        },\n        data: firstUser?.data,\n        markArea: {\n          itemStyle: {\n            color: `rgba(${hexToRGB(themeObject[theme].chartColor1)}, 0.01)`,\n          },\n          data: getMarkAreaData(xAxisData),\n        },\n      },\n      {\n        name: `${secondUser?.name}`,\n        type: 'line',\n        smooth: true,\n        lineStyle: {\n          width: 2,\n          color: themeObject[theme].chartColor5,\n        },\n        showSymbol: false,\n        areaStyle: {\n          opacity: 1,\n        },\n        emphasis: {\n          focus: 'series',\n        },\n        data: secondUser?.data,\n        markArea: {\n          itemStyle: {\n            color: `rgba(${hexToRGB(themeObject[theme].chartColor1)}, 0.01)`,\n          },\n          data: getMarkAreaData(xAxisData),\n        },\n      },\n    ],\n  };\n\n  return <BaseChart option={option} />;\n};\n"]},"metadata":{},"sourceType":"module"}