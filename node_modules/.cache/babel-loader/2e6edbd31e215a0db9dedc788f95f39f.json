{"ast":null,"code":"import _objectSpread from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from'react';import{DropdownCollapse}from'@app/components/header/Header.styles';import{useTranslation}from'react-i18next';import{LanguagePicker}from'../LanguagePicker/LanguagePicker';import{NightModeSettings}from'../nightModeSettings/NightModeSettings';import{ThemePicker}from'../ThemePicker/ThemePicker';import{Button}from'@app/components/common/buttons/Button/Button';import{useAppSelector}from'@app/hooks/reduxHooks';import*as S from'./SettingsOverlay.styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var SettingsOverlay=function SettingsOverlay(_ref){var props=Object.assign({},_ref);var _useTranslation=useTranslation(),t=_useTranslation.t;var _useAppSelector=useAppSelector(function(state){return state.pwa;}),isPWASupported=_useAppSelector.isPWASupported,event=_useAppSelector.event;return/*#__PURE__*/_jsxs(S.SettingsOverlayMenu,_objectSpread(_objectSpread({mode:\"inline\",selectable:false},props),{},{children:[/*#__PURE__*/_jsxs(DropdownCollapse,{bordered:false,expandIconPosition:\"right\",ghost:true,defaultActiveKey:\"themePicker\",children:[/*#__PURE__*/_jsx(DropdownCollapse.Panel,{header:t('header.changeLanguage'),children:/*#__PURE__*/_jsx(LanguagePicker,{})},\"languagePicker\"),/*#__PURE__*/_jsx(DropdownCollapse.Panel,{header:t('header.changeTheme'),children:/*#__PURE__*/_jsx(ThemePicker,{})},\"themePicker\"),/*#__PURE__*/_jsx(DropdownCollapse.Panel,{header:t('header.nightMode.title'),children:/*#__PURE__*/_jsx(NightModeSettings,{})},\"nightMode\")]}),isPWASupported&&/*#__PURE__*/_jsx(S.PwaInstallWrapper,{children:/*#__PURE__*/_jsx(Button,{block:true,type:\"primary\",onClick:function onClick(){return event&&event.prompt();},children:t('common.pwa')})})]}));};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/header/components/settingsDropdown/settingsOverlay/SettingsOverlay/SettingsOverlay.tsx"],"names":["React","DropdownCollapse","useTranslation","LanguagePicker","NightModeSettings","ThemePicker","Button","useAppSelector","S","SettingsOverlay","props","t","state","pwa","isPWASupported","event","prompt"],"mappings":"uKAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,gBAAT,KAAiC,sCAAjC,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,OAASC,cAAT,KAA+B,kCAA/B,CACA,OAASC,iBAAT,KAAkC,wCAAlC,CACA,OAASC,WAAT,KAA4B,4BAA5B,CACA,OAASC,MAAT,KAAuB,8CAAvB,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,0BAAnB,C,wFAEA,MAAO,IAAMC,CAAAA,eAAyB,CAAG,QAA5BA,CAAAA,eAA4B,MAAkB,IAAZC,CAAAA,KAAY,wBACzD,oBAAcR,cAAc,EAA5B,CAAQS,CAAR,iBAAQA,CAAR,CAEA,oBAAkCJ,cAAc,CAAC,SAACK,KAAD,QAAWA,CAAAA,KAAK,CAACC,GAAjB,EAAD,CAAhD,CAAQC,cAAR,iBAAQA,cAAR,CAAwBC,KAAxB,iBAAwBA,KAAxB,CAEA,mBACE,MAAC,CAAD,CAAG,mBAAH,8BAAuB,IAAI,CAAC,QAA5B,CAAqC,UAAU,CAAE,KAAjD,EAA4DL,KAA5D,6BACE,MAAC,gBAAD,EAAkB,QAAQ,CAAE,KAA5B,CAAmC,kBAAkB,CAAC,OAAtD,CAA8D,KAAK,KAAnE,CAAoE,gBAAgB,CAAC,aAArF,wBACE,KAAC,gBAAD,CAAkB,KAAlB,EAAwB,MAAM,CAAEC,CAAC,CAAC,uBAAD,CAAjC,uBACE,KAAC,cAAD,IADF,EAAgE,gBAAhE,CADF,cAIE,KAAC,gBAAD,CAAkB,KAAlB,EAAwB,MAAM,CAAEA,CAAC,CAAC,oBAAD,CAAjC,uBACE,KAAC,WAAD,IADF,EAA6D,aAA7D,CAJF,cAOE,KAAC,gBAAD,CAAkB,KAAlB,EAAwB,MAAM,CAAEA,CAAC,CAAC,wBAAD,CAAjC,uBACE,KAAC,iBAAD,IADF,EAAiE,WAAjE,CAPF,GADF,CAYGG,cAAc,eACb,KAAC,CAAD,CAAG,iBAAH,wBACE,KAAC,MAAD,EAAQ,KAAK,KAAb,CAAc,IAAI,CAAC,SAAnB,CAA6B,OAAO,CAAE,yBAAMC,CAAAA,KAAK,EAAKA,KAAD,CAAoCC,MAApC,EAAf,EAAtC,UACGL,CAAC,CAAC,YAAD,CADJ,EADF,EAbJ,IADF,CAsBD,CA3BM","sourcesContent":["import React from 'react';\nimport { DropdownCollapse } from '@app/components/header/Header.styles';\nimport { useTranslation } from 'react-i18next';\nimport { LanguagePicker } from '../LanguagePicker/LanguagePicker';\nimport { NightModeSettings } from '../nightModeSettings/NightModeSettings';\nimport { ThemePicker } from '../ThemePicker/ThemePicker';\nimport { Button } from '@app/components/common/buttons/Button/Button';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport * as S from './SettingsOverlay.styles';\n\nexport const SettingsOverlay: React.FC = ({ ...props }) => {\n  const { t } = useTranslation();\n\n  const { isPWASupported, event } = useAppSelector((state) => state.pwa);\n\n  return (\n    <S.SettingsOverlayMenu mode=\"inline\" selectable={false} {...props}>\n      <DropdownCollapse bordered={false} expandIconPosition=\"right\" ghost defaultActiveKey=\"themePicker\">\n        <DropdownCollapse.Panel header={t('header.changeLanguage')} key=\"languagePicker\">\n          <LanguagePicker />\n        </DropdownCollapse.Panel>\n        <DropdownCollapse.Panel header={t('header.changeTheme')} key=\"themePicker\">\n          <ThemePicker />\n        </DropdownCollapse.Panel>\n        <DropdownCollapse.Panel header={t('header.nightMode.title')} key=\"nightMode\">\n          <NightModeSettings />\n        </DropdownCollapse.Panel>\n      </DropdownCollapse>\n      {isPWASupported && (\n        <S.PwaInstallWrapper>\n          <Button block type=\"primary\" onClick={() => event && (event as BeforeInstallPromptEvent).prompt()}>\n            {t('common.pwa')}\n          </Button>\n        </S.PwaInstallWrapper>\n      )}\n    </S.SettingsOverlayMenu>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}