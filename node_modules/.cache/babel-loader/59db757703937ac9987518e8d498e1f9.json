{"ast":null,"code":"import{useEffect}from'react';import{setTheme}from'@app/store/slices/themeSlice';import{useAppDispatch,useAppSelector}from'@app/hooks/reduxHooks';import{Dates}from'@app/constants/Dates';var getNextTime=function getNextTime(ms){var now=Date.now();var clearDate=Dates.getClearDate();var nextTime=clearDate.add(ms,'ms');var delta=+nextTime-now;return delta<0?delta+24*3600*1000:delta;};var timeoutNightStarts=null;var timeoutNightEnds=null;export var useAutoNightMode=function useAutoNightMode(){var dispatch=useAppDispatch();var nightModeState=useAppSelector(function(state){return state.nightMode;});var isNightMode=nightModeState.isNightMode;var nightTime=nightModeState.nightTime;useEffect(function(){timeoutNightStarts&&clearTimeout(timeoutNightStarts);timeoutNightEnds&&clearTimeout(timeoutNightEnds);if(isNightMode){var runTimeoutStart=function runTimeoutStart(){dispatch(setTheme('dark'));timeoutNightStarts=setTimeout(runTimeoutStart,24*3600*1000);};var nextStartTime=getNextTime(nightTime[0]);timeoutNightStarts=setTimeout(runTimeoutStart,nextStartTime);var runTimeoutEnd=function runTimeoutEnd(){dispatch(setTheme('light'));timeoutNightEnds=setTimeout(runTimeoutEnd,24*3600*1000);};var nextEndTime=getNextTime(nightTime[1]);nextEndTime=nextStartTime>nextEndTime?nextEndTime+24*3600*1000:nextEndTime;timeoutNightEnds=setTimeout(runTimeoutEnd,nextEndTime);}return function(){timeoutNightStarts&&clearTimeout(timeoutNightStarts);timeoutNightEnds&&clearTimeout(timeoutNightEnds);};},[dispatch,isNightMode,nightTime]);};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/hooks/useAutoNightMode.ts"],"names":["useEffect","setTheme","useAppDispatch","useAppSelector","Dates","getNextTime","ms","now","Date","clearDate","getClearDate","nextTime","add","delta","timeoutNightStarts","timeoutNightEnds","useAutoNightMode","dispatch","nightModeState","state","nightMode","isNightMode","nightTime","clearTimeout","runTimeoutStart","setTimeout","nextStartTime","runTimeoutEnd","nextEndTime"],"mappings":"AAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,OAASC,QAAT,KAAyB,8BAAzB,CACA,OAASC,cAAT,CAAyBC,cAAzB,KAA+C,uBAA/C,CACA,OAASC,KAAT,KAAsB,sBAAtB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,EAAD,CAAgB,CAClC,GAAMC,CAAAA,GAAG,CAAGC,IAAI,CAACD,GAAL,EAAZ,CACA,GAAME,CAAAA,SAAS,CAAGL,KAAK,CAACM,YAAN,EAAlB,CACA,GAAMC,CAAAA,QAAQ,CAAGF,SAAS,CAACG,GAAV,CAAcN,EAAd,CAAkB,IAAlB,CAAjB,CAEA,GAAMO,CAAAA,KAAK,CAAG,CAACF,QAAD,CAAYJ,GAA1B,CAEA,MAAOM,CAAAA,KAAK,CAAG,CAAR,CAAYA,KAAK,CAAG,GAAK,IAAL,CAAY,IAAhC,CAAuCA,KAA9C,CACD,CARD,CAUA,GAAIC,CAAAA,kBAAwD,CAAG,IAA/D,CACA,GAAIC,CAAAA,gBAAsD,CAAG,IAA7D,CAEA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAY,CAC1C,GAAMC,CAAAA,QAAQ,CAAGf,cAAc,EAA/B,CACA,GAAMgB,CAAAA,cAAc,CAAGf,cAAc,CAAC,SAACgB,KAAD,QAAWA,CAAAA,KAAK,CAACC,SAAjB,EAAD,CAArC,CACA,GAAMC,CAAAA,WAAW,CAAGH,cAAc,CAACG,WAAnC,CACA,GAAMC,CAAAA,SAAS,CAAGJ,cAAc,CAACI,SAAjC,CAEAtB,SAAS,CAAC,UAAM,CACdc,kBAAkB,EAAIS,YAAY,CAACT,kBAAD,CAAlC,CACAC,gBAAgB,EAAIQ,YAAY,CAACR,gBAAD,CAAhC,CAEA,GAAIM,WAAJ,CAAiB,CACf,GAAMG,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5BP,QAAQ,CAAChB,QAAQ,CAAC,MAAD,CAAT,CAAR,CACAa,kBAAkB,CAAGW,UAAU,CAACD,eAAD,CAAkB,GAAK,IAAL,CAAY,IAA9B,CAA/B,CACD,CAHD,CAKA,GAAME,CAAAA,aAAa,CAAGrB,WAAW,CAACiB,SAAS,CAAC,CAAD,CAAV,CAAjC,CACAR,kBAAkB,CAAGW,UAAU,CAACD,eAAD,CAAkBE,aAAlB,CAA/B,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1BV,QAAQ,CAAChB,QAAQ,CAAC,OAAD,CAAT,CAAR,CACAc,gBAAgB,CAAGU,UAAU,CAACE,aAAD,CAAgB,GAAK,IAAL,CAAY,IAA5B,CAA7B,CACD,CAHD,CAKA,GAAIC,CAAAA,WAAW,CAAGvB,WAAW,CAACiB,SAAS,CAAC,CAAD,CAAV,CAA7B,CACAM,WAAW,CAAGF,aAAa,CAAGE,WAAhB,CAA8BA,WAAW,CAAG,GAAK,IAAL,CAAY,IAAxD,CAA+DA,WAA7E,CAEAb,gBAAgB,CAAGU,UAAU,CAACE,aAAD,CAAgBC,WAAhB,CAA7B,CACD,CAED,MAAO,WAAM,CACXd,kBAAkB,EAAIS,YAAY,CAACT,kBAAD,CAAlC,CACAC,gBAAgB,EAAIQ,YAAY,CAACR,gBAAD,CAAhC,CACD,CAHD,CAID,CA5BQ,CA4BN,CAACE,QAAD,CAAWI,WAAX,CAAwBC,SAAxB,CA5BM,CAAT,CA6BD,CAnCM","sourcesContent":["import { useEffect } from 'react';\nimport { setTheme } from '@app/store/slices/themeSlice';\nimport { useAppDispatch, useAppSelector } from '@app/hooks/reduxHooks';\nimport { Dates } from '@app/constants/Dates';\n\nconst getNextTime = (ms: number) => {\n  const now = Date.now();\n  const clearDate = Dates.getClearDate();\n  const nextTime = clearDate.add(ms, 'ms');\n\n  const delta = +nextTime - now;\n\n  return delta < 0 ? delta + 24 * 3600 * 1000 : delta;\n};\n\nlet timeoutNightStarts: null | ReturnType<typeof setTimeout> = null;\nlet timeoutNightEnds: null | ReturnType<typeof setTimeout> = null;\n\nexport const useAutoNightMode = (): void => {\n  const dispatch = useAppDispatch();\n  const nightModeState = useAppSelector((state) => state.nightMode);\n  const isNightMode = nightModeState.isNightMode;\n  const nightTime = nightModeState.nightTime;\n\n  useEffect(() => {\n    timeoutNightStarts && clearTimeout(timeoutNightStarts);\n    timeoutNightEnds && clearTimeout(timeoutNightEnds);\n\n    if (isNightMode) {\n      const runTimeoutStart = () => {\n        dispatch(setTheme('dark'));\n        timeoutNightStarts = setTimeout(runTimeoutStart, 24 * 3600 * 1000);\n      };\n\n      const nextStartTime = getNextTime(nightTime[0]);\n      timeoutNightStarts = setTimeout(runTimeoutStart, nextStartTime);\n\n      const runTimeoutEnd = () => {\n        dispatch(setTheme('light'));\n        timeoutNightEnds = setTimeout(runTimeoutEnd, 24 * 3600 * 1000);\n      };\n\n      let nextEndTime = getNextTime(nightTime[1]);\n      nextEndTime = nextStartTime > nextEndTime ? nextEndTime + 24 * 3600 * 1000 : nextEndTime;\n\n      timeoutNightEnds = setTimeout(runTimeoutEnd, nextEndTime);\n    }\n\n    return () => {\n      timeoutNightStarts && clearTimeout(timeoutNightStarts);\n      timeoutNightEnds && clearTimeout(timeoutNightEnds);\n    };\n  }, [dispatch, isNightMode, nightTime]);\n};\n"]},"metadata":{},"sourceType":"module"}