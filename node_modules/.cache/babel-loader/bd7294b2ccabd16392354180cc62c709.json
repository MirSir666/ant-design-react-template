{"ast":null,"code":"import _toConsumableArray from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/workspace/ant-design-react-template/src/components/charts/LineRaceChart/LineRaceChart.tsx\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card } from '@app/components/common/Card/Card';\nimport { BaseChart } from '@app/components/common/charts/BaseChart';\nimport Data from './data.json';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { themeObject } from '@app/styles/themes/themeVariables';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var LineRaceChart = function LineRaceChart() {\n  _s();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    series = _useState4[0],\n    setSeries = _useState4[1];\n  var rawData = JSON.parse(JSON.stringify(Data));\n  var _useTranslation = useTranslation(),\n    t = _useTranslation.t;\n  var theme = useAppSelector(function (state) {\n    return state.theme.theme;\n  });\n  var runAnimation = useCallback(function () {\n    var countries = ['Finland', 'Germany', 'Iceland', 'Norway', 'United Kingdom'];\n    var datasetWithFilters = [];\n    var seriesList = [];\n    countries.forEach(function (country) {\n      var datasetId = \"dataset_\".concat(country);\n      datasetWithFilters.push({\n        id: datasetId,\n        fromDatasetId: 'dataset_raw',\n        transform: {\n          type: 'filter',\n          config: {\n            and: [{\n              dimension: 'Year',\n              gte: 1950\n            }, {\n              dimension: 'Country',\n              '=': country\n            }]\n          }\n        }\n      });\n      seriesList.push({\n        type: 'line',\n        datasetId: datasetId,\n        showSymbol: false,\n        name: country,\n        endLabel: {\n          show: true,\n          formatter: function formatter(params) {\n            return \"\".concat(params.value[3], \": \").concat(params.value[0]);\n          },\n          color: themeObject[theme].textMain\n        },\n        labelLayout: {\n          moveOverlap: 'shiftY'\n        },\n        emphasis: {\n          focus: 'series'\n        },\n        encode: {\n          x: 'Year',\n          y: 'Income',\n          label: ['Country', 'Income'],\n          itemName: 'Year',\n          tooltip: ['Income']\n        }\n      });\n    });\n    setData(datasetWithFilters);\n    setSeries(seriesList);\n  }, [theme]);\n  useEffect(function () {\n    setTimeout(function () {\n      runAnimation();\n    }, 200);\n  }, [runAnimation]);\n  var option = {\n    animationDuration: 10000,\n    dataset: [{\n      id: 'dataset_raw',\n      source: rawData\n    }].concat(_toConsumableArray(data)),\n    tooltip: {\n      order: 'valueDesc',\n      trigger: 'axis'\n    },\n    xAxis: {\n      type: 'category',\n      nameLocation: 'middle'\n    },\n    yAxis: {\n      name: ''\n    },\n    grid: {\n      left: 65,\n      right: 150,\n      top: 20,\n      bottom: 30\n    },\n    series: series\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    padding: \"0 0 1.875rem\",\n    title: t('charts.lineRace'),\n    children: /*#__PURE__*/_jsxDEV(BaseChart, {\n      option: option,\n      height: \"24rem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, _this);\n};\n_s(LineRaceChart, \"lf8FtL9s6wk/lwm2JfDFPVf/y1s=\", false, function () {\n  return [useTranslation, useAppSelector];\n});\n_c = LineRaceChart;\nvar _c;\n$RefreshReg$(_c, \"LineRaceChart\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useTranslation","Card","BaseChart","Data","useAppSelector","themeObject","LineRaceChart","data","setData","series","setSeries","rawData","JSON","parse","stringify","t","theme","state","runAnimation","countries","datasetWithFilters","seriesList","forEach","country","datasetId","push","id","fromDatasetId","transform","type","config","and","dimension","gte","showSymbol","name","endLabel","show","formatter","params","value","color","textMain","labelLayout","moveOverlap","emphasis","focus","encode","x","y","label","itemName","tooltip","setTimeout","option","animationDuration","dataset","source","order","trigger","xAxis","nameLocation","yAxis","grid","left","right","top","bottom"],"sources":["/workspace/ant-design-react-template/src/components/charts/LineRaceChart/LineRaceChart.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card } from '@app/components/common/Card/Card';\nimport { BaseChart } from '@app/components/common/charts/BaseChart';\nimport Data from './data.json';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { themeObject } from '@app/styles/themes/themeVariables';\n\ninterface DataRow {\n  id: string;\n  fromDatasetId: string;\n  transform: {\n    type: string;\n    config: { and: [{ dimension: string; gte: number }, { dimension: string; '=': string }] };\n  };\n}\n\ninterface SeriesRow {\n  type: string;\n  datasetId: string;\n  showSymbol: boolean;\n  name: string;\n  endLabel: {\n    show: boolean;\n    formatter: (params: { value: string }) => string;\n    color?: string;\n  };\n  labelLayout: {\n    moveOverlap: string;\n  };\n  emphasis: {\n    focus: string;\n  };\n  encode: {\n    x: string;\n    y: string;\n    label: [string, string];\n    itemName: string;\n    tooltip: [string];\n  };\n}\n\nexport const LineRaceChart: React.FC = () => {\n  const [data, setData] = useState<DataRow[]>([]);\n  const [series, setSeries] = useState<SeriesRow[]>([]);\n  const rawData = JSON.parse(JSON.stringify(Data));\n  const { t } = useTranslation();\n\n  const theme = useAppSelector((state) => state.theme.theme);\n\n  const runAnimation = useCallback(() => {\n    const countries = ['Finland', 'Germany', 'Iceland', 'Norway', 'United Kingdom'];\n    const datasetWithFilters: DataRow[] = [];\n    const seriesList: SeriesRow[] = [];\n\n    countries.forEach((country) => {\n      const datasetId = `dataset_${country}`;\n      datasetWithFilters.push({\n        id: datasetId,\n        fromDatasetId: 'dataset_raw',\n        transform: {\n          type: 'filter',\n          config: {\n            and: [\n              { dimension: 'Year', gte: 1950 },\n              { dimension: 'Country', '=': country },\n            ],\n          },\n        },\n      });\n      seriesList.push({\n        type: 'line',\n        datasetId: datasetId,\n        showSymbol: false,\n        name: country,\n        endLabel: {\n          show: true,\n          formatter: (params) => `${params.value[3]}: ${params.value[0]}`,\n          color: themeObject[theme].textMain,\n        },\n        labelLayout: {\n          moveOverlap: 'shiftY',\n        },\n        emphasis: {\n          focus: 'series',\n        },\n        encode: {\n          x: 'Year',\n          y: 'Income',\n          label: ['Country', 'Income'],\n          itemName: 'Year',\n          tooltip: ['Income'],\n        },\n      });\n    });\n    setData(datasetWithFilters);\n    setSeries(seriesList);\n  }, [theme]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      runAnimation();\n    }, 200);\n  }, [runAnimation]);\n\n  const option = {\n    animationDuration: 10000,\n    dataset: [\n      {\n        id: 'dataset_raw',\n        source: rawData,\n      },\n      ...data,\n    ],\n    tooltip: {\n      order: 'valueDesc',\n      trigger: 'axis',\n    },\n    xAxis: {\n      type: 'category',\n      nameLocation: 'middle',\n    },\n    yAxis: {\n      name: '',\n    },\n    grid: {\n      left: 65,\n      right: 150,\n      top: 20,\n      bottom: 30,\n    },\n    series: series,\n  };\n\n  return (\n    <Card padding=\"0 0 1.875rem\" title={t('charts.lineRace')}>\n      <BaseChart option={option} height=\"24rem\" />\n    </Card>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}