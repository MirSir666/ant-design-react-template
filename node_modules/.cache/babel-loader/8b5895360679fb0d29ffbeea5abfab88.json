{"ast":null,"code":"import _defineProperty from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _classCallCheck from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"placeholderChar\", \"formatCharacters\"];\nimport React, { Component } from 'react';\nimport { Input } from 'antd';\nimport InputMask from './inputmask-core';\nimport { isRedo, isUndo, getSelection, setSelection } from './helpers';\nvar MaskedInput = /*#__PURE__*/function (_Component) {\n  _inherits(MaskedInput, _Component);\n  var _super = _createSuper(MaskedInput);\n  function MaskedInput(props) {\n    var _this;\n    _classCallCheck(this, MaskedInput);\n    _this = _super.call(this, props);\n    _this.state = {\n      input: null,\n      _lastValue: null,\n      _Input: null,\n      mask: null,\n      prevMask: null,\n      prevValue: null\n    };\n    _this._onChange = function (e) {\n      // console.log('onChange', JSON.stringify(getSelection(this.state.input)), e.target.value)\n      var maskValue = _this.state.mask.getValue();\n      var incomingValue = e.target.value;\n      if (incomingValue !== maskValue) {\n        // only modify mask if form contents actually changed\n        _this._updateMaskSelection();\n        _this.state.mask.setValue(incomingValue); // write the whole updated value into the mask\n        _this.setInputValue(_this._getDisplayValue()); // update the form with pattern applied to the value\n        _this._updateInputSelection();\n      }\n      if (_this.props.onChange) {\n        _this.props.onChange(e);\n      }\n    };\n    _this._onKeyDown = function (e) {\n      setTimeout(function () {\n        _this.state.input.classList[_this.state.input.value ? 'add' : 'remove']('has-value');\n      }, 100);\n      if (isUndo(e)) {\n        e.preventDefault();\n        if (_this.state.mask.undo()) {\n          _this.setInputValue(_this._getDisplayValue());\n          _this._updateInputSelection();\n          if (_this.props.onChange) {\n            _this.props.onChange(e);\n          }\n        }\n        return;\n      } else if (isRedo(e)) {\n        e.preventDefault();\n        if (_this.state.mask.redo()) {\n          _this.setInputValue(_this._getDisplayValue());\n          _this._updateInputSelection();\n          if (_this.props.onChange) {\n            _this.props.onChange(e);\n          }\n        }\n        return;\n      }\n      if (e.key === 'Backspace') {\n        e.preventDefault();\n        _this._updateMaskSelection();\n        if (_this.state.mask.backspace()) {\n          var value = _this._getDisplayValue();\n          _this.setInputValue(value);\n          if (value) {\n            _this._updateInputSelection();\n          }\n          if (_this.props.onChange) {\n            _this.props.onChange(e);\n          }\n        }\n      }\n    };\n    _this._onKeyPress = function (e) {\n      // console.log('onKeyPress', JSON.stringify(getSelection(this.state.input)), e.key, e.target.value)\n      // Ignore modified key presses\n      // Ignore enter key to allow form submission\n      if (e.metaKey || e.altKey || e.ctrlKey || e.key === 'Enter') {\n        return;\n      }\n      e.preventDefault();\n      _this._updateMaskSelection();\n      if (_this.state.mask.input(e.key || e.data)) {\n        _this.setInputValue(_this.state.mask.getValue());\n        _this._updateInputSelection();\n        if (_this.props.onChange) {\n          _this.props.onChange(e);\n        }\n      }\n    };\n    _this._onPaste = function (e) {\n      e.preventDefault();\n      _this._updateMaskSelection();\n      // getData value needed for IE also works in FF & Chrome\n      if (_this.state.mask.paste(e.clipboardData.getData('Text'))) {\n        // @ts-ignore\n        _this.setInputValue(_this.state.mask.getValue());\n        // Timeout needed for IE\n        setTimeout(function () {\n          return _this._updateInputSelection();\n        }, 0);\n        if (_this.props.onChange) {\n          // @ts-ignore\n          _this.props.onChange(e);\n        }\n      }\n    };\n    _this.getInputProps = function () {\n      var maxLength = _this.state.mask.pattern.length;\n      var eventHandlers = _this._getEventHandlers();\n      var _this$props$placehold = _this.props.placeholder,\n        placeholder = _this$props$placehold === void 0 ? _this.state.mask.emptyValue : _this$props$placehold;\n      var _this$props = _this.props,\n        placeholderChar = _this$props.placeholderChar,\n        formatCharacters = _this$props.formatCharacters,\n        cleanedProps = _objectWithoutProperties(_this$props, _excluded);\n      var props = _objectSpread(_objectSpread(_objectSpread({}, cleanedProps), eventHandlers), {}, {\n        maxLength: maxLength,\n        placeholder: placeholder\n      });\n      delete props.value;\n      return props;\n    };\n    _this.setInputValue = function (value) {\n      if (!_this.state._Input || !_this.state._Input.input) return;\n      if (value === _this.state._lastValue) return;\n      _this.state._lastValue = value;\n      _this.state._Input.setState({\n        value: value\n      });\n      _this.state._Input.input.value = value;\n    };\n    _this.handleInputRef = function (ref) {\n      if (!ref) return;\n      _this.state._Input = ref;\n      _this.state.input = ref.input;\n      if (_this.state._lastValue === null && typeof _this.props.defaultValue === 'string') {\n        _this.state.mask.setValue(_this.props.defaultValue); // write the whole updated value into the mask\n        _this.setInputValue(_this._getDisplayValue()); // update the form with pattern applied to the value\n      }\n    };\n\n    var options = {\n      pattern: _this.props.mask,\n      value: _this.props.value,\n      formatCharacters: _this.props.formatCharacters\n    };\n    if (_this.props.placeholderChar) {\n      options.placeholderChar = _this.props.placeholderChar;\n    }\n    _this.state.mask = new InputMask(options);\n    return _this;\n  }\n  _createClass(MaskedInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setInputValue(this._getDisplayValue());\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!this.props.mask) return null;\n      if (prevProps.mask !== this.props.mask && this.state.mask.selection.start) {\n        this._updateInputSelection();\n      }\n      return;\n    }\n  }, {\n    key: \"_updateMaskSelection\",\n    value: function _updateMaskSelection() {\n      this.state.mask.selection = getSelection(this.state.input);\n    }\n  }, {\n    key: \"_updateInputSelection\",\n    value: function _updateInputSelection() {\n      setSelection(this.state.input, this.state.mask.selection);\n    }\n  }, {\n    key: \"_getDisplayValue\",\n    value: function _getDisplayValue() {\n      var value = this.state.mask.getValue();\n      return value === this.state.mask.emptyValue ? '' : value;\n    }\n  }, {\n    key: \"_keyPressPropName\",\n    value: function _keyPressPropName() {\n      if (typeof navigator !== 'undefined') {\n        return navigator.userAgent.match(/Android/i) ? 'onBeforeInput' : 'onKeyPress';\n      }\n      return 'onKeyPress';\n    }\n  }, {\n    key: \"_getEventHandlers\",\n    value: function _getEventHandlers() {\n      return _defineProperty({\n        onChange: this._onChange,\n        onKeyDown: this._onKeyDown,\n        onPaste: this._onPaste\n      }, this._keyPressPropName(), this._onKeyPress);\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.state.input.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.state.input.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Input, Object.assign({}, this.getInputProps(), {\n        ref: this.handleInputRef\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var currMask = state.prevMask;\n      var currValue = state.prevValue;\n      var nextMask = props.mask;\n      var nextValue = props.value;\n      if (nextMask !== currMask && nextValue !== currValue) {\n        // if we get a new value and a new mask at the same time\n        // check if the mask.value is still the initial value\n        // - if so use the next's value\n        // - otherwise the `this.mask` has a value for us (most likely from paste action)\n        if (state.mask.getValue() === state.mask.emptyValue) {\n          state.mask.setPattern(nextMask, {\n            value: nextValue,\n            selection: state.input && getSelection(state.input)\n          });\n        } else {\n          state.mask.setPattern(nextMask, {\n            value: state.mask.getRawValue(),\n            selection: state.input && getSelection(state.input)\n          });\n        }\n      } else if (currMask !== nextMask) {\n        state.mask.setPattern(nextMask, {\n          value: state.mask.getRawValue(),\n          selection: state.input && getSelection(state.input)\n        });\n      }\n      if (currValue !== nextValue) {\n        state.mask.setValue(nextValue);\n        var value = state.mask.getValue();\n        value = value === state.mask.emptyValue ? '' : value;\n        if (state._Input && state._Input.input && value !== state._lastValue) {\n          state._lastValue = value;\n          state._Input.setState({\n            value: value\n          });\n          state._Input.input.value = value;\n        }\n      }\n      if (nextMask !== currMask || nextValue !== currValue) {\n        var newState = {};\n        if (nextMask !== currMask) {\n          newState.prevMask = nextMask;\n        }\n        if (nextValue !== currValue) {\n          newState.prevValue = nextValue;\n        }\n        return newState;\n      }\n      return null;\n    }\n  }]);\n  return MaskedInput;\n}(Component);\nexport { MaskedInput as default };","map":{"version":3,"sources":["../../../src/lib/MaskedInput.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { Component } from 'react';\nimport { Input } from 'antd';\nimport InputMask from './inputmask-core';\nimport { isRedo, isUndo, getSelection, setSelection } from './helpers';\nexport default class MaskedInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: null,\n            _lastValue: null,\n            _Input: null,\n            mask: null,\n            prevMask: null,\n            prevValue: null,\n        };\n        this._onChange = (e) => {\n            // console.log('onChange', JSON.stringify(getSelection(this.state.input)), e.target.value)\n            let maskValue = this.state.mask.getValue();\n            let incomingValue = e.target.value;\n            if (incomingValue !== maskValue) {\n                // only modify mask if form contents actually changed\n                this._updateMaskSelection();\n                this.state.mask.setValue(incomingValue); // write the whole updated value into the mask\n                this.setInputValue(this._getDisplayValue()); // update the form with pattern applied to the value\n                this._updateInputSelection();\n            }\n            if (this.props.onChange) {\n                this.props.onChange(e);\n            }\n        };\n        this._onKeyDown = (e) => {\n            setTimeout(() => {\n                this.state.input.classList[this.state.input.value ? 'add' : 'remove']('has-value');\n            }, 100);\n            if (isUndo(e)) {\n                e.preventDefault();\n                if (this.state.mask.undo()) {\n                    this.setInputValue(this._getDisplayValue());\n                    this._updateInputSelection();\n                    if (this.props.onChange) {\n                        this.props.onChange(e);\n                    }\n                }\n                return;\n            }\n            else if (isRedo(e)) {\n                e.preventDefault();\n                if (this.state.mask.redo()) {\n                    this.setInputValue(this._getDisplayValue());\n                    this._updateInputSelection();\n                    if (this.props.onChange) {\n                        this.props.onChange(e);\n                    }\n                }\n                return;\n            }\n            if (e.key === 'Backspace') {\n                e.preventDefault();\n                this._updateMaskSelection();\n                if (this.state.mask.backspace()) {\n                    let value = this._getDisplayValue();\n                    this.setInputValue(value);\n                    if (value) {\n                        this._updateInputSelection();\n                    }\n                    if (this.props.onChange) {\n                        this.props.onChange(e);\n                    }\n                }\n            }\n        };\n        this._onKeyPress = (e) => {\n            // console.log('onKeyPress', JSON.stringify(getSelection(this.state.input)), e.key, e.target.value)\n            // Ignore modified key presses\n            // Ignore enter key to allow form submission\n            if (e.metaKey || e.altKey || e.ctrlKey || e.key === 'Enter') {\n                return;\n            }\n            e.preventDefault();\n            this._updateMaskSelection();\n            if (this.state.mask.input(e.key || e.data)) {\n                this.setInputValue(this.state.mask.getValue());\n                this._updateInputSelection();\n                if (this.props.onChange) {\n                    this.props.onChange(e);\n                }\n            }\n        };\n        this._onPaste = (e) => {\n            e.preventDefault();\n            this._updateMaskSelection();\n            // getData value needed for IE also works in FF & Chrome\n            if (this.state.mask.paste(e.clipboardData.getData('Text'))) {\n                // @ts-ignore\n                this.setInputValue(this.state.mask.getValue());\n                // Timeout needed for IE\n                setTimeout(() => this._updateInputSelection(), 0);\n                if (this.props.onChange) {\n                    // @ts-ignore\n                    this.props.onChange(e);\n                }\n            }\n        };\n        this.getInputProps = () => {\n            let maxLength = this.state.mask.pattern.length;\n            let eventHandlers = this._getEventHandlers();\n            let { placeholder = this.state.mask.emptyValue } = this.props;\n            let { placeholderChar, formatCharacters, ...cleanedProps } = this.props;\n            const props = { ...cleanedProps, ...eventHandlers, maxLength, placeholder };\n            delete props.value;\n            return props;\n        };\n        this.setInputValue = (value) => {\n            if (!this.state._Input || !this.state._Input.input)\n                return;\n            if (value === this.state._lastValue)\n                return;\n            this.state._lastValue = value;\n            this.state._Input.setState({ value });\n            this.state._Input.input.value = value;\n        };\n        this.handleInputRef = (ref) => {\n            if (!ref)\n                return;\n            this.state._Input = ref;\n            this.state.input = ref.input;\n            if (this.state._lastValue === null &&\n                typeof this.props.defaultValue === 'string') {\n                this.state.mask.setValue(this.props.defaultValue); // write the whole updated value into the mask\n                this.setInputValue(this._getDisplayValue()); // update the form with pattern applied to the value\n            }\n        };\n        let options = {\n            pattern: this.props.mask,\n            value: this.props.value,\n            formatCharacters: this.props.formatCharacters\n        };\n        if (this.props.placeholderChar) {\n            options.placeholderChar = this.props.placeholderChar;\n        }\n        this.state.mask = new InputMask(options);\n    }\n    componentDidMount() {\n        this.setInputValue(this._getDisplayValue());\n    }\n    static getDerivedStateFromProps(props, state) {\n        const currMask = state.prevMask;\n        const currValue = state.prevValue;\n        const nextMask = props.mask;\n        const nextValue = props.value;\n        if (nextMask !== currMask &&\n            nextValue !== currValue) {\n            // if we get a new value and a new mask at the same time\n            // check if the mask.value is still the initial value\n            // - if so use the next's value\n            // - otherwise the `this.mask` has a value for us (most likely from paste action)\n            if (state.mask.getValue() === state.mask.emptyValue) {\n                state.mask.setPattern(nextMask, {\n                    value: nextValue,\n                    selection: state.input && getSelection(state.input)\n                });\n            }\n            else {\n                state.mask.setPattern(nextMask, {\n                    value: state.mask.getRawValue(),\n                    selection: state.input && getSelection(state.input)\n                });\n            }\n        }\n        else if (currMask !== nextMask) {\n            state.mask.setPattern(nextMask, {\n                value: state.mask.getRawValue(),\n                selection: state.input && getSelection(state.input)\n            });\n        }\n        if (currValue !== nextValue) {\n            state.mask.setValue(nextValue);\n            let value = state.mask.getValue();\n            value = value === state.mask.emptyValue ? '' : value;\n            if (state._Input && state._Input.input && value !== state._lastValue) {\n                state._lastValue = value;\n                state._Input.setState({ value });\n                state._Input.input.value = value;\n            }\n        }\n        if (nextMask !== currMask || nextValue !== currValue) {\n            const newState = {};\n            if (nextMask !== currMask) {\n                newState.prevMask = nextMask;\n            }\n            if (nextValue !== currValue) {\n                newState.prevValue = nextValue;\n            }\n            return newState;\n        }\n        return null;\n    }\n    componentDidUpdate(prevProps) {\n        if (!this.props.mask)\n            return null;\n        if (prevProps.mask !== this.props.mask && this.state.mask.selection.start) {\n            this._updateInputSelection();\n        }\n        return;\n    }\n    _updateMaskSelection() {\n        this.state.mask.selection = getSelection(this.state.input);\n    }\n    _updateInputSelection() {\n        setSelection(this.state.input, this.state.mask.selection);\n    }\n    _getDisplayValue() {\n        let value = this.state.mask.getValue();\n        return value === this.state.mask.emptyValue ? '' : value;\n    }\n    _keyPressPropName() {\n        if (typeof navigator !== 'undefined') {\n            return navigator.userAgent.match(/Android/i)\n                ? 'onBeforeInput'\n                : 'onKeyPress';\n        }\n        return 'onKeyPress';\n    }\n    _getEventHandlers() {\n        return {\n            onChange: this._onChange,\n            onKeyDown: this._onKeyDown,\n            onPaste: this._onPaste,\n            [this._keyPressPropName()]: this._onKeyPress\n        };\n    }\n    focus() {\n        this.state.input.focus();\n    }\n    blur() {\n        this.state.input.blur();\n    }\n    render() {\n        return React.createElement(Input, Object.assign({}, this.getInputProps(), { ref: this.handleInputRef }));\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFza2VkSW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL01hc2tlZElucHV0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxFQUFlLFNBQVMsRUFBa0IsTUFBTSxPQUFPLENBQUM7QUFDdEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLFNBQVMsTUFBTSxrQkFBa0IsQ0FBQztBQUN6QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBdUJ2RSxNQUFNLENBQUMsT0FBTyxPQUFPLFdBQVksU0FBUSxTQUEyQjtJQVdsRSxZQUFZLEtBQXVCO1FBQ2pDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVZmLFVBQUssR0FBcUI7WUFDeEIsS0FBSyxFQUFFLElBQUk7WUFDWCxVQUFVLEVBQUUsSUFBSTtZQUNoQixNQUFNLEVBQUUsSUFBSTtZQUNaLElBQUksRUFBRSxJQUFJO1lBQ1YsUUFBUSxFQUFFLElBQUk7WUFDZCxTQUFTLEVBQUUsSUFBSTtTQUNoQixDQUFDO1FBc0dGLGNBQVMsR0FBRyxDQUFDLENBQWUsRUFBRSxFQUFFO1lBQzlCLDBGQUEwRjtZQUUxRixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMzQyxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNuQyxJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7Z0JBQy9CLHFEQUFxRDtnQkFDckQsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLDhDQUE4QztnQkFDdkYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsb0RBQW9EO2dCQUNqRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQzthQUM5QjtZQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO1FBQ0gsQ0FBQyxDQUFDO1FBRUYsZUFBVSxHQUFHLENBQUMsQ0FBaUIsRUFBRSxFQUFFO1lBQ2pDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNyRixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFFUixJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDYixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ25CLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUU7b0JBQzFCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztvQkFDNUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7b0JBQzdCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7d0JBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUN4QjtpQkFDRjtnQkFDRCxPQUFPO2FBQ1I7aUJBQU0sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3BCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDbkIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtvQkFDMUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO29CQUM1QyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztvQkFDN0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTt3QkFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ3hCO2lCQUNGO2dCQUNELE9BQU87YUFDUjtZQUVELElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxXQUFXLEVBQUU7Z0JBQ3pCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDbkIsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7Z0JBQzVCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUU7b0JBQy9CLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO29CQUNwQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUMxQixJQUFJLEtBQUssRUFBRTt3QkFDVCxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztxQkFDOUI7b0JBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTt3QkFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ3hCO2lCQUNGO2FBQ0Y7UUFDSCxDQUFDLENBQUM7UUFFRixnQkFBVyxHQUFHLENBQUMsQ0FBaUIsRUFBRSxFQUFFO1lBQ2xDLG1HQUFtRztZQUVuRyw4QkFBOEI7WUFDOUIsNENBQTRDO1lBQzVDLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQUU7Z0JBQzNELE9BQU87YUFDUjtZQUVELENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUNuQixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztZQUM1QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDMUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUMvQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztnQkFDN0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtvQkFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3hCO2FBQ0Y7UUFDSCxDQUFDLENBQUM7UUFFRixhQUFRLEdBQUcsQ0FBQyxDQUFrQixFQUFFLEVBQUU7WUFDaEMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1lBQzVCLHdEQUF3RDtZQUN4RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFO2dCQUMxRCxhQUFhO2dCQUNiLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztnQkFDL0Msd0JBQXdCO2dCQUN4QixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7b0JBQ3ZCLGFBQWE7b0JBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3hCO2FBQ0Y7UUFDSCxDQUFDLENBQUM7UUF1Q0Ysa0JBQWEsR0FBRyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUMvQyxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUM3QyxJQUFJLEVBQUUsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFFOUQsSUFBSSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDeEUsTUFBTSxLQUFLLEdBQUcsRUFBRSxHQUFHLFlBQVksRUFBRSxHQUFHLGFBQWEsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLENBQUM7WUFDNUUsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ25CLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDO1FBRUYsa0JBQWEsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUs7Z0JBQUUsT0FBTztZQUMzRCxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVU7Z0JBQUUsT0FBTztZQUU1QyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7WUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUN4QyxDQUFDLENBQUM7UUFFRixtQkFBYyxHQUFHLENBQUMsR0FBVSxFQUFFLEVBQUU7WUFDOUIsSUFBSSxDQUFDLEdBQUc7Z0JBQUUsT0FBTztZQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztZQUU3QixJQUNFLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxLQUFLLElBQUk7Z0JBQzlCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEtBQUssUUFBUSxFQUMzQztnQkFDQSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLDhDQUE4QztnQkFDakcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsb0RBQW9EO2FBQ2xHO1FBQ0gsQ0FBQyxDQUFDO1FBdlFBLElBQUksT0FBTyxHQUFRO1lBQ2pCLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7WUFDeEIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSztZQUN2QixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQjtTQUM5QyxDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRTtZQUM5QixPQUFPLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDO1NBQ3REO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELGlCQUFpQjtRQUNmLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEtBQXVCLEVBQUUsS0FBdUI7UUFFOUUsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUNoQyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ2xDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDNUIsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUc5QixJQUNFLFFBQVEsS0FBSyxRQUFRO1lBQ3JCLFNBQVMsS0FBSyxTQUFTLEVBQ3ZCO1lBQ0Esd0RBQXdEO1lBQ3hELHFEQUFxRDtZQUNyRCwrQkFBK0I7WUFDL0IsaUZBQWlGO1lBQ2pGLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFO29CQUM5QixLQUFLLEVBQUUsU0FBUztvQkFDaEIsU0FBUyxFQUFFLEtBQUssQ0FBQyxLQUFLLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7aUJBQ3BELENBQUMsQ0FBQzthQUNKO2lCQUFNO2dCQUNMLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRTtvQkFDOUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO29CQUMvQixTQUFTLEVBQUUsS0FBSyxDQUFDLEtBQUssSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztpQkFDcEQsQ0FBQyxDQUFDO2FBQ0o7U0FDRjthQUFNLElBQUksUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNoQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7Z0JBQzlCLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDL0IsU0FBUyxFQUFFLEtBQUssQ0FBQyxLQUFLLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7YUFDcEQsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7WUFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFL0IsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNsQyxLQUFLLEdBQUcsS0FBSyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUVyRCxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxVQUFVLEVBQUU7Z0JBQ3BFLEtBQUssQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO2dCQUN6QixLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBQ2pDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7YUFDbEM7U0FDRjtRQUVELElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO1lBQ3BELE1BQU0sUUFBUSxHQUE4QyxFQUFFLENBQUM7WUFFL0QsSUFBSSxRQUFRLEtBQUssUUFBUSxFQUFFO2dCQUN6QixRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQzthQUM5QjtZQUNELElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtnQkFDM0IsUUFBUSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7YUFDL0I7WUFFRCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUdELGtCQUFrQixDQUFDLFNBQTJCO1FBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQztRQUNsQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRTtZQUN6RSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztTQUM5QjtRQUNELE9BQU87SUFDVCxDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQscUJBQXFCO1FBQ25CLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBbUdELGdCQUFnQjtRQUNkLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDM0QsQ0FBQztJQUVELGlCQUFpQjtRQUNmLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxFQUFFO1lBQ3BDLE9BQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO2dCQUMxQyxDQUFDLENBQUMsZUFBZTtnQkFDakIsQ0FBQyxDQUFDLFlBQVksQ0FBQztTQUNsQjtRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxpQkFBaUI7UUFPZixPQUFPO1lBQ0wsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3hCLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMxQixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdEIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXO1NBQzdDLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQW9DRCxNQUFNO1FBQ0osT0FBTyxvQkFBQyxLQUFLLG9CQUFLLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDO0lBQ3ZFLENBQUM7Q0FDRiJ9"]},"metadata":{},"sourceType":"module"}