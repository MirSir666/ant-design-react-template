{"ast":null,"code":"import{useTranslation}from'react-i18next';import{BaseForm}from'@app/components/common/forms/BaseForm/BaseForm';import{Input}from'@app/components/common/inputs/Input/Input';import{InputPassword}from'@app/components/common/inputs/InputPassword/InputPassword';import*as S from'../StepForm.styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Step1=function Step1(){var _useTranslation=useTranslation(),t=_useTranslation.t;return/*#__PURE__*/_jsxs(S.FormContent,{children:[/*#__PURE__*/_jsx(BaseForm.Item,{name:\"login\",label:t('forms.stepFormLabels.login'),rules:[{required:true,message:t('forms.stepFormLabels.loginError')}],children:/*#__PURE__*/_jsx(Input,{})}),/*#__PURE__*/_jsx(BaseForm.Item,{name:\"password\",label:t('common.password'),rules:[{required:true,message:t('forms.stepFormLabels.passwordError')}],children:/*#__PURE__*/_jsx(InputPassword,{})}),/*#__PURE__*/_jsx(BaseForm.Item,{name:\"confirmPassword\",label:t('common.confirmPassword'),dependencies:['password'],rules:[{required:true,message:t('common.confirmPasswordError')},function(_ref){var getFieldValue=_ref.getFieldValue;return{validator:function validator(_,value){if(!value||getFieldValue('password')===value){return Promise.resolve();}return Promise.reject(new Error(t('common.confirmPasswordError')));}};}],children:/*#__PURE__*/_jsx(InputPassword,{})})]});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/forms/StepForm/Steps/Step1.tsx"],"names":["useTranslation","BaseForm","Input","InputPassword","S","Step1","t","required","message","getFieldValue","validator","_","value","Promise","resolve","reject","Error"],"mappings":"AAAA,OAASA,cAAT,KAA+B,eAA/B,CACA,OAASC,QAAT,KAAyB,gDAAzB,CACA,OAASC,KAAT,KAAsB,2CAAtB,CACA,OAASC,aAAT,KAA8B,2DAA9B,CACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,oBAAnB,C,wFAEA,MAAO,IAAMC,CAAAA,KAAe,CAAG,QAAlBA,CAAAA,KAAkB,EAAM,CACnC,oBAAcL,cAAc,EAA5B,CAAQM,CAAR,iBAAQA,CAAR,CACA,mBACE,MAAC,CAAD,CAAG,WAAH,yBACE,KAAC,QAAD,CAAU,IAAV,EACE,IAAI,CAAC,OADP,CAEE,KAAK,CAAEA,CAAC,CAAC,4BAAD,CAFV,CAGE,KAAK,CAAE,CAAC,CAAEC,QAAQ,CAAE,IAAZ,CAAkBC,OAAO,CAAEF,CAAC,CAAC,iCAAD,CAA5B,CAAD,CAHT,uBAKE,KAAC,KAAD,IALF,EADF,cAQE,KAAC,QAAD,CAAU,IAAV,EACE,IAAI,CAAC,UADP,CAEE,KAAK,CAAEA,CAAC,CAAC,iBAAD,CAFV,CAGE,KAAK,CAAE,CAAC,CAAEC,QAAQ,CAAE,IAAZ,CAAkBC,OAAO,CAAEF,CAAC,CAAC,oCAAD,CAA5B,CAAD,CAHT,uBAKE,KAAC,aAAD,IALF,EARF,cAeE,KAAC,QAAD,CAAU,IAAV,EACE,IAAI,CAAC,iBADP,CAEE,KAAK,CAAEA,CAAC,CAAC,wBAAD,CAFV,CAGE,YAAY,CAAE,CAAC,UAAD,CAHhB,CAIE,KAAK,CAAE,CACL,CAAEC,QAAQ,CAAE,IAAZ,CAAkBC,OAAO,CAAEF,CAAC,CAAC,6BAAD,CAA5B,CADK,CAEL,kBAAGG,CAAAA,aAAH,MAAGA,aAAH,OAAwB,CACtBC,SADsB,oBACZC,CADY,CACTC,KADS,CACF,CAClB,GAAI,CAACA,KAAD,EAAUH,aAAa,CAAC,UAAD,CAAb,GAA8BG,KAA5C,CAAmD,CACjD,MAAOC,CAAAA,OAAO,CAACC,OAAR,EAAP,CACD,CACD,MAAOD,CAAAA,OAAO,CAACE,MAAR,CAAe,GAAIC,CAAAA,KAAJ,CAAUV,CAAC,CAAC,6BAAD,CAAX,CAAf,CAAP,CACD,CANqB,CAAxB,EAFK,CAJT,uBAgBE,KAAC,aAAD,IAhBF,EAfF,GADF,CAoCD,CAtCM","sourcesContent":["import { useTranslation } from 'react-i18next';\nimport { BaseForm } from '@app/components/common/forms/BaseForm/BaseForm';\nimport { Input } from '@app/components/common/inputs/Input/Input';\nimport { InputPassword } from '@app/components/common/inputs/InputPassword/InputPassword';\nimport * as S from '../StepForm.styles';\n\nexport const Step1: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <S.FormContent>\n      <BaseForm.Item\n        name=\"login\"\n        label={t('forms.stepFormLabels.login')}\n        rules={[{ required: true, message: t('forms.stepFormLabels.loginError') }]}\n      >\n        <Input />\n      </BaseForm.Item>\n      <BaseForm.Item\n        name=\"password\"\n        label={t('common.password')}\n        rules={[{ required: true, message: t('forms.stepFormLabels.passwordError') }]}\n      >\n        <InputPassword />\n      </BaseForm.Item>\n      <BaseForm.Item\n        name=\"confirmPassword\"\n        label={t('common.confirmPassword')}\n        dependencies={['password']}\n        rules={[\n          { required: true, message: t('common.confirmPasswordError') },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject(new Error(t('common.confirmPasswordError')));\n            },\n          }),\n        ]}\n      >\n        <InputPassword />\n      </BaseForm.Item>\n    </S.FormContent>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}