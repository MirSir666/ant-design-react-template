{"ast":null,"code":"import _slicedToArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from'react';import{Checkbox}from'antd';import*as S from'./CheckboxColumn.styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var CheckboxColumn=function CheckboxColumn(_ref){var column=_ref.column,handleCheck=_ref.handleCheck,setTriggered=_ref.setTriggered;var _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),checkedList=_React$useState2[0],setCheckedList=_React$useState2[1];var _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),indeterminate=_React$useState4[0],setIndeterminate=_React$useState4[1];var _React$useState5=React.useState(false),_React$useState6=_slicedToArray(_React$useState5,2),checkAll=_React$useState6[0],setCheckAll=_React$useState6[1];var onChange=function onChange(list){setCheckedList(list);setIndeterminate(!!list.length&&list.length<column.data.length);setCheckAll(list.length===column.data.length);handleCheck(list);setTriggered(true);};var onCheckAllChange=function onCheckAllChange(event){setCheckedList(event.target.checked?column.data:[]);setIndeterminate(false);setCheckAll(event.target.checked);handleCheck(event.target.checked?column.data:[]);setTriggered(true);};var props={indeterminate:indeterminate,onChange:onCheckAllChange,checked:checkAll};return/*#__PURE__*/_jsxs(S.Wrapper,{children:[/*#__PURE__*/_jsx(S.HeaderCol,{children:column.headerRender?column.headerRender(column.header,props):column.header}),/*#__PURE__*/_jsx(Checkbox.Group,{value:checkedList,onChange:onChange,children:column.data.map(function(el,index){return/*#__PURE__*/_jsx(S.Col,{children:column.dataRender?column.dataRender(el):el},index);})})]});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn.tsx"],"names":["React","Checkbox","S","CheckboxColumn","column","handleCheck","setTriggered","useState","checkedList","setCheckedList","indeterminate","setIndeterminate","checkAll","setCheckAll","onChange","list","length","data","onCheckAllChange","event","target","checked","props","headerRender","header","map","el","index","dataRender"],"mappings":"wKAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,KAAyB,MAAzB,CAIA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,yBAAnB,C,wFAQA,MAAO,IAAMC,CAAAA,cAA6C,CAAG,QAAhDA,CAAAA,cAAgD,MAA2C,IAAxCC,CAAAA,MAAwC,MAAxCA,MAAwC,CAAhCC,WAAgC,MAAhCA,WAAgC,CAAnBC,YAAmB,MAAnBA,YAAmB,CACtG,oBAAsCN,KAAK,CAACO,QAAN,CAAoC,EAApC,CAAtC,oDAAOC,WAAP,qBAAoBC,cAApB,qBACA,qBAA0CT,KAAK,CAACO,QAAN,CAAe,KAAf,CAA1C,qDAAOG,aAAP,qBAAsBC,gBAAtB,qBACA,qBAAgCX,KAAK,CAACO,QAAN,CAAe,KAAf,CAAhC,qDAAOK,QAAP,qBAAiBC,WAAjB,qBAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,CAA+B,CAC9CN,cAAc,CAACM,IAAD,CAAd,CACAJ,gBAAgB,CAAC,CAAC,CAACI,IAAI,CAACC,MAAP,EAAiBD,IAAI,CAACC,MAAL,CAAcZ,MAAM,CAACa,IAAP,CAAYD,MAA5C,CAAhB,CACAH,WAAW,CAACE,IAAI,CAACC,MAAL,GAAgBZ,MAAM,CAACa,IAAP,CAAYD,MAA7B,CAAX,CACAX,WAAW,CAACU,IAAD,CAAX,CACAT,YAAY,CAAC,IAAD,CAAZ,CACD,CAND,CAQA,GAAMY,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAgC,CACvDV,cAAc,CAACU,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAuBjB,MAAM,CAACa,IAA9B,CAAqC,EAAtC,CAAd,CACAN,gBAAgB,CAAC,KAAD,CAAhB,CACAE,WAAW,CAACM,KAAK,CAACC,MAAN,CAAaC,OAAd,CAAX,CACAhB,WAAW,CAACc,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAuBjB,MAAM,CAACa,IAA9B,CAAqC,EAAtC,CAAX,CACAX,YAAY,CAAC,IAAD,CAAZ,CACD,CAND,CAQA,GAAMgB,CAAAA,KAAK,CAAG,CACZZ,aAAa,CAAbA,aADY,CAEZI,QAAQ,CAAEI,gBAFE,CAGZG,OAAO,CAAET,QAHG,CAAd,CAMA,mBACE,MAAC,CAAD,CAAG,OAAH,yBACE,KAAC,CAAD,CAAG,SAAH,WAAcR,MAAM,CAACmB,YAAP,CAAsBnB,MAAM,CAACmB,YAAP,CAAoBnB,MAAM,CAACoB,MAA3B,CAAmCF,KAAnC,CAAtB,CAAkElB,MAAM,CAACoB,MAAvF,EADF,cAEE,KAAC,QAAD,CAAU,KAAV,EAAgB,KAAK,CAAEhB,WAAvB,CAAoC,QAAQ,CAAEM,QAA9C,UACGV,MAAM,CAACa,IAAP,CAAYQ,GAAZ,CAAgB,SAACC,EAAD,CAAKC,KAAL,qBACf,KAAC,CAAD,CAAG,GAAH,WAAoBvB,MAAM,CAACwB,UAAP,CAAoBxB,MAAM,CAACwB,UAAP,CAAkBF,EAAlB,CAApB,CAA4CA,EAAhE,EAAYC,KAAZ,CADe,EAAhB,CADH,EAFF,GADF,CAUD,CArCM","sourcesContent":["import React from 'react';\nimport { Checkbox } from 'antd';\nimport { Option } from '../interfaces';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport * as S from './CheckboxColumn.styles';\n\ninterface CheckboxColumnProps {\n  column: Omit<Option, 'id'>;\n  handleCheck: (list: CheckboxValueType[]) => void;\n  setTriggered: (state: boolean) => void;\n}\n\nexport const CheckboxColumn: React.FC<CheckboxColumnProps> = ({ column, handleCheck, setTriggered }) => {\n  const [checkedList, setCheckedList] = React.useState<CheckboxValueType[]>([]);\n  const [indeterminate, setIndeterminate] = React.useState(false);\n  const [checkAll, setCheckAll] = React.useState(false);\n\n  const onChange = (list: CheckboxValueType[]) => {\n    setCheckedList(list);\n    setIndeterminate(!!list.length && list.length < column.data.length);\n    setCheckAll(list.length === column.data.length);\n    handleCheck(list);\n    setTriggered(true);\n  };\n\n  const onCheckAllChange = (event: CheckboxChangeEvent) => {\n    setCheckedList(event.target.checked ? column.data : []);\n    setIndeterminate(false);\n    setCheckAll(event.target.checked);\n    handleCheck(event.target.checked ? column.data : []);\n    setTriggered(true);\n  };\n\n  const props = {\n    indeterminate,\n    onChange: onCheckAllChange,\n    checked: checkAll,\n  };\n\n  return (\n    <S.Wrapper>\n      <S.HeaderCol>{column.headerRender ? column.headerRender(column.header, props) : column.header}</S.HeaderCol>\n      <Checkbox.Group value={checkedList} onChange={onChange}>\n        {column.data.map((el, index) => (\n          <S.Col key={index}>{column.dataRender ? column.dataRender(el) : el}</S.Col>\n        ))}\n      </Checkbox.Group>\n    </S.Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}