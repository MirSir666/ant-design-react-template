{"ast":null,"code":"import React from'react';import{useTranslation}from'react-i18next';import{BaseButtonsForm}from'@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';import{InputPassword}from'@app/components/common/inputs/InputPassword/InputPassword';import{jsx as _jsx}from\"react/jsx-runtime\";export var ConfirmItemPassword=function ConfirmItemPassword(){var _useTranslation=useTranslation(),t=_useTranslation.t;return/*#__PURE__*/_jsx(BaseButtonsForm.Item,{name:\"confirmPassword\",label:t('profile.nav.securitySettings.confirmPassword'),dependencies:['newPassword'],rules:[{required:true,message:t('profile.nav.securitySettings.requiredPassword')},function(_ref){var getFieldValue=_ref.getFieldValue;return{validator:function validator(_,value){if(!value||getFieldValue('newPassword')===value){return Promise.resolve();}return Promise.reject(new Error(t('profile.nav.securitySettings.dontMatchPassword')));}};}],children:/*#__PURE__*/_jsx(InputPassword,{})});};","map":{"version":3,"names":["React","useTranslation","BaseButtonsForm","InputPassword","ConfirmItemPassword","t","required","message","getFieldValue","validator","_","value","Promise","resolve","reject","Error"],"sources":["/workspace/ant-design-react-template/src/components/profile/profileCard/profileFormNav/nav/SecuritySettings/passwordForm/ConfirmPasswordItem/ConfirmPasswordItem.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { InputPassword } from '@app/components/common/inputs/InputPassword/InputPassword';\n\nexport const ConfirmItemPassword: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <BaseButtonsForm.Item\n      name=\"confirmPassword\"\n      label={t('profile.nav.securitySettings.confirmPassword')}\n      dependencies={['newPassword']}\n      rules={[\n        {\n          required: true,\n          message: t('profile.nav.securitySettings.requiredPassword'),\n        },\n        ({ getFieldValue }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue('newPassword') === value) {\n              return Promise.resolve();\n            }\n            return Promise.reject(new Error(t('profile.nav.securitySettings.dontMatchPassword')));\n          },\n        }),\n      ]}\n    >\n      <InputPassword />\n    </BaseButtonsForm.Item>\n  );\n};\n"],"mappings":"AAAA,MAAOA,MAAK,KAAM,OAAO,CACzB,OAASC,cAAc,KAAQ,eAAe,CAC9C,OAASC,eAAe,KAAQ,8DAA8D,CAC9F,OAASC,aAAa,KAAQ,2DAA2D,CAAC,2CAE1F,MAAO,IAAMC,oBAA6B,CAAG,QAAhCA,oBAA6B,EAAS,CACjD,oBAAcH,cAAc,EAAE,CAAtBI,CAAC,iBAADA,CAAC,CAET,mBACE,KAAC,eAAe,CAAC,IAAI,EACnB,IAAI,CAAC,iBAAiB,CACtB,KAAK,CAAEA,CAAC,CAAC,8CAA8C,CAAE,CACzD,YAAY,CAAE,CAAC,aAAa,CAAE,CAC9B,KAAK,CAAE,CACL,CACEC,QAAQ,CAAE,IAAI,CACdC,OAAO,CAAEF,CAAC,CAAC,+CAA+C,CAC5D,CAAC,CACD,kBAAGG,cAAa,MAAbA,aAAa,OAAQ,CACtBC,SAAS,oBAACC,CAAC,CAAEC,KAAK,CAAE,CAClB,GAAI,CAACA,KAAK,EAAIH,aAAa,CAAC,aAAa,CAAC,GAAKG,KAAK,CAAE,CACpD,MAAOC,QAAO,CAACC,OAAO,EAAE,CAC1B,CACA,MAAOD,QAAO,CAACE,MAAM,CAAC,GAAIC,MAAK,CAACV,CAAC,CAAC,gDAAgD,CAAC,CAAC,CAAC,CACvF,CACF,CAAC,EAAC,CACF,uBAEF,KAAC,aAAa,IAAG,EACI,CAE3B,CAAC"},"metadata":{},"sourceType":"module"}