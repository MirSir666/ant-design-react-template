{"ast":null,"code":"import React from'react';import InfiniteScroll from'react-infinite-scroll-component';import{Spin}from'antd';import*as S from'./Feed.styles';import{jsx as _jsx}from\"react/jsx-runtime\";export var Feed=function Feed(_ref){var next=_ref.next,hasMore=_ref.hasMore,_ref$target=_ref.target,target=_ref$target===void 0?'main-content':_ref$target,children=_ref.children;return/*#__PURE__*/_jsx(InfiniteScroll,{dataLength:children.length,next:next,hasMore:hasMore,loader:/*#__PURE__*/_jsx(S.SpinnerWrapper,{children:/*#__PURE__*/_jsx(Spin,{size:\"large\"})}),scrollableTarget:target,children:/*#__PURE__*/_jsx(S.NewsWrapper,{children:children})});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/common/Feed/Feed.tsx"],"names":["React","InfiniteScroll","Spin","S","Feed","next","hasMore","target","children","length"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,cAAP,KAA2B,iCAA3B,CACA,OAASC,IAAT,KAAqB,MAArB,CACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,eAAnB,C,2CASA,MAAO,IAAMC,CAAAA,IAAyB,CAAG,QAA5BA,CAAAA,IAA4B,MAA0D,IAAvDC,CAAAA,IAAuD,MAAvDA,IAAuD,CAAjDC,OAAiD,MAAjDA,OAAiD,kBAAxCC,MAAwC,CAAxCA,MAAwC,sBAA/B,cAA+B,aAAfC,QAAe,MAAfA,QAAe,CACjG,mBACE,KAAC,cAAD,EACE,UAAU,CAAEA,QAAQ,CAACC,MADvB,CAEE,IAAI,CAAEJ,IAFR,CAGE,OAAO,CAAEC,OAHX,CAIE,MAAM,cACJ,KAAC,CAAD,CAAG,cAAH,wBACE,KAAC,IAAD,EAAM,IAAI,CAAC,OAAX,EADF,EALJ,CASE,gBAAgB,CAAEC,MATpB,uBAWE,KAAC,CAAD,CAAG,WAAH,WAAgBC,QAAhB,EAXF,EADF,CAeD,CAhBM","sourcesContent":["import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Spin } from 'antd';\nimport * as S from './Feed.styles';\n\nexport interface FeedProps {\n  next: () => void;\n  hasMore: boolean;\n  children: React.ReactNode[];\n  target?: string;\n}\n\nexport const Feed: React.FC<FeedProps> = ({ next, hasMore, target = 'main-content', children }) => {\n  return (\n    <InfiniteScroll\n      dataLength={children.length}\n      next={next}\n      hasMore={hasMore}\n      loader={\n        <S.SpinnerWrapper>\n          <Spin size=\"large\" />\n        </S.SpinnerWrapper>\n      }\n      scrollableTarget={target}\n    >\n      <S.NewsWrapper>{children}</S.NewsWrapper>\n    </InfiniteScroll>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}