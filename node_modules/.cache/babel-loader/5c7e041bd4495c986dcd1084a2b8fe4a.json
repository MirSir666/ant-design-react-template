{"ast":null,"code":"import _objectSpread from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"size\", \"children\"];\nvar _jsxFileName = \"/workspace/ant-design-react-template/src/components/common/Modal/Modal.tsx\",\n  _this = this;\nimport React from 'react';\nimport { Modal as AntdModal } from 'antd';\nimport { modalSizes } from 'constants/modalSizes';\nimport * as S from './Modal.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar InfoModal = AntdModal.info,\n  SuccessModal = AntdModal.success,\n  WarningModal = AntdModal.warning,\n  ErrorModal = AntdModal.error;\nexport { InfoModal, SuccessModal, WarningModal, ErrorModal };\nexport var Modal = function Modal(_ref) {\n  var _Object$entries$find;\n  var _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 'medium' : _ref$size,\n    children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var modalSize = (_Object$entries$find = Object.entries(modalSizes).find(function (sz) {\n    return sz[0] === size;\n  })) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[1];\n  return /*#__PURE__*/_jsxDEV(S.Modal, _objectSpread(_objectSpread({\n    getContainer: false,\n    width: modalSize\n  }, props), {}, {\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, _this);\n};\n_c = Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","Modal","AntdModal","modalSizes","S","InfoModal","info","SuccessModal","success","WarningModal","warning","ErrorModal","error","size","children","props","modalSize","Object","entries","find","sz"],"sources":["/workspace/ant-design-react-template/src/components/common/Modal/Modal.tsx"],"sourcesContent":["import React from 'react';\nimport { Modal as AntdModal, ModalProps as AntModalProps } from 'antd';\nimport { modalSizes } from 'constants/modalSizes';\nimport * as S from './Modal.styles';\n\nexport const { info: InfoModal, success: SuccessModal, warning: WarningModal, error: ErrorModal } = AntdModal;\n\ninterface ModalProps extends AntModalProps {\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport const Modal: React.FC<ModalProps> = ({ size = 'medium', children, ...props }) => {\n  const modalSize = Object.entries(modalSizes).find((sz) => sz[0] === size)?.[1];\n\n  return (\n    <S.Modal getContainer={false} width={modalSize} {...props}>\n      {children}\n    </S.Modal>\n  );\n};\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,IAAIC,SAAS,QAAqC,MAAM;AACtE,SAASC,UAAU,QAAQ,sBAAsB;AACjD,OAAO,KAAKC,CAAC,MAAM,gBAAgB;AAAC;AAE7B,IAAcC,SAAS,GAAsEH,SAAS,CAA9FI,IAAI;EAAsBC,YAAY,GAA+CL,SAAS,CAA7EM,OAAO;EAAyBC,YAAY,GAAwBP,SAAS,CAAtDQ,OAAO;EAAuBC,UAAU,GAAKT,SAAS,CAA/BU,KAAK;AAA2B;AAM9G,OAAO,IAAMX,KAA2B,GAAG,SAA9BA,KAA2B,OAAgD;EAAA;EAAA,qBAA1CY,IAAI;IAAJA,IAAI,0BAAG,QAAQ;IAAEC,QAAQ,QAARA,QAAQ;IAAKC,KAAK;EAC/E,IAAMC,SAAS,2BAAGC,MAAM,CAACC,OAAO,CAACf,UAAU,CAAC,CAACgB,IAAI,CAAC,UAACC,EAAE;IAAA,OAAKA,EAAE,CAAC,CAAC,CAAC,KAAKP,IAAI;EAAA,EAAC,yDAAvD,qBAA0D,CAAC,CAAC;EAE9E,oBACE,QAAC,CAAC,CAAC,KAAK;IAAC,YAAY,EAAE,KAAM;IAAC,KAAK,EAAEG;EAAU,GAAKD,KAAK;IAAA,UACtDD;EAAQ;IAAA;IAAA;IAAA;EAAA,SACD;AAEd,CAAC;AAAC,KARWb,KAA2B;AAAA;AAAA"},"metadata":{},"sourceType":"module"}