{"ast":null,"code":"import App from'./App';import reportWebVitals from'./reportWebVitals';import'./i18n';import*as serviceWorkerRegistration from'./serviceWorkerRegistration';import'config/config';import{Provider}from'react-redux';import{store}from'@app/store/store';import ReactDOM from'react-dom';import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";ReactDOM.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(Provider,{store:store,children:/*#__PURE__*/_jsx(App,{})})}),document.getElementById('root'));serviceWorkerRegistration.register({onUpdate:function onUpdate(registration){var waitingServiceWorker=registration.waiting;if(waitingServiceWorker){waitingServiceWorker.addEventListener('statechange',function(event){if(event.target.state==='activated')window.location.reload();});waitingServiceWorker.postMessage({type:'SKIP_WAITING'});}}});// app will reload if new version of app is available\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/index.tsx"],"names":["App","reportWebVitals","serviceWorkerRegistration","Provider","store","ReactDOM","React","render","document","getElementById","register","onUpdate","registration","waitingServiceWorker","waiting","addEventListener","event","target","state","window","location","reload","postMessage","type"],"mappings":"AAAA,MAAOA,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAO,QAAP,CACA,MAAO,GAAKC,CAAAA,yBAAZ,KAA2C,6BAA3C,CACA,MAAO,eAAP,CACA,OAASC,QAAT,KAAyB,aAAzB,CACA,OAASC,KAAT,KAAsB,kBAAtB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,C,2CAMAD,QAAQ,CAACE,MAAT,cACE,KAAC,KAAD,CAAO,UAAP,wBACE,KAAC,QAAD,EAAU,KAAK,CAAEH,KAAjB,uBACE,KAAC,GAAD,IADF,EADF,EADF,CAMEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,EASAP,yBAAyB,CAACQ,QAA1B,CAAmC,CACjCC,QAAQ,CAAE,kBAACC,YAAD,CAAkB,CAC1B,GAAMC,CAAAA,oBAAoB,CAAGD,YAAY,CAACE,OAA1C,CAEA,GAAID,oBAAJ,CAA0B,CACxBA,oBAAoB,CAACE,gBAArB,CAAsC,aAAtC,CAAqD,SAACC,KAAD,CAAW,CAC9D,GAAKA,KAAK,CAACC,MAAP,CAA8BC,KAA9B,GAAwC,WAA5C,CAAyDC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAC1D,CAFD,EAGAR,oBAAoB,CAACS,WAArB,CAAiC,CAAEC,IAAI,CAAE,cAAR,CAAjC,EACD,CACF,CAVgC,CAAnC,EAWI;AAEJ;AACA;AACA;AACAtB,eAAe","sourcesContent":["import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './i18n';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport 'config/config';\nimport { Provider } from 'react-redux';\nimport { store } from '@app/store/store';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\n\ninterface EventTarget {\n  state?: 'activated';\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorkerRegistration.register({\n  onUpdate: (registration) => {\n    const waitingServiceWorker = registration.waiting;\n\n    if (waitingServiceWorker) {\n      waitingServiceWorker.addEventListener('statechange', (event) => {\n        if ((event.target as EventTarget).state === 'activated') window.location.reload();\n      });\n      waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\n    }\n  },\n}); // app will reload if new version of app is available\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}