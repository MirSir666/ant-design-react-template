{"ast":null,"code":"import _objectSpread from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/components/nft-dashboard/recentActivity/recentActivityFeed/RecentActivityFeed.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { Feed } from '@app/components/common/Feed/Feed';\nimport { NotFound } from '@app/components/common/NotFound/NotFound';\nimport { RecentActivityItem } from '@app/components/nft-dashboard/recentActivity/recentActivityFeed/RecentActivityItem/RecentActivityItem';\nimport * as S from './RecentActivityFeed.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var RecentActivityFeed = function RecentActivityFeed(_ref) {\n  _s();\n\n  var activity = _ref.activity,\n      hasMore = _ref.hasMore,\n      next = _ref.next;\n  var activityItems = useMemo(function () {\n    return activity.map(function (item, index) {\n      return /*#__PURE__*/_jsxDEV(RecentActivityItem, _objectSpread({}, item), index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 41\n      }, _this);\n    });\n  }, [activity]);\n  var feedRef = useRef(null);\n  useEffect(function () {\n    if (activity.length < 4) {\n      var _feedRef$current;\n\n      (_feedRef$current = feedRef.current) === null || _feedRef$current === void 0 ? void 0 : _feedRef$current.dispatchEvent(new CustomEvent('scroll'));\n    }\n  }, [activity]);\n  return activityItems.length > 0 ? /*#__PURE__*/_jsxDEV(S.FeedWrapper, {\n    ref: feedRef,\n    id: \"recent-activity-feed\",\n    children: /*#__PURE__*/_jsxDEV(Feed, {\n      hasMore: hasMore,\n      next: next,\n      target: \"recent-activity-feed\",\n      children: activityItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, _this) : /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(RecentActivityFeed, \"t4afp4cFrs9kqb75kez36oVAizQ=\");\n\n_c = RecentActivityFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecentActivityFeed\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/nft-dashboard/recentActivity/recentActivityFeed/RecentActivityFeed.tsx"],"names":["React","useEffect","useMemo","useRef","Feed","NotFound","RecentActivityItem","S","RecentActivityFeed","activity","hasMore","next","activityItems","map","item","index","feedRef","length","current","dispatchEvent","CustomEvent"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,MAApC,QAAkD,OAAlD;AACA,SAASC,IAAT,QAAqB,kCAArB;AACA,SAASC,QAAT,QAAyB,0CAAzB;AACA,SAASC,kBAAT,QAAmC,uGAAnC;AAEA,OAAO,KAAKC,CAAZ,MAAmB,6BAAnB;;AAQA,OAAO,IAAMC,kBAAqD,GAAG,SAAxDA,kBAAwD,OAAiC;AAAA;;AAAA,MAA9BC,QAA8B,QAA9BA,QAA8B;AAAA,MAApBC,OAAoB,QAApBA,OAAoB;AAAA,MAAXC,IAAW,QAAXA,IAAW;AACpG,MAAMC,aAAa,GAAGV,OAAO,CAC3B;AAAA,WAAMO,QAAQ,CAACI,GAAT,CAAa,UAACC,IAAD,EAAOC,KAAP;AAAA,0BAAiB,QAAC,kBAAD,oBAAoCD,IAApC,GAAyBC,KAAzB;AAAA;AAAA;AAAA;AAAA,eAAjB;AAAA,KAAb,CAAN;AAAA,GAD2B,EAE3B,CAACN,QAAD,CAF2B,CAA7B;AAKA,MAAMO,OAAO,GAAGb,MAAM,CAAiB,IAAjB,CAAtB;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIQ,QAAQ,CAACQ,MAAT,GAAkB,CAAtB,EAAyB;AAAA;;AACvB,0BAAAD,OAAO,CAACE,OAAR,sEAAiBC,aAAjB,CAA+B,IAAIC,WAAJ,CAAgB,QAAhB,CAA/B;AACD;AACF,GAJQ,EAIN,CAACX,QAAD,CAJM,CAAT;AAMA,SAAOG,aAAa,CAACK,MAAd,GAAuB,CAAvB,gBACL,QAAC,CAAD,CAAG,WAAH;AAAe,IAAA,GAAG,EAAED,OAApB;AAA6B,IAAA,EAAE,EAAC,sBAAhC;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEN,OAAf;AAAwB,MAAA,IAAI,EAAEC,IAA9B;AAAoC,MAAA,MAAM,EAAC,sBAA3C;AAAA,gBACGC;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADK,gBAOL,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,WAPF;AASD,CAvBM;;GAAMJ,kB;;KAAAA,kB","sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react';\nimport { Feed } from '@app/components/common/Feed/Feed';\nimport { NotFound } from '@app/components/common/NotFound/NotFound';\nimport { RecentActivityItem } from '@app/components/nft-dashboard/recentActivity/recentActivityFeed/RecentActivityItem/RecentActivityItem';\nimport { Activity } from '@app/api/activity.api';\nimport * as S from './RecentActivityFeed.styles';\n\ninterface RecentActivityFeedProps {\n  activity: Activity[];\n  hasMore: boolean;\n  next: () => void;\n}\n\nexport const RecentActivityFeed: React.FC<RecentActivityFeedProps> = ({ activity, hasMore, next }) => {\n  const activityItems = useMemo(\n    () => activity.map((item, index) => <RecentActivityItem key={index} {...item} />),\n    [activity],\n  );\n\n  const feedRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (activity.length < 4) {\n      feedRef.current?.dispatchEvent(new CustomEvent('scroll'));\n    }\n  }, [activity]);\n\n  return activityItems.length > 0 ? (\n    <S.FeedWrapper ref={feedRef} id=\"recent-activity-feed\">\n      <Feed hasMore={hasMore} next={next} target=\"recent-activity-feed\">\n        {activityItems}\n      </Feed>\n    </S.FeedWrapper>\n  ) : (\n    <NotFound />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}