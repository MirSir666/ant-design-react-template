{"ast":null,"code":"import _objectSpread from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/components/nft-dashboard/totalEarning/TotalEarningChart/TotalEarningChart.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { BaseChart, getDefaultTooltipStyles } from '@app/components/common/charts/BaseChart';\nimport { formatNumberWithCommas, getCurrencyPrice } from '@app/utils/utils';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { themeObject } from '@app/styles/themes/themeVariables';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var TotalEarningChart = function TotalEarningChart(_ref) {\n  _s();\n\n  var xAxisData = _ref.xAxisData,\n      earningData = _ref.earningData;\n  var theme = useAppSelector(function (state) {\n    return state.theme.theme;\n  });\n  var option = {\n    tooltip: _objectSpread(_objectSpread({}, getDefaultTooltipStyles(themeObject[theme])), {}, {\n      trigger: 'axis',\n      crossStyle: {\n        color: 'red'\n      },\n      formatter: function formatter(data) {\n        var currentSeries = data[0];\n        return \"\".concat(currentSeries.name, \" - \").concat(getCurrencyPrice(formatNumberWithCommas(currentSeries.value), 'USD'));\n      }\n    }),\n    grid: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    },\n    xAxis: [{\n      show: false,\n      type: 'category',\n      boundaryGap: false,\n      data: xAxisData\n    }],\n    yAxis: [{\n      show: false,\n      type: 'value'\n    }],\n    series: [{\n      type: 'line',\n      smooth: true,\n      showSymbol: false,\n      lineStyle: {\n        width: 3,\n        color: themeObject[theme].chartColor3\n      },\n      emphasis: {\n        focus: 'series'\n      },\n      data: earningData === null || earningData === void 0 ? void 0 : earningData.data\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(BaseChart, {\n    option: option,\n    width: \"100%\",\n    height: 75\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(TotalEarningChart, \"o9SdPa+99npfrY7FqNDJfsLu7gg=\", false, function () {\n  return [useAppSelector];\n});\n\n_c = TotalEarningChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"TotalEarningChart\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/nft-dashboard/totalEarning/TotalEarningChart/TotalEarningChart.tsx"],"names":["React","BaseChart","getDefaultTooltipStyles","formatNumberWithCommas","getCurrencyPrice","useAppSelector","themeObject","TotalEarningChart","xAxisData","earningData","theme","state","option","tooltip","trigger","crossStyle","color","formatter","data","currentSeries","name","value","grid","top","left","right","bottom","xAxis","show","type","boundaryGap","yAxis","series","smooth","showSymbol","lineStyle","width","chartColor3","emphasis","focus"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,uBAApB,QAAmD,yCAAnD;AAEA,SAASC,sBAAT,EAAiCC,gBAAjC,QAAyD,kBAAzD;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,WAAT,QAA4B,mCAA5B;;AAWA,OAAO,IAAMC,iBAAmD,GAAG,SAAtDA,iBAAsD,OAAgC;AAAA;;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;AACjG,MAAMC,KAAK,GAAGL,cAAc,CAAC,UAACM,KAAD;AAAA,WAAWA,KAAK,CAACD,KAAN,CAAYA,KAAvB;AAAA,GAAD,CAA5B;AACA,MAAME,MAAM,GAAG;AACbC,IAAAA,OAAO,kCACFX,uBAAuB,CAACI,WAAW,CAACI,KAAD,CAAZ,CADrB;AAELI,MAAAA,OAAO,EAAE,MAFJ;AAGLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EAAE;AADG,OAHP;AAMLC,MAAAA,SAAS,EAAE,mBAACC,IAAD,EAA2B;AACpC,YAAMC,aAAa,GAAGD,IAAI,CAAC,CAAD,CAA1B;AAEA,yBAAUC,aAAa,CAACC,IAAxB,gBAAkChB,gBAAgB,CAACD,sBAAsB,CAACgB,aAAa,CAACE,KAAf,CAAvB,EAA8C,KAA9C,CAAlD;AACD;AAVI,MADM;AAabC,IAAAA,IAAI,EAAE;AACJC,MAAAA,GAAG,EAAE,CADD;AAEJC,MAAAA,IAAI,EAAE,CAFF;AAGJC,MAAAA,KAAK,EAAE,CAHH;AAIJC,MAAAA,MAAM,EAAE;AAJJ,KAbO;AAmBbC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,IAAI,EAAE,KADR;AAEEC,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,WAAW,EAAE,KAHf;AAIEZ,MAAAA,IAAI,EAAEV;AAJR,KADK,CAnBM;AA2BbuB,IAAAA,KAAK,EAAE,CACL;AACEH,MAAAA,IAAI,EAAE,KADR;AAEEC,MAAAA,IAAI,EAAE;AAFR,KADK,CA3BM;AAiCbG,IAAAA,MAAM,EAAE,CACN;AACEH,MAAAA,IAAI,EAAE,MADR;AAEEI,MAAAA,MAAM,EAAE,IAFV;AAGEC,MAAAA,UAAU,EAAE,KAHd;AAIEC,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,CADE;AAETpB,QAAAA,KAAK,EAAEV,WAAW,CAACI,KAAD,CAAX,CAAmB2B;AAFjB,OAJb;AAQEC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE;AADC,OARZ;AAWErB,MAAAA,IAAI,EAAET,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAES;AAXrB,KADM;AAjCK,GAAf;AAkDA,sBAAO,QAAC,SAAD;AAAW,IAAA,MAAM,EAAEN,MAAnB;AAA2B,IAAA,KAAK,EAAC,MAAjC;AAAwC,IAAA,MAAM,EAAE;AAAhD;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CArDM;;GAAML,iB;UACGF,c;;;KADHE,iB","sourcesContent":["import React from 'react';\nimport { BaseChart, getDefaultTooltipStyles } from '@app/components/common/charts/BaseChart';\nimport { ChartData, ChartSeriesData } from '@app/interfaces/interfaces';\nimport { formatNumberWithCommas, getCurrencyPrice } from '@app/utils/utils';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { themeObject } from '@app/styles/themes/themeVariables';\n\ninterface LineData {\n  data: ChartData;\n}\n\ninterface TotalEarningChartProps {\n  xAxisData: number[] | string[];\n  earningData: LineData;\n}\n\nexport const TotalEarningChart: React.FC<TotalEarningChartProps> = ({ xAxisData, earningData }) => {\n  const theme = useAppSelector((state) => state.theme.theme);\n  const option = {\n    tooltip: {\n      ...getDefaultTooltipStyles(themeObject[theme]),\n      trigger: 'axis',\n      crossStyle: {\n        color: 'red',\n      },\n      formatter: (data: ChartSeriesData) => {\n        const currentSeries = data[0];\n\n        return `${currentSeries.name} - ${getCurrencyPrice(formatNumberWithCommas(currentSeries.value), 'USD')}`;\n      },\n    },\n    grid: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n    },\n    xAxis: [\n      {\n        show: false,\n        type: 'category',\n        boundaryGap: false,\n        data: xAxisData,\n      },\n    ],\n    yAxis: [\n      {\n        show: false,\n        type: 'value',\n      },\n    ],\n    series: [\n      {\n        type: 'line',\n        smooth: true,\n        showSymbol: false,\n        lineStyle: {\n          width: 3,\n          color: themeObject[theme].chartColor3,\n        },\n        emphasis: {\n          focus: 'series',\n        },\n        data: earningData?.data,\n      },\n    ],\n  };\n\n  return <BaseChart option={option} width=\"100%\" height={75} />;\n};\n"]},"metadata":{},"sourceType":"module"}