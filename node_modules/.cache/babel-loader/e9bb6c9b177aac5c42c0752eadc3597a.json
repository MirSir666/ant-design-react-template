{"ast":null,"code":"import _slicedToArray from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/mapCard/MapCard.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { DashboardCard } from '../DashboardCard/DashboardCard';\nimport { DoctorsMap } from './DoctorsMap/DoctorsMap';\nimport { getDoctorsData } from 'api/doctors.api';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var MapCard = function MapCard() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      doctors = _useState2[0],\n      setDoctors = _useState2[1];\n\n  useEffect(function () {\n    getDoctorsData().then(function (res) {\n      return setDoctors(res);\n    });\n  }, []);\n  var theme = useAppSelector(function (state) {\n    return state.theme.theme;\n  }); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  var key = useMemo(function () {\n    return Math.random();\n  }, [theme]); // create new key on every change of theme and remount map component\n\n  return /*#__PURE__*/_jsxDEV(DashboardCard, {\n    padding: 0,\n    children: /*#__PURE__*/_jsxDEV(DoctorsMap, {\n      doctors: doctors\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MapCard, \"A38ajIzPr7fFtp6Sp7M1XMbEV+k=\", false, function () {\n  return [useAppSelector];\n});\n\n_c = MapCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapCard\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/mapCard/MapCard.tsx"],"names":["React","useEffect","useMemo","useState","DashboardCard","DoctorsMap","getDoctorsData","useAppSelector","MapCard","doctors","setDoctors","then","res","theme","state","key","Math","random"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAAiBC,cAAjB,QAAuC,iBAAvC;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,OAAO,IAAMC,OAAiB,GAAG,SAApBA,OAAoB,GAAM;AAAA;;AACrC,kBAA8BL,QAAQ,CAAW,EAAX,CAAtC;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AAEAT,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,cAAc,GAAGK,IAAjB,CAAsB,UAACC,GAAD;AAAA,aAASF,UAAU,CAACE,GAAD,CAAnB;AAAA,KAAtB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAMC,KAAK,GAAGN,cAAc,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACD,KAAN,CAAYA,KAAvB;AAAA,GAAD,CAA5B,CAPqC,CASrC;;AACA,MAAME,GAAG,GAAGb,OAAO,CAAC;AAAA,WAAMc,IAAI,CAACC,MAAL,EAAN;AAAA,GAAD,EAAsB,CAACJ,KAAD,CAAtB,CAAnB,CAVqC,CAUc;;AAEnD,sBACE,QAAC,aAAD;AAAe,IAAA,OAAO,EAAE,CAAxB;AAAA,2BACE,QAAC,UAAD;AAAsB,MAAA,OAAO,EAAEJ;AAA/B,OAAiBM,GAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAjBM;;GAAMP,O;UAOGD,c;;;KAPHC,O","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { DashboardCard } from '../DashboardCard/DashboardCard';\nimport { DoctorsMap } from './DoctorsMap/DoctorsMap';\nimport { Doctor, getDoctorsData } from 'api/doctors.api';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\n\nexport const MapCard: React.FC = () => {\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n\n  useEffect(() => {\n    getDoctorsData().then((res) => setDoctors(res));\n  }, []);\n\n  const theme = useAppSelector((state) => state.theme.theme);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const key = useMemo(() => Math.random(), [theme]); // create new key on every change of theme and remount map component\n\n  return (\n    <DashboardCard padding={0}>\n      <DoctorsMap key={key} doctors={doctors} />\n    </DashboardCard>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}