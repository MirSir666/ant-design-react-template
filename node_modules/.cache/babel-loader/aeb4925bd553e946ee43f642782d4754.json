{"ast":null,"code":"import _slicedToArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useMemo}from'react';import{useTranslation}from'react-i18next';import{Col}from'antd';import{MinusOutlined,PlusOutlined}from'@ant-design/icons';import{Progress}from'@app/components/common/Progress/Progress';import{Button,ButtonGroup}from'@app/components/common/buttons/Button/Button';import{PageTitle}from'@app/components/common/PageTitle/PageTitle';import*as S from'@app/pages/uiComponentsPages//UIComponentsPage.styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var ProgressPage=function ProgressPage(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),percent=_useState2[0],setPercent=_useState2[1];var _useTranslation=useTranslation(),t=_useTranslation.t;var primaryColor='var(--primary-color)';var secondaryColor='var(--secondary-color)';var successColor='var(--success-color)';var errorColor='var(--error-color)';var dynamicSuccessColor=useMemo(function(){return percent===100?successColor:primaryColor;},[percent]);var increase=function increase(){var newPercent=percent+10;if(newPercent>100){newPercent=100;}setPercent(newPercent);};var decrease=function decrease(){var newPercent=percent-10;if(newPercent<0){newPercent=0;}setPercent(newPercent);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(PageTitle,{children:t('common.progress')}),/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsxs(S.Card,{title:t('progress.basic'),children:[/*#__PURE__*/_jsx(Progress,{percent:30,strokeColor:primaryColor}),/*#__PURE__*/_jsx(Progress,{percent:50,status:\"active\",strokeColor:primaryColor}),/*#__PURE__*/_jsx(Progress,{percent:70,status:\"exception\",strokeColor:errorColor}),/*#__PURE__*/_jsx(Progress,{percent:100,strokeColor:successColor}),/*#__PURE__*/_jsx(Progress,{percent:50,showInfo:false,strokeColor:primaryColor})]}),/*#__PURE__*/_jsxs(S.Card,{title:t('progress.circle'),children:[/*#__PURE__*/_jsx(Progress,{type:\"circle\",percent:75,strokeColor:primaryColor}),/*#__PURE__*/_jsx(Progress,{type:\"circle\",percent:70,status:\"exception\",strokeColor:errorColor}),/*#__PURE__*/_jsx(Progress,{type:\"circle\",percent:100,strokeColor:successColor})]}),/*#__PURE__*/_jsx(S.Card,{title:t('progress.dynamic'),children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Progress,{percent:percent,type:\"circle\",strokeColor:dynamicSuccessColor}),/*#__PURE__*/_jsx(Progress,{percent:percent,strokeColor:dynamicSuccessColor}),/*#__PURE__*/_jsxs(ButtonGroup,{children:[/*#__PURE__*/_jsx(Button,{onClick:decrease,icon:/*#__PURE__*/_jsx(MinusOutlined,{})}),/*#__PURE__*/_jsx(Button,{onClick:increase,icon:/*#__PURE__*/_jsx(PlusOutlined,{})})]})]})}),/*#__PURE__*/_jsxs(S.Card,{title:t('progress.medical-dashboard'),children:[/*#__PURE__*/_jsx(Progress,{type:\"dashboard\",percent:75,strokeColor:primaryColor}),/*#__PURE__*/_jsx(Progress,{type:\"dashboard\",percent:75,gapDegree:30,strokeColor:primaryColor})]}),/*#__PURE__*/_jsx(S.Card,{title:t('progress.gradient'),children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Progress,{strokeColor:{'0%':primaryColor,'100%':secondaryColor},percent:99.9}),/*#__PURE__*/_jsx(Progress,{strokeColor:{from:primaryColor,to:secondaryColor},percent:99.9,status:\"active\"}),/*#__PURE__*/_jsx(Progress,{type:\"circle\",strokeColor:{'0%':primaryColor,'100%':secondaryColor},percent:90}),/*#__PURE__*/_jsx(Progress,{type:\"circle\",strokeColor:{'0%':primaryColor,'100%':secondaryColor},percent:100})]})})]})]});};export default ProgressPage;","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/pages/uiComponentsPages/feedback/ProgressPage.tsx"],"names":["useState","useMemo","useTranslation","Col","MinusOutlined","PlusOutlined","Progress","Button","ButtonGroup","PageTitle","S","ProgressPage","percent","setPercent","t","primaryColor","secondaryColor","successColor","errorColor","dynamicSuccessColor","increase","newPercent","decrease","from","to"],"mappings":"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","sourcesContent":["import { useState, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Col } from 'antd';\nimport { MinusOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Progress } from '@app/components/common/Progress/Progress';\nimport { Button, ButtonGroup } from '@app/components/common/buttons/Button/Button';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\nimport * as S from '@app/pages/uiComponentsPages//UIComponentsPage.styles';\n\nconst ProgressPage: React.FC = () => {\n  const [percent, setPercent] = useState<number>(0);\n  const { t } = useTranslation();\n\n  const primaryColor = 'var(--primary-color)';\n  const secondaryColor = 'var(--secondary-color)';\n  const successColor = 'var(--success-color)';\n  const errorColor = 'var(--error-color)';\n\n  const dynamicSuccessColor = useMemo(() => (percent === 100 ? successColor : primaryColor), [percent]);\n\n  const increase = () => {\n    let newPercent = percent + 10;\n    if (newPercent > 100) {\n      newPercent = 100;\n    }\n    setPercent(newPercent);\n  };\n\n  const decrease = () => {\n    let newPercent = percent - 10;\n    if (newPercent < 0) {\n      newPercent = 0;\n    }\n    setPercent(newPercent);\n  };\n\n  return (\n    <>\n      <PageTitle>{t('common.progress')}</PageTitle>\n      <Col>\n        <S.Card title={t('progress.basic')}>\n          <Progress percent={30} strokeColor={primaryColor} />\n          <Progress percent={50} status=\"active\" strokeColor={primaryColor} />\n          <Progress percent={70} status=\"exception\" strokeColor={errorColor} />\n          <Progress percent={100} strokeColor={successColor} />\n          <Progress percent={50} showInfo={false} strokeColor={primaryColor} />\n        </S.Card>\n        <S.Card title={t('progress.circle')}>\n          <Progress type=\"circle\" percent={75} strokeColor={primaryColor} />\n          <Progress type=\"circle\" percent={70} status=\"exception\" strokeColor={errorColor} />\n          <Progress type=\"circle\" percent={100} strokeColor={successColor} />\n        </S.Card>\n        <S.Card title={t('progress.dynamic')}>\n          <div>\n            <Progress percent={percent} type=\"circle\" strokeColor={dynamicSuccessColor} />\n            <Progress percent={percent} strokeColor={dynamicSuccessColor} />\n            <ButtonGroup>\n              <Button onClick={decrease} icon={<MinusOutlined />} />\n              <Button onClick={increase} icon={<PlusOutlined />} />\n            </ButtonGroup>\n          </div>\n        </S.Card>\n        <S.Card title={t('progress.medical-dashboard')}>\n          <Progress type=\"dashboard\" percent={75} strokeColor={primaryColor} />\n          <Progress type=\"dashboard\" percent={75} gapDegree={30} strokeColor={primaryColor} />\n        </S.Card>\n        <S.Card title={t('progress.gradient')}>\n          <div>\n            <Progress\n              strokeColor={{\n                '0%': primaryColor,\n                '100%': secondaryColor,\n              }}\n              percent={99.9}\n            />\n            <Progress\n              strokeColor={{\n                from: primaryColor,\n                to: secondaryColor,\n              }}\n              percent={99.9}\n              status=\"active\"\n            />\n            <Progress\n              type=\"circle\"\n              strokeColor={{\n                '0%': primaryColor,\n                '100%': secondaryColor,\n              }}\n              percent={90}\n            />\n            <Progress\n              type=\"circle\"\n              strokeColor={{\n                '0%': primaryColor,\n                '100%': secondaryColor,\n              }}\n              percent={100}\n            />\n          </div>\n        </S.Card>\n      </Col>\n    </>\n  );\n};\n\nexport default ProgressPage;\n"]},"metadata":{},"sourceType":"module"}