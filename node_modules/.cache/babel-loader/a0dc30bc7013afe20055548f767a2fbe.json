{"ast":null,"code":"import{createSlice,createAction}from'@reduxjs/toolkit';export var defaultTheme=localStorage.getItem('theme')||'dark';localStorage.setItem('theme',defaultTheme);var initialState={theme:defaultTheme};export var setTheme=createAction('theme/setTheme',function(theme){localStorage.setItem('theme',theme);return{payload:theme};});export var themeSlice=createSlice({name:'theme',initialState:initialState,reducers:{},extraReducers:function extraReducers(builder){builder.addCase(setTheme,function(state,action){state.theme=action.payload;});}});export default themeSlice.reducer;","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/store/slices/themeSlice.ts"],"names":["createSlice","createAction","defaultTheme","localStorage","getItem","setItem","initialState","theme","setTheme","payload","themeSlice","name","reducers","extraReducers","builder","addCase","state","action","reducer"],"mappings":"AACA,OAASA,WAAT,CAAsBC,YAAtB,KAAyD,kBAAzD,CAMA,MAAO,IAAMC,CAAAA,YAAY,CAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,EAAgD,MAArE,CAEPD,YAAY,CAACE,OAAb,CAAqB,OAArB,CAA8BH,YAA9B,EAEA,GAAMI,CAAAA,YAAwB,CAAG,CAC/BC,KAAK,CAAEL,YADwB,CAAjC,CAIA,MAAO,IAAMM,CAAAA,QAAQ,CAAGP,YAAY,CAA2B,gBAA3B,CAA6C,SAACM,KAAD,CAAsB,CACrGJ,YAAY,CAACE,OAAb,CAAqB,OAArB,CAA8BE,KAA9B,EACA,MAAO,CACLE,OAAO,CAAEF,KADJ,CAAP,CAGD,CALmC,CAA7B,CAOP,MAAO,IAAMG,CAAAA,UAAU,CAAGV,WAAW,CAAC,CACpCW,IAAI,CAAE,OAD8B,CAEpCL,YAAY,CAAZA,YAFoC,CAGpCM,QAAQ,CAAE,EAH0B,CAIpCC,aAAa,CAAE,uBAACC,OAAD,CAAa,CAC1BA,OAAO,CAACC,OAAR,CAAgBP,QAAhB,CAA0B,SAACQ,KAAD,CAAQC,MAAR,CAAmB,CAC3CD,KAAK,CAACT,KAAN,CAAcU,MAAM,CAACR,OAArB,CACD,CAFD,EAGD,CARmC,CAAD,CAA9B,CAWP,cAAeC,CAAAA,UAAU,CAACQ,OAA1B","sourcesContent":["import { ThemeType } from '@app/interfaces/interfaces';\nimport { createSlice, createAction, PrepareAction } from '@reduxjs/toolkit';\n\ninterface ThemeState {\n  theme: ThemeType;\n}\n\nexport const defaultTheme = (localStorage.getItem('theme') as ThemeType) || 'dark';\n\nlocalStorage.setItem('theme', defaultTheme);\n\nconst initialState: ThemeState = {\n  theme: defaultTheme,\n};\n\nexport const setTheme = createAction<PrepareAction<ThemeType>>('theme/setTheme', (theme: ThemeType) => {\n  localStorage.setItem('theme', theme);\n  return {\n    payload: theme,\n  };\n});\n\nexport const themeSlice = createSlice({\n  name: 'theme',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(setTheme, (state, action) => {\n      state.theme = action.payload;\n    });\n  },\n});\n\nexport default themeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}