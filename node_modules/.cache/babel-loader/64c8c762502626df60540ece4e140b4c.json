{"ast":null,"code":"import _slicedToArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{useNavigate}from'react-router-dom';import{useTranslation}from'react-i18next';import{BaseForm}from'@app/components/common/forms/BaseForm/BaseForm';import{notificationController}from'@app/controllers/notificationController';import{useAppDispatch}from'@app/hooks/reduxHooks';import{doSetNewPassword}from'@app/store/slices/authSlice';import*as S from'./NewPasswordForm.styles';import*as Auth from'@app/components/layouts/AuthLayout/AuthLayout.styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var initStates={password:'new-password',confirmPassword:'new-password'};export var NewPasswordForm=function NewPasswordForm(){var _useTranslation=useTranslation(),t=_useTranslation.t;var navigate=useNavigate();var dispatch=useAppDispatch();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setLoading=_useState2[1];var handleSubmit=function handleSubmit(values){setLoading(true);dispatch(doSetNewPassword({newPassword:values.password})).unwrap().then(function(){navigate('/auth/login');notificationController.success({message:t('newPassword.successMessage'),description:t('newPassword.successDescription')});}).catch(function(err){notificationController.error({message:err.message});setLoading(false);});};return/*#__PURE__*/_jsx(Auth.FormWrapper,{children:/*#__PURE__*/_jsxs(BaseForm,{layout:\"vertical\",onFinish:handleSubmit,requiredMark:\"optional\",initialValues:initStates,children:[/*#__PURE__*/_jsxs(Auth.BackWrapper,{onClick:function onClick(){return navigate(-1);},children:[/*#__PURE__*/_jsx(Auth.BackIcon,{}),t('common.back')]}),/*#__PURE__*/_jsx(Auth.FormTitle,{children:t('newPassword.title')}),/*#__PURE__*/_jsx(S.Description,{children:t('newPassword.description')}),/*#__PURE__*/_jsx(Auth.FormItem,{name:\"password\",label:t('common.password'),rules:[{required:true,message:t('common.requiredField')}],children:/*#__PURE__*/_jsx(Auth.FormInputPassword,{placeholder:t('common.password')})}),/*#__PURE__*/_jsx(Auth.FormItem,{name:\"confirmPassword\",label:t('common.confirmPassword'),dependencies:['password'],rules:[{required:true,message:t('common.requiredField')},function(_ref){var getFieldValue=_ref.getFieldValue;return{validator:function validator(_,value){if(!value||getFieldValue('password')===value){return Promise.resolve();}return Promise.reject(new Error(t('common.confirmPasswordError')));}};}],hasFeedback:true,children:/*#__PURE__*/_jsx(Auth.FormInputPassword,{placeholder:t('common.confirmPassword')})}),/*#__PURE__*/_jsx(BaseForm.Item,{noStyle:true,children:/*#__PURE__*/_jsx(S.SubmitButton,{type:\"primary\",htmlType:\"submit\",loading:isLoading,children:t('common.resetPassword')})})]})});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/auth/NewPasswordForm/NewPasswordForm.tsx"],"names":["React","useState","useNavigate","useTranslation","BaseForm","notificationController","useAppDispatch","doSetNewPassword","S","Auth","initStates","password","confirmPassword","NewPasswordForm","t","navigate","dispatch","isLoading","setLoading","handleSubmit","values","newPassword","unwrap","then","success","message","description","catch","err","error","required","getFieldValue","validator","_","value","Promise","resolve","reject","Error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { BaseForm } from '@app/components/common/forms/BaseForm/BaseForm';\nimport { notificationController } from '@app/controllers/notificationController';\nimport { useAppDispatch } from '@app/hooks/reduxHooks';\nimport { doSetNewPassword } from '@app/store/slices/authSlice';\nimport * as S from './NewPasswordForm.styles';\nimport * as Auth from '@app/components/layouts/AuthLayout/AuthLayout.styles';\n\ninterface NewPasswordFormData {\n  password: string;\n  confirmPassword: string;\n}\n\nconst initStates = {\n  password: 'new-password',\n  confirmPassword: 'new-password',\n};\n\nexport const NewPasswordForm: React.FC = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const [isLoading, setLoading] = useState(false);\n\n  const handleSubmit = (values: NewPasswordFormData) => {\n    setLoading(true);\n    dispatch(doSetNewPassword({ newPassword: values.password }))\n      .unwrap()\n      .then(() => {\n        navigate('/auth/login');\n        notificationController.success({\n          message: t('newPassword.successMessage'),\n          description: t('newPassword.successDescription'),\n        });\n      })\n      .catch((err) => {\n        notificationController.error({ message: err.message });\n        setLoading(false);\n      });\n  };\n\n  return (\n    <Auth.FormWrapper>\n      <BaseForm layout=\"vertical\" onFinish={handleSubmit} requiredMark=\"optional\" initialValues={initStates}>\n        <Auth.BackWrapper onClick={() => navigate(-1)}>\n          <Auth.BackIcon />\n          {t('common.back')}\n        </Auth.BackWrapper>\n        <Auth.FormTitle>{t('newPassword.title')}</Auth.FormTitle>\n        <S.Description>{t('newPassword.description')}</S.Description>\n        <Auth.FormItem\n          name=\"password\"\n          label={t('common.password')}\n          rules={[{ required: true, message: t('common.requiredField') }]}\n        >\n          <Auth.FormInputPassword placeholder={t('common.password')} />\n        </Auth.FormItem>\n        <Auth.FormItem\n          name=\"confirmPassword\"\n          label={t('common.confirmPassword')}\n          dependencies={['password']}\n          rules={[\n            { required: true, message: t('common.requiredField') },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                if (!value || getFieldValue('password') === value) {\n                  return Promise.resolve();\n                }\n                return Promise.reject(new Error(t('common.confirmPasswordError')));\n              },\n            }),\n          ]}\n          hasFeedback\n        >\n          <Auth.FormInputPassword placeholder={t('common.confirmPassword')} />\n        </Auth.FormItem>\n        <BaseForm.Item noStyle>\n          <S.SubmitButton type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n            {t('common.resetPassword')}\n          </S.SubmitButton>\n        </BaseForm.Item>\n      </BaseForm>\n    </Auth.FormWrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}