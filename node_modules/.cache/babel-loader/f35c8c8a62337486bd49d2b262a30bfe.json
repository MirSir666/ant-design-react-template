{"ast":null,"code":"import _slicedToArray from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/bloodScreeningCard/BloodScreeningTable/BloodScreeningTable.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useResponsive } from 'hooks/useResponsive';\nimport * as S from './BloodScreeningTable.styles';\nimport { flags, results } from '@app/constants/bloodTestResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var BloodScreeningTable = function BloodScreeningTable(_ref) {\n  _s();\n\n  var activeItem = _ref.activeItem,\n      setActiveItem = _ref.setActiveItem;\n\n  var _useResponsive = useResponsive(),\n      isTablet = _useResponsive.isTablet,\n      isDesktop = _useResponsive.isDesktop;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(results),\n      _useState2 = _slicedToArray(_useState, 1),\n      dataSource = _useState2[0];\n\n  var columns = [{\n    title: t('medical-dashboard.bloodScreening.test'),\n    dataIndex: 'test',\n    width: '30%',\n    render: function render(test, _ref2) {\n      var key = _ref2.key;\n      return /*#__PURE__*/_jsxDEV(S.Text, {\n        $isActive: activeItem.key === key,\n        children: test\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 42\n      }, _this);\n    }\n  }, {\n    title: t('medical-dashboard.bloodScreening.result'),\n    dataIndex: 'result',\n    render: function render(result, _ref3) {\n      var key = _ref3.key;\n      return /*#__PURE__*/_jsxDEV(S.Text, {\n        $isActive: activeItem.key === key,\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 44\n      }, _this);\n    }\n  }, {\n    title: t('medical-dashboard.bloodScreening.units'),\n    dataIndex: 'units',\n    render: function render(units, _ref4) {\n      var key = _ref4.key;\n      return /*#__PURE__*/_jsxDEV(S.Text, {\n        $isActive: activeItem.key === key,\n        children: units\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 35\n      }, _this);\n    }\n  }, {\n    title: t('medical-dashboard.bloodScreening.flag'),\n    dataIndex: 'flag',\n    render: function render(flag, _ref5) {\n      var key = _ref5.key;\n      return /*#__PURE__*/_jsxDEV(S.Flag, {\n        $isNorm: flag === 0,\n        $isActive: activeItem.key === key,\n        children: t(flags[flag])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, _this);\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(S.Table, {\n    size: 'small',\n    pagination: false,\n    columns: columns,\n    dataSource: dataSource,\n    scroll: {\n      y: isDesktop ? 300 : isTablet ? 620 : 400\n    },\n    onRow: function onRow(record) {\n      return {\n        onClick: function onClick() {\n          return setActiveItem(record);\n        }\n      };\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(BloodScreeningTable, \"FdCnSjlxR9wcrq9ZkPKLDqjfMXs=\", false, function () {\n  return [useResponsive, useTranslation];\n});\n\n_c = BloodScreeningTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"BloodScreeningTable\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/bloodScreeningCard/BloodScreeningTable/BloodScreeningTable.tsx"],"names":["React","useState","useTranslation","useResponsive","S","flags","results","BloodScreeningTable","activeItem","setActiveItem","isTablet","isDesktop","t","dataSource","columns","title","dataIndex","width","render","test","key","result","units","flag","y","record","onClick"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useResponsive } from 'hooks/useResponsive';\nimport * as S from './BloodScreeningTable.styles';\nimport { BloodTestResult, flags, results } from '@app/constants/bloodTestResults';\nimport { ColumnsType } from 'antd/es/table';\n\ninterface BloodScreeningTableProps {\n  activeItem: BloodTestResult;\n  setActiveItem: (item: BloodTestResult) => void;\n}\n\nexport const BloodScreeningTable: React.FC<BloodScreeningTableProps> = ({ activeItem, setActiveItem }) => {\n  const { isTablet, isDesktop } = useResponsive();\n  const { t } = useTranslation();\n  const [dataSource] = useState<BloodTestResult[]>(results);\n\n  const columns: ColumnsType<BloodTestResult> = [\n    {\n      title: t('medical-dashboard.bloodScreening.test'),\n      dataIndex: 'test',\n      width: '30%',\n      render: (test: string, { key }) => <S.Text $isActive={activeItem.key === key}>{test}</S.Text>,\n    },\n    {\n      title: t('medical-dashboard.bloodScreening.result'),\n      dataIndex: 'result',\n      render: (result: number, { key }) => <S.Text $isActive={activeItem.key === key}>{result}</S.Text>,\n    },\n    {\n      title: t('medical-dashboard.bloodScreening.units'),\n      dataIndex: 'units',\n      render: (units, { key }) => <S.Text $isActive={activeItem.key === key}>{units}</S.Text>,\n    },\n    {\n      title: t('medical-dashboard.bloodScreening.flag'),\n      dataIndex: 'flag',\n      render: (flag, { key }) => (\n        <S.Flag $isNorm={flag === 0} $isActive={activeItem.key === key}>\n          {t(flags[flag])}\n        </S.Flag>\n      ),\n    },\n  ];\n\n  return (\n    <S.Table\n      size={'small'}\n      pagination={false}\n      columns={columns}\n      dataSource={dataSource}\n      scroll={{ y: isDesktop ? 300 : isTablet ? 620 : 400 }}\n      onRow={(record) => {\n        return {\n          onClick: () => setActiveItem(record),\n        };\n      }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}