{"ast":null,"code":"var _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/treatmentCard/TreatmentCalendar/TreatmentCalendar.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport enUS from 'antd/lib/calendar/locale/en_US';\nimport deDe from 'antd/es/calendar/locale/de_DE';\nimport { Col, Row } from 'antd';\nimport { CalendarSwitch } from '@app/components/common/CalendarSwitch/CalendarSwitch';\nimport { useLanguage } from '@app/hooks/useLanguage';\nimport { Dates } from '@app/constants/Dates';\nimport * as S from './TreatmentCalendar.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport var TreatmentCalendar = function TreatmentCalendar(_ref) {\n  _s();\n\n  var calendar = _ref.calendar,\n      date = _ref.date,\n      setDate = _ref.setDate,\n      onDecrease = _ref.onDecrease,\n      onIncrease = _ref.onIncrease,\n      setDateClicked = _ref.setDateClicked,\n      onToday = _ref.onToday;\n\n  var _useLanguage = useLanguage(),\n      language = _useLanguage.language;\n\n  var locale = useMemo(function () {\n    return language === 'de' ? deDe : enUS;\n  }, [language]);\n\n  var handleSelect = function handleSelect(value) {\n    setDate(value);\n    setDateClicked(true);\n  };\n\n  var dateFormatted = Dates.format(date, 'MMMM YYYY');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      gutter: [20, 20],\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        span: 24,\n        children: /*#__PURE__*/_jsxDEV(CalendarSwitch, {\n          dateFormatted: dateFormatted,\n          onDecrease: onDecrease,\n          onIncrease: onIncrease,\n          onToday: onToday\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Col, {\n        span: 24,\n        children: /*#__PURE__*/_jsxDEV(S.Calendar, {\n          locale: locale,\n          dateCellRender: function dateCellRender(value) {\n            var today = Dates.getToday();\n            return calendar.map(function (event) {\n              var calendarDate = Dates.getDate(event.date);\n\n              if (calendarDate.isSame(value, 'date') && calendarDate.isSame(value, 'month') && calendarDate.isSame(value, 'year')) {\n                var isPast = today.isAfter(calendarDate);\n                return /*#__PURE__*/_jsxDEV(S.Event, {\n                  $isPast: isPast,\n                  children: calendarDate.format('DD')\n                }, event.date, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 21\n                }, _this);\n              }\n            });\n          },\n          value: date,\n          fullscreen: false,\n          onSelect: handleSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(TreatmentCalendar, \"/fFDglWr0Rg7RGSksOalVf5vhn0=\", false, function () {\n  return [useLanguage];\n});\n\n_c = TreatmentCalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreatmentCalendar\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/treatmentCard/TreatmentCalendar/TreatmentCalendar.tsx"],"names":["React","useMemo","enUS","deDe","Col","Row","CalendarSwitch","useLanguage","Dates","S","TreatmentCalendar","calendar","date","setDate","onDecrease","onIncrease","setDateClicked","onToday","language","locale","handleSelect","value","dateFormatted","format","today","getToday","map","event","calendarDate","getDate","isSame","isPast","isAfter"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport enUS from 'antd/lib/calendar/locale/en_US';\nimport deDe from 'antd/es/calendar/locale/de_DE';\nimport { Col, Row } from 'antd';\nimport { CalendarSwitch } from '@app/components/common/CalendarSwitch/CalendarSwitch';\nimport { useLanguage } from '@app/hooks/useLanguage';\nimport { CalendarEvent } from '@app/api/calendar.api';\nimport { AppDate, Dates } from '@app/constants/Dates';\nimport * as S from './TreatmentCalendar.styles';\n\ninterface TreatmentCalendarProps {\n  date: AppDate;\n  setDate: (state: AppDate) => void;\n  onIncrease: () => void;\n  onDecrease: () => void;\n  onToday: () => void;\n  setDateClicked: (state: boolean) => void;\n  calendar: CalendarEvent[];\n}\n\nexport const TreatmentCalendar: React.FC<TreatmentCalendarProps> = ({\n  calendar,\n  date,\n  setDate,\n  onDecrease,\n  onIncrease,\n  setDateClicked,\n  onToday,\n}) => {\n  const { language } = useLanguage();\n  const locale = useMemo(() => (language === 'de' ? deDe : enUS), [language]);\n\n  const handleSelect = (value: AppDate) => {\n    setDate(value);\n    setDateClicked(true);\n  };\n\n  const dateFormatted = Dates.format(date, 'MMMM YYYY');\n\n  return (\n    <>\n      <Row gutter={[20, 20]}>\n        <Col span={24}>\n          <CalendarSwitch\n            dateFormatted={dateFormatted}\n            onDecrease={onDecrease}\n            onIncrease={onIncrease}\n            onToday={onToday}\n          />\n        </Col>\n\n        <Col span={24}>\n          <S.Calendar\n            locale={locale}\n            dateCellRender={(value) => {\n              const today = Dates.getToday();\n\n              return calendar.map((event) => {\n                const calendarDate = Dates.getDate(event.date);\n\n                if (\n                  calendarDate.isSame(value, 'date') &&\n                  calendarDate.isSame(value, 'month') &&\n                  calendarDate.isSame(value, 'year')\n                ) {\n                  const isPast = today.isAfter(calendarDate);\n\n                  return (\n                    <S.Event key={event.date} $isPast={isPast}>\n                      {calendarDate.format('DD')}\n                    </S.Event>\n                  );\n                }\n              });\n            }}\n            value={date}\n            fullscreen={false}\n            onSelect={handleSelect}\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}