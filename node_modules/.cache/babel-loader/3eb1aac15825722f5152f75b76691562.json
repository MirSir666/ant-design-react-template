{"ast":null,"code":"import _objectSpread from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useCallback,useMemo,useState}from'react';import{ScreeningsFriend}from'../ScreeningsFriend/ScreeningsFriend';import{MobileScreenings}from'../MobileScreenings/MobileScreenings';import{DesktopScreenings}from'../DesktopScreenings/DesktopScreenings';import{useResponsive}from'@app/hooks/useResponsive';import*as S from'./ScreeningsFriends.styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var ScreeningsFriends=function ScreeningsFriends(_ref){var screenings=_ref.screenings,currentStatistics=_ref.currentStatistics,setCurrentStatistics=_ref.setCurrentStatistics,isFirstClick=_ref.isFirstClick,setFirstClick=_ref.setFirstClick;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isVisibleMenu=_useState2[0],setVisibleMenu=_useState2[1];var _useResponsive=useResponsive(),mobileOnly=_useResponsive.mobileOnly,isTablet=_useResponsive.isTablet;var handleClickItem=useCallback(function(mode){return function(){setCurrentStatistics(function(prev){if(isFirstClick&&prev.firstUser!==mode){setFirstClick(!isFirstClick);return _objectSpread(_objectSpread({},prev),{},{secondUser:mode});}else if(prev.secondUser!==mode){setFirstClick(!isFirstClick);return _objectSpread(_objectSpread({},prev),{},{firstUser:mode});}else{return _objectSpread({},prev);}});};},[isFirstClick,setFirstClick,setCurrentStatistics]);var screeningsItems=useMemo(function(){return screenings.map(function(screening,index){return/*#__PURE__*/_jsx(ScreeningsFriend,{name:screening.name,value:screening.value,prevValue:screening.prevValue,src:screening.imgUrl,isPrimary:index===currentStatistics.firstUser,isSecondary:index===currentStatistics.secondUser,onClick:handleClickItem(index),isVisibleMenu:isVisibleMenu},screening.name);});},[screenings,currentStatistics,isVisibleMenu,handleClickItem]);return/*#__PURE__*/_jsxs(S.Wrapper,{$isVisible:isVisibleMenu,children:[mobileOnly&&screeningsItems.length>0&&/*#__PURE__*/_jsx(MobileScreenings,{screeningsItems:screeningsItems}),isTablet&&/*#__PURE__*/_jsx(DesktopScreenings,{screeningsItems:screeningsItems,isVisibleMenu:isVisibleMenu,setVisibleMenu:setVisibleMenu})]});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/screeningsCard/screeningsFriends/ScreeningsFriends/ScreeningsFriends.tsx"],"names":["React","useCallback","useMemo","useState","ScreeningsFriend","MobileScreenings","DesktopScreenings","useResponsive","S","ScreeningsFriends","screenings","currentStatistics","setCurrentStatistics","isFirstClick","setFirstClick","isVisibleMenu","setVisibleMenu","mobileOnly","isTablet","handleClickItem","mode","prev","firstUser","secondUser","screeningsItems","map","screening","index","name","value","prevValue","imgUrl","length"],"mappings":"+UAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,OAA7B,CAAsCC,QAAtC,KAAsD,OAAtD,CACA,OAASC,gBAAT,KAAiC,sCAAjC,CAEA,OAASC,gBAAT,KAAiC,sCAAjC,CACA,OAASC,iBAAT,KAAkC,wCAAlC,CACA,OAASC,aAAT,KAA8B,0BAA9B,CACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,4BAAnB,C,wFAUA,MAAO,IAAMC,CAAAA,iBAAmD,CAAG,QAAtDA,CAAAA,iBAAsD,MAM7D,IALJC,CAAAA,UAKI,MALJA,UAKI,CAJJC,iBAII,MAJJA,iBAII,CAHJC,oBAGI,MAHJA,oBAGI,CAFJC,YAEI,MAFJA,YAEI,CADJC,aACI,MADJA,aACI,CACJ,cAAwCX,QAAQ,CAAC,IAAD,CAAhD,wCAAOY,aAAP,eAAsBC,cAAtB,eAEA,mBAAiCT,aAAa,EAA9C,CAAQU,UAAR,gBAAQA,UAAR,CAAoBC,QAApB,gBAAoBA,QAApB,CAEA,GAAMC,CAAAA,eAAe,CAAGlB,WAAW,CACjC,SAACmB,IAAD,QAAkB,WAAM,CACtBR,oBAAoB,CAAC,SAACS,IAAD,CAAU,CAC7B,GAAIR,YAAY,EAAIQ,IAAI,CAACC,SAAL,GAAmBF,IAAvC,CAA6C,CAC3CN,aAAa,CAAC,CAACD,YAAF,CAAb,CAEA,sCACKQ,IADL,MAEEE,UAAU,CAAEH,IAFd,GAID,CAPD,IAOO,IAAIC,IAAI,CAACE,UAAL,GAAoBH,IAAxB,CAA8B,CACnCN,aAAa,CAAC,CAACD,YAAF,CAAb,CAEA,sCACKQ,IADL,MAEEC,SAAS,CAAEF,IAFb,GAID,CAPM,IAOA,CACL,wBACKC,IADL,EAGD,CACF,CApBmB,CAApB,CAqBD,CAtBD,EADiC,CAwBjC,CAACR,YAAD,CAAeC,aAAf,CAA8BF,oBAA9B,CAxBiC,CAAnC,CA2BA,GAAMY,CAAAA,eAAe,CAAGtB,OAAO,CAC7B,iBACEQ,CAAAA,UAAU,CAACe,GAAX,CAAe,SAACC,SAAD,CAAYC,KAAZ,qBACb,KAAC,gBAAD,EAEE,IAAI,CAAED,SAAS,CAACE,IAFlB,CAGE,KAAK,CAAEF,SAAS,CAACG,KAHnB,CAIE,SAAS,CAAEH,SAAS,CAACI,SAJvB,CAKE,GAAG,CAAEJ,SAAS,CAACK,MALjB,CAME,SAAS,CAAEJ,KAAK,GAAKhB,iBAAiB,CAACW,SANzC,CAOE,WAAW,CAAEK,KAAK,GAAKhB,iBAAiB,CAACY,UAP3C,CAQE,OAAO,CAAEJ,eAAe,CAACQ,KAAD,CAR1B,CASE,aAAa,CAAEZ,aATjB,EACOW,SAAS,CAACE,IADjB,CADa,EAAf,CADF,EAD6B,CAe7B,CAAClB,UAAD,CAAaC,iBAAb,CAAgCI,aAAhC,CAA+CI,eAA/C,CAf6B,CAA/B,CAkBA,mBACE,MAAC,CAAD,CAAG,OAAH,EAAW,UAAU,CAAEJ,aAAvB,WACGE,UAAU,EAAIO,eAAe,CAACQ,MAAhB,CAAyB,CAAvC,eAA4C,KAAC,gBAAD,EAAkB,eAAe,CAAER,eAAnC,EAD/C,CAGGN,QAAQ,eACP,KAAC,iBAAD,EACE,eAAe,CAAEM,eADnB,CAEE,aAAa,CAAET,aAFjB,CAGE,cAAc,CAAEC,cAHlB,EAJJ,GADF,CAaD,CArEM","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport { ScreeningsFriend } from '../ScreeningsFriend/ScreeningsFriend';\nimport { CurrentStatisticsState, ScreeningWithDoctors } from '../../ScreeningsCard/ScreeningsCard';\nimport { MobileScreenings } from '../MobileScreenings/MobileScreenings';\nimport { DesktopScreenings } from '../DesktopScreenings/DesktopScreenings';\nimport { useResponsive } from '@app/hooks/useResponsive';\nimport * as S from './ScreeningsFriends.styles';\n\ninterface ScreeningsFriendsProps {\n  screenings: ScreeningWithDoctors[];\n  currentStatistics: CurrentStatisticsState;\n  setCurrentStatistics: (func: (state: CurrentStatisticsState) => CurrentStatisticsState) => void;\n  isFirstClick: boolean;\n  setFirstClick: (state: boolean) => void;\n}\n\nexport const ScreeningsFriends: React.FC<ScreeningsFriendsProps> = ({\n  screenings,\n  currentStatistics,\n  setCurrentStatistics,\n  isFirstClick,\n  setFirstClick,\n}) => {\n  const [isVisibleMenu, setVisibleMenu] = useState(true);\n\n  const { mobileOnly, isTablet } = useResponsive();\n\n  const handleClickItem = useCallback(\n    (mode: number) => () => {\n      setCurrentStatistics((prev) => {\n        if (isFirstClick && prev.firstUser !== mode) {\n          setFirstClick(!isFirstClick);\n\n          return {\n            ...prev,\n            secondUser: mode,\n          };\n        } else if (prev.secondUser !== mode) {\n          setFirstClick(!isFirstClick);\n\n          return {\n            ...prev,\n            firstUser: mode,\n          };\n        } else {\n          return {\n            ...prev,\n          };\n        }\n      });\n    },\n    [isFirstClick, setFirstClick, setCurrentStatistics],\n  );\n\n  const screeningsItems = useMemo(\n    () =>\n      screenings.map((screening, index) => (\n        <ScreeningsFriend\n          key={screening.name}\n          name={screening.name}\n          value={screening.value}\n          prevValue={screening.prevValue}\n          src={screening.imgUrl}\n          isPrimary={index === currentStatistics.firstUser}\n          isSecondary={index === currentStatistics.secondUser}\n          onClick={handleClickItem(index)}\n          isVisibleMenu={isVisibleMenu}\n        />\n      )),\n    [screenings, currentStatistics, isVisibleMenu, handleClickItem],\n  );\n\n  return (\n    <S.Wrapper $isVisible={isVisibleMenu}>\n      {mobileOnly && screeningsItems.length > 0 && <MobileScreenings screeningsItems={screeningsItems} />}\n\n      {isTablet && (\n        <DesktopScreenings\n          screeningsItems={screeningsItems}\n          isVisibleMenu={isVisibleMenu}\n          setVisibleMenu={setVisibleMenu}\n        />\n      )}\n    </S.Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}