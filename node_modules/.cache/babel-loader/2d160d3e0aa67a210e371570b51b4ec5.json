{"ast":null,"code":"import _objectSpread from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\nvar _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/components/apps/kanban/newCardForm/TagDropdown/TagDropdown.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dropdown } from '@app/components/common/Dropdown/Dropdown';\nimport { kanbanTags } from 'constants/kanbanTags';\nimport * as S from './TagDropdown.styles';\nimport { Tag } from 'components/common/Tag/Tag';\nimport { PlusCircleFilled } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var TagDropdown = function TagDropdown(_ref) {\n  _s();\n\n  var selectedTags = _ref.selectedTags,\n      setSelectedTags = _ref.setSelectedTags;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var kanbanTagData = Object.values(kanbanTags);\n  var selectedTagsIds = selectedTags.map(function (item) {\n    return item.id;\n  });\n\n  var onTagClick = function onTagClick(tag) {\n    var isExist = selectedTagsIds.includes(tag.id);\n\n    if (isExist) {\n      setSelectedTags(selectedTags.filter(function (item) {\n        return item.id !== tag.id;\n      }));\n    } else {\n      setSelectedTags([].concat(_toConsumableArray(selectedTags), [tag]));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    trigger: ['click'],\n    overlay: /*#__PURE__*/_jsxDEV(S.EditTagPopover, {\n      children: [kanbanTagData.map(function (tag) {\n        return /*#__PURE__*/_jsxDEV(S.EditTagPopoverLine, {\n          onClick: function onClick(e) {\n            onTagClick(tag);\n            e.stopPropagation();\n          },\n          children: [/*#__PURE__*/_jsxDEV(S.PopoverCheckbox, {\n            checked: selectedTagsIds.includes(tag.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(S.TagWrapper, {\n            backgroundColor: tag.bgColor,\n            children: [\"#\", tag.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, _this)]\n        }, tag.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, _this);\n      }), /*#__PURE__*/_jsxDEV(S.RemoveTagWrapper, {\n        children: /*#__PURE__*/_jsxDEV(S.RemoveTag, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, _this),\n    children: selectedTags && selectedTags.length > 0 ? /*#__PURE__*/_jsxDEV(S.TagsWrapper, {\n      children: [selectedTags.map(function (tag) {\n        return /*#__PURE__*/_jsxDEV(Tag, _objectSpread(_objectSpread({}, tag), {}, {\n          removeTag: function removeTag() {\n            return onTagClick(tag);\n          }\n        }), tag.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, _this);\n      }), /*#__PURE__*/_jsxDEV(S.TagPlusWrapper, {\n        children: /*#__PURE__*/_jsxDEV(PlusCircleFilled, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, _this) : /*#__PURE__*/_jsxDEV(S.TagsWrapper, {\n      children: /*#__PURE__*/_jsxDEV(S.AddTag, {\n        children: t('kanban.addTag')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(TagDropdown, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = TagDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"TagDropdown\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/apps/kanban/newCardForm/TagDropdown/TagDropdown.tsx"],"names":["React","useTranslation","Dropdown","kanbanTags","S","Tag","PlusCircleFilled","TagDropdown","selectedTags","setSelectedTags","t","kanbanTagData","Object","values","selectedTagsIds","map","item","id","onTagClick","tag","isExist","includes","filter","e","stopPropagation","bgColor","title","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dropdown } from '@app/components/common/Dropdown/Dropdown';\nimport { Tag as ITag } from '../../interfaces';\nimport { kanbanTags } from 'constants/kanbanTags';\nimport * as S from './TagDropdown.styles';\nimport { Tag } from 'components/common/Tag/Tag';\nimport { PlusCircleFilled } from '@ant-design/icons';\n\ninterface TagDropdownProps {\n  selectedTags: ITag[];\n  setSelectedTags: (state: ITag[]) => void;\n}\n\nexport const TagDropdown: React.FC<TagDropdownProps> = ({ selectedTags, setSelectedTags }) => {\n  const { t } = useTranslation();\n\n  const kanbanTagData = Object.values(kanbanTags);\n  const selectedTagsIds = selectedTags.map((item) => item.id);\n\n  const onTagClick = (tag: ITag) => {\n    const isExist = selectedTagsIds.includes(tag.id);\n\n    if (isExist) {\n      setSelectedTags(selectedTags.filter((item) => item.id !== tag.id));\n    } else {\n      setSelectedTags([...selectedTags, tag]);\n    }\n  };\n\n  return (\n    <Dropdown\n      trigger={['click']}\n      overlay={\n        <S.EditTagPopover>\n          {kanbanTagData.map((tag: ITag) => (\n            <S.EditTagPopoverLine\n              key={tag.id}\n              onClick={(e) => {\n                onTagClick(tag);\n                e.stopPropagation();\n              }}\n            >\n              <S.PopoverCheckbox checked={selectedTagsIds.includes(tag.id)} />\n              <S.TagWrapper backgroundColor={tag.bgColor}>#{tag.title}</S.TagWrapper>\n            </S.EditTagPopoverLine>\n          ))}\n          <S.RemoveTagWrapper>\n            <S.RemoveTag />\n          </S.RemoveTagWrapper>\n        </S.EditTagPopover>\n      }\n    >\n      {selectedTags && selectedTags.length > 0 ? (\n        <S.TagsWrapper>\n          {selectedTags.map((tag) => (\n            <Tag key={tag.id} {...tag} removeTag={() => onTagClick(tag)} />\n          ))}\n          <S.TagPlusWrapper>\n            <PlusCircleFilled />\n          </S.TagPlusWrapper>\n        </S.TagsWrapper>\n      ) : (\n        <S.TagsWrapper>\n          <S.AddTag>{t('kanban.addTag')}</S.AddTag>\n        </S.TagsWrapper>\n      )}\n    </Dropdown>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}