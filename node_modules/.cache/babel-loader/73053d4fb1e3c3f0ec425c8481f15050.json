{"ast":null,"code":"import _taggedTemplateLiteral from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";import _slicedToArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var _templateObject,_templateObject2,_templateObject3;import React,{useEffect,useState}from'react';import{useTranslation}from'react-i18next';import{useResponsive}from'hooks/useResponsive';import{TreatmentCalendar}from'./TreatmentCalendar/TreatmentCalendar';import{TreatmentPanel}from'./TreatmentPanel';import{Dates}from'constants/Dates';import{Col,Row}from'antd';import{DashboardCard}from'../DashboardCard/DashboardCard';import{getUserCalendar}from'api/calendar.api';import{ArrowLeftOutlined}from'@ant-design/icons';import styled from'styled-components';import{Button}from'../../common/buttons/Button/Button';import{useAppSelector}from'@app/hooks/reduxHooks';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var TreatmentCard=function TreatmentCard(){var _useResponsive=useResponsive(),isTablet=_useResponsive.isTablet;var _useState=useState(Dates.getToday()),_useState2=_slicedToArray(_useState,2),selectedDate=_useState2[0],setDate=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isDateClicked=_useState4[0],setDateClicked=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),calendar=_useState6[0],setCalendar=_useState6[1];var user=useAppSelector(function(state){return state.user.user;});useEffect(function(){user&&getUserCalendar(user===null||user===void 0?void 0:user.id).then(function(res){return setCalendar(res);});},[user]);var _useTranslation=useTranslation(),i18n=_useTranslation.i18n,t=_useTranslation.t;useEffect(function(){setDate(function(selectedDate){return selectedDate.locale(i18n.language);});},[i18n.language]);var handleDecreaseMonth=function handleDecreaseMonth(){setDate(selectedDate.month(selectedDate.month()-1));};var handleIncreaseMonth=function handleIncreaseMonth(){setDate(selectedDate.month(selectedDate.month()+1));};var handleToday=function handleToday(){setDate(Dates.getToday());};var calendarItem=/*#__PURE__*/_jsx(TreatmentCalendar,{calendar:calendar,date:selectedDate,setDate:setDate,onDecrease:handleDecreaseMonth,onIncrease:handleIncreaseMonth,onToday:handleToday,setDateClicked:setDateClicked});var currentEvent=calendar.find(function(event){return Dates.getDate(event.date).isSame(selectedDate,'date');});var panelItem=/*#__PURE__*/_jsx(TreatmentPanel,{event:currentEvent});return/*#__PURE__*/_jsx(DashboardCard,{title:t('medical-dashboard.treatmentPlan.title'),children:/*#__PURE__*/_jsx(RowStyled,{gutter:[10,10],wrap:false,children:isTablet?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Col,{md:12,children:calendarItem}),/*#__PURE__*/_jsx(Col,{md:12,children:panelItem})]}):isDateClicked&&calendar.some(function(event){return Dates.getDate(event.date).isSame(selectedDate,'date');})?/*#__PURE__*/_jsxs(BackButtonWrapper,{span:24,children:[panelItem,/*#__PURE__*/_jsx(BackButton,{type:\"text\",icon:/*#__PURE__*/_jsx(ArrowLeftOutlined,{}),onClick:function onClick(){return setDateClicked(false);}})]}):/*#__PURE__*/_jsx(Col,{span:24,children:calendarItem})})});};var BackButtonWrapper=styled(Col)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  position: relative;\\n\"])));var BackButton=styled(Button)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  color: var(--white);\\n\"])));var RowStyled=styled(Row)(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  min-height: 21.75rem;\\n\"])));","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/treatmentCard/TreatmentCard.tsx"],"names":["React","useEffect","useState","useTranslation","useResponsive","TreatmentCalendar","TreatmentPanel","Dates","Col","Row","DashboardCard","getUserCalendar","ArrowLeftOutlined","styled","Button","useAppSelector","TreatmentCard","isTablet","getToday","selectedDate","setDate","isDateClicked","setDateClicked","calendar","setCalendar","user","state","id","then","res","i18n","t","locale","language","handleDecreaseMonth","month","handleIncreaseMonth","handleToday","calendarItem","currentEvent","find","event","getDate","date","isSame","panelItem","some","BackButtonWrapper","BackButton","RowStyled"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useResponsive } from 'hooks/useResponsive';\nimport { TreatmentCalendar } from './TreatmentCalendar/TreatmentCalendar';\nimport { TreatmentPanel } from './TreatmentPanel';\nimport { AppDate, Dates } from 'constants/Dates';\nimport { Col, Row } from 'antd';\nimport { DashboardCard } from '../DashboardCard/DashboardCard';\nimport { CalendarEvent, getUserCalendar } from 'api/calendar.api';\nimport { ArrowLeftOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport { Button } from '../../common/buttons/Button/Button';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\n\nexport const TreatmentCard: React.FC = () => {\n  const { isTablet } = useResponsive();\n\n  const [selectedDate, setDate] = useState<AppDate>(Dates.getToday());\n  const [isDateClicked, setDateClicked] = useState(false);\n  const [calendar, setCalendar] = useState<CalendarEvent[]>([]);\n\n  const user = useAppSelector((state) => state.user.user);\n\n  useEffect(() => {\n    user && getUserCalendar(user?.id).then((res) => setCalendar(res));\n  }, [user]);\n\n  const { i18n, t } = useTranslation();\n\n  useEffect(() => {\n    setDate((selectedDate) => selectedDate.locale(i18n.language));\n  }, [i18n.language]);\n\n  const handleDecreaseMonth = () => {\n    setDate(selectedDate.month(selectedDate.month() - 1));\n  };\n\n  const handleIncreaseMonth = () => {\n    setDate(selectedDate.month(selectedDate.month() + 1));\n  };\n\n  const handleToday = () => {\n    setDate(Dates.getToday());\n  };\n\n  const calendarItem = (\n    <TreatmentCalendar\n      calendar={calendar}\n      date={selectedDate}\n      setDate={setDate}\n      onDecrease={handleDecreaseMonth}\n      onIncrease={handleIncreaseMonth}\n      onToday={handleToday}\n      setDateClicked={setDateClicked}\n    />\n  );\n\n  const currentEvent = calendar.find((event) => Dates.getDate(event.date).isSame(selectedDate, 'date'));\n\n  const panelItem = <TreatmentPanel event={currentEvent} />;\n\n  return (\n    <DashboardCard title={t('medical-dashboard.treatmentPlan.title')}>\n      <RowStyled gutter={[10, 10]} wrap={false}>\n        {isTablet ? (\n          <>\n            <Col md={12}>{calendarItem}</Col>\n            <Col md={12}>{panelItem}</Col>\n          </>\n        ) : isDateClicked && calendar.some((event) => Dates.getDate(event.date).isSame(selectedDate, 'date')) ? (\n          <BackButtonWrapper span={24}>\n            {panelItem}\n            <BackButton type=\"text\" icon={<ArrowLeftOutlined />} onClick={() => setDateClicked(false)} />\n          </BackButtonWrapper>\n        ) : (\n          <Col span={24}>{calendarItem}</Col>\n        )}\n      </RowStyled>\n    </DashboardCard>\n  );\n};\n\nconst BackButtonWrapper = styled(Col)`\n  position: relative;\n`;\n\nconst BackButton = styled(Button)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  color: var(--white);\n`;\n\nconst RowStyled = styled(Row)`\n  min-height: 21.75rem;\n`;\n"]},"metadata":{},"sourceType":"module"}