{"ast":null,"code":"import _objectSpread from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{Avatar}from'antd';import{SmileOutlined,UserOutlined}from'@ant-design/icons';import{BaseButtonsForm}from'@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';import{AddUserFormModal}from'./AddUserFormModal';import{Input}from'../../common/inputs/Input/Input';import{Button}from'../../common/buttons/Button/Button';import{useTranslation}from'react-i18next';import*as S from'./ControlForm.styles';import{notificationController}from'@app/controllers/notificationController';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var layout={labelCol:{span:24},wrapperCol:{span:24}};export var ControlForm=function ControlForm(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),visible=_useState2[0],setVisible=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isFieldsChanged=_useState4[0],setFieldsChanged=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isLoading=_useState6[0],setLoading=_useState6[1];var _useTranslation=useTranslation(),t=_useTranslation.t;var showUserModal=function showUserModal(){setVisible(true);};var hideUserModal=function hideUserModal(){setVisible(false);};var onFinish=function onFinish(){var values=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};setLoading(true);setTimeout(function(){setFieldsChanged(false);setLoading(false);notificationController.success({message:t('common.success')});console.log(values);},1000);};return/*#__PURE__*/_jsxs(BaseButtonsForm.Provider,{onFormFinish:function onFormFinish(name,_ref){var values=_ref.values,forms=_ref.forms;if(name==='userForm'){var controlForm=forms.controlForm;var users=controlForm.getFieldValue('users')||[];controlForm.setFieldsValue({users:[].concat(_toConsumableArray(users),[values])});setVisible(false);}},children:[/*#__PURE__*/_jsxs(BaseButtonsForm,_objectSpread(_objectSpread({},layout),{},{name:\"controlForm\",isFieldsChanged:isFieldsChanged,footer:/*#__PURE__*/_jsxs(BaseButtonsForm.Item,{children:[/*#__PURE__*/_jsx(Button,{htmlType:\"submit\",type:\"primary\",loading:isLoading,children:t('common.submit')}),/*#__PURE__*/_jsx(S.AddUserButton,{type:\"default\",htmlType:\"button\",onClick:showUserModal,children:t('forms.controlFormLabels.addUser')})]}),onFinish:onFinish,onFieldsChange:function onFieldsChange(){return setFieldsChanged(true);},children:[/*#__PURE__*/_jsx(BaseButtonsForm.Item,{name:\"group\",label:t('forms.controlFormLabels.groupName'),rules:[{required:true,message:t('forms.controlFormLabels.groupNameError')}],children:/*#__PURE__*/_jsx(Input,{})}),/*#__PURE__*/_jsx(S.UserList,{label:t('forms.controlFormLabels.userList')// eslint-disable-next-line\n,shouldUpdate:function shouldUpdate(prevValues,curValues){return prevValues.users!==curValues.users;},children:function children(_ref2){var getFieldValue=_ref2.getFieldValue;var users=getFieldValue('users')||[];return users.length?/*#__PURE__*/_jsx(S.List,{children:users.map(function(user,index){return/*#__PURE__*/_jsxs(S.ListItem,{children:[/*#__PURE__*/_jsx(Avatar,{icon:/*#__PURE__*/_jsx(UserOutlined,{})}),/*#__PURE__*/_jsxs(S.User,{children:[user.name,\" - \",user.age]})]},index);})}):/*#__PURE__*/_jsxs(S.Text,{children:[\"( \",/*#__PURE__*/_jsx(SmileOutlined,{}),\" \",t('forms.controlFormLabels.noUser'),\" )\"]});}})]})),/*#__PURE__*/_jsx(AddUserFormModal,{visible:visible,onCancel:hideUserModal})]});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/forms/ControlForm/ControlForm.tsx"],"names":["React","useState","Avatar","SmileOutlined","UserOutlined","BaseButtonsForm","AddUserFormModal","Input","Button","useTranslation","S","notificationController","layout","labelCol","span","wrapperCol","ControlForm","visible","setVisible","isFieldsChanged","setFieldsChanged","isLoading","setLoading","t","showUserModal","hideUserModal","onFinish","values","setTimeout","success","message","console","log","name","forms","controlForm","users","getFieldValue","setFieldsValue","required","prevValues","curValues","length","map","user","index","age"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Avatar } from 'antd';\nimport { SmileOutlined, UserOutlined } from '@ant-design/icons';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { AddUserFormModal } from './AddUserFormModal';\nimport { Input } from '../../common/inputs/Input/Input';\nimport { Button } from '../../common/buttons/Button/Button';\nimport { useTranslation } from 'react-i18next';\nimport * as S from './ControlForm.styles';\nimport { notificationController } from '@app/controllers/notificationController';\n\nconst layout = {\n  labelCol: { span: 24 },\n  wrapperCol: { span: 24 },\n};\n\ninterface UserType {\n  name: string;\n  age: string;\n}\n\nexport const ControlForm: React.FC = () => {\n  const [visible, setVisible] = useState(false);\n  const [isFieldsChanged, setFieldsChanged] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const { t } = useTranslation();\n\n  const showUserModal = () => {\n    setVisible(true);\n  };\n\n  const hideUserModal = () => {\n    setVisible(false);\n  };\n\n  const onFinish = (values = {}) => {\n    setLoading(true);\n    setTimeout(() => {\n      setFieldsChanged(false);\n      setLoading(false);\n      notificationController.success({ message: t('common.success') });\n      console.log(values);\n    }, 1000);\n  };\n\n  return (\n    <BaseButtonsForm.Provider\n      onFormFinish={(name, { values, forms }) => {\n        if (name === 'userForm') {\n          const { controlForm } = forms;\n          const users = controlForm.getFieldValue('users') || [];\n          controlForm.setFieldsValue({ users: [...users, values] });\n          setVisible(false);\n        }\n      }}\n    >\n      <BaseButtonsForm\n        {...layout}\n        name=\"controlForm\"\n        isFieldsChanged={isFieldsChanged}\n        footer={\n          <BaseButtonsForm.Item>\n            <Button htmlType=\"submit\" type=\"primary\" loading={isLoading}>\n              {t('common.submit')}\n            </Button>\n            <S.AddUserButton type=\"default\" htmlType=\"button\" onClick={showUserModal}>\n              {t('forms.controlFormLabels.addUser')}\n            </S.AddUserButton>\n          </BaseButtonsForm.Item>\n        }\n        onFinish={onFinish}\n        onFieldsChange={() => setFieldsChanged(true)}\n      >\n        <BaseButtonsForm.Item\n          name=\"group\"\n          label={t('forms.controlFormLabels.groupName')}\n          rules={[{ required: true, message: t('forms.controlFormLabels.groupNameError') }]}\n        >\n          <Input />\n        </BaseButtonsForm.Item>\n        <S.UserList\n          label={t('forms.controlFormLabels.userList')}\n          // eslint-disable-next-line\n          shouldUpdate={(prevValues: any, curValues: any) => prevValues.users !== curValues.users}\n        >\n          {({ getFieldValue }) => {\n            const users: UserType[] = getFieldValue('users') || [];\n            return users.length ? (\n              <S.List>\n                {users.map((user, index) => (\n                  <S.ListItem key={index}>\n                    <Avatar icon={<UserOutlined />} />\n                    <S.User>\n                      {user.name} - {user.age}\n                    </S.User>\n                  </S.ListItem>\n                ))}\n              </S.List>\n            ) : (\n              <S.Text>\n                ( <SmileOutlined /> {t('forms.controlFormLabels.noUser')} )\n              </S.Text>\n            );\n          }}\n        </S.UserList>\n      </BaseButtonsForm>\n      <AddUserFormModal visible={visible} onCancel={hideUserModal} />\n    </BaseButtonsForm.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}