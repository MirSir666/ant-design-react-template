{"ast":null,"code":"import React,{useMemo}from'react';import enUS from'antd/lib/calendar/locale/en_US';import deDe from'antd/es/calendar/locale/de_DE';import{Col,Row}from'antd';import{CalendarSwitch}from'@app/components/common/CalendarSwitch/CalendarSwitch';import{useLanguage}from'@app/hooks/useLanguage';import{Dates}from'@app/constants/Dates';import*as S from'./TreatmentCalendar.styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var TreatmentCalendar=function TreatmentCalendar(_ref){var calendar=_ref.calendar,date=_ref.date,setDate=_ref.setDate,onDecrease=_ref.onDecrease,onIncrease=_ref.onIncrease,setDateClicked=_ref.setDateClicked,onToday=_ref.onToday;var _useLanguage=useLanguage(),language=_useLanguage.language;var locale=useMemo(function(){return language==='de'?deDe:enUS;},[language]);var handleSelect=function handleSelect(value){setDate(value);setDateClicked(true);};var dateFormatted=Dates.format(date,'MMMM YYYY');return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Row,{gutter:[20,20],children:[/*#__PURE__*/_jsx(Col,{span:24,children:/*#__PURE__*/_jsx(CalendarSwitch,{dateFormatted:dateFormatted,onDecrease:onDecrease,onIncrease:onIncrease,onToday:onToday})}),/*#__PURE__*/_jsx(Col,{span:24,children:/*#__PURE__*/_jsx(S.Calendar,{locale:locale,dateCellRender:function dateCellRender(value){var today=Dates.getToday();return calendar.map(function(event){var calendarDate=Dates.getDate(event.date);if(calendarDate.isSame(value,'date')&&calendarDate.isSame(value,'month')&&calendarDate.isSame(value,'year')){var isPast=today.isAfter(calendarDate);return/*#__PURE__*/_jsx(S.Event,{$isPast:isPast,children:calendarDate.format('DD')},event.date);}});},value:date,fullscreen:false,onSelect:handleSelect})})]})});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/treatmentCard/TreatmentCalendar/TreatmentCalendar.tsx"],"names":["React","useMemo","enUS","deDe","Col","Row","CalendarSwitch","useLanguage","Dates","S","TreatmentCalendar","calendar","date","setDate","onDecrease","onIncrease","setDateClicked","onToday","language","locale","handleSelect","value","dateFormatted","format","today","getToday","map","event","calendarDate","getDate","isSame","isPast","isAfter"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,OAAhB,KAA+B,OAA/B,CACA,MAAOC,CAAAA,IAAP,KAAiB,gCAAjB,CACA,MAAOC,CAAAA,IAAP,KAAiB,+BAAjB,CACA,OAASC,GAAT,CAAcC,GAAd,KAAyB,MAAzB,CACA,OAASC,cAAT,KAA+B,sDAA/B,CACA,OAASC,WAAT,KAA4B,wBAA5B,CAEA,OAAkBC,KAAlB,KAA+B,sBAA/B,CACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,4BAAnB,C,6IAYA,MAAO,IAAMC,CAAAA,iBAAmD,CAAG,QAAtDA,CAAAA,iBAAsD,MAQ7D,IAPJC,CAAAA,QAOI,MAPJA,QAOI,CANJC,IAMI,MANJA,IAMI,CALJC,OAKI,MALJA,OAKI,CAJJC,UAII,MAJJA,UAII,CAHJC,UAGI,MAHJA,UAGI,CAFJC,cAEI,MAFJA,cAEI,CADJC,OACI,MADJA,OACI,CACJ,iBAAqBV,WAAW,EAAhC,CAAQW,QAAR,cAAQA,QAAR,CACA,GAAMC,CAAAA,MAAM,CAAGlB,OAAO,CAAC,iBAAOiB,CAAAA,QAAQ,GAAK,IAAb,CAAoBf,IAApB,CAA2BD,IAAlC,EAAD,CAA0C,CAACgB,QAAD,CAA1C,CAAtB,CAEA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAoB,CACvCR,OAAO,CAACQ,KAAD,CAAP,CACAL,cAAc,CAAC,IAAD,CAAd,CACD,CAHD,CAKA,GAAMM,CAAAA,aAAa,CAAGd,KAAK,CAACe,MAAN,CAAaX,IAAb,CAAmB,WAAnB,CAAtB,CAEA,mBACE,sCACE,MAAC,GAAD,EAAK,MAAM,CAAE,CAAC,EAAD,CAAK,EAAL,CAAb,wBACE,KAAC,GAAD,EAAK,IAAI,CAAE,EAAX,uBACE,KAAC,cAAD,EACE,aAAa,CAAEU,aADjB,CAEE,UAAU,CAAER,UAFd,CAGE,UAAU,CAAEC,UAHd,CAIE,OAAO,CAAEE,OAJX,EADF,EADF,cAUE,KAAC,GAAD,EAAK,IAAI,CAAE,EAAX,uBACE,KAAC,CAAD,CAAG,QAAH,EACE,MAAM,CAAEE,MADV,CAEE,cAAc,CAAE,wBAACE,KAAD,CAAW,CACzB,GAAMG,CAAAA,KAAK,CAAGhB,KAAK,CAACiB,QAAN,EAAd,CAEA,MAAOd,CAAAA,QAAQ,CAACe,GAAT,CAAa,SAACC,KAAD,CAAW,CAC7B,GAAMC,CAAAA,YAAY,CAAGpB,KAAK,CAACqB,OAAN,CAAcF,KAAK,CAACf,IAApB,CAArB,CAEA,GACEgB,YAAY,CAACE,MAAb,CAAoBT,KAApB,CAA2B,MAA3B,GACAO,YAAY,CAACE,MAAb,CAAoBT,KAApB,CAA2B,OAA3B,CADA,EAEAO,YAAY,CAACE,MAAb,CAAoBT,KAApB,CAA2B,MAA3B,CAHF,CAIE,CACA,GAAMU,CAAAA,MAAM,CAAGP,KAAK,CAACQ,OAAN,CAAcJ,YAAd,CAAf,CAEA,mBACE,KAAC,CAAD,CAAG,KAAH,EAA0B,OAAO,CAAEG,MAAnC,UACGH,YAAY,CAACL,MAAb,CAAoB,IAApB,CADH,EAAcI,KAAK,CAACf,IAApB,CADF,CAKD,CACF,CAhBM,CAAP,CAiBD,CAtBH,CAuBE,KAAK,CAAEA,IAvBT,CAwBE,UAAU,CAAE,KAxBd,CAyBE,QAAQ,CAAEQ,YAzBZ,EADF,EAVF,GADF,EADF,CA4CD,CA/DM","sourcesContent":["import React, { useMemo } from 'react';\nimport enUS from 'antd/lib/calendar/locale/en_US';\nimport deDe from 'antd/es/calendar/locale/de_DE';\nimport { Col, Row } from 'antd';\nimport { CalendarSwitch } from '@app/components/common/CalendarSwitch/CalendarSwitch';\nimport { useLanguage } from '@app/hooks/useLanguage';\nimport { CalendarEvent } from '@app/api/calendar.api';\nimport { AppDate, Dates } from '@app/constants/Dates';\nimport * as S from './TreatmentCalendar.styles';\n\ninterface TreatmentCalendarProps {\n  date: AppDate;\n  setDate: (state: AppDate) => void;\n  onIncrease: () => void;\n  onDecrease: () => void;\n  onToday: () => void;\n  setDateClicked: (state: boolean) => void;\n  calendar: CalendarEvent[];\n}\n\nexport const TreatmentCalendar: React.FC<TreatmentCalendarProps> = ({\n  calendar,\n  date,\n  setDate,\n  onDecrease,\n  onIncrease,\n  setDateClicked,\n  onToday,\n}) => {\n  const { language } = useLanguage();\n  const locale = useMemo(() => (language === 'de' ? deDe : enUS), [language]);\n\n  const handleSelect = (value: AppDate) => {\n    setDate(value);\n    setDateClicked(true);\n  };\n\n  const dateFormatted = Dates.format(date, 'MMMM YYYY');\n\n  return (\n    <>\n      <Row gutter={[20, 20]}>\n        <Col span={24}>\n          <CalendarSwitch\n            dateFormatted={dateFormatted}\n            onDecrease={onDecrease}\n            onIncrease={onIncrease}\n            onToday={onToday}\n          />\n        </Col>\n\n        <Col span={24}>\n          <S.Calendar\n            locale={locale}\n            dateCellRender={(value) => {\n              const today = Dates.getToday();\n\n              return calendar.map((event) => {\n                const calendarDate = Dates.getDate(event.date);\n\n                if (\n                  calendarDate.isSame(value, 'date') &&\n                  calendarDate.isSame(value, 'month') &&\n                  calendarDate.isSame(value, 'year')\n                ) {\n                  const isPast = today.isAfter(calendarDate);\n\n                  return (\n                    <S.Event key={event.date} $isPast={isPast}>\n                      {calendarDate.format('DD')}\n                    </S.Event>\n                  );\n                }\n              });\n            }}\n            value={date}\n            fullscreen={false}\n            onSelect={handleSelect}\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}