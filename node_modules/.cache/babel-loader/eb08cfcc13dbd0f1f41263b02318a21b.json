{"ast":null,"code":"import _slicedToArray from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/covidCard/CovidCard.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { getCovidData } from '@app/api/covid.api';\nimport { useTranslation } from 'react-i18next';\nimport { DashboardCard } from '../DashboardCard/DashboardCard';\nimport { CovidChart } from './CovidChart';\nimport { Dates } from '@app/constants/Dates';\nimport { notification } from 'antd';\nimport { NotFound } from '@app/components/common/NotFound/NotFound';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var CovidCard = function CovidCard() {\n  _s();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  useEffect(function () {\n    getCovidData().then(function (res) {\n      return setData(res === null || res === void 0 ? void 0 : res.data.splice(0, 100).reverse());\n    }).catch(function (e) {\n      return notification.error({\n        message: e.message\n      });\n    });\n  }, []);\n\n  var _useMemo = useMemo(function () {\n    var confirmedArr = [];\n    var deathsArr = [];\n    var dateArr = [];\n    data && (data === null || data === void 0 ? void 0 : data.forEach(function (el) {\n      confirmedArr.push(el.new_confirmed);\n      deathsArr.push(el.new_deaths);\n      dateArr.push(Dates.getDate(el.date).format('LL'));\n    }));\n    return {\n      confirmedArr: confirmedArr,\n      deathsArr: deathsArr,\n      dateArr: dateArr\n    };\n  }, [data]),\n      confirmedArr = _useMemo.confirmedArr,\n      deathsArr = _useMemo.deathsArr,\n      dateArr = _useMemo.dateArr;\n\n  var _useMemo2 = useMemo(function () {\n    return {\n      confirmed: {\n        title: t('medical-dashboard.covid.casesPerDay'),\n        data: confirmedArr\n      },\n      deaths: {\n        title: t('medical-dashboard.covid.deaths'),\n        data: deathsArr\n      }\n    };\n  }, [confirmedArr, deathsArr, t]),\n      confirmed = _useMemo2.confirmed,\n      deaths = _useMemo2.deaths;\n\n  return /*#__PURE__*/_jsxDEV(DashboardCard, {\n    id: \"covid\",\n    title: t('medical-dashboard.covid.title'),\n    padding: 0,\n    children: data ? /*#__PURE__*/_jsxDEV(CovidChart, {\n      confirmed: confirmed,\n      deaths: deaths,\n      dateArr: dateArr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }, _this) : /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 88\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CovidCard, \"gxRcwiz1KlpjpUFjAeFJcFH3Up4=\", false, function () {\n  return [useTranslation];\n});\n\n_c = CovidCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CovidCard\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/covidCard/CovidCard.tsx"],"names":["React","useEffect","useMemo","useState","getCovidData","useTranslation","DashboardCard","CovidChart","Dates","notification","NotFound","CovidCard","data","setData","t","then","res","splice","reverse","catch","e","error","message","confirmedArr","deathsArr","dateArr","forEach","el","push","new_confirmed","new_deaths","getDate","date","format","confirmed","title","deaths"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { getCovidData, CoronaData } from '@app/api/covid.api';\nimport { useTranslation } from 'react-i18next';\nimport { DashboardCard } from '../DashboardCard/DashboardCard';\nimport { CovidChart } from './CovidChart';\nimport { Dates } from '@app/constants/Dates';\nimport { notification } from 'antd';\nimport { NotFound } from '@app/components/common/NotFound/NotFound';\n\nexport const CovidCard: React.FC = () => {\n  const [data, setData] = useState<CoronaData[]>();\n\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    getCovidData()\n      .then((res) => setData(res?.data.splice(0, 100).reverse()))\n      .catch((e) => notification.error({ message: e.message }));\n  }, []);\n\n  const { confirmedArr, deathsArr, dateArr } = useMemo(() => {\n    const confirmedArr: number[] = [];\n    const deathsArr: number[] = [];\n    const dateArr: string[] = [];\n\n    data &&\n      data?.forEach((el) => {\n        confirmedArr.push(el.new_confirmed);\n        deathsArr.push(el.new_deaths);\n        dateArr.push(Dates.getDate(el.date).format('LL'));\n      });\n\n    return {\n      confirmedArr,\n      deathsArr,\n      dateArr,\n    };\n  }, [data]);\n\n  const { confirmed, deaths } = useMemo(\n    () => ({\n      confirmed: {\n        title: t('medical-dashboard.covid.casesPerDay'),\n        data: confirmedArr,\n      },\n      deaths: {\n        title: t('medical-dashboard.covid.deaths'),\n        data: deathsArr,\n      },\n    }),\n    [confirmedArr, deathsArr, t],\n  );\n\n  return (\n    <DashboardCard id=\"covid\" title={t('medical-dashboard.covid.title')} padding={0}>\n      {data ? <CovidChart confirmed={confirmed} deaths={deaths} dateArr={dateArr} /> : <NotFound />}\n    </DashboardCard>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}