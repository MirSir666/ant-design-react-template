{"ast":null,"code":"import _objectSpread from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/screeningsCard/ScreeningsCard/ScreeningsCard.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ScreeningsHeader } from '../ScreeningsHeader/ScreeningsHeader';\nimport { ScreeningsFriends } from '../screeningsFriends/ScreeningsFriends/ScreeningsFriends';\nimport { ScreeningsChart } from '../ScreeningsChart/ScreeningsChart';\nimport { getScreenings } from '@app/api/screenings.api';\nimport { Dates } from '@app/constants/Dates';\nimport { getStatistics } from '@app/api/statistics.api';\nimport { getSmoothRandom } from '@app/utils/utils';\nimport { getDoctorsData } from '@app/api/doctors.api';\nimport * as S from './ScreeningsCard.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var ScreeningsCard = function ScreeningsCard() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      doctors = _useState2[0],\n      setDoctors = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      statistics = _useState4[0],\n      setStatistics = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      screenings = _useState6[0],\n      setScreenings = _useState6[1];\n\n  var _useState7 = useState({\n    firstUser: 1,\n    secondUser: 3,\n    month: Dates.getToday().get('month'),\n    statistic: 2\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentStatistics = _useState8[0],\n      setCurrentStatistics = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isFirstClick = _useState10[0],\n      setFirstClick = _useState10[1];\n\n  useEffect(function () {\n    getScreenings().then(function (res) {\n      return setScreenings(res);\n    });\n  }, []);\n  useEffect(function () {\n    getStatistics().then(function (res) {\n      return setStatistics(res);\n    });\n  }, []);\n  useEffect(function () {\n    getDoctorsData().then(function (res) {\n      return setDoctors(res);\n    });\n  }, []);\n  var months = useMemo(function () {\n    return Array.from({\n      length: 12\n    }, function (_, i) {\n      return i;\n    });\n  }, []);\n  var screeningsWithDoctors = useMemo(function () {\n    return screenings.map(function (screening) {\n      var currentDoctor = doctors.find(function (doctor) {\n        return doctor.id === screening.id;\n      });\n      return _objectSpread(_objectSpread({}, screening), {}, {\n        name: (currentDoctor === null || currentDoctor === void 0 ? void 0 : currentDoctor.name) || '',\n        imgUrl: (currentDoctor === null || currentDoctor === void 0 ? void 0 : currentDoctor.imgUrl) || ''\n      });\n    });\n  }, [doctors, screenings]);\n\n  var generateScreeningValue = function generateScreeningValue() {\n    var randomValue = getSmoothRandom(3, 0.7) * 100;\n    return (randomValue * Math.abs(Math.sin(randomValue))).toFixed();\n  };\n\n  var values = useMemo(function () {\n    return months.map(function (month) {\n      return {\n        monthId: month,\n        data: statistics.map(function (statistic) {\n          return {\n            statisticId: statistic.id,\n            data: screenings.map(function (screening) {\n              return {\n                id: screening.id,\n                data: Array.from({\n                  length: 16\n                }, function (_, index) {\n                  return {\n                    day: index * 2,\n                    value: generateScreeningValue()\n                  };\n                })\n              };\n            })\n          };\n        })\n      };\n    });\n  }, [months, screenings, statistics]);\n  var currentValues = useMemo(function () {\n    var _values$find, _values$find$data$fin;\n\n    return (_values$find = values.find(function (month) {\n      return month.monthId === currentStatistics.month;\n    })) === null || _values$find === void 0 ? void 0 : (_values$find$data$fin = _values$find.data.find(function (statistic) {\n      return statistic.statisticId === currentStatistics.statistic;\n    })) === null || _values$find$data$fin === void 0 ? void 0 : _values$find$data$fin.data;\n  }, [currentStatistics.month, currentStatistics.statistic, values]);\n  var getUserStatistic = useCallback(function (isFirstUser) {\n    var user = isFirstUser ? 'firstUser' : 'secondUser';\n    return currentValues && {\n      name: screeningsWithDoctors[currentStatistics[user]].name,\n      data: currentValues[currentStatistics[user]].data\n    };\n  }, [currentStatistics, currentValues, screeningsWithDoctors]);\n  return /*#__PURE__*/_jsxDEV(S.ScreeningsCard, {\n    title: /*#__PURE__*/_jsxDEV(ScreeningsHeader, {\n      currentStatistics: currentStatistics,\n      setCurrentStatistics: setCurrentStatistics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 14\n    }, _this),\n    padding: 0,\n    children: [/*#__PURE__*/_jsxDEV(ScreeningsFriends, {\n      screenings: screeningsWithDoctors,\n      currentStatistics: currentStatistics,\n      setCurrentStatistics: setCurrentStatistics,\n      isFirstClick: isFirstClick,\n      setFirstClick: setFirstClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ScreeningsChart, {\n      firstUser: getUserStatistic(true),\n      secondUser: getUserStatistic(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ScreeningsCard, \"R83C29DCdCGVXgLE3wuQQr9QrRQ=\");\n\n_c = ScreeningsCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScreeningsCard\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/screeningsCard/ScreeningsCard/ScreeningsCard.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","ScreeningsHeader","ScreeningsFriends","ScreeningsChart","getScreenings","Dates","getStatistics","getSmoothRandom","getDoctorsData","S","ScreeningsCard","doctors","setDoctors","statistics","setStatistics","screenings","setScreenings","firstUser","secondUser","month","getToday","get","statistic","currentStatistics","setCurrentStatistics","isFirstClick","setFirstClick","then","res","months","Array","from","length","_","i","screeningsWithDoctors","map","screening","currentDoctor","find","doctor","id","name","imgUrl","generateScreeningValue","randomValue","Math","abs","sin","toFixed","values","monthId","data","statisticId","index","day","value","currentValues","getUserStatistic","isFirstUser","user"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ScreeningsHeader } from '../ScreeningsHeader/ScreeningsHeader';\nimport { ScreeningsFriends } from '../screeningsFriends/ScreeningsFriends/ScreeningsFriends';\nimport { ScreeningsChart } from '../ScreeningsChart/ScreeningsChart';\nimport { getScreenings, Screening } from '@app/api/screenings.api';\nimport { Dates } from '@app/constants/Dates';\nimport { getStatistics, Statistic } from '@app/api/statistics.api';\nimport { getSmoothRandom } from '@app/utils/utils';\nimport { Doctor, getDoctorsData } from '@app/api/doctors.api';\nimport * as S from './ScreeningsCard.styles';\n\nexport interface CurrentStatisticsState {\n  firstUser: number;\n  secondUser: number;\n  month: number;\n  statistic: number;\n}\n\nexport type ScreeningWithDoctors = Screening & { name: string; imgUrl: string };\n\nexport const ScreeningsCard: React.FC = () => {\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n  const [statistics, setStatistics] = useState<Statistic[]>([]);\n  const [screenings, setScreenings] = useState<Screening[]>([]);\n  const [currentStatistics, setCurrentStatistics] = useState<CurrentStatisticsState>({\n    firstUser: 1,\n    secondUser: 3,\n    month: Dates.getToday().get('month'),\n    statistic: 2,\n  });\n  const [isFirstClick, setFirstClick] = useState(true);\n\n  useEffect(() => {\n    getScreenings().then((res) => setScreenings(res));\n  }, []);\n\n  useEffect(() => {\n    getStatistics().then((res) => setStatistics(res));\n  }, []);\n\n  useEffect(() => {\n    getDoctorsData().then((res) => setDoctors(res));\n  }, []);\n\n  const months = useMemo(() => Array.from({ length: 12 }, (_, i) => i), []);\n\n  const screeningsWithDoctors = useMemo((): ScreeningWithDoctors[] => {\n    return screenings.map((screening) => {\n      const currentDoctor = doctors.find((doctor) => doctor.id === screening.id);\n\n      return {\n        ...screening,\n        name: currentDoctor?.name || '',\n        imgUrl: currentDoctor?.imgUrl || '',\n      };\n    });\n  }, [doctors, screenings]);\n\n  const generateScreeningValue = () => {\n    const randomValue = getSmoothRandom(3, 0.7) * 100;\n    return (randomValue * Math.abs(Math.sin(randomValue))).toFixed();\n  };\n\n  const values = useMemo(\n    () =>\n      months.map((month) => ({\n        monthId: month,\n        data: statistics.map((statistic) => ({\n          statisticId: statistic.id,\n          data: screenings.map((screening) => ({\n            id: screening.id,\n            data: Array.from({ length: 16 }, (_, index) => ({\n              day: index * 2,\n              value: generateScreeningValue(),\n            })),\n          })),\n        })),\n      })),\n    [months, screenings, statistics],\n  );\n\n  const currentValues = useMemo(\n    () =>\n      values\n        .find((month) => month.monthId === currentStatistics.month)\n        ?.data.find((statistic) => statistic.statisticId === currentStatistics.statistic)?.data,\n    [currentStatistics.month, currentStatistics.statistic, values],\n  );\n\n  const getUserStatistic = useCallback(\n    (isFirstUser: boolean) => {\n      const user = isFirstUser ? 'firstUser' : 'secondUser';\n\n      return (\n        currentValues && {\n          name: screeningsWithDoctors[currentStatistics[user]].name,\n          data: currentValues[currentStatistics[user]].data,\n        }\n      );\n    },\n    [currentStatistics, currentValues, screeningsWithDoctors],\n  );\n\n  return (\n    <S.ScreeningsCard\n      title={<ScreeningsHeader currentStatistics={currentStatistics} setCurrentStatistics={setCurrentStatistics} />}\n      padding={0}\n    >\n      <ScreeningsFriends\n        screenings={screeningsWithDoctors}\n        currentStatistics={currentStatistics}\n        setCurrentStatistics={setCurrentStatistics}\n        isFirstClick={isFirstClick}\n        setFirstClick={setFirstClick}\n      />\n      <ScreeningsChart firstUser={getUserStatistic(true)} secondUser={getUserStatistic(false)} />\n    </S.ScreeningsCard>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}