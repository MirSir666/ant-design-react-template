{"ast":null,"code":"import _objectSpread from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { DEFAULT_PLACEHOLDER_CHAR, mergeFormatCharacters } from './helpers';\nimport { Pattern } from './Pattern';\nexport var InputMask = /*#__PURE__*/function () {\n  function InputMask(options) {\n    _classCallCheck(this, InputMask);\n    this.emptyValue = '';\n    this._history = [];\n    this._historyIndex = null;\n    this._lastOp = null;\n    this._lastSelection = null;\n    var mergedOptions = _objectSpread(_objectSpread({}, {\n      isRevealingMask: false,\n      placeholderChar: DEFAULT_PLACEHOLDER_CHAR,\n      selection: {\n        start: 0,\n        end: 0\n      },\n      value: ''\n    }), options);\n    if (!mergedOptions.pattern) {\n      throw new Error('InputMask: you must provide a pattern.');\n    }\n    if (typeof mergedOptions.placeholderChar !== 'string' || mergedOptions.placeholderChar.length > 1) {\n      throw new Error('InputMask: placeholderChar should be a single character or an empty string.');\n    }\n    this.placeholderChar = mergedOptions.placeholderChar;\n    this.formatCharacters = mergeFormatCharacters(mergedOptions.formatCharacters);\n    this.setPattern(mergedOptions.pattern, {\n      value: mergedOptions.value,\n      selection: mergedOptions.selection,\n      isRevealingMask: mergedOptions.isRevealingMask\n    });\n  }\n  _createClass(InputMask, [{\n    key: \"setPattern\",\n    value: function setPattern(patternSource, options) {\n      var merged = _objectSpread({\n        selection: {\n          start: 0,\n          end: 0\n        },\n        value: ''\n      }, options);\n      this.pattern = new Pattern(patternSource, this.formatCharacters, this.placeholderChar, merged.isRevealingMask);\n      this.setValue(merged.value);\n      this.emptyValue = this.pattern.formatValue([]).join('');\n      this.selection = merged.selection;\n      this._resetHistory();\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      if (value == null) {\n        value = '';\n      }\n      this.value = this.pattern.formatValue((value || '').split(''));\n    }\n  }, {\n    key: \"_resetHistory\",\n    value: function _resetHistory() {\n      this._history = [];\n      this._historyIndex = null;\n      this._lastOp = null;\n      this._lastSelection = _objectSpread({}, this.selection);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      if (this.pattern.isRevealingMask) {\n        this.value = this.pattern.formatValue((this.getRawValue() || '').split(''));\n      }\n      return (this.value || []).join('');\n    }\n  }, {\n    key: \"getRawValue\",\n    value: function getRawValue() {\n      var rawValue = [];\n      for (var i = 0; i < this.value.length; i++) {\n        if (this.pattern._editableIndices[i] === true) {\n          rawValue.push(this.value[i]);\n        }\n      }\n      return rawValue.join('');\n    }\n    /**\n     * Applies a single character of input based on the current selection.\n     * @param {string} char\n     * @return {boolean} true if a change has been made to value or selection as a\n     *   result of the input, false otherwise.\n     */\n  }, {\n    key: \"input\",\n    value: function input(char) {\n      // Ignore additional input if the cursor's at the end of the pattern\n      if (this.selection.start === this.selection.end && this.selection.start === this.pattern.length) {\n        return false;\n      }\n      var selectionBefore = copy(this.selection);\n      var valueBefore = this.getValue();\n      var inputIndex = this.selection.start;\n      // If the cursor or selection is prior to the first editable character, make\n      // sure any input given is applied to it.\n      if (inputIndex < this.pattern.firstEditableIndex) {\n        inputIndex = this.pattern.firstEditableIndex;\n      }\n      // Bail out or add the character to input\n      if (this.pattern.isEditableIndex(inputIndex)) {\n        if (!this.pattern.isValidAtIndex(char, inputIndex)) {\n          return false;\n        }\n        this.value[inputIndex] = this.pattern.transform(char, inputIndex);\n      } else {\n        console.log('not editable');\n      }\n      // If multiple characters were selected, blank the remainder out based on the\n      // pattern.\n      var end = this.selection.end - 1;\n      while (end > inputIndex) {\n        if (this.pattern.isEditableIndex(end)) {\n          this.value[end] = this.placeholderChar;\n        }\n        end--;\n      }\n      // Advance the cursor to the next character\n      this.selection.start = this.selection.end = inputIndex + 1;\n      // Skip over any subsequent static characters\n      while (this.pattern.length > this.selection.start && !this.pattern.isEditableIndex(this.selection.start)) {\n        this.selection.start++;\n        this.selection.end++;\n      }\n      // History\n      if (this._historyIndex != null) {\n        // Took more input after undoing, so blow any subsequent history away\n        this._history.splice(this._historyIndex, this._history.length - this._historyIndex);\n        this._historyIndex = null;\n      }\n      if (this._lastOp !== 'input' || selectionBefore.start !== selectionBefore.end || this._lastSelection !== null && selectionBefore.start !== this._lastSelection.start) {\n        this._history.push({\n          value: valueBefore,\n          selection: selectionBefore,\n          lastOp: this._lastOp\n        });\n      }\n      this._lastOp = 'input';\n      this._lastSelection = copy(this.selection);\n      return true;\n    }\n    /**\n     * Attempts to delete from the value based on the current cursor position or\n     * selection.\n     * @return {boolean} true if the value or selection changed as the result of\n     *   backspacing, false otherwise.\n     */\n  }, {\n    key: \"backspace\",\n    value: function backspace() {\n      // If the cursor is at the start there's nothing to do\n      if (this.selection.start === 0 && this.selection.end === 0) {\n        return false;\n      }\n      var selectionBefore = _objectSpread({}, this.selection);\n      var valueBefore = this.getValue();\n      // No range selected - work on the character preceding the cursor\n      if (this.selection.start === this.selection.end) {\n        if (this.pattern.isEditableIndex(this.selection.start - 1)) {\n          if (this.pattern.isRevealingMask) {\n            this.value.splice(this.selection.start - 1);\n          } else {\n            this.value[this.selection.start - 1] = this.placeholderChar;\n          }\n        }\n        this.selection.start--;\n        this.selection.end--;\n      }\n      // Range selected - delete characters and leave the cursor at the start of the selection\n      else {\n        var end = this.selection.end - 1;\n        while (end >= this.selection.start) {\n          if (this.pattern.isEditableIndex(end)) {\n            this.value[end] = this.placeholderChar;\n          }\n          end--;\n        }\n        this.selection.end = this.selection.start;\n      }\n      // History\n      if (this._historyIndex != null) {\n        // Took more input after undoing, so blow any subsequent history away\n        this._history.splice(this._historyIndex, this._history.length - this._historyIndex);\n      }\n      if (this._lastOp !== 'backspace' || selectionBefore.start !== selectionBefore.end || this._lastSelection !== null && selectionBefore.start !== this._lastSelection.start) {\n        this._history.push({\n          value: valueBefore,\n          selection: selectionBefore,\n          lastOp: this._lastOp\n        });\n      }\n      this._lastOp = 'backspace';\n      this._lastSelection = _objectSpread({}, this.selection);\n      return true;\n    }\n    /**\n     * Attempts to paste a string of input at the current cursor position or over\n     * the top of the current selection.\n     * Invalid content at any position will cause the paste to be rejected, and it\n     * may contain static parts of the mask's pattern.\n     * @param {string} input\n     * @return {boolean} true if the paste was successful, false otherwise.\n     */\n  }, {\n    key: \"paste\",\n    value: function paste(input) {\n      var _this = this;\n      // This is necessary because we're just calling input() with each character\n      // and rolling back if any were invalid, rather than checking up-front.\n      var initialState = {\n        value: this.value.slice(),\n        selection: _objectSpread({}, this.selection),\n        _lastOp: this._lastOp,\n        _history: this._history.slice(),\n        _historyIndex: this._historyIndex,\n        _lastSelection: _objectSpread({}, this._lastSelection)\n      };\n      // If there are static characters at the start of the pattern and the cursor\n      // or selection is within them, the static characters must match for a valid\n      // paste.\n      if (this.selection.start < this.pattern.firstEditableIndex) {\n        for (var i = 0, l = this.pattern.firstEditableIndex - this.selection.start; i < l; i++) {\n          if (input.charAt(i) !== this.pattern.pattern[i]) {\n            return false;\n          }\n        }\n        // Continue as if the selection and input started from the editable part of\n        // the pattern.\n        input = input.substring(this.pattern.firstEditableIndex - this.selection.start);\n        this.selection.start = this.pattern.firstEditableIndex;\n      }\n      for (i = 0, l = input.length; i < l && this.selection.start <= this.pattern.lastEditableIndex; i++) {\n        var valid = this.input(input.charAt(i));\n        // Allow static parts of the pattern to appear in pasted input - they will\n        // already have been stepped over by input(), so verify that the value\n        // deemed invalid by input() was the expected static character.\n        if (!valid) {\n          if (this.selection.start > 0) {\n            // XXX This only allows for one static character to be skipped\n            var patternIndex = this.selection.start - 1;\n            if (!this.pattern.isEditableIndex(patternIndex) && input.charAt(i) === this.pattern.pattern[patternIndex]) {\n              continue;\n            }\n          }\n          Object.keys(initialState).forEach(function (key) {\n            // @ts-ignore\n            _this[key] = initialState[key];\n          });\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      // If there is no history, or nothing more on the history stack, we can't undo\n      if (this._history.length === 0 || this._historyIndex === 0) {\n        return false;\n      }\n      var historyItem;\n      if (this._historyIndex == null) {\n        // Not currently undoing, set up the initial history index\n        this._historyIndex = this._history.length - 1;\n        historyItem = this._history[this._historyIndex];\n        // Add a new history entry if anything has changed since the last one, so we\n        // can redo back to the initial state we started undoing from.\n        var value = this.getValue();\n        if (historyItem.value !== value || historyItem.selection.start !== this.selection.start || historyItem.selection.end !== this.selection.end) {\n          this._history.push({\n            value: value,\n            selection: _objectSpread({}, this.selection),\n            lastOp: this._lastOp,\n            startUndo: true\n          });\n        }\n      } else {\n        historyItem = this._history[--this._historyIndex];\n      }\n      this.value = historyItem.value.split('');\n      this.selection = historyItem.selection;\n      this._lastOp = historyItem.lastOp;\n      return true;\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      if (this._history.length === 0 || this._historyIndex == null) {\n        return false;\n      }\n      var historyItem = this._history[++this._historyIndex];\n      // If this is the last history item, we're done redoing\n      if (this._historyIndex === this._history.length - 1) {\n        this._historyIndex = null;\n        // If the last history item was only added to start undoing, remove it\n        if (historyItem.startUndo) {\n          this._history.pop();\n        }\n      }\n      this.value = historyItem.value.split('');\n      this.selection = historyItem.selection;\n      this._lastOp = historyItem.lastOp;\n      return true;\n    }\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(selection) {\n      this.selection = _objectSpread({}, selection);\n      if (this.selection.start === this.selection.end) {\n        if (this.selection.start < this.pattern.firstEditableIndex) {\n          this.selection.start = this.selection.end = this.pattern.firstEditableIndex;\n          return true;\n        }\n        // Set selection to the first editable, non-placeholder character before the selection\n        // OR to the beginning of the pattern\n        var index = this.selection.start;\n        while (index >= this.pattern.firstEditableIndex) {\n          if (this.pattern.isEditableIndex(index - 1) && this.value[index - 1] !== this.placeholderChar || index === this.pattern.firstEditableIndex) {\n            this.selection.start = this.selection.end = index;\n            break;\n          }\n          index--;\n        }\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return InputMask;\n}();\nInputMask.Pattern = Pattern;\nfunction extend(dest, src) {\n  if (src) {\n    var props = Object.keys(src);\n    for (var i = 0, l = props.length; i < l; i++) {\n      dest[props[i]] = src[props[i]];\n    }\n  }\n  return dest;\n}\nfunction copy(obj) {\n  return extend({}, obj);\n}\nexport default InputMask;","map":{"version":3,"sources":["../../../src/lib/inputmask-core.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DEFAULT_PLACEHOLDER_CHAR, mergeFormatCharacters } from './helpers';\nimport { Pattern } from './Pattern';\nexport class InputMask {\n    constructor(options) {\n        this.emptyValue = '';\n        this._history = [];\n        this._historyIndex = null;\n        this._lastOp = null;\n        this._lastSelection = null;\n        const mergedOptions = {\n            ...{\n                isRevealingMask: false,\n                placeholderChar: DEFAULT_PLACEHOLDER_CHAR,\n                selection: { start: 0, end: 0 },\n                value: ''\n            },\n            ...options\n        };\n        if (!mergedOptions.pattern) {\n            throw new Error('InputMask: you must provide a pattern.');\n        }\n        if (typeof mergedOptions.placeholderChar !== 'string' ||\n            mergedOptions.placeholderChar.length > 1) {\n            throw new Error('InputMask: placeholderChar should be a single character or an empty string.');\n        }\n        this.placeholderChar = mergedOptions.placeholderChar;\n        this.formatCharacters = mergeFormatCharacters(mergedOptions.formatCharacters);\n        this.setPattern(mergedOptions.pattern, {\n            value: mergedOptions.value,\n            selection: mergedOptions.selection,\n            isRevealingMask: mergedOptions.isRevealingMask\n        });\n    }\n    setPattern(patternSource, options) {\n        const merged = {\n            selection: { start: 0, end: 0 },\n            value: '',\n            ...options\n        };\n        this.pattern = new Pattern(patternSource, this.formatCharacters, this.placeholderChar, merged.isRevealingMask);\n        this.setValue(merged.value);\n        this.emptyValue = this.pattern.formatValue([]).join('');\n        this.selection = merged.selection;\n        this._resetHistory();\n    }\n    setValue(value) {\n        if (value == null) {\n            value = '';\n        }\n        this.value = this.pattern.formatValue((value || '').split(''));\n    }\n    _resetHistory() {\n        this._history = [];\n        this._historyIndex = null;\n        this._lastOp = null;\n        this._lastSelection = { ...this.selection };\n    }\n    getValue() {\n        if (this.pattern.isRevealingMask) {\n            this.value = this.pattern.formatValue((this.getRawValue() || '').split(''));\n        }\n        return (this.value || []).join('');\n    }\n    getRawValue() {\n        var rawValue = [];\n        for (var i = 0; i < this.value.length; i++) {\n            if (this.pattern._editableIndices[i] === true) {\n                rawValue.push(this.value[i]);\n            }\n        }\n        return rawValue.join('');\n    }\n    /**\n     * Applies a single character of input based on the current selection.\n     * @param {string} char\n     * @return {boolean} true if a change has been made to value or selection as a\n     *   result of the input, false otherwise.\n     */\n    input(char) {\n        // Ignore additional input if the cursor's at the end of the pattern\n        if (this.selection.start === this.selection.end &&\n            this.selection.start === this.pattern.length) {\n            return false;\n        }\n        const selectionBefore = copy(this.selection);\n        const valueBefore = this.getValue();\n        let inputIndex = this.selection.start;\n        // If the cursor or selection is prior to the first editable character, make\n        // sure any input given is applied to it.\n        if (inputIndex < this.pattern.firstEditableIndex) {\n            inputIndex = this.pattern.firstEditableIndex;\n        }\n        // Bail out or add the character to input\n        if (this.pattern.isEditableIndex(inputIndex)) {\n            if (!this.pattern.isValidAtIndex(char, inputIndex)) {\n                return false;\n            }\n            this.value[inputIndex] = this.pattern.transform(char, inputIndex);\n        }\n        else {\n            console.log('not editable');\n        }\n        // If multiple characters were selected, blank the remainder out based on the\n        // pattern.\n        let end = this.selection.end - 1;\n        while (end > inputIndex) {\n            if (this.pattern.isEditableIndex(end)) {\n                this.value[end] = this.placeholderChar;\n            }\n            end--;\n        }\n        // Advance the cursor to the next character\n        this.selection.start = this.selection.end = inputIndex + 1;\n        // Skip over any subsequent static characters\n        while (this.pattern.length > this.selection.start &&\n            !this.pattern.isEditableIndex(this.selection.start)) {\n            this.selection.start++;\n            this.selection.end++;\n        }\n        // History\n        if (this._historyIndex != null) {\n            // Took more input after undoing, so blow any subsequent history away\n            this._history.splice(this._historyIndex, this._history.length - this._historyIndex);\n            this._historyIndex = null;\n        }\n        if (this._lastOp !== 'input' ||\n            selectionBefore.start !== selectionBefore.end ||\n            (this._lastSelection !== null &&\n                selectionBefore.start !== this._lastSelection.start)) {\n            this._history.push({\n                value: valueBefore,\n                selection: selectionBefore,\n                lastOp: this._lastOp\n            });\n        }\n        this._lastOp = 'input';\n        this._lastSelection = copy(this.selection);\n        return true;\n    }\n    /**\n     * Attempts to delete from the value based on the current cursor position or\n     * selection.\n     * @return {boolean} true if the value or selection changed as the result of\n     *   backspacing, false otherwise.\n     */\n    backspace() {\n        // If the cursor is at the start there's nothing to do\n        if (this.selection.start === 0 && this.selection.end === 0) {\n            return false;\n        }\n        var selectionBefore = { ...this.selection };\n        var valueBefore = this.getValue();\n        // No range selected - work on the character preceding the cursor\n        if (this.selection.start === this.selection.end) {\n            if (this.pattern.isEditableIndex(this.selection.start - 1)) {\n                if (this.pattern.isRevealingMask) {\n                    this.value.splice(this.selection.start - 1);\n                }\n                else {\n                    this.value[this.selection.start - 1] = this.placeholderChar;\n                }\n            }\n            this.selection.start--;\n            this.selection.end--;\n        }\n        // Range selected - delete characters and leave the cursor at the start of the selection\n        else {\n            var end = this.selection.end - 1;\n            while (end >= this.selection.start) {\n                if (this.pattern.isEditableIndex(end)) {\n                    this.value[end] = this.placeholderChar;\n                }\n                end--;\n            }\n            this.selection.end = this.selection.start;\n        }\n        // History\n        if (this._historyIndex != null) {\n            // Took more input after undoing, so blow any subsequent history away\n            this._history.splice(this._historyIndex, this._history.length - this._historyIndex);\n        }\n        if (this._lastOp !== 'backspace' ||\n            selectionBefore.start !== selectionBefore.end ||\n            (this._lastSelection !== null &&\n                selectionBefore.start !== this._lastSelection.start)) {\n            this._history.push({\n                value: valueBefore,\n                selection: selectionBefore,\n                lastOp: this._lastOp\n            });\n        }\n        this._lastOp = 'backspace';\n        this._lastSelection = { ...this.selection };\n        return true;\n    }\n    /**\n     * Attempts to paste a string of input at the current cursor position or over\n     * the top of the current selection.\n     * Invalid content at any position will cause the paste to be rejected, and it\n     * may contain static parts of the mask's pattern.\n     * @param {string} input\n     * @return {boolean} true if the paste was successful, false otherwise.\n     */\n    paste(input) {\n        // This is necessary because we're just calling input() with each character\n        // and rolling back if any were invalid, rather than checking up-front.\n        var initialState = {\n            value: this.value.slice(),\n            selection: { ...this.selection },\n            _lastOp: this._lastOp,\n            _history: this._history.slice(),\n            _historyIndex: this._historyIndex,\n            _lastSelection: { ...this._lastSelection }\n        };\n        // If there are static characters at the start of the pattern and the cursor\n        // or selection is within them, the static characters must match for a valid\n        // paste.\n        if (this.selection.start < this.pattern.firstEditableIndex) {\n            for (var i = 0, l = this.pattern.firstEditableIndex - this.selection.start; i < l; i++) {\n                if (input.charAt(i) !== this.pattern.pattern[i]) {\n                    return false;\n                }\n            }\n            // Continue as if the selection and input started from the editable part of\n            // the pattern.\n            input = input.substring(this.pattern.firstEditableIndex - this.selection.start);\n            this.selection.start = this.pattern.firstEditableIndex;\n        }\n        for (i = 0, l = input.length; i < l && this.selection.start <= this.pattern.lastEditableIndex; i++) {\n            var valid = this.input(input.charAt(i));\n            // Allow static parts of the pattern to appear in pasted input - they will\n            // already have been stepped over by input(), so verify that the value\n            // deemed invalid by input() was the expected static character.\n            if (!valid) {\n                if (this.selection.start > 0) {\n                    // XXX This only allows for one static character to be skipped\n                    var patternIndex = this.selection.start - 1;\n                    if (!this.pattern.isEditableIndex(patternIndex) &&\n                        input.charAt(i) === this.pattern.pattern[patternIndex]) {\n                        continue;\n                    }\n                }\n                Object.keys(initialState).forEach(key => {\n                    // @ts-ignore\n                    this[key] = initialState[key];\n                });\n                return false;\n            }\n        }\n        return true;\n    }\n    undo() {\n        // If there is no history, or nothing more on the history stack, we can't undo\n        if (this._history.length === 0 || this._historyIndex === 0) {\n            return false;\n        }\n        var historyItem;\n        if (this._historyIndex == null) {\n            // Not currently undoing, set up the initial history index\n            this._historyIndex = this._history.length - 1;\n            historyItem = this._history[this._historyIndex];\n            // Add a new history entry if anything has changed since the last one, so we\n            // can redo back to the initial state we started undoing from.\n            var value = this.getValue();\n            if (historyItem.value !== value ||\n                historyItem.selection.start !== this.selection.start ||\n                historyItem.selection.end !== this.selection.end) {\n                this._history.push({\n                    value: value,\n                    selection: { ...this.selection },\n                    lastOp: this._lastOp,\n                    startUndo: true\n                });\n            }\n        }\n        else {\n            historyItem = this._history[--this._historyIndex];\n        }\n        this.value = historyItem.value.split('');\n        this.selection = historyItem.selection;\n        this._lastOp = historyItem.lastOp;\n        return true;\n    }\n    redo() {\n        if (this._history.length === 0 || this._historyIndex == null) {\n            return false;\n        }\n        var historyItem = this._history[++this._historyIndex];\n        // If this is the last history item, we're done redoing\n        if (this._historyIndex === this._history.length - 1) {\n            this._historyIndex = null;\n            // If the last history item was only added to start undoing, remove it\n            if (historyItem.startUndo) {\n                this._history.pop();\n            }\n        }\n        this.value = historyItem.value.split('');\n        this.selection = historyItem.selection;\n        this._lastOp = historyItem.lastOp;\n        return true;\n    }\n    setSelection(selection) {\n        this.selection = { ...selection };\n        if (this.selection.start === this.selection.end) {\n            if (this.selection.start < this.pattern.firstEditableIndex) {\n                this.selection.start = this.selection.end = this.pattern\n                    .firstEditableIndex;\n                return true;\n            }\n            // Set selection to the first editable, non-placeholder character before the selection\n            // OR to the beginning of the pattern\n            var index = this.selection.start;\n            while (index >= this.pattern.firstEditableIndex) {\n                if ((this.pattern.isEditableIndex(index - 1) &&\n                    this.value[index - 1] !== this.placeholderChar) ||\n                    index === this.pattern.firstEditableIndex) {\n                    this.selection.start = this.selection.end = index;\n                    break;\n                }\n                index--;\n            }\n            return true;\n        }\n        return false;\n    }\n}\nInputMask.Pattern = Pattern;\nfunction extend(dest, src) {\n    if (src) {\n        let props = Object.keys(src);\n        for (var i = 0, l = props.length; i < l; i++) {\n            dest[props[i]] = src[props[i]];\n        }\n    }\n    return dest;\n}\nfunction copy(obj) {\n    return extend({}, obj);\n}\nexport default InputMask;\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}