{"ast":null,"code":"var _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/App.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { ConfigProvider } from 'antd';\nimport deDe from 'antd/lib/locale/de_DE';\nimport enUS from 'antd/lib/locale/en_US';\nimport GlobalStyle from './styles/GlobalStyle';\nimport 'typeface-montserrat';\nimport 'typeface-lato';\nimport { AppRouter } from './components/router/AppRouter';\nimport { useLanguage } from './hooks/useLanguage';\nimport { useAutoNightMode } from './hooks/useAutoNightMode';\nimport { usePWA } from './hooks/usePWA';\nimport { useThemeWatcher } from './hooks/useThemeWatcher';\nimport { useAppSelector } from './hooks/reduxHooks';\nimport { themeObject } from './styles/themes/themeVariables';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar App = function App() {\n  _s();\n\n  var _useLanguage = useLanguage(),\n      language = _useLanguage.language;\n\n  var theme = useAppSelector(function (state) {\n    return state.theme.theme;\n  });\n  usePWA();\n  useAutoNightMode();\n  useThemeWatcher();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n      name: \"theme-color\",\n      content: themeObject[theme].primary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ConfigProvider, {\n      locale: language === 'en' ? enUS : deDe,\n      children: /*#__PURE__*/_jsxDEV(AppRouter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(App, \"svfq/laAH7JQz5ixoR5SlIGK9mg=\", false, function () {\n  return [useLanguage, useAppSelector, usePWA, useAutoNightMode, useThemeWatcher];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/App.tsx"],"names":["React","ConfigProvider","deDe","enUS","GlobalStyle","AppRouter","useLanguage","useAutoNightMode","usePWA","useThemeWatcher","useAppSelector","themeObject","App","language","theme","state","primary"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,MAA/B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAO,qBAAP;AACA,OAAO,eAAP;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,WAAT,QAA4B,gCAA5B;;;;AAEA,IAAMC,GAAa,GAAG,SAAhBA,GAAgB,GAAM;AAAA;;AAC1B,qBAAqBN,WAAW,EAAhC;AAAA,MAAQO,QAAR,gBAAQA,QAAR;;AACA,MAAMC,KAAK,GAAGJ,cAAc,CAAC,UAACK,KAAD;AAAA,WAAWA,KAAK,CAACD,KAAN,CAAYA,KAAvB;AAAA,GAAD,CAA5B;AAEAN,EAAAA,MAAM;AAEND,EAAAA,gBAAgB;AAEhBE,EAAAA,eAAe;AAEf,sBACE;AAAA,4BACE;AAAM,MAAA,IAAI,EAAC,aAAX;AAAyB,MAAA,OAAO,EAAEE,WAAW,CAACG,KAAD,CAAX,CAAmBE;AAArD;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE,QAAC,cAAD;AAAgB,MAAA,MAAM,EAAEH,QAAQ,KAAK,IAAb,GAAoBV,IAApB,GAA2BD,IAAnD;AAAA,6BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aAHF;AAAA,kBADF;AASD,CAnBD;;GAAMU,G;UACiBN,W,EACPI,c,EAEdF,M,EAEAD,gB,EAEAE,e;;;KARIG,G;AAqBN,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport { ConfigProvider } from 'antd';\nimport deDe from 'antd/lib/locale/de_DE';\nimport enUS from 'antd/lib/locale/en_US';\nimport GlobalStyle from './styles/GlobalStyle';\nimport 'typeface-montserrat';\nimport 'typeface-lato';\nimport { AppRouter } from './components/router/AppRouter';\nimport { useLanguage } from './hooks/useLanguage';\nimport { useAutoNightMode } from './hooks/useAutoNightMode';\nimport { usePWA } from './hooks/usePWA';\nimport { useThemeWatcher } from './hooks/useThemeWatcher';\nimport { useAppSelector } from './hooks/reduxHooks';\nimport { themeObject } from './styles/themes/themeVariables';\n\nconst App: React.FC = () => {\n  const { language } = useLanguage();\n  const theme = useAppSelector((state) => state.theme.theme);\n\n  usePWA();\n\n  useAutoNightMode();\n\n  useThemeWatcher();\n\n  return (\n    <>\n      <meta name=\"theme-color\" content={themeObject[theme].primary} />\n      <GlobalStyle />\n      <ConfigProvider locale={language === 'en' ? enUS : deDe}>\n        <AppRouter />\n      </ConfigProvider>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}