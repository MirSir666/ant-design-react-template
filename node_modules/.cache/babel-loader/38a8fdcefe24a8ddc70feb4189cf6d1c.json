{"ast":null,"code":"import _slicedToArray from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/workspace/ant-design-react-template/src/components/medical-dashboard/mapCard/MapCard.tsx\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { DashboardCard } from '../DashboardCard/DashboardCard';\nimport { DoctorsMap } from './DoctorsMap/DoctorsMap';\nimport { getDoctorsData } from 'api/doctors.api';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var MapCard = function MapCard() {\n  _s();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    doctors = _useState2[0],\n    setDoctors = _useState2[1];\n  useEffect(function () {\n    getDoctorsData().then(function (res) {\n      return setDoctors(res);\n    });\n  }, []);\n  var theme = useAppSelector(function (state) {\n    return state.theme.theme;\n  });\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  var key = useMemo(function () {\n    return Math.random();\n  }, [theme]); // create new key on every change of theme and remount map component\n\n  return /*#__PURE__*/_jsxDEV(DashboardCard, {\n    padding: 0,\n    children: /*#__PURE__*/_jsxDEV(DoctorsMap, {\n      doctors: doctors\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, _this);\n};\n_s(MapCard, \"A38ajIzPr7fFtp6Sp7M1XMbEV+k=\", false, function () {\n  return [useAppSelector];\n});\n_c = MapCard;\nvar _c;\n$RefreshReg$(_c, \"MapCard\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","DashboardCard","DoctorsMap","getDoctorsData","useAppSelector","MapCard","doctors","setDoctors","then","res","theme","state","key","Math","random"],"sources":["/workspace/ant-design-react-template/src/components/medical-dashboard/mapCard/MapCard.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { DashboardCard } from '../DashboardCard/DashboardCard';\nimport { DoctorsMap } from './DoctorsMap/DoctorsMap';\nimport { Doctor, getDoctorsData } from 'api/doctors.api';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\n\nexport const MapCard: React.FC = () => {\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n\n  useEffect(() => {\n    getDoctorsData().then((res) => setDoctors(res));\n  }, []);\n\n  const theme = useAppSelector((state) => state.theme.theme);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const key = useMemo(() => Math.random(), [theme]); // create new key on every change of theme and remount map component\n\n  return (\n    <DashboardCard padding={0}>\n      <DoctorsMap key={key} doctors={doctors} />\n    </DashboardCard>\n  );\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,aAAa,QAAQ,gCAAgC;AAC9D,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAAiBC,cAAc,QAAQ,iBAAiB;AACxD,SAASC,cAAc,QAAQ,uBAAuB;AAAC;AAEvD,OAAO,IAAMC,OAAiB,GAAG,SAApBA,OAAiB,GAAS;EAAA;EACrC,gBAA8BL,QAAQ,CAAW,EAAE,CAAC;IAAA;IAA7CM,OAAO;IAAEC,UAAU;EAE1BT,SAAS,CAAC,YAAM;IACdK,cAAc,EAAE,CAACK,IAAI,CAAC,UAACC,GAAG;MAAA,OAAKF,UAAU,CAACE,GAAG,CAAC;IAAA,EAAC;EACjD,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,KAAK,GAAGN,cAAc,CAAC,UAACO,KAAK;IAAA,OAAKA,KAAK,CAACD,KAAK,CAACA,KAAK;EAAA,EAAC;;EAE1D;EACA,IAAME,GAAG,GAAGb,OAAO,CAAC;IAAA,OAAMc,IAAI,CAACC,MAAM,EAAE;EAAA,GAAE,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEnD,oBACE,QAAC,aAAa;IAAC,OAAO,EAAE,CAAE;IAAA,uBACxB,QAAC,UAAU;MAAW,OAAO,EAAEJ;IAAQ,GAAtBM,GAAG;MAAA;MAAA;MAAA;IAAA;EAAsB;IAAA;IAAA;IAAA;EAAA,SAC5B;AAEpB,CAAC;AAAC,GAjBWP,OAAiB;EAAA,QAOdD,cAAc;AAAA;AAAA,KAPjBC,OAAiB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}