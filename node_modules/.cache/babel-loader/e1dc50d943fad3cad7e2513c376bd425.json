{"ast":null,"code":"import _toConsumableArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect,useCallback}from'react';import{useTranslation}from'react-i18next';import{Card}from'@app/components/common/Card/Card';import{BaseChart}from'@app/components/common/charts/BaseChart';import Data from'./data.json';import{useAppSelector}from'@app/hooks/reduxHooks';import{themeObject}from'@app/styles/themes/themeVariables';import{jsx as _jsx}from\"react/jsx-runtime\";export var LineRaceChart=function LineRaceChart(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),series=_useState4[0],setSeries=_useState4[1];var rawData=JSON.parse(JSON.stringify(Data));var _useTranslation=useTranslation(),t=_useTranslation.t;var theme=useAppSelector(function(state){return state.theme.theme;});var runAnimation=useCallback(function(){var countries=['Finland','Germany','Iceland','Norway','United Kingdom'];var datasetWithFilters=[];var seriesList=[];countries.forEach(function(country){var datasetId=\"dataset_\".concat(country);datasetWithFilters.push({id:datasetId,fromDatasetId:'dataset_raw',transform:{type:'filter',config:{and:[{dimension:'Year',gte:1950},{dimension:'Country','=':country}]}}});seriesList.push({type:'line',datasetId:datasetId,showSymbol:false,name:country,endLabel:{show:true,formatter:function formatter(params){return\"\".concat(params.value[3],\": \").concat(params.value[0]);},color:themeObject[theme].textMain},labelLayout:{moveOverlap:'shiftY'},emphasis:{focus:'series'},encode:{x:'Year',y:'Income',label:['Country','Income'],itemName:'Year',tooltip:['Income']}});});setData(datasetWithFilters);setSeries(seriesList);},[theme]);useEffect(function(){setTimeout(function(){runAnimation();},200);},[runAnimation]);var option={animationDuration:10000,dataset:[{id:'dataset_raw',source:rawData}].concat(_toConsumableArray(data)),tooltip:{order:'valueDesc',trigger:'axis'},xAxis:{type:'category',nameLocation:'middle'},yAxis:{name:''},grid:{left:65,right:150,top:20,bottom:30},series:series};return/*#__PURE__*/_jsx(Card,{padding:\"0 0 1.875rem\",title:t('charts.lineRace'),children:/*#__PURE__*/_jsx(BaseChart,{option:option,height:\"24rem\"})});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/charts/LineRaceChart/LineRaceChart.tsx"],"names":["React","useState","useEffect","useCallback","useTranslation","Card","BaseChart","Data","useAppSelector","themeObject","LineRaceChart","data","setData","series","setSeries","rawData","JSON","parse","stringify","t","theme","state","runAnimation","countries","datasetWithFilters","seriesList","forEach","country","datasetId","push","id","fromDatasetId","transform","type","config","and","dimension","gte","showSymbol","name","endLabel","show","formatter","params","value","color","textMain","labelLayout","moveOverlap","emphasis","focus","encode","x","y","label","itemName","tooltip","setTimeout","option","animationDuration","dataset","source","order","trigger","xAxis","nameLocation","yAxis","grid","left","right","top","bottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card } from '@app/components/common/Card/Card';\nimport { BaseChart } from '@app/components/common/charts/BaseChart';\nimport Data from './data.json';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { themeObject } from '@app/styles/themes/themeVariables';\n\ninterface DataRow {\n  id: string;\n  fromDatasetId: string;\n  transform: {\n    type: string;\n    config: { and: [{ dimension: string; gte: number }, { dimension: string; '=': string }] };\n  };\n}\n\ninterface SeriesRow {\n  type: string;\n  datasetId: string;\n  showSymbol: boolean;\n  name: string;\n  endLabel: {\n    show: boolean;\n    formatter: (params: { value: string }) => string;\n    color?: string;\n  };\n  labelLayout: {\n    moveOverlap: string;\n  };\n  emphasis: {\n    focus: string;\n  };\n  encode: {\n    x: string;\n    y: string;\n    label: [string, string];\n    itemName: string;\n    tooltip: [string];\n  };\n}\n\nexport const LineRaceChart: React.FC = () => {\n  const [data, setData] = useState<DataRow[]>([]);\n  const [series, setSeries] = useState<SeriesRow[]>([]);\n  const rawData = JSON.parse(JSON.stringify(Data));\n  const { t } = useTranslation();\n\n  const theme = useAppSelector((state) => state.theme.theme);\n\n  const runAnimation = useCallback(() => {\n    const countries = ['Finland', 'Germany', 'Iceland', 'Norway', 'United Kingdom'];\n    const datasetWithFilters: DataRow[] = [];\n    const seriesList: SeriesRow[] = [];\n\n    countries.forEach((country) => {\n      const datasetId = `dataset_${country}`;\n      datasetWithFilters.push({\n        id: datasetId,\n        fromDatasetId: 'dataset_raw',\n        transform: {\n          type: 'filter',\n          config: {\n            and: [\n              { dimension: 'Year', gte: 1950 },\n              { dimension: 'Country', '=': country },\n            ],\n          },\n        },\n      });\n      seriesList.push({\n        type: 'line',\n        datasetId: datasetId,\n        showSymbol: false,\n        name: country,\n        endLabel: {\n          show: true,\n          formatter: (params) => `${params.value[3]}: ${params.value[0]}`,\n          color: themeObject[theme].textMain,\n        },\n        labelLayout: {\n          moveOverlap: 'shiftY',\n        },\n        emphasis: {\n          focus: 'series',\n        },\n        encode: {\n          x: 'Year',\n          y: 'Income',\n          label: ['Country', 'Income'],\n          itemName: 'Year',\n          tooltip: ['Income'],\n        },\n      });\n    });\n    setData(datasetWithFilters);\n    setSeries(seriesList);\n  }, [theme]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      runAnimation();\n    }, 200);\n  }, [runAnimation]);\n\n  const option = {\n    animationDuration: 10000,\n    dataset: [\n      {\n        id: 'dataset_raw',\n        source: rawData,\n      },\n      ...data,\n    ],\n    tooltip: {\n      order: 'valueDesc',\n      trigger: 'axis',\n    },\n    xAxis: {\n      type: 'category',\n      nameLocation: 'middle',\n    },\n    yAxis: {\n      name: '',\n    },\n    grid: {\n      left: 65,\n      right: 150,\n      top: 20,\n      bottom: 30,\n    },\n    series: series,\n  };\n\n  return (\n    <Card padding=\"0 0 1.875rem\" title={t('charts.lineRace')}>\n      <BaseChart option={option} height=\"24rem\" />\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}