{"ast":null,"code":"import _objectSpread from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"option\", \"width\", \"height\", \"onEvents\", \"style\"];\n\nvar _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/components/common/charts/BaseChart.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactECharts from 'echarts-for-react';\nimport { Loading } from '../Loading';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { themeObject } from '@app/styles/themes/themeVariables';\nimport { BORDER_RADIUS } from '@app/styles/themes/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var getChartColors = function getChartColors(theme) {\n  return [theme.chartColor1, theme.chartColor2, theme.chartColor3, theme.chartColor4, theme.chartColor5];\n};\nexport var getDefaultTooltipStyles = function getDefaultTooltipStyles(theme) {\n  return {\n    borderColor: theme.chartColor1,\n    borderWidth: 2,\n    borderRadius: Number.parseInt(BORDER_RADIUS),\n    textStyle: {\n      fontWeight: 600,\n      fontSize: 16,\n      color: theme.chartColor1\n    }\n  };\n};\nexport var BaseChart = function BaseChart(_ref) {\n  _s();\n\n  var option = _ref.option,\n      width = _ref.width,\n      height = _ref.height,\n      onEvents = _ref.onEvents,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var theme = useAppSelector(function (state) {\n    return state.theme.theme;\n  });\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var chartHeight = height || '400px';\n  var defaultOption = {\n    color: getChartColors(themeObject[theme])\n  };\n  useEffect(function () {\n    // TODO FIXME workaround to make sure that parent container is initialized before the chart\n    setTimeout(function () {\n      setLoading(false);\n    }, 1000 / 2);\n  }, []);\n  return loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, _this) : /*#__PURE__*/_jsxDEV(ReactECharts, _objectSpread(_objectSpread({}, props), {}, {\n    option: _objectSpread(_objectSpread({}, defaultOption), option),\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      height: chartHeight,\n      minHeight: height === '100%' ? 400 : 'unset',\n      width: width,\n      zIndex: 0\n    }),\n    onEvents: onEvents\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(BaseChart, \"rt20TtK6rBcQFnuSn3XoGNk6XxE=\", false, function () {\n  return [useAppSelector];\n});\n\n_c = BaseChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BaseChart\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/common/charts/BaseChart.tsx"],"names":["React","useEffect","useState","ReactECharts","Loading","useAppSelector","themeObject","BORDER_RADIUS","getChartColors","theme","chartColor1","chartColor2","chartColor3","chartColor4","chartColor5","getDefaultTooltipStyles","borderColor","borderWidth","borderRadius","Number","parseInt","textStyle","fontWeight","fontSize","color","BaseChart","option","width","height","onEvents","style","props","state","loading","setLoading","chartHeight","defaultOption","setTimeout","minHeight","zIndex"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AAEA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,WAAT,QAA4B,mCAA5B;AAEA,SAASC,aAAT,QAA8B,8BAA9B;;AAuBA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SAA6B,CACzDA,KAAK,CAACC,WADmD,EAEzDD,KAAK,CAACE,WAFmD,EAGzDF,KAAK,CAACG,WAHmD,EAIzDH,KAAK,CAACI,WAJmD,EAKzDJ,KAAK,CAACK,WALmD,CAA7B;AAAA,CAAvB;AAQP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACN,KAAD;AAAA,SAA0C;AAC/EO,IAAAA,WAAW,EAAEP,KAAK,CAACC,WAD4D;AAE/EO,IAAAA,WAAW,EAAE,CAFkE;AAG/EC,IAAAA,YAAY,EAAEC,MAAM,CAACC,QAAP,CAAgBb,aAAhB,CAHiE;AAI/Ec,IAAAA,SAAS,EAAE;AACTC,MAAAA,UAAU,EAAE,GADH;AAETC,MAAAA,QAAQ,EAAE,EAFD;AAGTC,MAAAA,KAAK,EAAEf,KAAK,CAACC;AAHJ;AAJoE,GAA1C;AAAA,CAAhC;AAWP,OAAO,IAAMe,SAAmC,GAAG,SAAtCA,SAAsC,OAA0D;AAAA;;AAAA,MAAvDC,MAAuD,QAAvDA,MAAuD;AAAA,MAA/CC,KAA+C,QAA/CA,KAA+C;AAAA,MAAxCC,MAAwC,QAAxCA,MAAwC;AAAA,MAAhCC,QAAgC,QAAhCA,QAAgC;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAZC,KAAY;;AAC3G,MAAMtB,KAAK,GAAGJ,cAAc,CAAC,UAAC2B,KAAD;AAAA,WAAWA,KAAK,CAACvB,KAAN,CAAYA,KAAvB;AAAA,GAAD,CAA5B;;AACA,kBAA8BP,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAO+B,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,WAAW,GAAGP,MAAM,IAAI,OAA9B;AAEA,MAAMQ,aAAa,GAAG;AACpBZ,IAAAA,KAAK,EAAEhB,cAAc,CAACF,WAAW,CAACG,KAAD,CAAZ;AADD,GAAtB;AAIAR,EAAAA,SAAS,CAAC,YAAM;AACd;AACAoC,IAAAA,UAAU,CAAC,YAAM;AACfH,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAFS,EAEP,OAAO,CAFA,CAAV;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,SAAOD,OAAO,gBACZ,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,WADY,gBAGZ,QAAC,YAAD,kCACMF,KADN;AAEE,IAAA,MAAM,kCAAOK,aAAP,GAAyBV,MAAzB,CAFR;AAGE,IAAA,KAAK,kCAAOI,KAAP;AAAcF,MAAAA,MAAM,EAAEO,WAAtB;AAAmCG,MAAAA,SAAS,EAAEV,MAAM,KAAK,MAAX,GAAoB,GAApB,GAA0B,OAAxE;AAAiFD,MAAAA,KAAK,EAALA,KAAjF;AAAwFY,MAAAA,MAAM,EAAE;AAAhG,MAHP;AAIE,IAAA,QAAQ,EAAEV;AAJZ;AAAA;AAAA;AAAA;AAAA,WAHF;AAUD,CA3BM;;GAAMJ,S;UACGpB,c;;;KADHoB,S","sourcesContent":["import React, { CSSProperties, useEffect, useState } from 'react';\nimport { EChartsOption } from 'echarts-for-react';\nimport ReactECharts from 'echarts-for-react';\nimport { Loading } from '../Loading';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\nimport { themeObject } from '@app/styles/themes/themeVariables';\nimport { ITheme } from '@app/styles/themes/types';\nimport { BORDER_RADIUS } from '@app/styles/themes/constants';\n\nexport interface BaseChartProps {\n  option?: EChartsOption;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onEvents?: Record<string, (e: any) => void>;\n  width?: string | number;\n  height?: string | number;\n  style?: CSSProperties;\n  classname?: string;\n}\n\ninterface DefaultTooltipStyles {\n  borderColor: string;\n  borderWidth: number;\n  borderRadius: number;\n  textStyle: {\n    fontWeight: number;\n    fontSize: number;\n    color: string;\n  };\n}\n\nexport const getChartColors = (theme: ITheme): string[] => [\n  theme.chartColor1,\n  theme.chartColor2,\n  theme.chartColor3,\n  theme.chartColor4,\n  theme.chartColor5,\n];\n\nexport const getDefaultTooltipStyles = (theme: ITheme): DefaultTooltipStyles => ({\n  borderColor: theme.chartColor1,\n  borderWidth: 2,\n  borderRadius: Number.parseInt(BORDER_RADIUS),\n  textStyle: {\n    fontWeight: 600,\n    fontSize: 16,\n    color: theme.chartColor1,\n  },\n});\n\nexport const BaseChart: React.FC<BaseChartProps> = ({ option, width, height, onEvents, style, ...props }) => {\n  const theme = useAppSelector((state) => state.theme.theme);\n  const [loading, setLoading] = useState(true);\n\n  const chartHeight = height || '400px';\n\n  const defaultOption = {\n    color: getChartColors(themeObject[theme]),\n  };\n\n  useEffect(() => {\n    // TODO FIXME workaround to make sure that parent container is initialized before the chart\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000 / 2);\n  }, []);\n\n  return loading ? (\n    <Loading />\n  ) : (\n    <ReactECharts\n      {...props}\n      option={{ ...defaultOption, ...option }}\n      style={{ ...style, height: chartHeight, minHeight: height === '100%' ? 400 : 'unset', width, zIndex: 0 }}\n      onEvents={onEvents}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}