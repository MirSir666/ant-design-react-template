{"ast":null,"code":"import _slicedToArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{useTranslation}from'react-i18next';import{useResponsive}from'hooks/useResponsive';import*as S from'./BloodScreeningTable.styles';import{flags,results}from'@app/constants/bloodTestResults';import{jsx as _jsx}from\"react/jsx-runtime\";export var BloodScreeningTable=function BloodScreeningTable(_ref){var activeItem=_ref.activeItem,setActiveItem=_ref.setActiveItem;var _useResponsive=useResponsive(),isTablet=_useResponsive.isTablet,isDesktop=_useResponsive.isDesktop;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useState=useState(results),_useState2=_slicedToArray(_useState,1),dataSource=_useState2[0];var columns=[{title:t('medical-dashboard.bloodScreening.test'),dataIndex:'test',width:'30%',render:function render(test,_ref2){var key=_ref2.key;return/*#__PURE__*/_jsx(S.Text,{$isActive:activeItem.key===key,children:test});}},{title:t('medical-dashboard.bloodScreening.result'),dataIndex:'result',render:function render(result,_ref3){var key=_ref3.key;return/*#__PURE__*/_jsx(S.Text,{$isActive:activeItem.key===key,children:result});}},{title:t('medical-dashboard.bloodScreening.units'),dataIndex:'units',render:function render(units,_ref4){var key=_ref4.key;return/*#__PURE__*/_jsx(S.Text,{$isActive:activeItem.key===key,children:units});}},{title:t('medical-dashboard.bloodScreening.flag'),dataIndex:'flag',render:function render(flag,_ref5){var key=_ref5.key;return/*#__PURE__*/_jsx(S.Flag,{$isNorm:flag===0,$isActive:activeItem.key===key,children:t(flags[flag])});}}];return/*#__PURE__*/_jsx(S.Table,{size:'small',pagination:false,columns:columns,dataSource:dataSource,scroll:{y:isDesktop?300:isTablet?620:400},onRow:function onRow(record){return{onClick:function onClick(){return setActiveItem(record);}};}});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/bloodScreeningCard/BloodScreeningTable/BloodScreeningTable.tsx"],"names":["React","useState","useTranslation","useResponsive","S","flags","results","BloodScreeningTable","activeItem","setActiveItem","isTablet","isDesktop","t","dataSource","columns","title","dataIndex","width","render","test","key","result","units","flag","y","record","onClick"],"mappings":"wKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,OAASC,aAAT,KAA8B,qBAA9B,CACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,8BAAnB,CACA,OAA0BC,KAA1B,CAAiCC,OAAjC,KAAgD,iCAAhD,C,2CAQA,MAAO,IAAMC,CAAAA,mBAAuD,CAAG,QAA1DA,CAAAA,mBAA0D,MAAmC,IAAhCC,CAAAA,UAAgC,MAAhCA,UAAgC,CAApBC,aAAoB,MAApBA,aAAoB,CACxG,mBAAgCN,aAAa,EAA7C,CAAQO,QAAR,gBAAQA,QAAR,CAAkBC,SAAlB,gBAAkBA,SAAlB,CACA,oBAAcT,cAAc,EAA5B,CAAQU,CAAR,iBAAQA,CAAR,CACA,cAAqBX,QAAQ,CAAoBK,OAApB,CAA7B,wCAAOO,UAAP,eAEA,GAAMC,CAAAA,OAAqC,CAAG,CAC5C,CACEC,KAAK,CAAEH,CAAC,CAAC,uCAAD,CADV,CAEEI,SAAS,CAAE,MAFb,CAGEC,KAAK,CAAE,KAHT,CAIEC,MAAM,CAAE,gBAACC,IAAD,WAAiBC,CAAAA,GAAjB,OAAiBA,GAAjB,oBAA2B,KAAC,CAAD,CAAG,IAAH,EAAQ,SAAS,CAAEZ,UAAU,CAACY,GAAX,GAAmBA,GAAtC,UAA4CD,IAA5C,EAA3B,EAJV,CAD4C,CAO5C,CACEJ,KAAK,CAAEH,CAAC,CAAC,yCAAD,CADV,CAEEI,SAAS,CAAE,QAFb,CAGEE,MAAM,CAAE,gBAACG,MAAD,WAAmBD,CAAAA,GAAnB,OAAmBA,GAAnB,oBAA6B,KAAC,CAAD,CAAG,IAAH,EAAQ,SAAS,CAAEZ,UAAU,CAACY,GAAX,GAAmBA,GAAtC,UAA4CC,MAA5C,EAA7B,EAHV,CAP4C,CAY5C,CACEN,KAAK,CAAEH,CAAC,CAAC,wCAAD,CADV,CAEEI,SAAS,CAAE,OAFb,CAGEE,MAAM,CAAE,gBAACI,KAAD,WAAUF,CAAAA,GAAV,OAAUA,GAAV,oBAAoB,KAAC,CAAD,CAAG,IAAH,EAAQ,SAAS,CAAEZ,UAAU,CAACY,GAAX,GAAmBA,GAAtC,UAA4CE,KAA5C,EAApB,EAHV,CAZ4C,CAiB5C,CACEP,KAAK,CAAEH,CAAC,CAAC,uCAAD,CADV,CAEEI,SAAS,CAAE,MAFb,CAGEE,MAAM,CAAE,gBAACK,IAAD,WAASH,CAAAA,GAAT,OAASA,GAAT,oBACN,KAAC,CAAD,CAAG,IAAH,EAAQ,OAAO,CAAEG,IAAI,GAAK,CAA1B,CAA6B,SAAS,CAAEf,UAAU,CAACY,GAAX,GAAmBA,GAA3D,UACGR,CAAC,CAACP,KAAK,CAACkB,IAAD,CAAN,CADJ,EADM,EAHV,CAjB4C,CAA9C,CA4BA,mBACE,KAAC,CAAD,CAAG,KAAH,EACE,IAAI,CAAE,OADR,CAEE,UAAU,CAAE,KAFd,CAGE,OAAO,CAAET,OAHX,CAIE,UAAU,CAAED,UAJd,CAKE,MAAM,CAAE,CAAEW,CAAC,CAAEb,SAAS,CAAG,GAAH,CAASD,QAAQ,CAAG,GAAH,CAAS,GAAxC,CALV,CAME,KAAK,CAAE,eAACe,MAAD,CAAY,CACjB,MAAO,CACLC,OAAO,CAAE,yBAAMjB,CAAAA,aAAa,CAACgB,MAAD,CAAnB,EADJ,CAAP,CAGD,CAVH,EADF,CAcD,CA/CM","sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useResponsive } from 'hooks/useResponsive';\nimport * as S from './BloodScreeningTable.styles';\nimport { BloodTestResult, flags, results } from '@app/constants/bloodTestResults';\nimport { ColumnsType } from 'antd/es/table';\n\ninterface BloodScreeningTableProps {\n  activeItem: BloodTestResult;\n  setActiveItem: (item: BloodTestResult) => void;\n}\n\nexport const BloodScreeningTable: React.FC<BloodScreeningTableProps> = ({ activeItem, setActiveItem }) => {\n  const { isTablet, isDesktop } = useResponsive();\n  const { t } = useTranslation();\n  const [dataSource] = useState<BloodTestResult[]>(results);\n\n  const columns: ColumnsType<BloodTestResult> = [\n    {\n      title: t('medical-dashboard.bloodScreening.test'),\n      dataIndex: 'test',\n      width: '30%',\n      render: (test: string, { key }) => <S.Text $isActive={activeItem.key === key}>{test}</S.Text>,\n    },\n    {\n      title: t('medical-dashboard.bloodScreening.result'),\n      dataIndex: 'result',\n      render: (result: number, { key }) => <S.Text $isActive={activeItem.key === key}>{result}</S.Text>,\n    },\n    {\n      title: t('medical-dashboard.bloodScreening.units'),\n      dataIndex: 'units',\n      render: (units, { key }) => <S.Text $isActive={activeItem.key === key}>{units}</S.Text>,\n    },\n    {\n      title: t('medical-dashboard.bloodScreening.flag'),\n      dataIndex: 'flag',\n      render: (flag, { key }) => (\n        <S.Flag $isNorm={flag === 0} $isActive={activeItem.key === key}>\n          {t(flags[flag])}\n        </S.Flag>\n      ),\n    },\n  ];\n\n  return (\n    <S.Table\n      size={'small'}\n      pagination={false}\n      columns={columns}\n      dataSource={dataSource}\n      scroll={{ y: isDesktop ? 300 : isTablet ? 620 : 400 }}\n      onRow={(record) => {\n        return {\n          onClick: () => setActiveItem(record),\n        };\n      }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}