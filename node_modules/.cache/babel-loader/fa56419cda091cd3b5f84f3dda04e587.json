{"ast":null,"code":"import _objectSpread from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/workspace/ant-design-react-template/src/components/medical-dashboard/screeningsCard/ScreeningsCard/ScreeningsCard.tsx\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ScreeningsHeader } from '../ScreeningsHeader/ScreeningsHeader';\nimport { ScreeningsFriends } from '../screeningsFriends/ScreeningsFriends/ScreeningsFriends';\nimport { ScreeningsChart } from '../ScreeningsChart/ScreeningsChart';\nimport { getScreenings } from '@app/api/screenings.api';\nimport { Dates } from '@app/constants/Dates';\nimport { getStatistics } from '@app/api/statistics.api';\nimport { getSmoothRandom } from '@app/utils/utils';\nimport { getDoctorsData } from '@app/api/doctors.api';\nimport * as S from './ScreeningsCard.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var ScreeningsCard = function ScreeningsCard() {\n  _s();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    doctors = _useState2[0],\n    setDoctors = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    statistics = _useState4[0],\n    setStatistics = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    screenings = _useState6[0],\n    setScreenings = _useState6[1];\n  var _useState7 = useState({\n      firstUser: 1,\n      secondUser: 3,\n      month: Dates.getToday().get('month'),\n      statistic: 2\n    }),\n    _useState8 = _slicedToArray(_useState7, 2),\n    currentStatistics = _useState8[0],\n    setCurrentStatistics = _useState8[1];\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isFirstClick = _useState10[0],\n    setFirstClick = _useState10[1];\n  useEffect(function () {\n    getScreenings().then(function (res) {\n      return setScreenings(res);\n    });\n  }, []);\n  useEffect(function () {\n    getStatistics().then(function (res) {\n      return setStatistics(res);\n    });\n  }, []);\n  useEffect(function () {\n    getDoctorsData().then(function (res) {\n      return setDoctors(res);\n    });\n  }, []);\n  var months = useMemo(function () {\n    return Array.from({\n      length: 12\n    }, function (_, i) {\n      return i;\n    });\n  }, []);\n  var screeningsWithDoctors = useMemo(function () {\n    return screenings.map(function (screening) {\n      var currentDoctor = doctors.find(function (doctor) {\n        return doctor.id === screening.id;\n      });\n      return _objectSpread(_objectSpread({}, screening), {}, {\n        name: (currentDoctor === null || currentDoctor === void 0 ? void 0 : currentDoctor.name) || '',\n        imgUrl: (currentDoctor === null || currentDoctor === void 0 ? void 0 : currentDoctor.imgUrl) || ''\n      });\n    });\n  }, [doctors, screenings]);\n  var generateScreeningValue = function generateScreeningValue() {\n    var randomValue = getSmoothRandom(3, 0.7) * 100;\n    return (randomValue * Math.abs(Math.sin(randomValue))).toFixed();\n  };\n  var values = useMemo(function () {\n    return months.map(function (month) {\n      return {\n        monthId: month,\n        data: statistics.map(function (statistic) {\n          return {\n            statisticId: statistic.id,\n            data: screenings.map(function (screening) {\n              return {\n                id: screening.id,\n                data: Array.from({\n                  length: 16\n                }, function (_, index) {\n                  return {\n                    day: index * 2,\n                    value: generateScreeningValue()\n                  };\n                })\n              };\n            })\n          };\n        })\n      };\n    });\n  }, [months, screenings, statistics]);\n  var currentValues = useMemo(function () {\n    var _values$find, _values$find$data$fin;\n    return (_values$find = values.find(function (month) {\n      return month.monthId === currentStatistics.month;\n    })) === null || _values$find === void 0 ? void 0 : (_values$find$data$fin = _values$find.data.find(function (statistic) {\n      return statistic.statisticId === currentStatistics.statistic;\n    })) === null || _values$find$data$fin === void 0 ? void 0 : _values$find$data$fin.data;\n  }, [currentStatistics.month, currentStatistics.statistic, values]);\n  var getUserStatistic = useCallback(function (isFirstUser) {\n    var user = isFirstUser ? 'firstUser' : 'secondUser';\n    return currentValues && {\n      name: screeningsWithDoctors[currentStatistics[user]].name,\n      data: currentValues[currentStatistics[user]].data\n    };\n  }, [currentStatistics, currentValues, screeningsWithDoctors]);\n  return /*#__PURE__*/_jsxDEV(S.ScreeningsCard, {\n    title: /*#__PURE__*/_jsxDEV(ScreeningsHeader, {\n      currentStatistics: currentStatistics,\n      setCurrentStatistics: setCurrentStatistics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 14\n    }, _this),\n    padding: 0,\n    children: [/*#__PURE__*/_jsxDEV(ScreeningsFriends, {\n      screenings: screeningsWithDoctors,\n      currentStatistics: currentStatistics,\n      setCurrentStatistics: setCurrentStatistics,\n      isFirstClick: isFirstClick,\n      setFirstClick: setFirstClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ScreeningsChart, {\n      firstUser: getUserStatistic(true),\n      secondUser: getUserStatistic(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, _this);\n};\n_s(ScreeningsCard, \"R83C29DCdCGVXgLE3wuQQr9QrRQ=\");\n_c = ScreeningsCard;\nvar _c;\n$RefreshReg$(_c, \"ScreeningsCard\");","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","ScreeningsHeader","ScreeningsFriends","ScreeningsChart","getScreenings","Dates","getStatistics","getSmoothRandom","getDoctorsData","S","ScreeningsCard","doctors","setDoctors","statistics","setStatistics","screenings","setScreenings","firstUser","secondUser","month","getToday","get","statistic","currentStatistics","setCurrentStatistics","isFirstClick","setFirstClick","then","res","months","Array","from","length","_","i","screeningsWithDoctors","map","screening","currentDoctor","find","doctor","id","name","imgUrl","generateScreeningValue","randomValue","Math","abs","sin","toFixed","values","monthId","data","statisticId","index","day","value","currentValues","getUserStatistic","isFirstUser","user"],"sources":["/workspace/ant-design-react-template/src/components/medical-dashboard/screeningsCard/ScreeningsCard/ScreeningsCard.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ScreeningsHeader } from '../ScreeningsHeader/ScreeningsHeader';\nimport { ScreeningsFriends } from '../screeningsFriends/ScreeningsFriends/ScreeningsFriends';\nimport { ScreeningsChart } from '../ScreeningsChart/ScreeningsChart';\nimport { getScreenings, Screening } from '@app/api/screenings.api';\nimport { Dates } from '@app/constants/Dates';\nimport { getStatistics, Statistic } from '@app/api/statistics.api';\nimport { getSmoothRandom } from '@app/utils/utils';\nimport { Doctor, getDoctorsData } from '@app/api/doctors.api';\nimport * as S from './ScreeningsCard.styles';\n\nexport interface CurrentStatisticsState {\n  firstUser: number;\n  secondUser: number;\n  month: number;\n  statistic: number;\n}\n\nexport type ScreeningWithDoctors = Screening & { name: string; imgUrl: string };\n\nexport const ScreeningsCard: React.FC = () => {\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n  const [statistics, setStatistics] = useState<Statistic[]>([]);\n  const [screenings, setScreenings] = useState<Screening[]>([]);\n  const [currentStatistics, setCurrentStatistics] = useState<CurrentStatisticsState>({\n    firstUser: 1,\n    secondUser: 3,\n    month: Dates.getToday().get('month'),\n    statistic: 2,\n  });\n  const [isFirstClick, setFirstClick] = useState(true);\n\n  useEffect(() => {\n    getScreenings().then((res) => setScreenings(res));\n  }, []);\n\n  useEffect(() => {\n    getStatistics().then((res) => setStatistics(res));\n  }, []);\n\n  useEffect(() => {\n    getDoctorsData().then((res) => setDoctors(res));\n  }, []);\n\n  const months = useMemo(() => Array.from({ length: 12 }, (_, i) => i), []);\n\n  const screeningsWithDoctors = useMemo((): ScreeningWithDoctors[] => {\n    return screenings.map((screening) => {\n      const currentDoctor = doctors.find((doctor) => doctor.id === screening.id);\n\n      return {\n        ...screening,\n        name: currentDoctor?.name || '',\n        imgUrl: currentDoctor?.imgUrl || '',\n      };\n    });\n  }, [doctors, screenings]);\n\n  const generateScreeningValue = () => {\n    const randomValue = getSmoothRandom(3, 0.7) * 100;\n    return (randomValue * Math.abs(Math.sin(randomValue))).toFixed();\n  };\n\n  const values = useMemo(\n    () =>\n      months.map((month) => ({\n        monthId: month,\n        data: statistics.map((statistic) => ({\n          statisticId: statistic.id,\n          data: screenings.map((screening) => ({\n            id: screening.id,\n            data: Array.from({ length: 16 }, (_, index) => ({\n              day: index * 2,\n              value: generateScreeningValue(),\n            })),\n          })),\n        })),\n      })),\n    [months, screenings, statistics],\n  );\n\n  const currentValues = useMemo(\n    () =>\n      values\n        .find((month) => month.monthId === currentStatistics.month)\n        ?.data.find((statistic) => statistic.statisticId === currentStatistics.statistic)?.data,\n    [currentStatistics.month, currentStatistics.statistic, values],\n  );\n\n  const getUserStatistic = useCallback(\n    (isFirstUser: boolean) => {\n      const user = isFirstUser ? 'firstUser' : 'secondUser';\n\n      return (\n        currentValues && {\n          name: screeningsWithDoctors[currentStatistics[user]].name,\n          data: currentValues[currentStatistics[user]].data,\n        }\n      );\n    },\n    [currentStatistics, currentValues, screeningsWithDoctors],\n  );\n\n  return (\n    <S.ScreeningsCard\n      title={<ScreeningsHeader currentStatistics={currentStatistics} setCurrentStatistics={setCurrentStatistics} />}\n      padding={0}\n    >\n      <ScreeningsFriends\n        screenings={screeningsWithDoctors}\n        currentStatistics={currentStatistics}\n        setCurrentStatistics={setCurrentStatistics}\n        isFirstClick={isFirstClick}\n        setFirstClick={setFirstClick}\n      />\n      <ScreeningsChart firstUser={getUserStatistic(true)} secondUser={getUserStatistic(false)} />\n    </S.ScreeningsCard>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}