{"ast":null,"code":"import _slicedToArray from \"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/workspace/lightence-ant-design-react-template/src/components/common/RequireFullscreen/RequireFullscreen.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var RequireFullscreen = function RequireFullscreen(_ref) {\n  _s();\n\n  var component = _ref.component,\n      children = _ref.children;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFullscreen = _useState2[0],\n      setFullscreen = _useState2[1];\n\n  var handleFullScreen = function handleFullScreen() {\n    if (component !== null && component !== void 0 && component.current) {\n      isFullscreen ? document.exitFullscreen() : component.current.requestFullscreen();\n    }\n  };\n\n  useEffect(function () {\n    var onFullScreenChange = function onFullScreenChange() {\n      setFullscreen(document.fullscreenElement !== null);\n    };\n\n    document.addEventListener('fullscreenchange', onFullScreenChange);\n    document.addEventListener('mozfullscreenchange', onFullScreenChange);\n    document.addEventListener('webkitfullscreenchange', onFullScreenChange);\n    document.addEventListener('msfullscreenchange', onFullScreenChange);\n    return function () {\n      document.removeEventListener('fullscreenchange', onFullScreenChange);\n      document.removeEventListener('mozfullscreenchange', onFullScreenChange);\n      document.removeEventListener('webkitfullscreenchange', onFullScreenChange);\n      document.removeEventListener('msfullscreenchange', onFullScreenChange);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: handleFullScreen,\n    children: children(isFullscreen)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(RequireFullscreen, \"17vbGqjTz15ZpZ91iuyZyFT4CDI=\");\n\n_c = RequireFullscreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"RequireFullscreen\");","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/common/RequireFullscreen/RequireFullscreen.tsx"],"names":["React","useEffect","useState","RequireFullscreen","component","children","isFullscreen","setFullscreen","handleFullScreen","current","document","exitFullscreen","requestFullscreen","onFullScreenChange","fullscreenElement","addEventListener","removeEventListener"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAOA,OAAO,IAAMC,iBAAmD,GAAG,SAAtDA,iBAAsD,OAA6B;AAAA;;AAAA,MAA1BC,SAA0B,QAA1BA,SAA0B;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAC9F,kBAAsCH,QAAQ,CAAC,KAAD,CAA9C;AAAA;AAAA,MAAOI,YAAP;AAAA,MAAqBC,aAArB;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,QAAIJ,SAAJ,aAAIA,SAAJ,eAAIA,SAAS,CAAEK,OAAf,EAAwB;AACtBH,MAAAA,YAAY,GAAGI,QAAQ,CAACC,cAAT,EAAH,GAA+BP,SAAS,CAACK,OAAV,CAAkBG,iBAAlB,EAA3C;AACD;AACF,GAJD;;AAMAX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMY,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BN,MAAAA,aAAa,CAACG,QAAQ,CAACI,iBAAT,KAA+B,IAAhC,CAAb;AACD,KAFD;;AAIAJ,IAAAA,QAAQ,CAACK,gBAAT,CAA0B,kBAA1B,EAA8CF,kBAA9C;AACAH,IAAAA,QAAQ,CAACK,gBAAT,CAA0B,qBAA1B,EAAiDF,kBAAjD;AACAH,IAAAA,QAAQ,CAACK,gBAAT,CAA0B,wBAA1B,EAAoDF,kBAApD;AACAH,IAAAA,QAAQ,CAACK,gBAAT,CAA0B,oBAA1B,EAAgDF,kBAAhD;AAEA,WAAO,YAAM;AACXH,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,kBAA7B,EAAiDH,kBAAjD;AACAH,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,qBAA7B,EAAoDH,kBAApD;AACAH,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,wBAA7B,EAAuDH,kBAAvD;AACAH,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,oBAA7B,EAAmDH,kBAAnD;AACD,KALD;AAMD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBAAO;AAAK,IAAA,OAAO,EAAEL,gBAAd;AAAA,cAAiCH,QAAQ,CAACC,YAAD;AAAzC;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CA5BM;;GAAMH,iB;;KAAAA,iB","sourcesContent":["import React, { useEffect, useState } from 'react';\n\ninterface RequireFullscreenProps {\n  component: React.RefObject<HTMLElement>;\n  children: (isFullscreen: boolean) => React.ReactNode;\n}\n\nexport const RequireFullscreen: React.FC<RequireFullscreenProps> = ({ component, children }) => {\n  const [isFullscreen, setFullscreen] = useState(false);\n\n  const handleFullScreen = () => {\n    if (component?.current) {\n      isFullscreen ? document.exitFullscreen() : component.current.requestFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    const onFullScreenChange = () => {\n      setFullscreen(document.fullscreenElement !== null);\n    };\n\n    document.addEventListener('fullscreenchange', onFullScreenChange);\n    document.addEventListener('mozfullscreenchange', onFullScreenChange);\n    document.addEventListener('webkitfullscreenchange', onFullScreenChange);\n    document.addEventListener('msfullscreenchange', onFullScreenChange);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', onFullScreenChange);\n      document.removeEventListener('mozfullscreenchange', onFullScreenChange);\n      document.removeEventListener('webkitfullscreenchange', onFullScreenChange);\n      document.removeEventListener('msfullscreenchange', onFullScreenChange);\n    };\n  }, []);\n\n  return <div onClick={handleFullScreen}>{children(isFullscreen)}</div>;\n};\n"]},"metadata":{},"sourceType":"module"}