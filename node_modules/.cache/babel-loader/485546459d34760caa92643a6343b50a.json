{"ast":null,"code":"import _slicedToArray from \"/workspace/ant-design-react-template/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/workspace/ant-design-react-template/src/components/medical-dashboard/bloodScreeningCard/BloodScreeningTable/BloodScreeningTable.tsx\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useResponsive } from 'hooks/useResponsive';\nimport * as S from './BloodScreeningTable.styles';\nimport { flags, results } from '@app/constants/bloodTestResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var BloodScreeningTable = function BloodScreeningTable(_ref) {\n  _s();\n  var activeItem = _ref.activeItem,\n    setActiveItem = _ref.setActiveItem;\n  var _useResponsive = useResponsive(),\n    isTablet = _useResponsive.isTablet,\n    isDesktop = _useResponsive.isDesktop;\n  var _useTranslation = useTranslation(),\n    t = _useTranslation.t;\n  var _useState = useState(results),\n    _useState2 = _slicedToArray(_useState, 1),\n    dataSource = _useState2[0];\n  var columns = [{\n    title: t('medical-dashboard.bloodScreening.test'),\n    dataIndex: 'test',\n    width: '30%',\n    render: function render(test, _ref2) {\n      var key = _ref2.key;\n      return /*#__PURE__*/_jsxDEV(S.Text, {\n        $isActive: activeItem.key === key,\n        children: test\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 42\n      }, _this);\n    }\n  }, {\n    title: t('medical-dashboard.bloodScreening.result'),\n    dataIndex: 'result',\n    render: function render(result, _ref3) {\n      var key = _ref3.key;\n      return /*#__PURE__*/_jsxDEV(S.Text, {\n        $isActive: activeItem.key === key,\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 44\n      }, _this);\n    }\n  }, {\n    title: t('medical-dashboard.bloodScreening.units'),\n    dataIndex: 'units',\n    render: function render(units, _ref4) {\n      var key = _ref4.key;\n      return /*#__PURE__*/_jsxDEV(S.Text, {\n        $isActive: activeItem.key === key,\n        children: units\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 35\n      }, _this);\n    }\n  }, {\n    title: t('medical-dashboard.bloodScreening.flag'),\n    dataIndex: 'flag',\n    render: function render(flag, _ref5) {\n      var key = _ref5.key;\n      return /*#__PURE__*/_jsxDEV(S.Flag, {\n        $isNorm: flag === 0,\n        $isActive: activeItem.key === key,\n        children: t(flags[flag])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, _this);\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(S.Table, {\n    size: 'small',\n    pagination: false,\n    columns: columns,\n    dataSource: dataSource,\n    scroll: {\n      y: isDesktop ? 300 : isTablet ? 620 : 400\n    },\n    onRow: function onRow(record) {\n      return {\n        onClick: function onClick() {\n          return setActiveItem(record);\n        }\n      };\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n_s(BloodScreeningTable, \"FdCnSjlxR9wcrq9ZkPKLDqjfMXs=\", false, function () {\n  return [useResponsive, useTranslation];\n});\n_c = BloodScreeningTable;\nvar _c;\n$RefreshReg$(_c, \"BloodScreeningTable\");","map":{"version":3,"names":["React","useState","useTranslation","useResponsive","S","flags","results","BloodScreeningTable","activeItem","setActiveItem","isTablet","isDesktop","t","dataSource","columns","title","dataIndex","width","render","test","key","result","units","flag","y","record","onClick"],"sources":["/workspace/ant-design-react-template/src/components/medical-dashboard/bloodScreeningCard/BloodScreeningTable/BloodScreeningTable.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useResponsive } from 'hooks/useResponsive';\nimport * as S from './BloodScreeningTable.styles';\nimport { BloodTestResult, flags, results } from '@app/constants/bloodTestResults';\nimport { ColumnsType } from 'antd/es/table';\n\ninterface BloodScreeningTableProps {\n  activeItem: BloodTestResult;\n  setActiveItem: (item: BloodTestResult) => void;\n}\n\nexport const BloodScreeningTable: React.FC<BloodScreeningTableProps> = ({ activeItem, setActiveItem }) => {\n  const { isTablet, isDesktop } = useResponsive();\n  const { t } = useTranslation();\n  const [dataSource] = useState<BloodTestResult[]>(results);\n\n  const columns: ColumnsType<BloodTestResult> = [\n    {\n      title: t('medical-dashboard.bloodScreening.test'),\n      dataIndex: 'test',\n      width: '30%',\n      render: (test: string, { key }) => <S.Text $isActive={activeItem.key === key}>{test}</S.Text>,\n    },\n    {\n      title: t('medical-dashboard.bloodScreening.result'),\n      dataIndex: 'result',\n      render: (result: number, { key }) => <S.Text $isActive={activeItem.key === key}>{result}</S.Text>,\n    },\n    {\n      title: t('medical-dashboard.bloodScreening.units'),\n      dataIndex: 'units',\n      render: (units, { key }) => <S.Text $isActive={activeItem.key === key}>{units}</S.Text>,\n    },\n    {\n      title: t('medical-dashboard.bloodScreening.flag'),\n      dataIndex: 'flag',\n      render: (flag, { key }) => (\n        <S.Flag $isNorm={flag === 0} $isActive={activeItem.key === key}>\n          {t(flags[flag])}\n        </S.Flag>\n      ),\n    },\n  ];\n\n  return (\n    <S.Table\n      size={'small'}\n      pagination={false}\n      columns={columns}\n      dataSource={dataSource}\n      scroll={{ y: isDesktop ? 300 : isTablet ? 620 : 400 }}\n      onRow={(record) => {\n        return {\n          onClick: () => setActiveItem(record),\n        };\n      }}\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}