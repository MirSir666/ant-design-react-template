{"ast":null,"code":"import _objectSpread from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useCallback,useEffect,useMemo,useState}from'react';import{ScreeningsHeader}from'../ScreeningsHeader/ScreeningsHeader';import{ScreeningsFriends}from'../screeningsFriends/ScreeningsFriends/ScreeningsFriends';import{ScreeningsChart}from'../ScreeningsChart/ScreeningsChart';import{getScreenings}from'@app/api/screenings.api';import{Dates}from'@app/constants/Dates';import{getStatistics}from'@app/api/statistics.api';import{getSmoothRandom}from'@app/utils/utils';import{getDoctorsData}from'@app/api/doctors.api';import*as S from'./ScreeningsCard.styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var ScreeningsCard=function ScreeningsCard(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),doctors=_useState2[0],setDoctors=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),statistics=_useState4[0],setStatistics=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),screenings=_useState6[0],setScreenings=_useState6[1];var _useState7=useState({firstUser:1,secondUser:3,month:Dates.getToday().get('month'),statistic:2}),_useState8=_slicedToArray(_useState7,2),currentStatistics=_useState8[0],setCurrentStatistics=_useState8[1];var _useState9=useState(true),_useState10=_slicedToArray(_useState9,2),isFirstClick=_useState10[0],setFirstClick=_useState10[1];useEffect(function(){getScreenings().then(function(res){return setScreenings(res);});},[]);useEffect(function(){getStatistics().then(function(res){return setStatistics(res);});},[]);useEffect(function(){getDoctorsData().then(function(res){return setDoctors(res);});},[]);var months=useMemo(function(){return Array.from({length:12},function(_,i){return i;});},[]);var screeningsWithDoctors=useMemo(function(){return screenings.map(function(screening){var currentDoctor=doctors.find(function(doctor){return doctor.id===screening.id;});return _objectSpread(_objectSpread({},screening),{},{name:(currentDoctor===null||currentDoctor===void 0?void 0:currentDoctor.name)||'',imgUrl:(currentDoctor===null||currentDoctor===void 0?void 0:currentDoctor.imgUrl)||''});});},[doctors,screenings]);var generateScreeningValue=function generateScreeningValue(){var randomValue=getSmoothRandom(3,0.7)*100;return(randomValue*Math.abs(Math.sin(randomValue))).toFixed();};var values=useMemo(function(){return months.map(function(month){return{monthId:month,data:statistics.map(function(statistic){return{statisticId:statistic.id,data:screenings.map(function(screening){return{id:screening.id,data:Array.from({length:16},function(_,index){return{day:index*2,value:generateScreeningValue()};})};})};})};});},[months,screenings,statistics]);var currentValues=useMemo(function(){var _values$find,_values$find$data$fin;return(_values$find=values.find(function(month){return month.monthId===currentStatistics.month;}))===null||_values$find===void 0?void 0:(_values$find$data$fin=_values$find.data.find(function(statistic){return statistic.statisticId===currentStatistics.statistic;}))===null||_values$find$data$fin===void 0?void 0:_values$find$data$fin.data;},[currentStatistics.month,currentStatistics.statistic,values]);var getUserStatistic=useCallback(function(isFirstUser){var user=isFirstUser?'firstUser':'secondUser';return currentValues&&{name:screeningsWithDoctors[currentStatistics[user]].name,data:currentValues[currentStatistics[user]].data};},[currentStatistics,currentValues,screeningsWithDoctors]);return/*#__PURE__*/_jsxs(S.ScreeningsCard,{title:/*#__PURE__*/_jsx(ScreeningsHeader,{currentStatistics:currentStatistics,setCurrentStatistics:setCurrentStatistics}),padding:0,children:[/*#__PURE__*/_jsx(ScreeningsFriends,{screenings:screeningsWithDoctors,currentStatistics:currentStatistics,setCurrentStatistics:setCurrentStatistics,isFirstClick:isFirstClick,setFirstClick:setFirstClick}),/*#__PURE__*/_jsx(ScreeningsChart,{firstUser:getUserStatistic(true),secondUser:getUserStatistic(false)})]});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/screeningsCard/ScreeningsCard/ScreeningsCard.tsx"],"names":["React","useCallback","useEffect","useMemo","useState","ScreeningsHeader","ScreeningsFriends","ScreeningsChart","getScreenings","Dates","getStatistics","getSmoothRandom","getDoctorsData","S","ScreeningsCard","doctors","setDoctors","statistics","setStatistics","screenings","setScreenings","firstUser","secondUser","month","getToday","get","statistic","currentStatistics","setCurrentStatistics","isFirstClick","setFirstClick","then","res","months","Array","from","length","_","i","screeningsWithDoctors","map","screening","currentDoctor","find","doctor","id","name","imgUrl","generateScreeningValue","randomValue","Math","abs","sin","toFixed","values","monthId","data","statisticId","index","day","value","currentValues","getUserStatistic","isFirstUser","user"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { ScreeningsHeader } from '../ScreeningsHeader/ScreeningsHeader';\nimport { ScreeningsFriends } from '../screeningsFriends/ScreeningsFriends/ScreeningsFriends';\nimport { ScreeningsChart } from '../ScreeningsChart/ScreeningsChart';\nimport { getScreenings, Screening } from '@app/api/screenings.api';\nimport { Dates } from '@app/constants/Dates';\nimport { getStatistics, Statistic } from '@app/api/statistics.api';\nimport { getSmoothRandom } from '@app/utils/utils';\nimport { Doctor, getDoctorsData } from '@app/api/doctors.api';\nimport * as S from './ScreeningsCard.styles';\n\nexport interface CurrentStatisticsState {\n  firstUser: number;\n  secondUser: number;\n  month: number;\n  statistic: number;\n}\n\nexport type ScreeningWithDoctors = Screening & { name: string; imgUrl: string };\n\nexport const ScreeningsCard: React.FC = () => {\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n  const [statistics, setStatistics] = useState<Statistic[]>([]);\n  const [screenings, setScreenings] = useState<Screening[]>([]);\n  const [currentStatistics, setCurrentStatistics] = useState<CurrentStatisticsState>({\n    firstUser: 1,\n    secondUser: 3,\n    month: Dates.getToday().get('month'),\n    statistic: 2,\n  });\n  const [isFirstClick, setFirstClick] = useState(true);\n\n  useEffect(() => {\n    getScreenings().then((res) => setScreenings(res));\n  }, []);\n\n  useEffect(() => {\n    getStatistics().then((res) => setStatistics(res));\n  }, []);\n\n  useEffect(() => {\n    getDoctorsData().then((res) => setDoctors(res));\n  }, []);\n\n  const months = useMemo(() => Array.from({ length: 12 }, (_, i) => i), []);\n\n  const screeningsWithDoctors = useMemo((): ScreeningWithDoctors[] => {\n    return screenings.map((screening) => {\n      const currentDoctor = doctors.find((doctor) => doctor.id === screening.id);\n\n      return {\n        ...screening,\n        name: currentDoctor?.name || '',\n        imgUrl: currentDoctor?.imgUrl || '',\n      };\n    });\n  }, [doctors, screenings]);\n\n  const generateScreeningValue = () => {\n    const randomValue = getSmoothRandom(3, 0.7) * 100;\n    return (randomValue * Math.abs(Math.sin(randomValue))).toFixed();\n  };\n\n  const values = useMemo(\n    () =>\n      months.map((month) => ({\n        monthId: month,\n        data: statistics.map((statistic) => ({\n          statisticId: statistic.id,\n          data: screenings.map((screening) => ({\n            id: screening.id,\n            data: Array.from({ length: 16 }, (_, index) => ({\n              day: index * 2,\n              value: generateScreeningValue(),\n            })),\n          })),\n        })),\n      })),\n    [months, screenings, statistics],\n  );\n\n  const currentValues = useMemo(\n    () =>\n      values\n        .find((month) => month.monthId === currentStatistics.month)\n        ?.data.find((statistic) => statistic.statisticId === currentStatistics.statistic)?.data,\n    [currentStatistics.month, currentStatistics.statistic, values],\n  );\n\n  const getUserStatistic = useCallback(\n    (isFirstUser: boolean) => {\n      const user = isFirstUser ? 'firstUser' : 'secondUser';\n\n      return (\n        currentValues && {\n          name: screeningsWithDoctors[currentStatistics[user]].name,\n          data: currentValues[currentStatistics[user]].data,\n        }\n      );\n    },\n    [currentStatistics, currentValues, screeningsWithDoctors],\n  );\n\n  return (\n    <S.ScreeningsCard\n      title={<ScreeningsHeader currentStatistics={currentStatistics} setCurrentStatistics={setCurrentStatistics} />}\n      padding={0}\n    >\n      <ScreeningsFriends\n        screenings={screeningsWithDoctors}\n        currentStatistics={currentStatistics}\n        setCurrentStatistics={setCurrentStatistics}\n        isFirstClick={isFirstClick}\n        setFirstClick={setFirstClick}\n      />\n      <ScreeningsChart firstUser={getUserStatistic(true)} secondUser={getUserStatistic(false)} />\n    </S.ScreeningsCard>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}