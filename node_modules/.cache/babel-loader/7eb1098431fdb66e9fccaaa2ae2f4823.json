{"ast":null,"code":"import _slicedToArray from\"/workspace/lightence-ant-design-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useMemo,useState}from'react';import{DashboardCard}from'../DashboardCard/DashboardCard';import{DoctorsMap}from'./DoctorsMap/DoctorsMap';import{getDoctorsData}from'api/doctors.api';import{useAppSelector}from'@app/hooks/reduxHooks';import{jsx as _jsx}from\"react/jsx-runtime\";export var MapCard=function MapCard(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),doctors=_useState2[0],setDoctors=_useState2[1];useEffect(function(){getDoctorsData().then(function(res){return setDoctors(res);});},[]);var theme=useAppSelector(function(state){return state.theme.theme;});// eslint-disable-next-line react-hooks/exhaustive-deps\nvar key=useMemo(function(){return Math.random();},[theme]);// create new key on every change of theme and remount map component\nreturn/*#__PURE__*/_jsx(DashboardCard,{padding:0,children:/*#__PURE__*/_jsx(DoctorsMap,{doctors:doctors},key)});};","map":{"version":3,"sources":["/workspace/lightence-ant-design-react-template/src/components/medical-dashboard/mapCard/MapCard.tsx"],"names":["React","useEffect","useMemo","useState","DashboardCard","DoctorsMap","getDoctorsData","useAppSelector","MapCard","doctors","setDoctors","then","res","theme","state","key","Math","random"],"mappings":"wKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,OAA3B,CAAoCC,QAApC,KAAoD,OAApD,CACA,OAASC,aAAT,KAA8B,gCAA9B,CACA,OAASC,UAAT,KAA2B,yBAA3B,CACA,OAAiBC,cAAjB,KAAuC,iBAAvC,CACA,OAASC,cAAT,KAA+B,uBAA/B,C,2CAEA,MAAO,IAAMC,CAAAA,OAAiB,CAAG,QAApBA,CAAAA,OAAoB,EAAM,CACrC,cAA8BL,QAAQ,CAAW,EAAX,CAAtC,wCAAOM,OAAP,eAAgBC,UAAhB,eAEAT,SAAS,CAAC,UAAM,CACdK,cAAc,GAAGK,IAAjB,CAAsB,SAACC,GAAD,QAASF,CAAAA,UAAU,CAACE,GAAD,CAAnB,EAAtB,EACD,CAFQ,CAEN,EAFM,CAAT,CAIA,GAAMC,CAAAA,KAAK,CAAGN,cAAc,CAAC,SAACO,KAAD,QAAWA,CAAAA,KAAK,CAACD,KAAN,CAAYA,KAAvB,EAAD,CAA5B,CAEA;AACA,GAAME,CAAAA,GAAG,CAAGb,OAAO,CAAC,iBAAMc,CAAAA,IAAI,CAACC,MAAL,EAAN,EAAD,CAAsB,CAACJ,KAAD,CAAtB,CAAnB,CAAmD;AAEnD,mBACE,KAAC,aAAD,EAAe,OAAO,CAAE,CAAxB,uBACE,KAAC,UAAD,EAAsB,OAAO,CAAEJ,OAA/B,EAAiBM,GAAjB,CADF,EADF,CAKD,CAjBM","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { DashboardCard } from '../DashboardCard/DashboardCard';\nimport { DoctorsMap } from './DoctorsMap/DoctorsMap';\nimport { Doctor, getDoctorsData } from 'api/doctors.api';\nimport { useAppSelector } from '@app/hooks/reduxHooks';\n\nexport const MapCard: React.FC = () => {\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\n\n  useEffect(() => {\n    getDoctorsData().then((res) => setDoctors(res));\n  }, []);\n\n  const theme = useAppSelector((state) => state.theme.theme);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const key = useMemo(() => Math.random(), [theme]); // create new key on every change of theme and remount map component\n\n  return (\n    <DashboardCard padding={0}>\n      <DoctorsMap key={key} doctors={doctors} />\n    </DashboardCard>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}