{"code":"(this[\"webpackJsonplightence-admin\"]=this[\"webpackJsonplightence-admin\"]||[]).push([[0],{2245:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return c})),n.d(e,\"b\",(function(){return g})),n.d(e,\"c\",(function(){return b}));var r=function(t,e){t=t.split(\"-\"),e=e.split(\"-\");for(var n=t[0].split(\".\"),r=e[0].split(\".\"),a=0;a<3;a++){var i=Number(n[a]),o=Number(r[a]);if(i>o)return 1;if(o>i)return-1;if(!isNaN(i)&&isNaN(o))return 1;if(isNaN(i)&&!isNaN(o))return-1}return t[1]&&e[1]?t[1]>e[1]?1:t[1]<e[1]?-1:0:!t[1]&&e[1]?1:t[1]&&!e[1]?-1:0};function a(t){return a=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},a(t)}function i(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function d(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),Object.defineProperty(t,\"prototype\",{writable:!1}),t}var u=\" ext. \",l=/^\\d+$/,c=function(){function t(e){i(this,t),function(t){if(!t)throw new Error(\"[libphonenumber-js] `metadata` argument not passed. Check your arguments.\");if(!h(t)||!h(t.countries))throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(h(t)?\"an object of shape: { \"+Object.keys(t).join(\", \")+\" }\":\"a \"+m(t)+\": \"+t,\".\"))}(e),this.metadata=e,v.call(this,e)}return d(t,[{key:\"getCountries\",value:function(){return Object.keys(this.metadata.countries).filter((function(t){return\"001\"!==t}))}},{key:\"getCountryMetadata\",value:function(t){return this.metadata.countries[t]}},{key:\"nonGeographic\",value:function(){if(!(this.v1||this.v2||this.v3))return this.metadata.nonGeographic||this.metadata.nonGeographical}},{key:\"hasCountry\",value:function(t){return void 0!==this.getCountryMetadata(t)}},{key:\"hasCallingCode\",value:function(t){if(this.getCountryCodesForCallingCode(t))return!0;if(this.nonGeographic()){if(this.nonGeographic()[t])return!0}else{var e=this.countryCallingCodes()[t];if(e&&1===e.length&&\"001\"===e[0])return!0}}},{key:\"isNonGeographicCallingCode\",value:function(t){return this.nonGeographic()?!!this.nonGeographic()[t]:!this.getCountryCodesForCallingCode(t)}},{key:\"country\",value:function(t){return this.selectNumberingPlan(t)}},{key:\"selectNumberingPlan\",value:function(t,e){if(t&&l.test(t)&&(e=t,t=null),t&&\"001\"!==t){if(!this.hasCountry(t))throw new Error(\"Unknown country: \".concat(t));this.numberingPlan=new $(this.getCountryMetadata(t),this)}else if(e){if(!this.hasCallingCode(e))throw new Error(\"Unknown calling code: \".concat(e));this.numberingPlan=new $(this.getNumberingPlanMetadata(e),this)}else this.numberingPlan=void 0;return this}},{key:\"getCountryCodesForCallingCode\",value:function(t){var e=this.countryCallingCodes()[t];if(e){if(1===e.length&&3===e[0].length)return;return e}}},{key:\"getCountryCodeForCallingCode\",value:function(t){var e=this.getCountryCodesForCallingCode(t);if(e)return e[0]}},{key:\"getNumberingPlanMetadata\",value:function(t){var e=this.getCountryCodeForCallingCode(t);if(e)return this.getCountryMetadata(e);if(this.nonGeographic()){var n=this.nonGeographic()[t];if(n)return n}else{var r=this.countryCallingCodes()[t];if(r&&1===r.length&&\"001\"===r[0])return this.metadata.countries[\"001\"]}}},{key:\"countryCallingCode\",value:function(){return this.numberingPlan.callingCode()}},{key:\"IDDPrefix\",value:function(){return this.numberingPlan.IDDPrefix()}},{key:\"defaultIDDPrefix\",value:function(){return this.numberingPlan.defaultIDDPrefix()}},{key:\"nationalNumberPattern\",value:function(){return this.numberingPlan.nationalNumberPattern()}},{key:\"possibleLengths\",value:function(){return this.numberingPlan.possibleLengths()}},{key:\"formats\",value:function(){return this.numberingPlan.formats()}},{key:\"nationalPrefixForParsing\",value:function(){return this.numberingPlan.nationalPrefixForParsing()}},{key:\"nationalPrefixTransformRule\",value:function(){return this.numberingPlan.nationalPrefixTransformRule()}},{key:\"leadingDigits\",value:function(){return this.numberingPlan.leadingDigits()}},{key:\"hasTypes\",value:function(){return this.numberingPlan.hasTypes()}},{key:\"type\",value:function(t){return this.numberingPlan.type(t)}},{key:\"ext\",value:function(){return this.numberingPlan.ext()}},{key:\"countryCallingCodes\",value:function(){return this.v1?this.metadata.country_phone_code_to_countries:this.metadata.country_calling_codes}},{key:\"chooseCountryByCountryCallingCode\",value:function(t){return this.selectNumberingPlan(t)}},{key:\"hasSelectedNumberingPlan\",value:function(){return void 0!==this.numberingPlan}}]),t}(),$=function(){function t(e,n){i(this,t),this.globalMetadataObject=n,this.metadata=e,v.call(this,n.metadata)}return d(t,[{key:\"callingCode\",value:function(){return this.metadata[0]}},{key:\"getDefaultCountryMetadataForRegion\",value:function(){return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())}},{key:\"IDDPrefix\",value:function(){if(!this.v1&&!this.v2)return this.metadata[1]}},{key:\"defaultIDDPrefix\",value:function(){if(!this.v1&&!this.v2)return this.metadata[12]}},{key:\"nationalNumberPattern\",value:function(){return this.v1||this.v2?this.metadata[1]:this.metadata[2]}},{key:\"possibleLengths\",value:function(){if(!this.v1)return this.metadata[this.v2?2:3]}},{key:\"_getFormats\",value:function(t){return t[this.v1?2:this.v2?3:4]}},{key:\"formats\",value:function(){var t=this,e=this._getFormats(this.metadata)||this._getFormats(this.getDefaultCountryMetadataForRegion())||[];return e.map((function(e){return new s(e,t)}))}},{key:\"nationalPrefix\",value:function(){return this.metadata[this.v1?3:this.v2?4:5]}},{key:\"_getNationalPrefixFormattingRule\",value:function(t){return t[this.v1?4:this.v2?5:6]}},{key:\"nationalPrefixFormattingRule\",value:function(){return this._getNationalPrefixFormattingRule(this.metadata)||this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())}},{key:\"_nationalPrefixForParsing\",value:function(){return this.metadata[this.v1?5:this.v2?6:7]}},{key:\"nationalPrefixForParsing\",value:function(){return this._nationalPrefixForParsing()||this.nationalPrefix()}},{key:\"nationalPrefixTransformRule\",value:function(){return this.metadata[this.v1?6:this.v2?7:8]}},{key:\"_getNationalPrefixIsOptionalWhenFormatting\",value:function(){return!!this.metadata[this.v1?7:this.v2?8:9]}},{key:\"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",value:function(){return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata)||this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())}},{key:\"leadingDigits\",value:function(){return this.metadata[this.v1?8:this.v2?9:10]}},{key:\"types\",value:function(){return this.metadata[this.v1?9:this.v2?10:11]}},{key:\"hasTypes\",value:function(){return(!this.types()||0!==this.types().length)&&!!this.types()}},{key:\"type\",value:function(t){if(this.hasTypes()&&p(this.types(),t))return new y(p(this.types(),t),this)}},{key:\"ext\",value:function(){return this.v1||this.v2?u:this.metadata[13]||u}}]),t}(),s=function(){function t(e,n){i(this,t),this._format=e,this.metadata=n}return d(t,[{key:\"pattern\",value:function(){return this._format[0]}},{key:\"format\",value:function(){return this._format[1]}},{key:\"leadingDigitsPatterns\",value:function(){return this._format[2]||[]}},{key:\"nationalPrefixFormattingRule\",value:function(){return this._format[3]||this.metadata.nationalPrefixFormattingRule()}},{key:\"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",value:function(){return!!this._format[4]||this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()}},{key:\"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",value:function(){return this.usesNationalPrefix()&&!this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()}},{key:\"usesNationalPrefix\",value:function(){return!(!this.nationalPrefixFormattingRule()||f.test(this.nationalPrefixFormattingRule()))}},{key:\"internationalFormat\",value:function(){return this._format[5]||this.format()}}]),t}(),f=/^\\(?\\$1\\)?$/,y=function(){function t(e,n){i(this,t),this.type=e,this.metadata=n}return d(t,[{key:\"pattern\",value:function(){return this.metadata.v1?this.type:this.type[0]}},{key:\"possibleLengths\",value:function(){if(!this.metadata.v1)return this.type[1]||this.metadata.possibleLengths()}}]),t}();function p(t,e){switch(e){case\"FIXED_LINE\":return t[0];case\"MOBILE\":return t[1];case\"TOLL_FREE\":return t[2];case\"PREMIUM_RATE\":return t[3];case\"PERSONAL_NUMBER\":return t[4];case\"VOICEMAIL\":return t[5];case\"UAN\":return t[6];case\"PAGER\":return t[7];case\"VOIP\":return t[8];case\"SHARED_COST\":return t[9]}}var h=function(t){return\"object\"===a(t)},m=function(t){return a(t)};function g(t,e){if((e=new c(e)).hasCountry(t))return e.country(t).countryCallingCode();throw new Error(\"Unknown country: \".concat(t))}function b(t,e){return void 0!==e.countries[t]}function v(t){var e=t.version;\"number\"===typeof e?(this.v1=1===e,this.v2=2===e,this.v3=3===e,this.v4=4===e):e?-1===r(e,\"1.2.0\")?this.v2=!0:-1===r(e,\"1.7.35\")?this.v3=!0:this.v4=!0:this.v1=!0}},2250:function(t,e,n){\"use strict\";n.d(e,\"c\",(function(){return r})),n.d(e,\"b\",(function(){return a})),n.d(e,\"a\",(function(){return i})),n.d(e,\"e\",(function(){return o})),n.d(e,\"f\",(function(){return d})),n.d(e,\"d\",(function(){return u}));var r=2,a=17,i=3,o=\"0-9\\uff10-\\uff19\\u0660-\\u0669\\u06f0-\\u06f9\",d=\"\".concat(\"-\\u2010-\\u2015\\u2212\\u30fc\\uff0d\").concat(\"\\uff0f/\").concat(\"\\uff0e.\").concat(\" \\xa0\\xad\\u200b\\u2060\\u3000\").concat(\"()\\uff08\\uff09\\uff3b\\uff3d\\\\[\\\\]\").concat(\"~\\u2053\\u223c\\uff5e\"),u=\"+\\uff0b\"},2256:function(t,e,n){\"use strict\";function r(t,e){return t=t||\"\",new RegExp(\"^(?:\"+e+\")$\").test(t)}n.d(e,\"a\",(function(){return r}))},2263:function(t,e,n){\"use strict\";function r(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return a(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}n.d(e,\"b\",(function(){return o})),n.d(e,\"a\",(function(){return d}));var i={0:\"0\",1:\"1\",2:\"2\",3:\"3\",4:\"4\",5:\"5\",6:\"6\",7:\"7\",8:\"8\",9:\"9\",\"\\uff10\":\"0\",\"\\uff11\":\"1\",\"\\uff12\":\"2\",\"\\uff13\":\"3\",\"\\uff14\":\"4\",\"\\uff15\":\"5\",\"\\uff16\":\"6\",\"\\uff17\":\"7\",\"\\uff18\":\"8\",\"\\uff19\":\"9\",\"\\u0660\":\"0\",\"\\u0661\":\"1\",\"\\u0662\":\"2\",\"\\u0663\":\"3\",\"\\u0664\":\"4\",\"\\u0665\":\"5\",\"\\u0666\":\"6\",\"\\u0667\":\"7\",\"\\u0668\":\"8\",\"\\u0669\":\"9\",\"\\u06f0\":\"0\",\"\\u06f1\":\"1\",\"\\u06f2\":\"2\",\"\\u06f3\":\"3\",\"\\u06f4\":\"4\",\"\\u06f5\":\"5\",\"\\u06f6\":\"6\",\"\\u06f7\":\"7\",\"\\u06f8\":\"8\",\"\\u06f9\":\"9\"};function o(t){return i[t]}function d(t){for(var e,n=\"\",a=r(t.split(\"\"));!(e=a()).done;){var i=o(e.value);i&&(n+=i)}return n}},2271:function(t,e,n){\"use strict\";function r(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return a(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function i(t,e){return o(t,void 0,e)}function o(t,e,n){var a=n.type(e),i=a&&a.possibleLengths()||n.possibleLengths();if(!i)return\"IS_POSSIBLE\";if(\"FIXED_LINE_OR_MOBILE\"===e){if(!n.type(\"FIXED_LINE\"))return o(t,\"MOBILE\",n);var d=n.type(\"MOBILE\");d&&(i=function(t,e){for(var n,a=t.slice(),i=r(e);!(n=i()).done;){var o=n.value;t.indexOf(o)<0&&a.push(o)}return a.sort((function(t,e){return t-e}))}(i,d.possibleLengths()))}else if(e&&!a)return\"INVALID_LENGTH\";var u=t.length,l=i[0];return l===u?\"IS_POSSIBLE\":l>u?\"TOO_SHORT\":i[i.length-1]<u?\"TOO_LONG\":i.indexOf(u,1)>=0?\"IS_POSSIBLE\":\"INVALID_LENGTH\"}n.d(e,\"a\",(function(){return i}))},2281:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return a})),n.d(e,\"b\",(function(){return i}));var r=n(2315),a=/(\\$\\d)/;function i(t,e,n){var i=n.useInternationalFormat,o=n.withNationalPrefix,d=(n.carrierCode,n.metadata,t.replace(new RegExp(e.pattern()),i?e.internationalFormat():o&&e.nationalPrefixFormattingRule()?e.format().replace(a,e.nationalPrefixFormattingRule()):e.format()));return i?Object(r.a)(d):d}},2282:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return o}));var r=n(2245),a=n(2250),i=new RegExp(\"([\"+a.e+\"])\");function o(t,e,n,a){if(e){var o=new r.a(a);o.selectNumberingPlan(e,n);var d=new RegExp(o.IDDPrefix());if(0===t.search(d)){var u=(t=t.slice(t.match(d)[0].length)).match(i);if(!(u&&null!=u[1]&&u[1].length>0&&\"0\"===u[1]))return t}}}},2283:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return d}));var r=n(2245),a=n(2256),i=n(2317),o=n(2271);function d(t,e,n,d){var u=e?Object(r.b)(e,d):n;if(0===t.indexOf(u)){(d=new r.a(d)).selectNumberingPlan(e,n);var l=t.slice(u.length),c=Object(i.a)(l,d).nationalNumber,$=Object(i.a)(t,d).nationalNumber;if(!Object(a.a)($,d.nationalNumberPattern())&&Object(a.a)(c,d.nationalNumberPattern())||\"TOO_LONG\"===Object(o.a)($,d))return{countryCallingCode:u,number:l}}return{number:t}}},2284:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return u}));var r=n(2245),a=n(2256);function i(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var d=[\"MOBILE\",\"PREMIUM_RATE\",\"TOLL_FREE\",\"SHARED_COST\",\"VOIP\",\"PERSONAL_NUMBER\",\"PAGER\",\"UAN\",\"VOICEMAIL\"];function u(t,e,n){if(e=e||{},t.country){(n=new r.a(n)).selectNumberingPlan(t.country,t.countryCallingCode);var o=e.v2?t.nationalNumber:t.phone;if(Object(a.a)(o,n.nationalNumberPattern())){if(l(o,\"FIXED_LINE\",n))return n.type(\"MOBILE\")&&\"\"===n.type(\"MOBILE\").pattern()?\"FIXED_LINE_OR_MOBILE\":n.type(\"MOBILE\")?l(o,\"MOBILE\",n)?\"FIXED_LINE_OR_MOBILE\":\"FIXED_LINE\":\"FIXED_LINE_OR_MOBILE\";for(var u,c=i(d);!(u=c()).done;){var $=u.value;if(l(o,$,n))return $}}}}function l(t,e,n){return!(!(e=n.type(e))||!e.pattern())&&(!(e.possibleLengths()&&e.possibleLengths().indexOf(t.length)<0)&&Object(a.a)(t,e.pattern()))}},2285:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return u}));n(2334);function r(t){return r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},r(t)}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null==n)return;var r,a,i=[],o=!0,d=!1;try{for(n=n.call(t);!(o=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(u){d=!0,a=u}finally{try{o||null==n.return||n.return()}finally{if(d)throw a}}return i}(t,e)||function(t,e){if(!t)return;if(\"string\"===typeof t)return d(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return d(t,e)}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function d(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function u(t){var e,n,r,d=o(Array.prototype.slice.call(t),4),u=d[0],c=d[1],$=d[2],s=d[3];if(\"string\"!==typeof u)throw new TypeError(\"A text for parsing must be a string.\");if(e=u,c&&\"string\"!==typeof c){if(!l(c))throw new Error(\"Invalid second argument: \".concat(c));$?(n=c,r=$):r=c}else s?(n=$,r=s):(n=void 0,r=$),c&&(n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({defaultCountry:c},n));return{text:e,options:n,metadata:r}}var l=function(t){return\"object\"===r(t)}},2286:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return l}));var r=n(2334),a=n(2326),i=n(2245);function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function d(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){u(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e,n){e&&e.defaultCountry&&!Object(i.c)(e.defaultCountry,n)&&(e=d(d({},e),{},{defaultCountry:void 0}));try{return Object(r.a)(t,e,n)}catch(o){if(!(o instanceof a.a))throw o}}},2314:function(t,e,n){\"use strict\";e.a={version:4,country_calling_codes:{1:[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],7:[\"RU\",\"KZ\"],20:[\"EG\"],27:[\"ZA\"],30:[\"GR\"],31:[\"NL\"],32:[\"BE\"],33:[\"FR\"],34:[\"ES\"],36:[\"HU\"],39:[\"IT\",\"VA\"],40:[\"RO\"],41:[\"CH\"],43:[\"AT\"],44:[\"GB\",\"GG\",\"IM\",\"JE\"],45:[\"DK\"],46:[\"SE\"],47:[\"NO\",\"SJ\"],48:[\"PL\"],49:[\"DE\"],51:[\"PE\"],52:[\"MX\"],53:[\"CU\"],54:[\"AR\"],55:[\"BR\"],56:[\"CL\"],57:[\"CO\"],58:[\"VE\"],60:[\"MY\"],61:[\"AU\",\"CC\",\"CX\"],62:[\"ID\"],63:[\"PH\"],64:[\"NZ\"],65:[\"SG\"],66:[\"TH\"],81:[\"JP\"],82:[\"KR\"],84:[\"VN\"],86:[\"CN\"],90:[\"TR\"],91:[\"IN\"],92:[\"PK\"],93:[\"AF\"],94:[\"LK\"],95:[\"MM\"],98:[\"IR\"],211:[\"SS\"],212:[\"MA\",\"EH\"],213:[\"DZ\"],216:[\"TN\"],218:[\"LY\"],220:[\"GM\"],221:[\"SN\"],222:[\"MR\"],223:[\"ML\"],224:[\"GN\"],225:[\"CI\"],226:[\"BF\"],227:[\"NE\"],228:[\"TG\"],229:[\"BJ\"],230:[\"MU\"],231:[\"LR\"],232:[\"SL\"],233:[\"GH\"],234:[\"NG\"],235:[\"TD\"],236:[\"CF\"],237:[\"CM\"],238:[\"CV\"],239:[\"ST\"],240:[\"GQ\"],241:[\"GA\"],242:[\"CG\"],243:[\"CD\"],244:[\"AO\"],245:[\"GW\"],246:[\"IO\"],247:[\"AC\"],248:[\"SC\"],249:[\"SD\"],250:[\"RW\"],251:[\"ET\"],252:[\"SO\"],253:[\"DJ\"],254:[\"KE\"],255:[\"TZ\"],256:[\"UG\"],257:[\"BI\"],258:[\"MZ\"],260:[\"ZM\"],261:[\"MG\"],262:[\"RE\",\"YT\"],263:[\"ZW\"],264:[\"NA\"],265:[\"MW\"],266:[\"LS\"],267:[\"BW\"],268:[\"SZ\"],269:[\"KM\"],290:[\"SH\",\"TA\"],291:[\"ER\"],297:[\"AW\"],298:[\"FO\"],299:[\"GL\"],350:[\"GI\"],351:[\"PT\"],352:[\"LU\"],353:[\"IE\"],354:[\"IS\"],355:[\"AL\"],356:[\"MT\"],357:[\"CY\"],358:[\"FI\",\"AX\"],359:[\"BG\"],370:[\"LT\"],371:[\"LV\"],372:[\"EE\"],373:[\"MD\"],374:[\"AM\"],375:[\"BY\"],376:[\"AD\"],377:[\"MC\"],378:[\"SM\"],380:[\"UA\"],381:[\"RS\"],382:[\"ME\"],383:[\"XK\"],385:[\"HR\"],386:[\"SI\"],387:[\"BA\"],389:[\"MK\"],420:[\"CZ\"],421:[\"SK\"],423:[\"LI\"],500:[\"FK\"],501:[\"BZ\"],502:[\"GT\"],503:[\"SV\"],504:[\"HN\"],505:[\"NI\"],506:[\"CR\"],507:[\"PA\"],508:[\"PM\"],509:[\"HT\"],590:[\"GP\",\"BL\",\"MF\"],591:[\"BO\"],592:[\"GY\"],593:[\"EC\"],594:[\"GF\"],595:[\"PY\"],596:[\"MQ\"],597:[\"SR\"],598:[\"UY\"],599:[\"CW\",\"BQ\"],670:[\"TL\"],672:[\"NF\"],673:[\"BN\"],674:[\"NR\"],675:[\"PG\"],676:[\"TO\"],677:[\"SB\"],678:[\"VU\"],679:[\"FJ\"],680:[\"PW\"],681:[\"WF\"],682:[\"CK\"],683:[\"NU\"],685:[\"WS\"],686:[\"KI\"],687:[\"NC\"],688:[\"TV\"],689:[\"PF\"],690:[\"TK\"],691:[\"FM\"],692:[\"MH\"],850:[\"KP\"],852:[\"HK\"],853:[\"MO\"],855:[\"KH\"],856:[\"LA\"],880:[\"BD\"],886:[\"TW\"],960:[\"MV\"],961:[\"LB\"],962:[\"JO\"],963:[\"SY\"],964:[\"IQ\"],965:[\"KW\"],966:[\"SA\"],967:[\"YE\"],968:[\"OM\"],970:[\"PS\"],971:[\"AE\"],972:[\"IL\"],973:[\"BH\"],974:[\"QA\"],975:[\"BT\"],976:[\"MN\"],977:[\"NP\"],992:[\"TJ\"],993:[\"TM\"],994:[\"AZ\"],995:[\"GE\"],996:[\"KG\"],998:[\"UZ\"]},countries:{AC:[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],AD:[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],AE:[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],AF:[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],AG:[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\d{6})$\",\"268$1\",0,\"268\"],AI:[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\d{6})$\",\"264$1\",0,\"264\"],AL:[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],AM:[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],AO:[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],AR:[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],AS:[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\d{6})$\",\"684$1\",0,\"684\"],AT:[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],AU:[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"(?:(?:2(?:[0-26-9]\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\d|2[0-8]))\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],AW:[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],AX:[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],AZ:[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],BA:[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],BB:[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"246$1\",0,\"246\"],BD:[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|22\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],BE:[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],BF:[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],BG:[\"359\",\"00\",\"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],BH:[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],BI:[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],BJ:[\"229\",\"00\",\"(?:[25689]\\\\d|40)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]]]],BL:[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],BM:[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"441$1\",0,\"441\"],BN:[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],BO:[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],BQ:[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],BR:[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-46-9]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],BS:[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\d{6})$\",\"242$1\",0,\"242\"],BT:[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],BW:[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-79]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],BY:[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],BZ:[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],CA:[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}|3\\\\d{6}\",[7,10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|6[578])|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|13|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\",[10]],[\"\",[10]],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\",[10]],[\"900[2-9]\\\\d{6}\",[10]],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:00|2[125-7]|33|44|66|77|88)|622)[2-9]\\\\d{6}\",[10]],0,[\"310\\\\d{4}\",[7]],0,[\"600[2-9]\\\\d{6}\",[10]]]],CC:[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],CD:[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],CF:[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],CG:[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],CH:[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],CI:[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],CK:[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],CL:[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],CM:[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],CN:[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"1[127]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-689]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\d|79)\\\\d\\\\d)\",0,0,0,0,\"00\"],CO:[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:60\\\\d\\\\d|9101)\\\\d{6}|(?:1\\\\d|3)\\\\d{9}\",[10,11],[[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3[0-357]|91\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0(4(?:[14]4|56)|[579])?\"],CR:[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],CU:[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],CV:[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],CW:[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],CX:[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],CY:[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],CZ:[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],DE:[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],DJ:[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],DK:[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],DM:[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"767$1\",0,\"767\"],DO:[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],DZ:[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],EC:[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],EE:[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],EG:[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],EH:[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],ER:[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],ES:[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],ET:[\"251\",\"00\",\"(?:11|[2-579]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-579]\"],\"0$1\"]],\"0\"],FI:[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],FJ:[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],FK:[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],FM:[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],FO:[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],FR:[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],GA:[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\"],GB:[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0235])|4(?:[0-5]\\\\d\\\\d|69[7-9]|70[013579])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|8(?:[02]\\\\d|1[0-246-9])))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],GD:[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"473$1\",0,\"473\"],GE:[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],GF:[\"594\",\"00\",\"(?:[56]94|80\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],GG:[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],GH:[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],GI:[\"350\",\"00\",\"(?:[25]\\\\d\\\\d|606)\\\\d{5}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],GL:[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],GM:[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],GN:[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],GP:[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|6[0-289]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],GQ:[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],GR:[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],GT:[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],GU:[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\d{6})$\",\"671$1\",0,\"671\"],GW:[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],GY:[\"592\",\"001\",\"9008\\\\d{3}|(?:[2-467]\\\\d\\\\d|862)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],HK:[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],HN:[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],HR:[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],HT:[\"509\",\"00\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]]],HU:[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],ID:[\"62\",\"00[89]\",\"(?:(?:00[1-9]|8\\\\d)\\\\d{4}|[1-36])\\\\d{6}|00\\\\d{10}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],IE:[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],IL:[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],IM:[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([25-8]\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],IN:[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],IO:[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],IQ:[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],IR:[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],IS:[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],IT:[\"39\",\"00\",\"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[378]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],JE:[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],JM:[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],JO:[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],JP:[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\"],KE:[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],KG:[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],KH:[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],KI:[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],KM:[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],KN:[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"869$1\",0,\"869\"],KP:[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],KR:[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],KW:[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],KY:[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"345$1\",0,\"345\"],KZ:[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],LA:[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"30[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],LB:[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],LC:[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"758$1\",0,\"758\"],LI:[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(1001)\"],LK:[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],LR:[\"231\",\"00\",\"(?:2|33|5\\\\d|77|88)\\\\d{7}|[4-6]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[4-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\"],LS:[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],LT:[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],LU:[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],LV:[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],LY:[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],MA:[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29[89]|389)\",\"5(?:29[89]|389)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:29(?:[189][05]|2[29]|3[01])|389[05])\\\\d{4}|5(?:2(?:[0-25-7]\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[08]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[017]\\\\d|2[0-2]|6[0-8]|8[0-3]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],MC:[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],MD:[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],ME:[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],MF:[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],MG:[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\d{6})$\",\"20$1\"],MH:[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],MK:[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],ML:[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],MM:[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],MN:[\"976\",\"001\",\"[12]\\\\d{7,9}|[5-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],MO:[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],MP:[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"670$1\",0,\"670\"],MQ:[\"596\",\"00\",\"(?:69|80)\\\\d{7}|(?:59|97)6\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],MR:[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],MS:[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([34]\\\\d{6})$\",\"664$1\",0,\"664\"],MT:[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],MU:[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:5|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],MV:[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9[13-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],MW:[\"265\",\"00\",\"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],MX:[\"52\",\"0[09]\",\"1(?:(?:44|99)[1-9]|65[0-689])\\\\d{7}|(?:1(?:[017]\\\\d|[235][1-9]|4[0-35-9]|6[0-46-9]|8[1-79]|9[1-8])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],MY:[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9]|53)|8\",\"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1(?:[367]|80)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],MZ:[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],NA:[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],NC:[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]]],NE:[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[04]\"]]]],NF:[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],NG:[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],NI:[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],NL:[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],NO:[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|59\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],NP:[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],NR:[\"674\",\"00\",\"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-68]\"]]]],NU:[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],NZ:[\"64\",\"0(?:0|161)\",\"[29]\\\\d{7,9}|50\\\\d{5}(?:\\\\d{2,3})?|6[0-35-9]\\\\d{6}|7\\\\d{7,8}|8\\\\d{4,9}|(?:11\\\\d|[34])\\\\d{7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-579]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|[89]0\",\"50(?:[0367]|88)|[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],OM:[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],PA:[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],PE:[\"51\",\"00|19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,\"00\",\" Anexo \"],PF:[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],PG:[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],PH:[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],PK:[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],PL:[\"48\",\"00\",\"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|20|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],PM:[\"508\",\"00\",\"(?:[45]|80\\\\d\\\\d)\\\\d{5}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],PR:[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],PS:[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],PT:[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],PW:[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],PY:[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],QA:[\"974\",\"00\",\"[2-7]\\\\d{7}|800\\\\d{4}(?:\\\\d{2})?|2\\\\d{6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]]]],RE:[\"262\",\"00\",\"976\\\\d{6}|(?:26|[68]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,\"26[23]|69|[89]\"],RO:[\"40\",\"00\",\"(?:[2378]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],RS:[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],RU:[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],RW:[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]]],\"0\"],SA:[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],SB:[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],SC:[\"248\",\"010|0[0-2]\",\"800\\\\d{4}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],SD:[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],SE:[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],SG:[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-5]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],SH:[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],SI:[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],SJ:[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|[57]9)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],SK:[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],SL:[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],SM:[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],SN:[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],SO:[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3478]|64|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\"]]],\"0\"],SR:[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],SS:[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],ST:[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],SV:[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],SX:[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\d{6})$\",\"721$1\",0,\"721\"],SY:[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],SZ:[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],TA:[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],TC:[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\d{6})$\",\"649$1\",0,\"649\"],TD:[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],TG:[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],TH:[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],TJ:[\"992\",\"810\",\"(?:00|[1-57-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3[1-5]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],TK:[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],TL:[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],TM:[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],TN:[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],TO:[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],TR:[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],TT:[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\d{6})$\",\"868$1\",0,\"868\"],TV:[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],TW:[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],TZ:[\"255\",\"00[056]\",\"(?:[25-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],UA:[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\",\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|89|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],UG:[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],US:[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"310\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"505(?:[2-57-9]\\\\d\\\\d|6(?:[0-35-9]\\\\d|44))\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-289]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-7]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],UY:[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"4\\\\d{9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"405|8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],UZ:[\"998\",\"810\",\"(?:33|55|[679]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[35-9]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],VA:[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],VC:[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"784$1\",0,\"784\"],VE:[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],VG:[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\d{6})$\",\"284$1\",0,\"284\"],VI:[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"340$1\",0,\"340\"],VN:[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],VU:[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],WF:[\"681\",\"00\",\"(?:40|72)\\\\d{4}|8\\\\d{5}(?:\\\\d{3})?\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[478]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],WS:[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],XK:[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],YE:[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],YT:[\"262\",\"00\",\"80\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\"],ZA:[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],ZM:[\"260\",\"00\",\"800\\\\d{6}|(?:21|63|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],ZW:[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},nonGeographic:{800:[\"800\",0,\"(?:00|[1-9]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],808:[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],870:[\"870\",0,\"7\\\\d{11}|[35-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"]]],878:[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],881:[\"881\",0,\"[0-36-9]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-36-9]\"]]],0,0,0,0,0,0,[0,[\"[0-36-9]\\\\d{8}\"]]],882:[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|285\\\\d{9}|(?:[19]\\\\d|49)\\\\d{6}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"4\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34[57]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-3]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|3(?:2|47|7\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:(?:285\\\\d\\\\d|3(?:45|[69]\\\\d{3}))\\\\d|9[89])\\\\d{6}\"]]],883:[\"883\",0,\"(?:210|370\\\\d\\\\d)\\\\d{7}|51\\\\d{7}(?:\\\\d{3})?\",[9,10,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[35]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:210|(?:370[1-9]|51[013]0)\\\\d)\\\\d{7}|5100\\\\d{5}\"]]],888:[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],979:[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}},2315:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return a}));var r=n(2250);function a(t){return t.replace(new RegExp(\"[\".concat(r.f,\"]+\"),\"g\"),\" \").trim()}},2316:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return d}));var r=n(2282),a=n(2283),i=n(2245),o=n(2250);function d(t,e,n,d){if(!t)return{};if(\"+\"!==t[0]){var u=Object(r.a)(t,e,n,d);if(!u||u===t){if(e||n){var l=Object(a.a)(t,e,n,d),c=l.countryCallingCode,$=l.number;if(c)return{countryCallingCode:c,number:$}}return{number:t}}t=\"+\"+u}if(\"0\"===t[1])return{};d=new i.a(d);for(var s=2;s-1<=o.a&&s<=t.length;){var f=t.slice(1,s);if(d.hasCallingCode(f))return d.selectNumberingPlan(f),{countryCallingCode:f,number:t.slice(s)};s++}return{}}},2317:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return o}));var r=n(2318),a=n(2256),i=n(2271);function o(t,e){var n=Object(r.a)(t,e),o=n.carrierCode,d=n.nationalNumber;if(d!==t){if(!function(t,e,n){if(Object(a.a)(t,n.nationalNumberPattern())&&!Object(a.a)(e,n.nationalNumberPattern()))return!1;return!0}(t,d,e))return{nationalNumber:t};if(e.possibleLengths()&&!function(t,e){switch(Object(i.a)(t,e)){case\"TOO_SHORT\":case\"INVALID_LENGTH\":return!1;default:return!0}}(d,e))return{nationalNumber:t}}return{nationalNumber:d,carrierCode:o}}},2318:function(t,e,n){\"use strict\";function r(t,e){if(t&&e.numberingPlan.nationalPrefixForParsing()){var n=new RegExp(\"^(?:\"+e.numberingPlan.nationalPrefixForParsing()+\")\"),r=n.exec(t);if(r){var a,i,o,d=r.length-1,u=d>0&&r[d];if(e.nationalPrefixTransformRule()&&u)a=t.replace(n,e.nationalPrefixTransformRule()),d>1&&(i=r[1]);else{var l=r[0];a=t.slice(l.length),u&&(i=r[1])}if(u){var c=t.indexOf(r[1]);t.slice(0,c)===e.numberingPlan.nationalPrefix()&&(o=e.numberingPlan.nationalPrefix())}else o=r[0];return{nationalNumber:a,nationalPrefix:o,carrierCode:i}}}return{nationalNumber:t}}n.d(e,\"a\",(function(){return r}))},2319:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return d}));var r=n(2245),a=n(2284);function i(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function d(t,e,n){var o=n.getCountryCodesForCallingCode(t);if(o)return 1===o.length?o[0]:function(t,e,n){n=new r.a(n);for(var o,d=i(t);!(o=d()).done;){var u=o.value;if(n.country(u),n.leadingDigits()){if(e&&0===e.search(n.leadingDigits()))return u}else if(Object(a.a)({phone:e,country:u},void 0,n.metadata))return u}}(o,e,n.metadata)}},2320:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return i})),n.d(e,\"b\",(function(){return o}));var r=n(2245),a=n(2271);function i(t,e,n){if(void 0===e&&(e={}),n=new r.a(n),e.v2){if(!t.countryCallingCode)throw new Error(\"Invalid phone number object passed\");n.selectNumberingPlan(t.countryCallingCode)}else{if(!t.phone)return!1;if(t.country){if(!n.hasCountry(t.country))throw new Error(\"Unknown country: \".concat(t.country));n.country(t.country)}else{if(!t.countryCallingCode)throw new Error(\"Invalid phone number object passed\");n.selectNumberingPlan(t.countryCallingCode)}}if(n.possibleLengths())return o(t.phone||t.nationalNumber,n);if(t.countryCallingCode&&n.isNonGeographicCallingCode(t.countryCallingCode))return!0;throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.')}function o(t,e){return\"IS_POSSIBLE\"===Object(a.a)(t,e)}},2321:function(t,e,n){\"use strict\";n.d(e,\"b\",(function(){return d})),n.d(e,\"a\",(function(){return u}));var r=n(2322);function a(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null==n)return;var r,a,i=[],o=!0,d=!1;try{for(n=n.call(t);!(o=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(u){d=!0,a=u}finally{try{o||null==n.return||n.return()}finally{if(d)throw a}}return i}(t,e)||i(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function i(t,e){if(t){if(\"string\"===typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===n&&t.constructor&&(n=t.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(t):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(t,e):void 0}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function d(t){for(var e,n,o,d=function(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=i(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}((t=t.replace(/^tel:/,\"tel=\")).split(\";\"));!(o=d()).done;){var u=a(o.value.split(\"=\"),2),l=u[0],c=u[1];switch(l){case\"tel\":e=c;break;case\"ext\":n=c;break;case\"phone-context\":\"+\"===c[0]&&(e=c+e)}}if(!Object(r.a)(e))return{};var $={number:e};return n&&($.ext=n),$}function u(t){var e=t.number,n=t.ext;if(!e)return\"\";if(\"+\"!==e[0])throw new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');return\"tel:\".concat(e).concat(n?\";ext=\"+n:\"\")}},2322:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return c})),n.d(e,\"b\",(function(){return $}));var r=n(2250),a=n(2323),i=\"[\"+r.e+\"]{\"+r.c+\"}\",o=\"[\"+r.d+\"]{0,1}(?:[\"+r.f+\"]*[\"+r.e+\"]){3,}[\"+r.f+r.e+\"]*\",d=new RegExp(\"^[\"+r.d+\"]{0,1}(?:[\"+r.f+\"]*[\"+r.e+\"]){1,2}$\",\"i\"),u=o+\"(?:\"+Object(a.a)()+\")?\",l=new RegExp(\"^\"+i+\"$|^\"+u+\"$\",\"i\");function c(t){return t.length>=r.c&&l.test(t)}function $(t){return d.test(t)}},2323:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return i}));var r=n(2250),a=function(t){return\"([\".concat(r.e,\"]{1,\").concat(t,\"})\")};function i(t){var e=\"#?\";return\";ext=\"+a(\"20\")+\"|\"+(\"[ \\xa0\\\\t,]*(?:e?xt(?:ensi(?:o\\u0301?|\\xf3))?n?|\\uff45?\\uff58\\uff54\\uff4e?|\\u0434\\u043e\\u0431|anexo)[:\\\\.\\uff0e]?[ \\xa0\\\\t,-]*\"+a(\"20\")+e)+\"|\"+(\"[ \\xa0\\\\t,]*(?:[x\\uff58#\\uff03~\\uff5e]|int|\\uff49\\uff4e\\uff54)[:\\\\.\\uff0e]?[ \\xa0\\\\t,-]*\"+a(\"9\")+e)+\"|\"+(\"[- ]+\"+a(\"6\")+\"#\")+\"|\"+(\"[ \\xa0\\\\t]*(?:,{2}|;)[:\\\\.\\uff0e]?[ \\xa0\\\\t,-]*\"+a(\"15\")+e)+\"|\"+(\"[ \\xa0\\\\t]*(?:,)+[:\\\\.\\uff0e]?[ \\xa0\\\\t,-]*\"+a(\"9\")+e)}},2324:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return i}));var r=n(2245),a=/^\\d+$/;function i(t,e){var n=\"+\"+Object(r.b)(t,e);return(e=new r.a(e)).selectNumberingPlan(t),e.numberingPlan.leadingDigits()&&a.test(e.numberingPlan.leadingDigits())&&(n+=e.numberingPlan.leadingDigits()),n}},2325:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return a})),n.d(e,\"b\",(function(){return i}));var r=n(2245);function a(t){var e=t.country,n=t.international,a=t.withCountryCallingCode,i=t.metadata;return e&&n&&!a?\"+\".concat(Object(r.b)(e,i)):\"\"}function i(t,e){return e&&\" \"===(t=t.slice(e.length))[0]&&(t=t.slice(1)),t}},2326:function(t,e,n){\"use strict\";function r(t){return r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},r(t)}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e){if(e&&(\"object\"===r(e)||\"function\"===typeof e))return e;if(void 0!==e)throw new TypeError(\"Derived constructors may only return object or undefined\");return o(t)}function o(t){if(void 0===t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return t}function d(t){var e=\"function\"===typeof Map?new Map:void 0;return d=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf(\"[native code]\")))return t;var n;if(\"function\"!==typeof t)throw new TypeError(\"Super expression must either be null or a function\");if(\"undefined\"!==typeof e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return u(t,arguments,$(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),c(r,t)},d(t)}function u(t,e,n){return u=l()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var a=new(Function.bind.apply(t,r));return n&&c(a,n.prototype),a},u.apply(null,arguments)}function l(){if(\"undefined\"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function c(t,e){return c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},c(t,e)}function $(t){return $=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},$(t)}n.d(e,\"a\",(function(){return s}));var s=function(t){!function(t,e){if(\"function\"!==typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,\"prototype\",{writable:!1}),e&&c(t,e)}(u,t);var e,n,r,d=function(t){var e=l();return function(){var n,r=$(t);if(e){var a=$(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return i(this,n)}}(u);function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,u),e=d.call(this,t),Object.setPrototypeOf(o(e),u.prototype),e.name=e.constructor.name,e}return e=u,n&&a(e.prototype,n),r&&a(e,r),Object.defineProperty(e,\"prototype\",{writable:!1}),e}(d(Error))},2330:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return xt}));var r=n(2314),a=n(2450),i=(n(2451),n(2452)),o=(n(2453),n(2454)),d=n(2245),u=n(0),l=n.n(u),c={ext:\"ext.\",country:\"Phone number country\",phone:\"Phone\",AB:\"Abkhazia\",AC:\"Ascension Island\",AD:\"Andorra\",AE:\"United Arab Emirates\",AF:\"Afghanistan\",AG:\"Antigua and Barbuda\",AI:\"Anguilla\",AL:\"Albania\",AM:\"Armenia\",AO:\"Angola\",AQ:\"Antarctica\",AR:\"Argentina\",AS:\"American Samoa\",AT:\"Austria\",AU:\"Australia\",AW:\"Aruba\",AX:\"\\xc5land Islands\",AZ:\"Azerbaijan\",BA:\"Bosnia and Herzegovina\",BB:\"Barbados\",BD:\"Bangladesh\",BE:\"Belgium\",BF:\"Burkina Faso\",BG:\"Bulgaria\",BH:\"Bahrain\",BI:\"Burundi\",BJ:\"Benin\",BL:\"Saint Barth\\xe9lemy\",BM:\"Bermuda\",BN:\"Brunei Darussalam\",BO:\"Bolivia\",BQ:\"Bonaire, Sint Eustatius and Saba\",BR:\"Brazil\",BS:\"Bahamas\",BT:\"Bhutan\",BV:\"Bouvet Island\",BW:\"Botswana\",BY:\"Belarus\",BZ:\"Belize\",CA:\"Canada\",CC:\"Cocos (Keeling) Islands\",CD:\"Congo, Democratic Republic of the\",CF:\"Central African Republic\",CG:\"Congo\",CH:\"Switzerland\",CI:\"Cote d'Ivoire\",CK:\"Cook Islands\",CL:\"Chile\",CM:\"Cameroon\",CN:\"China\",CO:\"Colombia\",CR:\"Costa Rica\",CU:\"Cuba\",CV:\"Cape Verde\",CW:\"Cura\\xe7ao\",CX:\"Christmas Island\",CY:\"Cyprus\",CZ:\"Czech Republic\",DE:\"Germany\",DJ:\"Djibouti\",DK:\"Denmark\",DM:\"Dominica\",DO:\"Dominican Republic\",DZ:\"Algeria\",EC:\"Ecuador\",EE:\"Estonia\",EG:\"Egypt\",EH:\"Western Sahara\",ER:\"Eritrea\",ES:\"Spain\",ET:\"Ethiopia\",FI:\"Finland\",FJ:\"Fiji\",FK:\"Falkland Islands\",FM:\"Federated States of Micronesia\",FO:\"Faroe Islands\",FR:\"France\",GA:\"Gabon\",GB:\"United Kingdom\",GD:\"Grenada\",GE:\"Georgia\",GF:\"French Guiana\",GG:\"Guernsey\",GH:\"Ghana\",GI:\"Gibraltar\",GL:\"Greenland\",GM:\"Gambia\",GN:\"Guinea\",GP:\"Guadeloupe\",GQ:\"Equatorial Guinea\",GR:\"Greece\",GS:\"South Georgia and the South Sandwich Islands\",GT:\"Guatemala\",GU:\"Guam\",GW:\"Guinea-Bissau\",GY:\"Guyana\",HK:\"Hong Kong\",HM:\"Heard Island and McDonald Islands\",HN:\"Honduras\",HR:\"Croatia\",HT:\"Haiti\",HU:\"Hungary\",ID:\"Indonesia\",IE:\"Ireland\",IL:\"Israel\",IM:\"Isle of Man\",IN:\"India\",IO:\"British Indian Ocean Territory\",IQ:\"Iraq\",IR:\"Iran\",IS:\"Iceland\",IT:\"Italy\",JE:\"Jersey\",JM:\"Jamaica\",JO:\"Jordan\",JP:\"Japan\",KE:\"Kenya\",KG:\"Kyrgyzstan\",KH:\"Cambodia\",KI:\"Kiribati\",KM:\"Comoros\",KN:\"Saint Kitts and Nevis\",KP:\"North Korea\",KR:\"South Korea\",KW:\"Kuwait\",KY:\"Cayman Islands\",KZ:\"Kazakhstan\",LA:\"Laos\",LB:\"Lebanon\",LC:\"Saint Lucia\",LI:\"Liechtenstein\",LK:\"Sri Lanka\",LR:\"Liberia\",LS:\"Lesotho\",LT:\"Lithuania\",LU:\"Luxembourg\",LV:\"Latvia\",LY:\"Libya\",MA:\"Morocco\",MC:\"Monaco\",MD:\"Moldova\",ME:\"Montenegro\",MF:\"Saint Martin (French Part)\",MG:\"Madagascar\",MH:\"Marshall Islands\",MK:\"North Macedonia\",ML:\"Mali\",MM:\"Myanmar\",MN:\"Mongolia\",MO:\"Macao\",MP:\"Northern Mariana Islands\",MQ:\"Martinique\",MR:\"Mauritania\",MS:\"Montserrat\",MT:\"Malta\",MU:\"Mauritius\",MV:\"Maldives\",MW:\"Malawi\",MX:\"Mexico\",MY:\"Malaysia\",MZ:\"Mozambique\",NA:\"Namibia\",NC:\"New Caledonia\",NE:\"Niger\",NF:\"Norfolk Island\",NG:\"Nigeria\",NI:\"Nicaragua\",NL:\"Netherlands\",NO:\"Norway\",NP:\"Nepal\",NR:\"Nauru\",NU:\"Niue\",NZ:\"New Zealand\",OM:\"Oman\",OS:\"South Ossetia\",PA:\"Panama\",PE:\"Peru\",PF:\"French Polynesia\",PG:\"Papua New Guinea\",PH:\"Philippines\",PK:\"Pakistan\",PL:\"Poland\",PM:\"Saint Pierre and Miquelon\",PN:\"Pitcairn\",PR:\"Puerto Rico\",PS:\"Palestine\",PT:\"Portugal\",PW:\"Palau\",PY:\"Paraguay\",QA:\"Qatar\",RE:\"Reunion\",RO:\"Romania\",RS:\"Serbia\",RU:\"Russia\",RW:\"Rwanda\",SA:\"Saudi Arabia\",SB:\"Solomon Islands\",SC:\"Seychelles\",SD:\"Sudan\",SE:\"Sweden\",SG:\"Singapore\",SH:\"Saint Helena\",SI:\"Slovenia\",SJ:\"Svalbard and Jan Mayen\",SK:\"Slovakia\",SL:\"Sierra Leone\",SM:\"San Marino\",SN:\"Senegal\",SO:\"Somalia\",SR:\"Suriname\",SS:\"South Sudan\",ST:\"Sao Tome and Principe\",SV:\"El Salvador\",SX:\"Sint Maarten\",SY:\"Syria\",SZ:\"Swaziland\",TA:\"Tristan da Cunha\",TC:\"Turks and Caicos Islands\",TD:\"Chad\",TF:\"French Southern Territories\",TG:\"Togo\",TH:\"Thailand\",TJ:\"Tajikistan\",TK:\"Tokelau\",TL:\"Timor-Leste\",TM:\"Turkmenistan\",TN:\"Tunisia\",TO:\"Tonga\",TR:\"Turkey\",TT:\"Trinidad and Tobago\",TV:\"Tuvalu\",TW:\"Taiwan\",TZ:\"Tanzania\",UA:\"Ukraine\",UG:\"Uganda\",UM:\"United States Minor Outlying Islands\",US:\"United States\",UY:\"Uruguay\",UZ:\"Uzbekistan\",VA:\"Holy See (Vatican City State)\",VC:\"Saint Vincent and the Grenadines\",VE:\"Venezuela\",VG:\"Virgin Islands, British\",VI:\"Virgin Islands, U.S.\",VN:\"Vietnam\",VU:\"Vanuatu\",WF:\"Wallis and Futuna\",WS:\"Samoa\",XK:\"Kosovo\",YE:\"Yemen\",YT:\"Mayotte\",ZA:\"South Africa\",ZM:\"Zambia\",ZW:\"Zimbabwe\",ZZ:\"International\"},$=n(59),s=n.n($),f=s.a.shape({country_calling_codes:s.a.object.isRequired,countries:s.a.object.isRequired}),y=s.a.objectOf(s.a.string),p=n(14),h=n.n(p),m=n(2331),g=n(2338);function b(t){return String.fromCodePoint(127397+t.toUpperCase().charCodeAt(0))}var v=[\"value\",\"onChange\",\"options\"],C=[\"value\",\"options\",\"className\",\"iconComponent\",\"getIconAspectRatio\",\"arrowComponent\",\"unicodeFlags\"];function O(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return N(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return N(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function N(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function P(){return P=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},P.apply(this,arguments)}function S(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function w(t){var e=t.value,n=t.onChange,r=t.options,a=S(t,v),i=Object(u.useCallback)((function(t){var e=t.target.value;n(\"ZZ\"===e?void 0:e)}),[n]);Object(u.useMemo)((function(){return x(r,e)}),[r,e]);return l.a.createElement(\"select\",P({},a,{value:e||\"ZZ\",onChange:i}),r.map((function(t){var e=t.value,n=t.label,r=t.divider;return l.a.createElement(\"option\",{key:r?\"|\":e||\"ZZ\",value:r?\"|\":e||\"ZZ\",disabled:!!r,style:r?j:void 0},n)})))}w.propTypes={value:s.a.string,onChange:s.a.func.isRequired,options:s.a.arrayOf(s.a.shape({value:s.a.string,label:s.a.string,divider:s.a.bool})).isRequired};var j={fontSize:\"1px\",backgroundColor:\"currentColor\",color:\"inherit\"};function I(t){var e,n=t.value,r=t.options,a=t.className,i=t.iconComponent,o=(t.getIconAspectRatio,t.arrowComponent),d=t.unicodeFlags,c=S(t,C),$=Object(u.useMemo)((function(){return x(r,n)}),[r,n]);return l.a.createElement(\"div\",{className:\"PhoneInputCountry\"},l.a.createElement(w,P({},c,{value:n,options:r,className:h()(\"PhoneInputCountrySelect\",a)})),d&&n&&l.a.createElement(\"div\",{className:\"PhoneInputCountryIconUnicode\"},b((e=n)[0])+b(e[1])),!(d&&n)&&l.a.createElement(i,{\"aria-hidden\":!0,country:n,label:$&&$.label,aspectRatio:d?1:void 0}),l.a.createElement(o,null))}function x(t,e){for(var n,r=O(t);!(n=r()).done;){var a=n.value;if(!a.divider&&a.value===e)return a}}I.propTypes={iconComponent:s.a.elementType,arrowComponent:s.a.elementType.isRequired,unicodeFlags:s.a.bool},I.defaultProps={arrowComponent:function(){return l.a.createElement(\"div\",{className:\"PhoneInputCountrySelectArrow\"})}};var E=[\"country\",\"countryName\",\"flags\",\"flagUrl\"];function A(){return A=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},A.apply(this,arguments)}function T(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function R(t){var e=t.country,n=t.countryName,r=t.flags,a=t.flagUrl,i=T(t,E);return r&&r[e]?r[e]({title:n}):l.a.createElement(\"img\",A({},i,{alt:n,role:n?void 0:\"presentation\",src:a.replace(\"{XX}\",e).replace(\"{xx}\",e.toLowerCase())}))}R.propTypes={country:s.a.string.isRequired,countryName:s.a.string.isRequired,flags:s.a.objectOf(s.a.elementType),flagUrl:s.a.string.isRequired};var M=[\"aspectRatio\"],F=[\"title\"],k=[\"title\"];function D(){return D=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},D.apply(this,arguments)}function L(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function B(t){var e=t.aspectRatio,n=L(t,M);return 1===e?l.a.createElement(U,n):l.a.createElement(G,n)}function G(t){var e=t.title,n=L(t,F);return l.a.createElement(\"svg\",D({},n,{xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 75 50\"}),l.a.createElement(\"title\",null,e),l.a.createElement(\"g\",{className:\"PhoneInputInternationalIconGlobe\",stroke:\"currentColor\",fill:\"none\",strokeWidth:\"2\",strokeMiterlimit:\"10\"},l.a.createElement(\"path\",{strokeLinecap:\"round\",d:\"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"}),l.a.createElement(\"path\",{d:\"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"}),l.a.createElement(\"line\",{x1:\"26\",y1:\"25\",x2:\"74\",y2:\"25\"}),l.a.createElement(\"line\",{x1:\"50\",y1:\"1\",x2:\"50\",y2:\"49\"}),l.a.createElement(\"path\",{strokeLinecap:\"round\",d:\"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"}),l.a.createElement(\"path\",{strokeLinecap:\"round\",d:\"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"})),l.a.createElement(\"path\",{className:\"PhoneInputInternationalIconPhone\",stroke:\"none\",fill:\"currentColor\",d:\"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"}))}function U(t){var e=t.title,n=L(t,k);return l.a.createElement(\"svg\",D({},n,{xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 50 50\"}),l.a.createElement(\"title\",null,e),l.a.createElement(\"g\",{className:\"PhoneInputInternationalIconGlobe\",stroke:\"currentColor\",fill:\"none\",strokeWidth:\"2\",strokeLinecap:\"round\"},l.a.createElement(\"path\",{d:\"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"}),l.a.createElement(\"path\",{d:\"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"}),l.a.createElement(\"path\",{d:\"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"}),l.a.createElement(\"path\",{d:\"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"}),l.a.createElement(\"line\",{x1:\"27.8\",y1:\"0.85\",x2:\"27.8\",y2:\"34.61\"}),l.a.createElement(\"line\",{x1:\"15.2\",y1:\"22.23\",x2:\"49.15\",y2:\"22.23\"})),l.a.createElement(\"path\",{className:\"PhoneInputInternationalIconPhone\",stroke:\"transparent\",fill:\"currentColor\",d:\"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"}))}function _(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return K(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return K(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function K(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function V(t,e){return!!Object(d.c)(t,e)||(console.error(\"Country not found: \".concat(t)),!1)}function W(t,e){return t&&0===(t=t.filter((function(t){return V(t,e)}))).length&&(t=void 0),t}B.propTypes={title:s.a.string.isRequired,aspectRatio:s.a.number},G.propTypes={title:s.a.string.isRequired},U.propTypes={title:s.a.string.isRequired};var q=[\"country\",\"label\",\"aspectRatio\"];function H(){return H=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},H.apply(this,arguments)}function Z(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function J(t){var e=t.flags,n=t.flagUrl,r=t.flagComponent,a=t.internationalIcon;function i(t){var i=t.country,o=t.label,d=t.aspectRatio,u=Z(t,q),c=a===B?d:void 0;return l.a.createElement(\"div\",H({},u,{className:h()(\"PhoneInputCountryIcon\",{\"PhoneInputCountryIcon--square\":1===c,\"PhoneInputCountryIcon--border\":i})}),i?l.a.createElement(r,{country:i,countryName:o,flags:e,flagUrl:n,className:\"PhoneInputCountryIconImg\"}):l.a.createElement(a,{title:o,aspectRatio:c,className:\"PhoneInputCountryIconImg\"}))}return i.propTypes={country:s.a.string,label:s.a.string.isRequired,aspectRatio:s.a.number},i}J({flagUrl:\"https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg\",flagComponent:R,internationalIcon:B});var Y=n(2440),X=n(2324);function z(t,e){return Object(a.a)(t||\"\",e)}function Q(t,e){var n=e.prevCountry,r=e.newCountry,a=e.metadata,i=e.useNationalFormat;if(n===r)return t;if(!t)return i?\"\":Object(X.a)(r,a);if(r){if(\"+\"===t[0]){if(i)return 0===t.indexOf(\"+\"+Object(d.b)(r,a))?function(t,e,n){if(e){var r=\"+\"+Object(d.b)(e,n);if(t.length<r.length){if(0===r.indexOf(t))return\"\"}else if(0===t.indexOf(r))return t.slice(r.length)}for(var a=0,i=Object.keys(n.country_calling_codes);a<i.length;a++){var o=i[a];if(t.indexOf(o)===\"+\".length)return t.slice(\"+\".length+o.length)}return\"\"}(t,r,a):\"\";if(n){var o=Object(X.a)(r,a);return 0===t.indexOf(o)?t:o}var u=Object(X.a)(r,a);return 0===t.indexOf(u)?t:u}}else if(\"+\"!==t[0])return tt(t,n,a)||\"\";return t}function tt(t,e,n){if(t){if(\"+\"===t[0]){if(\"+\"===t)return;var r=new Y.a(e,n);return r.input(t),r.getNumberValue()}if(e){var a=it(t,e,n);return\"+\".concat(Object(d.b)(e,n)).concat(a||\"\")}}}function et(t,e,n){var r=it(t,e,n);if(r){var a=r.length-function(t,e){return(e=new d.a(e)).selectNumberingPlan(t),e.numberingPlan.possibleLengths()[e.numberingPlan.possibleLengths().length-1]}(e,n);if(a>0)return t.slice(0,t.length-a)}return t}function nt(t,e){var n=e.country,r=e.countries,a=e.required,i=e.metadata;if(\"+\"===t)return n;var o=function(t,e){var n=new Y.a(null,e);return n.input(t),n.getCountry()}(t,i);return o&&(!r||r.indexOf(o)>=0)?o:!n||a||ot(t,n,i)?n:void 0}function rt(t,e,n){if(0===t.indexOf(Object(X.a)(e,n))){var r=new Y.a(e,n);r.input(t);var a=r.getNumber();return a?a.formatNational().replace(/\\D/g,\"\"):\"\"}return t.replace(/\\D/g,\"\")}function at(t,e,n){return String.prototype.localeCompare?t.localeCompare(e,n):t<e?-1:t>e?1:0}function it(t,e,n){var r=new Y.a(e,n);r.input(t);var a=r.getNumber();return a&&a.nationalNumber}function ot(t,e,n){for(var r=Object(X.a)(e,n),a=0;a<t.length&&a<r.length;){if(t[a]!==r[a])return!1;a++}return!0}function dt(t){var e=t.value,n=t.phoneNumber,r=t.defaultCountry,a=t.international,i=t.useNationalFormat,o=t.metadata;return(!1===a||i)&&n&&n.country?function(t){return t.formatNational().replace(/\\D/g,\"\")}(n):!e&&a&&r?Object(X.a)(r,o):e}function ut(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function lt(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ut(Object(n),!0).forEach((function(e){ct(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ut(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function ct(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function $t(t){return $t=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},$t(t)}var st=[\"name\",\"disabled\",\"readOnly\",\"autoComplete\",\"style\",\"className\",\"inputRef\",\"inputComponent\",\"numberInputProps\",\"smartCaret\",\"countrySelectComponent\",\"countrySelectProps\",\"containerComponent\",\"defaultCountry\",\"countries\",\"countryOptionsOrder\",\"labels\",\"flags\",\"flagComponent\",\"flagUrl\",\"addInternationalOption\",\"internationalIcon\",\"displayInitialValueAsLocalNumber\",\"initialValueFormat\",\"onCountryChange\",\"limitMaxLength\",\"countryCallingCodeEditable\",\"focusInputOnCountrySelection\",\"reset\",\"metadata\",\"international\",\"locales\"];function ft(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function yt(){return yt=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},yt.apply(this,arguments)}function pt(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function ht(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function mt(t,e){return mt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},mt(t,e)}function gt(t){var e=function(){if(\"undefined\"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Ct(t);if(e){var a=Ct(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return bt(this,n)}}function bt(t,e){if(e&&(\"object\"===$t(e)||\"function\"===typeof e))return e;if(void 0!==e)throw new TypeError(\"Derived constructors may only return object or undefined\");return vt(t)}function vt(t){if(void 0===t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return t}function Ct(t){return Ct=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ct(t)}function Ot(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Nt=function(t){!function(t,e){if(\"function\"!==typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,\"prototype\",{writable:!1}),e&&mt(t,e)}(i,t);var e,n,r,a=gt(i);function i(t){var e;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,i),Ot(vt(e=a.call(this,t)),\"setInputRef\",(function(t){e.inputRef.current=t;var n=e.props.inputRef;n&&(\"function\"===typeof n?n(t):n.current=t)})),Ot(vt(e),\"isCountrySupportedWithError\",(function(t){return V(t,e.props.metadata)})),Ot(vt(e),\"onCountryChange\",(function(t){var n=e.props,r=n.international,a=n.metadata,i=n.onChange,o=n.focusInputOnCountrySelection,d=e.state,u=Q(d.phoneDigits,{prevCountry:d.country,newCountry:t,metadata:a,useNationalFormat:!r}),l=tt(u,t,a);o&&e.inputRef.current.focus(),e.setState({country:t,hasUserSelectedACountry:!0,phoneDigits:u,value:l},(function(){i(l)}))})),Ot(vt(e),\"onChange\",(function(t){var n=e.props,r=n.defaultCountry,a=n.onChange,i=n.addInternationalOption,o=n.international,d=n.limitMaxLength,u=n.countryCallingCodeEditable,l=n.metadata,c=e.state,$=c.countries,s=function(t,e){var n,r=e.prevPhoneDigits,a=e.country,i=e.defaultCountry,o=e.countryRequired,d=e.getAnyCountry,u=e.countries,l=e.international,c=e.limitMaxLength,$=e.countryCallingCodeEditable,s=e.metadata;if(l&&!1===$){var f,y=Object(X.a)(a,s);if(0!==t.indexOf(y))return t&&\"+\"!==t[0]?f=tt(t=y+t,a,s):t=y,{phoneDigits:t,value:f,country:a}}return!1===l&&a&&t&&\"+\"===t[0]&&(t=rt(t,a,s)),t&&a&&c&&(t=et(t,a,s)),!t||\"+\"===t[0]||a&&!l||(t=\"+\"+t),!t&&r&&\"+\"===r[0]&&(a=l?void 0:i),\"+\"===t&&r&&\"+\"===r[0]&&r.length>\"+\".length&&(a=void 0),t&&(n=\"+\"===t[0]&&(\"+\"===t||a&&0===Object(X.a)(a,s).indexOf(t))?void 0:tt(t,a,s)),n&&(a=nt(n,{country:a,countries:u,metadata:s}),!1===l&&a&&t&&\"+\"===t[0]&&(n=tt(t=rt(t,a,s),a,s))),!a&&o&&(a=i||d()),{phoneDigits:t,country:a,value:n}}(t,{prevPhoneDigits:c.phoneDigits,country:c.country,countryRequired:!i,defaultCountry:r,getAnyCountry:function(){return e.getFirstSupportedCountry({countries:$})},countries:$,international:o,limitMaxLength:d,countryCallingCodeEditable:u,metadata:l}),f=s.phoneDigits,y=s.country,p=s.value,h={phoneDigits:f,value:p,country:y};!1===u&&(p||f!==e.state.phoneDigits||(h.forceRerender={})),e.setState(h,(function(){return a(p)}))})),Ot(vt(e),\"_onFocus\",(function(){return e.setState({isFocused:!0})})),Ot(vt(e),\"_onBlur\",(function(){return e.setState({isFocused:!1})})),Ot(vt(e),\"onFocus\",(function(t){e._onFocus();var n=e.props.onFocus;n&&n(t)})),Ot(vt(e),\"onBlur\",(function(t){var n=e.props.onBlur;e._onBlur(),n&&n(t)})),Ot(vt(e),\"onCountryFocus\",(function(t){e._onFocus();var n=e.props.countrySelectProps;if(n){var r=n.onFocus;r&&r(t)}})),Ot(vt(e),\"onCountryBlur\",(function(t){e._onBlur();var n=e.props.countrySelectProps;if(n){var r=n.onBlur;r&&r(t)}})),e.inputRef=l.a.createRef();var n=e.props,r=n.value,d=(n.labels,n.international),u=n.addInternationalOption,c=n.displayInitialValueAsLocalNumber,$=n.initialValueFormat,s=n.metadata,f=e.props,y=f.defaultCountry,p=f.countries;y&&(e.isCountrySupportedWithError(y)||(y=void 0)),p=W(p,s);var h=z(r,s);e.CountryIcon=J(e.props);var m=function(t){var e,n=t.value,r=t.phoneNumber,a=t.defaultCountry,i=t.getAnyCountry,o=t.countries,d=t.required,u=t.metadata;return r&&r.country?e=r.country:a&&(n&&!ot(n,a,u)||(e=a)),o&&o.indexOf(e)<0&&(e=void 0),!e&&d&&o&&o.length>0&&(e=i()),e}({value:r,phoneNumber:h,defaultCountry:y,required:!u,countries:p||Object(o.a)(s),getAnyCountry:function(){return e.getFirstSupportedCountry({countries:p})},metadata:s});return e.state={props:e.props,country:m,countries:p,phoneDigits:dt({value:r,phoneNumber:h,defaultCountry:y,international:d,useNationalFormat:c||\"national\"===$,metadata:s}),value:r},e}return e=i,r=[{key:\"getDerivedStateFromProps\",value:function(t,e){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ft(Object(n),!0).forEach((function(e){Ot(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ft(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({props:t},function(t,e,n){var r=t.metadata,a=t.countries,i=t.defaultCountry,o=t.value,d=t.reset,u=t.international,l=t.displayInitialValueAsLocalNumber,c=t.initialValueFormat,$=e.defaultCountry,s=e.value,f=e.reset,y=(n.country,n.value),p=n.hasUserSelectedACountry,h=function(t){return dt(lt(lt({},t),{},{international:u,useNationalFormat:l||\"national\"===c,metadata:r}))};if(d!==f)return{phoneDigits:h({value:void 0,defaultCountry:i}),value:void 0,country:i,hasUserSelectedACountry:void 0};if(i!==$){var m=!i||V(i,r),g=!y||u&&y===h({value:void 0,defaultCountry:$});if(!p&&m&&!o&&g)return{country:i,phoneDigits:h({value:void 0,defaultCountry:i}),value:void 0}}if(o!==s&&o!==y){var b,v,C;if(o){b=z(o,r);var O=W(a,r);b&&b.country?(!O||O.indexOf(b.country)>=0)&&(v=b.country):v=nt(o,{country:void 0,countries:O,metadata:r})}return o||(C={hasUserSelectedACountry:void 0}),lt(lt({},C),{},{phoneDigits:h({phoneNumber:b,value:o,defaultCountry:i}),value:o,country:o?v:i})}}(t,e.props,e))}}],(n=[{key:\"componentDidMount\",value:function(){var t=this.props.onCountryChange,e=this.props.defaultCountry,n=this.state.country;t&&(e&&(this.isCountrySupportedWithError(e)||(e=void 0)),n!==e&&t(n))}},{key:\"componentDidUpdate\",value:function(t,e){var n=this.props.onCountryChange,r=this.state.country;n&&r!==e.country&&n(r)}},{key:\"getCountrySelectOptions\",value:function(t){var e=t.countries,n=this.props,r=n.international,a=n.countryCallingCodeEditable,i=n.countryOptionsOrder,d=n.addInternationalOption,u=n.labels,l=n.locales,c=n.metadata;return this.useMemoCountrySelectOptions((function(){return function(t,e){if(!e)return t;for(var n,r=[],a=[],i=r,o=_(e);!(n=o()).done;){var d=n.value;\"|\"===d?i.push({divider:!0}):\"...\"===d||\"\\u2026\"===d?i=a:function(){var e=void 0;e=\"\\ud83c\\udf10\"===d?void 0:d;var n=t.indexOf(t.filter((function(t){return t.value===e}))[0]),r=t[n];t.splice(n,1),i.push(r)}()}return r.concat(t).concat(a)}(function(t){var e=t.countries,n=t.countryNames,r=t.addInternationalOption,a=t.compareStringsLocales,i=t.compareStrings;i||(i=at);var o=e.map((function(t){return{value:t,label:n[t]||t}}));return o.sort((function(t,e){return i(t.label,e.label,a)})),r&&o.unshift({label:n.ZZ}),o}({countries:e||Object(o.a)(c),countryNames:u,addInternationalOption:(!r||!1!==a)&&d,compareStringsLocales:l}),function(t,e){if(t&&(t=t.filter((function(t){switch(t){case\"\\ud83c\\udf10\":case\"|\":case\"...\":case\"\\u2026\":return!0;default:return V(t,e)}}))).length>0)return t}(i,c))}),[e,i,d,u,c])}},{key:\"useMemoCountrySelectOptions\",value:function(t,e){return this.countrySelectOptionsMemoDependencies&&function(t,e){if(t.length!==e.length)return!1;for(var n=0;n<t.length;){if(t[n]!==e[n])return!1;n++}return!0}(e,this.countrySelectOptionsMemoDependencies)||(this.countrySelectOptionsMemo=t(),this.countrySelectOptionsMemoDependencies=e),this.countrySelectOptionsMemo}},{key:\"getFirstSupportedCountry\",value:function(t){var e=t.countries;return this.getCountrySelectOptions({countries:e})[0].value}},{key:\"render\",value:function(){var t=this.props,e=t.name,n=t.disabled,r=t.readOnly,a=t.autoComplete,i=t.style,o=t.className,d=(t.inputRef,t.inputComponent),u=t.numberInputProps,c=t.smartCaret,$=t.countrySelectComponent,s=t.countrySelectProps,f=t.containerComponent,y=(t.defaultCountry,t.countries,t.countryOptionsOrder,t.labels),p=(t.flags,t.flagComponent,t.flagUrl,t.addInternationalOption,t.internationalIcon,t.displayInitialValueAsLocalNumber,t.initialValueFormat,t.onCountryChange,t.limitMaxLength,t.countryCallingCodeEditable,t.focusInputOnCountrySelection,t.reset,t.metadata),b=(t.international,t.locales,pt(t,st)),v=this.state,C=v.country,O=v.countries,N=v.phoneDigits,P=v.isFocused,S=c?m.a:g.a,w=this.getCountrySelectOptions({countries:O});return l.a.createElement(f,{style:i,className:h()(o,\"PhoneInput\",{\"PhoneInput--focus\":P,\"PhoneInput--disabled\":n,\"PhoneInput--readOnly\":r})},l.a.createElement($,yt({name:e?\"\".concat(e,\"Country\"):void 0,\"aria-label\":y.country},s,{value:C,options:w,onChange:this.onCountryChange,onFocus:this.onCountryFocus,onBlur:this.onCountryBlur,disabled:n||s&&s.disabled,readOnly:r||s&&s.readOnly,iconComponent:this.CountryIcon})),l.a.createElement(S,yt({ref:this.setInputRef,type:\"tel\",autoComplete:a},u,b,{name:e,metadata:p,country:C,value:N||\"\",onChange:this.onChange,onFocus:this.onFocus,onBlur:this.onBlur,disabled:n,readOnly:r,inputComponent:d,className:h()(\"PhoneInputInput\",u&&u.className,b.className)})))}}])&&ht(e.prototype,n),r&&ht(e,r),Object.defineProperty(e,\"prototype\",{writable:!1}),i}(l.a.PureComponent),Pt=l.a.forwardRef((function(t,e){return l.a.createElement(Nt,yt({},t,{inputRef:e}))}));Pt.propTypes={value:s.a.string,onChange:s.a.func.isRequired,onFocus:s.a.func,onBlur:s.a.func,disabled:s.a.bool,readOnly:s.a.bool,autoComplete:s.a.string.isRequired,initialValueFormat:s.a.oneOf([\"national\"]),displayInitialValueAsLocalNumber:s.a.bool,defaultCountry:s.a.string,countries:s.a.arrayOf(s.a.string),labels:y.isRequired,locales:s.a.oneOfType([s.a.string,s.a.arrayOf(s.a.string)]),flagUrl:s.a.string.isRequired,flags:s.a.objectOf(s.a.elementType),flagComponent:s.a.elementType.isRequired,addInternationalOption:s.a.bool.isRequired,internationalIcon:s.a.elementType.isRequired,countryOptionsOrder:s.a.arrayOf(s.a.string),style:s.a.object,className:s.a.string,countrySelectComponent:s.a.elementType.isRequired,countrySelectProps:s.a.object,inputComponent:s.a.elementType.isRequired,containerComponent:s.a.elementType.isRequired,numberInputProps:s.a.object,smartCaret:s.a.bool.isRequired,international:s.a.bool,limitMaxLength:s.a.bool.isRequired,countryCallingCodeEditable:s.a.bool.isRequired,metadata:f.isRequired,onCountryChange:s.a.func,focusInputOnCountrySelection:s.a.bool.isRequired},Pt.defaultProps={autoComplete:\"tel\",countrySelectComponent:I,flagComponent:R,flagUrl:\"https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg\",internationalIcon:B,inputComponent:\"input\",containerComponent:\"div\",reset:s.a.any,smartCaret:!0,addInternationalOption:!0,limitMaxLength:!1,countryCallingCodeEditable:!0,focusInputOnCountrySelection:!0};var St=Pt;function wt(){return wt=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},wt.apply(this,arguments)}function jt(t){var e=l.a.forwardRef((function(t,e){return l.a.createElement(St,wt({ref:e},t))}));return e.propTypes={metadata:f.isRequired,labels:y.isRequired},e.defaultProps={metadata:t,labels:c},e}jt();function It(t,e){var n=Array.prototype.slice.call(e);return n.push(r.a),t.apply(this,n)}jt(r.a);function xt(){return It(i.a,arguments)}},2331:function(t,e,n){\"use strict\";var r=n(0),a=n.n(r),i=n(59),o=n.n(i);function d(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return u(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function u(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function l(t,e){for(var n,r=0,a=d(e.split(\"\"));!(n=a()).done;){n.value===t&&r++}return r}function c(t,e){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"x\",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:\" \",a=t.length,i=l(\"(\",t),o=l(\")\",t),d=i-o;d>0&&a<e.length;)t+=e[a].replace(n,r),\")\"===e[a]&&d--,a++;return t}function $(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function f(t,e,n){\"string\"===typeof n&&(n=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"x\",n=arguments.length>2?arguments[2]:void 0;if(!t)return function(t){return{text:t}};var r=l(e,t);return function(a){if(!a)return{text:\"\",template:t};for(var i,o=0,d=\"\",u=$(t.split(\"\"));!(i=u()).done;){var l=i.value;if(l===e){if(d+=a[o],++o===a.length&&a.length<r)break}else d+=l}return n&&(d=c(d,t)),{text:d,template:t}}}(n));var r=n(t)||{},a=r.text,i=r.template;if(void 0===a&&(a=t),i)if(void 0===e)e=a.length;else{for(var o=0,d=!1,u=-1;o<a.length&&o<i.length;){if(a[o]!==i[o]){if(0===e){d=!0,e=o;break}u=o,e--}o++}d||(e=u+1)}return{text:a,caret:e}}function y(t){return t.hasAttribute(\"readonly\")}function p(t){if(t.selectionStart!==t.selectionEnd)return{start:t.selectionStart,end:t.selectionEnd}}var h=8,m=46;function g(t,e){void 0!==e&&(!function(){if(\"undefined\"!==typeof navigator)return b.test(navigator.userAgent)}()?t.setSelectionRange(e,e):setTimeout((function(){return t.setSelectionRange(e,e)}),0))}var b=/Android/i;function v(t,e,n,r,a){if(!y(e)){var i=function(t){switch(t.keyCode){case h:return\"Backspace\";case m:return\"Delete\"}}(t);switch(i){case\"Delete\":case\"Backspace\":t.preventDefault();var o=p(e);return o?(C(e,o),O(e,n,r,void 0,a)):O(e,n,r,i,a)}}}function C(t,e){var n=t.value;n=n.slice(0,e.start)+n.slice(e.end),t.value=n,g(t,e.start)}function O(t,e,n,r,a){var i=function(t,e,n){for(var r=\"\",a=0,i=0;i<t.length;){var o=n(t[i],r);void 0!==o&&(r+=o,void 0!==e&&(e===i?a=r.length-1:e>i&&(a=r.length))),i++}return void 0===e&&(a=r.length),{value:r,caret:a}}(t.value,t.selectionStart,e),o=i.value,d=i.caret;if(r){var u=function(t,e,n){switch(n){case\"Backspace\":e>0&&(t=t.slice(0,e-1)+t.slice(e),e--);break;case\"Delete\":t=t.slice(0,e)+t.slice(e+1)}return{value:t,caret:e}}(o,d,r);o=u.value,d=u.caret}var l=f(o,d,n),c=l.text;d=l.caret,t.value=c,g(t,d),a(o)}var N=[\"value\",\"parse\",\"format\",\"inputComponent\",\"onChange\",\"onKeyDown\"];function P(){return P=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},P.apply(this,arguments)}function S(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function w(t,e){var n=t.value,i=t.parse,o=t.format,d=t.inputComponent,u=t.onChange,l=t.onKeyDown,c=S(t,N),$=Object(r.useRef)(),s=Object(r.useCallback)((function(t){$.current=t,e&&(\"function\"===typeof e?e(t):e.current=t)}),[e]),f=Object(r.useCallback)((function(t){O($.current,i,o,void 0,u)}),[$,i,o,u]),y=Object(r.useCallback)((function(t){return l&&l(t),v(t,$.current,i,o,u)}),[$,i,o,u,l]);return a.a.createElement(d,P({},c,{ref:s,value:o(I(n)?\"\":n).text,onKeyDown:y,onChange:f}))}(w=a.a.forwardRef(w)).propTypes={parse:o.a.func.isRequired,format:o.a.func.isRequired,inputComponent:o.a.elementType.isRequired,type:o.a.string.isRequired,value:o.a.string,onChange:o.a.func.isRequired,onKeyDown:o.a.func,onCut:o.a.func,onPaste:o.a.func},w.defaultProps={inputComponent:\"input\",type:\"text\"};var j=w;function I(t){return void 0===t||null===t}var x=n(2440),E=n(2422),A=n(2325),T=[\"country\",\"international\",\"withCountryCallingCode\",\"metadata\"];function R(){return R=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},R.apply(this,arguments)}function M(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}e.a=function(t){function e(t,e){var n=t.country,i=t.international,o=t.withCountryCallingCode,d=t.metadata,u=M(t,T),l=Object(r.useCallback)((function(t){var e=new x.a(n,d),r=Object(A.a)({country:n,international:i,withCountryCallingCode:o,metadata:d}),a=e.input(r+t),u=e.getTemplate();return r&&(a=Object(A.b)(a,r),u&&(u=Object(A.b)(u,r))),{text:a,template:u}}),[n,d]);return a.a.createElement(j,R({},u,{ref:e,parse:E.b,format:l}))}return(e=a.a.forwardRef(e)).propTypes={value:o.a.string.isRequired,onChange:o.a.func.isRequired,country:o.a.string,international:o.a.bool,withCountryCallingCode:o.a.bool,metadata:o.a.object.isRequired},e.defaultProps={metadata:t},e}()},2332:function(t,e,n){\"use strict\";var r=n(2314),a=(n(2450),n(2451),n(2452),n(2453),n(2454),n(2245)),i=n(0),o=n.n(i),d=n(59),u=n.n(d),l=n(2440),c=n(2263),$=n(2324);function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null==n)return;var r,a,i=[],o=!0,d=!1;try{for(n=n.call(t);!(o=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(u){d=!0,a=u}finally{try{o||null==n.return||n.return()}finally{if(d)throw a}}return i}(t,e)||function(t,e){if(!t)return;if(\"string\"===typeof t)return f(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return f(t,e)}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function f(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function y(t){var e=this,n=t.value,r=t.onChange,o=t.country,d=t.defaultCountry,u=t.international,f=t.withCountryCallingCode,y=t.useNationalFormatForDefaultCountryValue,p=t.metadata,h=Object(i.useRef)(),m=function(t,e,n){console.error(\"[react-phone-number-input] Expected phone number \".concat(t,\" to correspond to country \").concat(e,\" but \").concat(n?\"in reality it corresponds to country \"+n:\"it doesn't\",\".\")),h.current=!0},g=function(t){return function(t,e,n,r,i,o,d,u){if(e&&n&&r){var s=Object($.a)(e,d);return t?(0!==t.indexOf(s)&&u(t,e),t):s}if(!t)return\"\";if(!e&&!i)return t;var f=new l.a(void 0,d);f.input(t);var y=f.getNumber();return y?e?(y.country&&y.country!==e?u(t,e,y.country):y.countryCallingCode!==Object(a.b)(e,d)&&u(t,e),n?y.nationalNumber:Object(c.a)(y.formatNational())):y.countryCallingCode&&y.countryCallingCode===Object(a.b)(i,d)&&o?Object(c.a)(y.formatNational()):t:\"\"}(n,o,u,f,d,y,p,(function(){t&&t.onCountryMismatch&&t.onCountryMismatch();for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];m.apply(e,r)}))},b=s(Object(i.useState)(o),2),v=b[0],C=b[1],O=s(Object(i.useState)(d),2),N=O[0],P=O[1],S=s(Object(i.useState)(g()),2),w=S[0],j=S[1],I=s(Object(i.useState)(n),2),x=I[0],E=I[1],A=s(Object(i.useState)(),2),T=(A[0],A[1]),R=Object(i.useCallback)((function(){return T({})}),[T]);function M(t){if(t){o&&u&&!f&&(t=\"+\".concat(Object(a.b)(o,p)).concat(t));var e=new l.a(o||d,p);return e.input(t),e.getNumberValue()}}Object(i.useEffect)((function(){n!==x&&(E(n),j(g()))}),[n]),Object(i.useEffect)((function(){if(o!==v){var t;C(o);var e=g({onCountryMismatch:function(){t=!0}});j(e),t&&E(M(e))}}),[o]),Object(i.useEffect)((function(){d!==N&&(P(d),j(g()))}),[d]),Object(i.useEffect)((function(){x!==n&&r(x)}),[x]);var F=Object(i.useCallback)((function(t){var e;if(o)if(u&&f){var n=Object($.a)(o,p);if(0!==t.indexOf(n))if(t&&\"+\"!==t[0])t=n+t;else if(!h.current)return j(n),E(void 0),R()}else t&&\"+\"===t[0]&&(t=t.slice(1));else d||t&&\"+\"!==t[0]&&(t=\"+\"+t);t&&(e=M(t)),j(t),E(e)}),[o,u,f,d,p,j,E,R,h]);return[w,F]}var p=[\"Component\",\"country\",\"defaultCountry\",\"useNationalFormatForDefaultCountryValue\",\"value\",\"onChange\",\"metadata\",\"international\",\"withCountryCallingCode\"];function h(){return h=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},h.apply(this,arguments)}function m(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null==n)return;var r,a,i=[],o=!0,d=!1;try{for(n=n.call(t);!(o=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(u){d=!0,a=u}finally{try{o||null==n.return||n.return()}finally{if(d)throw a}}return i}(t,e)||function(t,e){if(!t)return;if(\"string\"===typeof t)return g(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return g(t,e)}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function g(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function b(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function v(t,e){var n=t.Component,r=t.country,a=t.defaultCountry,i=t.useNationalFormatForDefaultCountryValue,d=t.value,u=t.onChange,l=t.metadata,c=t.international,$=t.withCountryCallingCode,s=b(t,p),f=m(y({value:d,onChange:u,country:r,defaultCountry:a,international:c,withCountryCallingCode:$,useNationalFormatForDefaultCountryValue:i,metadata:l}),2),g=f[0],v=f[1];return o.a.createElement(n,h({},s,{ref:e,metadata:l,international:c,withCountryCallingCode:$,country:r||a,value:g,onChange:v}))}(v=o.a.forwardRef(v)).propTypes={value:u.a.string,onChange:u.a.func.isRequired,country:u.a.string,defaultCountry:u.a.string,international:u.a.bool,withCountryCallingCode:u.a.bool,Component:u.a.elementType.isRequired,useNationalFormatForDefaultCountryValue:u.a.bool.isRequired,metadata:u.a.object.isRequired},v.defaultProps={useNationalFormatForDefaultCountryValue:!0};var C=v,O=n(2331),N=n(2338),P=[\"smartCaret\"];function S(){return S=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},S.apply(this,arguments)}function w(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function j(t){function e(t,e){var n=t.smartCaret,r=w(t,P);return o.a.createElement(C,S({},r,{ref:e,Component:n?O.a:N.a}))}return(e=o.a.forwardRef(e)).propTypes={type:u.a.string,autoComplete:u.a.string,smartCaret:u.a.bool.isRequired,metadata:u.a.object.isRequired},e.defaultProps={type:\"tel\",autoComplete:\"tel\",smartCaret:!0,metadata:t},e}j();e.a=j(r.a)},2333:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return N}));var r=n(2245),a=n(2320),i=n(2256),o=n(2284);var d=n(2281),u=/^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;var l=n(2321);function c(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return $(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return $(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function $(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function f(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function y(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var p={formatExtension:function(t,e,n){return\"\".concat(t).concat(n.ext()).concat(e)}};function h(t,e,n,a){if(n=n?f(f({},p),n):p,a=new r.a(a),t.country&&\"001\"!==t.country){if(!a.hasCountry(t.country))throw new Error(\"Unknown country: \".concat(t.country));a.country(t.country)}else{if(!t.countryCallingCode)return t.phone||\"\";a.selectNumberingPlan(t.countryCallingCode)}var i,o=a.countryCallingCode(),d=n.v2?t.nationalNumber:t.phone;switch(e){case\"NATIONAL\":return d?g(i=m(d,t.carrierCode,\"NATIONAL\",a,n),t.ext,a,n.formatExtension):\"\";case\"INTERNATIONAL\":return d?(i=m(d,null,\"INTERNATIONAL\",a,n),g(i=\"+\".concat(o,\" \").concat(i),t.ext,a,n.formatExtension)):\"+\".concat(o);case\"E.164\":return\"+\".concat(o).concat(d);case\"RFC3966\":return Object(l.a)({number:\"+\".concat(o).concat(d),ext:t.ext});case\"IDD\":if(!n.fromCountry)return;var c=function(t,e,n,a,i){if(Object(r.b)(a,i.metadata)===n){var o=m(t,e,\"NATIONAL\",i);return\"1\"===n?n+\" \"+o:o}var d=function(t,e,n){var a=new r.a(n);return a.selectNumberingPlan(t,e),a.defaultIDDPrefix()?a.defaultIDDPrefix():u.test(a.IDDPrefix())?a.IDDPrefix():void 0}(a,void 0,i.metadata);if(d)return\"\".concat(d,\" \").concat(n,\" \").concat(m(t,null,\"INTERNATIONAL\",i))}(d,t.carrierCode,o,n.fromCountry,a);return g(c,t.ext,a,n.formatExtension);default:throw new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"'.concat(e,'\"'))}}function m(t,e,n,r,a){var o=function(t,e){for(var n,r=c(t);!(n=r()).done;){var a=n.value;if(a.leadingDigitsPatterns().length>0){var o=a.leadingDigitsPatterns()[a.leadingDigitsPatterns().length-1];if(0!==e.search(o))continue}if(Object(i.a)(e,a.pattern()))return a}}(r.formats(),t);return o?Object(d.b)(t,o,{useInternationalFormat:\"INTERNATIONAL\"===n,withNationalPrefix:!o.nationalPrefixIsOptionalWhenFormattingInNationalFormat()||!a||!1!==a.nationalPrefix,carrierCode:e,metadata:r}):t}function g(t,e,n,r){return e?r(t,e,n):t}function b(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function v(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?b(Object(n),!0).forEach((function(e){C(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function C(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function O(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var N=function(){function t(e,n,a){if(function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),!e)throw new TypeError(\"`country` or `countryCallingCode` not passed\");if(!n)throw new TypeError(\"`nationalNumber` not passed\");if(!a)throw new TypeError(\"`metadata` not passed\");var i=new r.a(a);P(e)&&(this.country=e,i.country(e),e=i.countryCallingCode()),this.countryCallingCode=e,this.nationalNumber=n,this.number=\"+\"+this.countryCallingCode+this.nationalNumber,this.metadata=a}var e,n,d;return e=t,(n=[{key:\"setExt\",value:function(t){this.ext=t}},{key:\"isPossible\",value:function(){return Object(a.a)(this,{v2:!0},this.metadata)}},{key:\"isValid\",value:function(){return function(t,e,n){if(e=e||{},n=new r.a(n),!t.country)return!1;if(n.selectNumberingPlan(t.country,t.countryCallingCode),n.hasTypes())return void 0!==Object(o.a)(t,e,n.metadata);var a=e.v2?t.nationalNumber:t.phone;return Object(i.a)(a,n.nationalNumberPattern())}(this,{v2:!0},this.metadata)}},{key:\"isNonGeographic\",value:function(){return new r.a(this.metadata).isNonGeographicCallingCode(this.countryCallingCode)}},{key:\"isEqual\",value:function(t){return this.number===t.number&&this.ext===t.ext}},{key:\"getType\",value:function(){return Object(o.a)(this,{v2:!0},this.metadata)}},{key:\"format\",value:function(t,e){return h(this,t,e?v(v({},e),{},{v2:!0}):{v2:!0},this.metadata)}},{key:\"formatNational\",value:function(t){return this.format(\"NATIONAL\",t)}},{key:\"formatInternational\",value:function(t){return this.format(\"INTERNATIONAL\",t)}},{key:\"getURI\",value:function(t){return this.format(\"RFC3966\",t)}}])&&O(e.prototype,n),d&&O(e,d),Object.defineProperty(e,\"prototype\",{writable:!1}),t}(),P=function(t){return/^[A-Z]{2}$/.test(t)}},2334:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return N}));var r=n(2250),a=n(2326),i=n(2245),o=n(2322),d=n(2323),u=new RegExp(\"(?:\"+Object(d.a)()+\")$\",\"i\");var l=n(2422),c=n(2320),$=n(2321),s=n(2333),f=n(2256),y=n(2316),p=n(2317),h=n(2319),m=new RegExp(\"[\"+r.d+r.e+\"]\"),g=new RegExp(\"[^\"+r.e+\"#]+$\");function b(t,e,n){if(e=e||{},n=new i.a(n),e.defaultCountry&&!n.hasCountry(e.defaultCountry)){if(e.v2)throw new a.a(\"INVALID_COUNTRY\");throw new Error(\"Unknown country: \".concat(e.defaultCountry))}var d=function(t,e,n){if(t&&0===t.indexOf(\"tel:\"))return Object($.b)(t);var r=function(t,e,n){if(!t)return;if(t.length>250){if(n)throw new a.a(\"TOO_LONG\");return}if(!1===e)return t;var r=t.search(m);if(r<0)return;return t.slice(r).replace(g,\"\")}(t,n,e);if(!r)return{};if(!Object(o.a)(r))return Object(o.b)(r)?{error:\"TOO_SHORT\"}:{};var i=function(t){var e=t.search(u);if(e<0)return{};for(var n=t.slice(0,e),r=t.match(u),a=1;a<r.length;){if(r[a])return{number:n,ext:r[a]};a++}}(r);if(i.ext)return i;return{number:r}}(t,e.v2,e.extract),b=d.number,v=d.ext,C=d.error;if(!b){if(e.v2){if(\"TOO_SHORT\"===C)throw new a.a(\"TOO_SHORT\");throw new a.a(\"NOT_A_NUMBER\")}return{}}var O=function(t,e,n,r){var a,o=Object(y.a)(Object(l.a)(t),e,n,r.metadata),d=o.countryCallingCode,u=o.number;if(d)r.selectNumberingPlan(d);else{if(!u||!e&&!n)return{};r.selectNumberingPlan(e,n),e&&(a=e),d=n||Object(i.b)(e,r.metadata)}if(!u)return{countryCallingCode:d};var c=Object(p.a)(Object(l.a)(u),r),$=c.nationalNumber,s=c.carrierCode,f=Object(h.a)(d,$,r);f&&(a=f,\"001\"===f||r.country(a));return{country:a,countryCallingCode:d,nationalNumber:$,carrierCode:s}}(b,e.defaultCountry,e.defaultCallingCode,n),N=O.country,P=O.nationalNumber,S=O.countryCallingCode,w=O.carrierCode;if(!n.hasSelectedNumberingPlan()){if(e.v2)throw new a.a(\"INVALID_COUNTRY\");return{}}if(!P||P.length<r.c){if(e.v2)throw new a.a(\"TOO_SHORT\");return{}}if(P.length>r.b){if(e.v2)throw new a.a(\"TOO_LONG\");return{}}if(e.v2){var j=new s.a(S,P,n.metadata);return N&&(j.country=N),w&&(j.carrierCode=w),v&&(j.ext=v),j}var I=!!(e.extended?n.hasSelectedNumberingPlan():N)&&Object(f.a)(P,n.nationalNumberPattern());return e.extended?{country:N,countryCallingCode:S,carrierCode:w,valid:I,possible:!!I||!(!0!==e.extended||!n.possibleLengths()||!Object(c.b)(P,n)),phone:P,ext:v}:I?function(t,e,n){var r={country:t,phone:e};n&&(r.ext=n);return r}(N,P,v):{}}function v(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function C(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?v(Object(n),!0).forEach((function(e){O(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function O(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function N(t,e,n){return b(t,C(C({},e),{},{v2:!0}),n)}},2338:function(t,e,n){\"use strict\";var r=n(0),a=n.n(r),i=n(59),o=n.n(i),d=n(2422),u=n(2440);var l=n(2325),c=[\"value\",\"onChange\",\"country\",\"international\",\"withCountryCallingCode\",\"metadata\",\"inputComponent\"];function $(){return $=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},$.apply(this,arguments)}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}e.a=function(t){function e(t,e){var n=t.value,i=t.onChange,o=t.country,u=t.international,y=t.withCountryCallingCode,p=t.metadata,h=t.inputComponent,m=s(t,c),g=Object(l.a)({country:o,international:u,withCountryCallingCode:y,metadata:p}),b=Object(r.useCallback)((function(t){var e=Object(d.a)(t.target.value);e===n&&(0===f(g,e,o,p).indexOf(t.target.value)&&(e=e.slice(0,-1)));i(e)}),[g,n,i,o,p]);return a.a.createElement(h,$({},m,{ref:e,value:f(g,n,o,p),onChange:b}))}return(e=a.a.forwardRef(e)).propTypes={value:o.a.string.isRequired,onChange:o.a.func.isRequired,country:o.a.string,international:o.a.bool,withCountryCallingCode:o.a.bool,metadata:o.a.object.isRequired,inputComponent:o.a.elementType.isRequired},e.defaultProps={metadata:t,inputComponent:\"input\"},e}();function f(t,e,n,r){return Object(l.b)(function(t,e,n){return n||(n=e,e=void 0),new u.a(e,n).input(t)}(t+e,n,r),t)}},2422:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return o})),n.d(e,\"b\",(function(){return d}));var r=n(2263);function a(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function o(t){for(var e,n=\"\",r=a(t.split(\"\"));!(e=r()).done;){n+=d(e.value,n)||\"\"}return n}function d(t,e){if(\"+\"===t){if(e)return;return\"+\"}return Object(r.b)(t)}},2440:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return at}));var r=n(2245),a=n(2333);function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(e){var n=e.onCountryChange,r=e.onCallingCodeChange;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.onCountryChange=n,this.onCallingCodeChange=r}var e,n,r;return e=t,(n=[{key:\"reset\",value:function(t,e){this.international=!1,this.IDDPrefix=void 0,this.missingPlus=void 0,this.callingCode=void 0,this.digits=\"\",this.resetNationalSignificantNumber(),this.initCountryAndCallingCode(t,e)}},{key:\"resetNationalSignificantNumber\",value:function(){this.nationalSignificantNumber=this.getNationalDigits(),this.nationalSignificantNumberMatchesInput=!0,this.nationalPrefix=void 0,this.carrierCode=void 0,this.complexPrefixBeforeNationalSignificantNumber=void 0}},{key:\"update\",value:function(t){for(var e=0,n=Object.keys(t);e<n.length;e++){var r=n[e];this[r]=t[r]}}},{key:\"initCountryAndCallingCode\",value:function(t,e){this.setCountry(t),this.setCallingCode(e)}},{key:\"setCountry\",value:function(t){this.country=t,this.onCountryChange(t)}},{key:\"setCallingCode\",value:function(t){this.callingCode=t,this.onCallingCodeChange(t,this.country)}},{key:\"startInternationalNumber\",value:function(t,e){this.international=!0,this.initCountryAndCallingCode(t,e)}},{key:\"appendDigits\",value:function(t){this.digits+=t}},{key:\"appendNationalSignificantNumberDigits\",value:function(t){this.nationalSignificantNumber+=t}},{key:\"getNationalDigits\",value:function(){return this.international?this.digits.slice((this.IDDPrefix?this.IDDPrefix.length:0)+(this.callingCode?this.callingCode.length:0)):this.digits}},{key:\"getDigitsWithoutInternationalPrefix\",value:function(){return this.international&&this.IDDPrefix?this.digits.slice(this.IDDPrefix.length):this.digits}}])&&i(e.prototype,n),r&&i(e,r),Object.defineProperty(e,\"prototype\",{writable:!1}),t}();function d(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return u(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function u(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var l=\"x\",c=new RegExp(l);function $(t,e){if(e<1)return\"\";for(var n=\"\";e>1;)1&e&&(n+=t),e>>=1,t+=t;return n+t}function s(t,e){return\")\"===t[e]&&e++,function(t){var e=[],n=0;for(;n<t.length;)\"(\"===t[n]?e.push(n):\")\"===t[n]&&e.pop(),n++;var r=0,a=\"\";e.push(t.length);for(var i=0,o=e;i<o.length;i++){var d=o[i];a+=t.slice(r,d),r=d+1}return a}(t.slice(0,e))}var f=n(2271),y=n(2263),p=n(2281);function h(t,e,n){var r=n.metadata,a=n.shouldTryNationalPrefixFormattingRule,i=n.getSeparatorAfterNationalPrefix;if(new RegExp(\"^(?:\".concat(e.pattern(),\")$\")).test(t.nationalSignificantNumber))return function(t,e,n){var r=n.metadata,a=n.shouldTryNationalPrefixFormattingRule,i=n.getSeparatorAfterNationalPrefix;t.nationalSignificantNumber,t.international,t.nationalPrefix,t.carrierCode;if(a(e)){var o=m(t,e,{useNationalPrefixFormattingRule:!0,getSeparatorAfterNationalPrefix:i,metadata:r});if(o)return o}return m(t,e,{useNationalPrefixFormattingRule:!1,getSeparatorAfterNationalPrefix:i,metadata:r})}(t,e,{metadata:r,shouldTryNationalPrefixFormattingRule:a,getSeparatorAfterNationalPrefix:i})}function m(t,e,n){var r=n.metadata,a=n.useNationalPrefixFormattingRule,i=n.getSeparatorAfterNationalPrefix,o=Object(p.b)(t.nationalSignificantNumber,e,{carrierCode:t.carrierCode,useInternationalFormat:t.international,withNationalPrefix:a,metadata:r});if(a||(t.nationalPrefix?o=t.nationalPrefix+i(e)+o:t.complexPrefixBeforeNationalSignificantNumber&&(o=t.complexPrefixBeforeNationalSignificantNumber+\" \"+o)),function(t,e){return Object(y.a)(t)===e.getNationalDigits()}(o,t))return o}function g(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var b=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t)}var e,n,r;return e=t,(n=[{key:\"parse\",value:function(t){if(this.context=[{or:!0,instructions:[]}],this.parsePattern(t),1!==this.context.length)throw new Error(\"Non-finalized contexts left when pattern parse ended\");var e=this.context[0],n=e.branches,r=e.instructions;if(n)return{op:\"|\",args:n.concat([N(r)])};if(0===r.length)throw new Error(\"Pattern is required\");return 1===r.length?r[0]:r}},{key:\"startContext\",value:function(t){this.context.push(t)}},{key:\"endContext\",value:function(){this.context.pop()}},{key:\"getContext\",value:function(){return this.context[this.context.length-1]}},{key:\"parsePattern\",value:function(t){if(!t)throw new Error(\"Pattern is required\");var e=t.match(O);if(e){var n=e[1],r=t.slice(0,e.index),a=t.slice(e.index+n.length);switch(n){case\"(?:\":r&&this.parsePattern(r),this.startContext({or:!0,instructions:[],branches:[]});break;case\")\":if(!this.getContext().or)throw new Error('\")\" operator must be preceded by \"(?:\" operator');if(r&&this.parsePattern(r),0===this.getContext().instructions.length)throw new Error('No instructions found after \"|\" operator in an \"or\" group');var i=this.getContext().branches;i.push(N(this.getContext().instructions)),this.endContext(),this.getContext().instructions.push({op:\"|\",args:i});break;case\"|\":if(!this.getContext().or)throw new Error('\"|\" operator can only be used inside \"or\" groups');if(r&&this.parsePattern(r),!this.getContext().branches){if(1!==this.context.length)throw new Error('\"branches\" not found in an \"or\" group context');this.getContext().branches=[]}this.getContext().branches.push(N(this.getContext().instructions)),this.getContext().instructions=[];break;case\"[\":r&&this.parsePattern(r),this.startContext({oneOfSet:!0});break;case\"]\":if(!this.getContext().oneOfSet)throw new Error('\"]\" operator must be preceded by \"[\" operator');this.endContext(),this.getContext().instructions.push({op:\"[]\",args:v(r)});break;default:throw new Error(\"Unknown operator: \".concat(n))}a&&this.parsePattern(a)}else{if(C.test(t))throw new Error(\"Illegal characters found in a pattern: \".concat(t));this.getContext().instructions=this.getContext().instructions.concat(t.split(\"\"))}}}])&&g(e.prototype,n),r&&g(e,r),Object.defineProperty(e,\"prototype\",{writable:!1}),t}();function v(t){for(var e=[],n=0;n<t.length;){if(\"-\"===t[n]){if(0===n||n===t.length-1)throw new Error(\"Couldn't parse a one-of set pattern: \".concat(t));for(var r=t[n-1].charCodeAt(0)+1,a=t[n+1].charCodeAt(0)-1,i=r;i<=a;)e.push(String.fromCharCode(i)),i++}else e.push(t[n]);n++}return e}var C=/[\\(\\)\\[\\]\\?\\:\\|]/,O=new RegExp(\"(\\\\||\\\\(\\\\?\\\\:|\\\\)|\\\\[|\\\\])\");function N(t){return 1===t.length?t[0]:t}function P(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return S(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return S(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function S(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function w(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var j=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.matchTree=(new b).parse(e)}var e,n,r;return e=t,n=[{key:\"match\",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.allowOverflow;if(!t)throw new Error(\"String is required\");var r=I(t.split(\"\"),this.matchTree,!0);if(r&&r.match&&delete r.matchedChars,!r||!r.overflow||n)return r}}],n&&w(e.prototype,n),r&&w(e,r),Object.defineProperty(e,\"prototype\",{writable:!1}),t}();function I(t,e,n){if(\"string\"===typeof e){var r=t.join(\"\");return 0===e.indexOf(r)?t.length===e.length?{match:!0,matchedChars:t}:{partialMatch:!0}:0===r.indexOf(e)?n&&t.length>e.length?{overflow:!0}:{match:!0,matchedChars:t.slice(0,e.length)}:void 0}if(Array.isArray(e)){for(var a=t.slice(),i=0;i<e.length;){var o=I(a,e[i],n&&i===e.length-1);if(!o)return;if(o.overflow)return o;if(!o.match){if(o.partialMatch)return{partialMatch:!0};throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(o,null,2)))}if(0===(a=a.slice(o.matchedChars.length)).length)return i===e.length-1?{match:!0,matchedChars:t}:{partialMatch:!0};i++}return n?{overflow:!0}:{match:!0,matchedChars:t.slice(0,t.length-a.length)}}switch(e.op){case\"|\":for(var d,u,l=P(e.args);!(u=l()).done;){var c=I(t,u.value,n);if(c){if(c.overflow)return c;if(c.match)return{match:!0,matchedChars:c.matchedChars};if(!c.partialMatch)throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(c,null,2)));d=!0}}return d?{partialMatch:!0}:void 0;case\"[]\":for(var $,s=P(e.args);!($=s()).done;){var f=$.value;if(t[0]===f)return 1===t.length?{match:!0,matchedChars:t}:n?{overflow:!0}:{match:!0,matchedChars:[f]}}return;default:throw new Error(\"Unsupported instruction tree: \".concat(e))}}var x=n(2250),E=n(2315);function A(t,e){var n=\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(n)return(n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(!t)return;if(\"string\"===typeof t)return T(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return T(t,e)}(t))||e&&t&&\"number\"===typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function T(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function R(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var M=$(\"9\",15),F=/[- ]/,k=function(){return/\\[([^\\[\\]])*\\]/g},D=function(){return/\\d(?=[^,}][^,}])/g},L=new RegExp(\"[\"+x.f+\"]*\\\\$1[\"+x.f+\"]*(\\\\$\\\\d[\"+x.f+\"]*)*$\"),B=function(){function t(e){e.state;var n=e.metadata;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.metadata=n,this.resetFormat()}var e,n,r;return e=t,(n=[{key:\"resetFormat\",value:function(){this.chosenFormat=void 0,this.template=void 0,this.nationalNumberTemplate=void 0,this.populatedNationalNumberTemplate=void 0,this.populatedNationalNumberTemplatePosition=-1}},{key:\"reset\",value:function(t,e){this.resetFormat(),t?(this.isNANP=\"1\"===t.callingCode(),this.matchingFormats=t.formats(),e.nationalSignificantNumber&&this.narrowDownMatchingFormats(e)):(this.isNANP=void 0,this.matchingFormats=[])}},{key:\"format\",value:function(t,e){var n,r,a=this;if(n=e.nationalSignificantNumber,r=this.metadata,\"IS_POSSIBLE\"===Object(f.a)(n,r))for(var i,o=A(this.matchingFormats);!(i=o()).done;){var d=i.value,u=h(e,d,{metadata:this.metadata,shouldTryNationalPrefixFormattingRule:function(t){return a.shouldTryNationalPrefixFormattingRule(t,{international:e.international,nationalPrefix:e.nationalPrefix})},getSeparatorAfterNationalPrefix:function(t){return a.getSeparatorAfterNationalPrefix(t)}});if(u)return this.resetFormat(),this.chosenFormat=d,this.setNationalNumberTemplate(u.replace(/\\d/g,l),e),this.populatedNationalNumberTemplate=u,this.populatedNationalNumberTemplatePosition=this.template.lastIndexOf(l),u}return this.formatNationalNumberWithNextDigits(t,e)}},{key:\"formatNationalNumberWithNextDigits\",value:function(t,e){var n=this.chosenFormat,r=this.chooseFormat(e);if(r)return r===n?this.formatNextNationalNumberDigits(t):this.formatNextNationalNumberDigits(e.getNationalDigits())}},{key:\"narrowDownMatchingFormats\",value:function(t){var e=this,n=t.nationalSignificantNumber,r=t.nationalPrefix,a=t.international,i=n,o=i.length-3;o<0&&(o=0),this.matchingFormats=this.matchingFormats.filter((function(t){return e.formatSuits(t,a,r)&&e.formatMatches(t,i,o)})),this.chosenFormat&&-1===this.matchingFormats.indexOf(this.chosenFormat)&&this.resetFormat()}},{key:\"formatSuits\",value:function(t,e,n){return!(n&&!t.usesNationalPrefix()&&!t.nationalPrefixIsOptionalWhenFormattingInNationalFormat())&&!(!e&&!n&&t.nationalPrefixIsMandatoryWhenFormattingInNationalFormat())}},{key:\"formatMatches\",value:function(t,e,n){var r=t.leadingDigitsPatterns().length;if(0===r)return!0;n=Math.min(n,r-1);var a=t.leadingDigitsPatterns()[n];if(e.length<3)try{return void 0!==new j(a).match(e,{allowOverflow:!0})}catch(i){return console.error(i),!0}return new RegExp(\"^(\".concat(a,\")\")).test(e)}},{key:\"getFormatFormat\",value:function(t,e){return e?t.internationalFormat():t.format()}},{key:\"chooseFormat\",value:function(t){for(var e,n=this,r=function(){var r=e.value;return n.chosenFormat===r?\"break\":L.test(n.getFormatFormat(r,t.international))?n.createTemplateForFormat(r,t)?(n.chosenFormat=r,\"break\"):(n.matchingFormats=n.matchingFormats.filter((function(t){return t!==r})),\"continue\"):\"continue\"},a=A(this.matchingFormats.slice());!(e=a()).done;){var i=r();if(\"break\"===i)break}return this.chosenFormat||this.resetFormat(),this.chosenFormat}},{key:\"createTemplateForFormat\",value:function(t,e){if(!(t.pattern().indexOf(\"|\")>=0)){var n=this.getTemplateForFormat(t,e);return n?(this.setNationalNumberTemplate(n,e),!0):void 0}}},{key:\"getSeparatorAfterNationalPrefix\",value:function(t){return this.isNANP||t&&t.nationalPrefixFormattingRule()&&F.test(t.nationalPrefixFormattingRule())?\" \":\"\"}},{key:\"getInternationalPrefixBeforeCountryCallingCode\",value:function(t,e){var n=t.IDDPrefix,r=t.missingPlus;return n?e&&!1===e.spacing?n:n+\" \":r?\"\":\"+\"}},{key:\"getTemplate\",value:function(t){if(this.template){for(var e=-1,n=0,r=t.international?this.getInternationalPrefixBeforeCountryCallingCode(t,{spacing:!1}):\"\";n<r.length+t.getDigitsWithoutInternationalPrefix().length;)e=this.template.indexOf(l,e+1),n++;return s(this.template,e+1)}}},{key:\"setNationalNumberTemplate\",value:function(t,e){this.nationalNumberTemplate=t,this.populatedNationalNumberTemplate=t,this.populatedNationalNumberTemplatePosition=-1,e.international?this.template=this.getInternationalPrefixBeforeCountryCallingCode(e).replace(/[\\d\\+]/g,l)+$(l,e.callingCode.length)+\" \"+t:this.template=t}},{key:\"getTemplateForFormat\",value:function(t,e){var n=e.nationalSignificantNumber,r=e.international,a=e.nationalPrefix,i=e.complexPrefixBeforeNationalSignificantNumber,o=t.pattern();o=o.replace(k(),\"\\\\d\").replace(D(),\"\\\\d\");var d=M.match(o)[0];if(!(n.length>d.length)){var u=new RegExp(\"^\"+o+\"$\"),c=n.replace(/\\d/g,\"9\");u.test(c)&&(d=c);var s,f=this.getFormatFormat(t,r);if(this.shouldTryNationalPrefixFormattingRule(t,{international:r,nationalPrefix:a})){var h=f.replace(p.a,t.nationalPrefixFormattingRule());if(Object(y.a)(t.nationalPrefixFormattingRule())===(a||\"\")+Object(y.a)(\"$1\")&&(f=h,s=!0,a))for(var m=a.length;m>0;)f=f.replace(/\\d/,l),m--}var g=d.replace(new RegExp(o),f).replace(new RegExp(\"9\",\"g\"),l);return s||(i?g=$(l,i.length)+\" \"+g:a&&(g=$(l,a.length)+this.getSeparatorAfterNationalPrefix(t)+g)),r&&(g=Object(E.a)(g)),g}}},{key:\"formatNextNationalNumberDigits\",value:function(t){var e=function(t,e,n){for(var r,a=d(n.split(\"\"));!(r=a()).done;){var i=r.value;if(t.slice(e+1).search(c)<0)return;e=t.search(c),t=t.replace(c,i)}return[t,e]}(this.populatedNationalNumberTemplate,this.populatedNationalNumberTemplatePosition,t);if(e)return this.populatedNationalNumberTemplate=e[0],this.populatedNationalNumberTemplatePosition=e[1],s(this.populatedNationalNumberTemplate,this.populatedNationalNumberTemplatePosition+1);this.resetFormat()}},{key:\"shouldTryNationalPrefixFormattingRule\",value:function(t,e){var n=e.international,r=e.nationalPrefix;if(t.nationalPrefixFormattingRule()){var a=t.usesNationalPrefix();if(a&&r||!a&&!n)return!0}}}])&&R(e.prototype,n),r&&R(e,r),Object.defineProperty(e,\"prototype\",{writable:!1}),t}(),G=n(2316),U=n(2283),_=n(2318),K=n(2282);function V(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null==n)return;var r,a,i=[],o=!0,d=!1;try{for(n=n.call(t);!(o=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(u){d=!0,a=u}finally{try{o||null==n.return||n.return()}finally{if(d)throw a}}return i}(t,e)||function(t,e){if(!t)return;if(\"string\"===typeof t)return W(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return W(t,e)}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function W(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function q(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var H=\"[\"+x.f+x.e+\"]+\",Z=new RegExp(\"^\"+H+\"$\",\"i\"),J=\"(?:[\"+x.d+\"][\"+x.f+x.e+\"]*|[\"+x.f+x.e+\"]+)\",Y=new RegExp(\"[^\"+x.f+x.e+\"]+.*$\"),X=/[^\\d\\[\\]]/,z=function(){function t(e){var n=e.defaultCountry,r=e.defaultCallingCode,a=e.metadata,i=e.onNationalSignificantNumberChange;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.defaultCountry=n,this.defaultCallingCode=r,this.metadata=a,this.onNationalSignificantNumberChange=i}var e,n,r;return e=t,(n=[{key:\"input\",value:function(t,e){var n,r=function(t){var e=V(function(t){var e=function(t){var e,n=t.search(J);if(!(n<0))return\"+\"===(t=t.slice(n))[0]&&(e=!0,t=t.slice(\"+\".length)),t=t.replace(Y,\"\"),e&&(t=\"+\"+t),t}(t)||\"\";return\"+\"===e[0]?[e.slice(\"+\".length),!0]:[e]}(t),2),n=e[0],r=e[1];return Z.test(n)||(n=\"\"),[n,r]}(t),a=V(r,2),i=a[0],o=a[1],d=Object(y.a)(i);return o&&(e.digits||(e.startInternationalNumber(),d||(n=!0))),d&&this.inputDigits(d,e),{digits:d,justLeadingPlus:n}}},{key:\"inputDigits\",value:function(t,e){var n=e.digits,r=n.length<3&&n.length+t.length>=3;if(e.appendDigits(t),r&&this.extractIddPrefix(e),this.isWaitingForCountryCallingCode(e)){if(!this.extractCountryCallingCode(e))return}else e.appendNationalSignificantNumberDigits(t);e.international||this.hasExtractedNationalSignificantNumber||this.extractNationalSignificantNumber(e.getNationalDigits(),(function(t){return e.update(t)}))}},{key:\"isWaitingForCountryCallingCode\",value:function(t){var e=t.international,n=t.callingCode;return e&&!n}},{key:\"extractCountryCallingCode\",value:function(t){var e=Object(G.a)(\"+\"+t.getDigitsWithoutInternationalPrefix(),this.defaultCountry,this.defaultCallingCode,this.metadata.metadata),n=e.countryCallingCode,r=e.number;if(n)return t.setCallingCode(n),t.update({nationalSignificantNumber:r}),!0}},{key:\"reset\",value:function(t){if(t){this.hasSelectedNumberingPlan=!0;var e=t._nationalPrefixForParsing();this.couldPossiblyExtractAnotherNationalSignificantNumber=e&&X.test(e)}else this.hasSelectedNumberingPlan=void 0,this.couldPossiblyExtractAnotherNationalSignificantNumber=void 0}},{key:\"extractNationalSignificantNumber\",value:function(t,e){if(this.hasSelectedNumberingPlan){var n=Object(_.a)(t,this.metadata),r=n.nationalPrefix,a=n.nationalNumber,i=n.carrierCode;if(a!==t)return this.onExtractedNationalNumber(r,i,a,t,e),!0}}},{key:\"extractAnotherNationalSignificantNumber\",value:function(t,e,n){if(!this.hasExtractedNationalSignificantNumber)return this.extractNationalSignificantNumber(t,n);if(this.couldPossiblyExtractAnotherNationalSignificantNumber){var r=Object(_.a)(t,this.metadata),a=r.nationalPrefix,i=r.nationalNumber,o=r.carrierCode;if(i!==e)return this.onExtractedNationalNumber(a,o,i,t,n),!0}}},{key:\"onExtractedNationalNumber\",value:function(t,e,n,r,a){var i,o,d=r.lastIndexOf(n);if(d>=0&&d===r.length-n.length){o=!0;var u=r.slice(0,d);u!==t&&(i=u)}a({nationalPrefix:t,carrierCode:e,nationalSignificantNumber:n,nationalSignificantNumberMatchesInput:o,complexPrefixBeforeNationalSignificantNumber:i}),this.hasExtractedNationalSignificantNumber=!0,this.onNationalSignificantNumberChange()}},{key:\"reExtractNationalSignificantNumber\",value:function(t){return!!this.extractAnotherNationalSignificantNumber(t.getNationalDigits(),t.nationalSignificantNumber,(function(e){return t.update(e)}))||(this.extractIddPrefix(t)||this.fixMissingPlus(t)?(this.extractCallingCodeAndNationalSignificantNumber(t),!0):void 0)}},{key:\"extractIddPrefix\",value:function(t){var e=t.international,n=t.IDDPrefix,r=t.digits;if(t.nationalSignificantNumber,!e&&!n){var a=Object(K.a)(r,this.defaultCountry,this.defaultCallingCode,this.metadata.metadata);return void 0!==a&&a!==r?(t.update({IDDPrefix:r.slice(0,r.length-a.length)}),this.startInternationalNumber(t,{country:void 0,callingCode:void 0}),!0):void 0}}},{key:\"fixMissingPlus\",value:function(t){if(!t.international){var e=Object(U.a)(t.digits,this.defaultCountry,this.defaultCallingCode,this.metadata.metadata),n=e.countryCallingCode;if(e.number,n)return t.update({missingPlus:!0}),this.startInternationalNumber(t,{country:t.country,callingCode:n}),!0}}},{key:\"startInternationalNumber\",value:function(t,e){var n=e.country,r=e.callingCode;t.startInternationalNumber(n,r),t.nationalSignificantNumber&&(t.resetNationalSignificantNumber(),this.onNationalSignificantNumberChange(),this.hasExtractedNationalSignificantNumber=void 0)}},{key:\"extractCallingCodeAndNationalSignificantNumber\",value:function(t){this.extractCountryCallingCode(t)&&this.extractNationalSignificantNumber(t.getNationalDigits(),(function(e){return t.update(e)}))}}])&&q(e.prototype,n),r&&q(e,r),Object.defineProperty(e,\"prototype\",{writable:!1}),t}();var Q=n(2319);function tt(t){return tt=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},tt(t)}function et(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:\"undefined\"!==typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(null==n)return;var r,a,i=[],o=!0,d=!1;try{for(n=n.call(t);!(o=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(u){d=!0,a=u}finally{try{o||null==n.return||n.return()}finally{if(d)throw a}}return i}(t,e)||function(t,e){if(!t)return;if(\"string\"===typeof t)return nt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);\"Object\"===n&&t.constructor&&(n=t.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(t);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return nt(t,e)}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function nt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function rt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var at=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.metadata=new r.a(n);var a=et(this.getCountryAndCallingCode(e),2),i=a[0],o=a[1];this.defaultCountry=i,this.defaultCallingCode=o,this.reset()}var e,n,i;return e=t,(n=[{key:\"getCountryAndCallingCode\",value:function(t){var e,n;return t&&(\"object\"===tt(t)?(e=t.defaultCountry,n=t.defaultCallingCode):e=t),e&&!this.metadata.hasCountry(e)&&(e=void 0),[e,n]}},{key:\"input\",value:function(t){var e=this.parser.input(t,this.state),n=e.digits;if(e.justLeadingPlus)this.formattedOutput=\"+\";else if(n){var r;if(this.determineTheCountryIfNeeded(),this.state.nationalSignificantNumber&&this.formatter.narrowDownMatchingFormats(this.state),this.metadata.hasSelectedNumberingPlan()&&(r=this.formatter.format(n,this.state)),void 0===r&&this.parser.reExtractNationalSignificantNumber(this.state)){this.determineTheCountryIfNeeded();var a=this.state.getNationalDigits();a&&(r=this.formatter.format(a,this.state))}this.formattedOutput=r?this.getFullNumber(r):this.getNonFormattedNumber()}return this.formattedOutput}},{key:\"reset\",value:function(){var t=this;return this.state=new o({onCountryChange:function(e){t.country=e},onCallingCodeChange:function(e,n){t.metadata.selectNumberingPlan(n,e),t.formatter.reset(t.metadata.numberingPlan,t.state),t.parser.reset(t.metadata.numberingPlan)}}),this.formatter=new B({state:this.state,metadata:this.metadata}),this.parser=new z({defaultCountry:this.defaultCountry,defaultCallingCode:this.defaultCallingCode,metadata:this.metadata,state:this.state,onNationalSignificantNumberChange:function(){t.determineTheCountryIfNeeded(),t.formatter.reset(t.metadata.numberingPlan,t.state)}}),this.state.reset(this.defaultCountry,this.defaultCallingCode),this.formattedOutput=\"\",this}},{key:\"isInternational\",value:function(){return this.state.international}},{key:\"getCallingCode\",value:function(){if(this.isInternational())return this.state.callingCode}},{key:\"getCountryCallingCode\",value:function(){return this.getCallingCode()}},{key:\"getCountry\",value:function(){if(this.state.digits)return this._getCountry()}},{key:\"_getCountry\",value:function(){var t=this.state.country;return t}},{key:\"determineTheCountryIfNeeded\",value:function(){this.state.country&&!this.isCountryCallingCodeAmbiguous()||this.determineTheCountry()}},{key:\"getFullNumber\",value:function(t){var e=this;if(this.isInternational()){var n=function(t){return e.formatter.getInternationalPrefixBeforeCountryCallingCode(e.state,{spacing:!!t})+t},r=this.state.callingCode;return n(r?t?\"\".concat(r,\" \").concat(t):r:\"\".concat(this.state.getDigitsWithoutInternationalPrefix()))}return t}},{key:\"getNonFormattedNationalNumberWithPrefix\",value:function(){var t=this.state,e=t.nationalSignificantNumber,n=t.complexPrefixBeforeNationalSignificantNumber,r=t.nationalPrefix,a=e,i=n||r;return i&&(a=i+a),a}},{key:\"getNonFormattedNumber\",value:function(){var t=this.state.nationalSignificantNumberMatchesInput;return this.getFullNumber(t?this.getNonFormattedNationalNumberWithPrefix():this.state.getNationalDigits())}},{key:\"getNonFormattedTemplate\",value:function(){var t=this.getNonFormattedNumber();if(t)return t.replace(/[\\+\\d]/g,l)}},{key:\"isCountryCallingCodeAmbiguous\",value:function(){var t=this.state.callingCode,e=this.metadata.getCountryCodesForCallingCode(t);return e&&e.length>1}},{key:\"determineTheCountry\",value:function(){this.state.setCountry(Object(Q.a)(this.isInternational()?this.state.callingCode:this.defaultCallingCode,this.state.nationalSignificantNumber,this.metadata))}},{key:\"getNumberValue\",value:function(){var t=this.state,e=t.digits,n=t.callingCode,r=t.country,a=t.nationalSignificantNumber;if(e)return this.isInternational()?n?\"+\"+n+a:\"+\"+e:r||n?\"+\"+(r?this.metadata.countryCallingCode():n)+a:void 0}},{key:\"getNumber\",value:function(){var t=this.state,e=t.nationalSignificantNumber,n=t.carrierCode,r=t.callingCode,i=this._getCountry();if(e&&(i||r)){var o=new a.a(i||r,e,this.metadata.metadata);return n&&(o.carrierCode=n),o}}},{key:\"isPossible\",value:function(){var t=this.getNumber();return!!t&&t.isPossible()}},{key:\"isValid\",value:function(){var t=this.getNumber();return!!t&&t.isValid()}},{key:\"getNationalNumber\",value:function(){return this.state.nationalSignificantNumber}},{key:\"getChars\",value:function(){return(this.state.international?\"+\":\"\")+this.state.digits}},{key:\"getTemplate\",value:function(){return this.formatter.getTemplate(this.state)||this.getNonFormattedTemplate()||\"\"}}])&&rt(e.prototype,n),i&&rt(e,i),Object.defineProperty(e,\"prototype\",{writable:!1}),t}()},2450:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return i}));var r=n(2285),a=n(2286);function i(){var t=Object(r.a)(arguments),e=t.text,n=t.options,i=t.metadata;return Object(a.a)(e,n,i)}},2451:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return i})),n.d(e,\"b\",(function(){return o}));var r=n(2450);function a(t){return a=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},a(t)}function i(t,e,n){if(n||\"object\"===a(e)&&(n=e,e=\"NATIONAL\"),!t)return\"\";var i=Object(r.a)(t,n);if(!i)return\"\";switch(e){case\"National\":e=\"NATIONAL\";break;case\"International\":e=\"INTERNATIONAL\"}return i.format(e)}function o(t,e){return i(t,\"INTERNATIONAL\",e)}},2452:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return u}));var r=n(2285),a=n(2286);function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){d(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function d(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function u(){var t=Object(r.a)(arguments),e=t.text,n=t.options,i=t.metadata;n=o(o({},n),{},{extract:!1});var d=Object(a.a)(e,n,i);return d&&d.isValid()||!1}},2453:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return u}));var r=n(2285),a=n(2286);function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){d(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function d(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function u(){var t=Object(r.a)(arguments),e=t.text,n=t.options,i=t.metadata;n=o(o({},n),{},{extract:!1});var d=Object(a.a)(e,n,i);return d&&d.isPossible()||!1}},2454:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return a}));var r=n(2245);function a(t){return new r.a(t).getCountries()}}}]);","name":"static/js/0.5836fac0.chunk.js","map":{"version":3,"names":["this","push","module","__webpack_exports__","__webpack_require__","d","Metadata","getCountryCallingCode","isSupportedCountry","semver_compare","a","b","split","pa","pb","i","na","Number","nb","isNaN","_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","metadata","Error","is_object","countries","concat","keys","join","type_of","validateMetadata","setVersion","call","value","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","undefined","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","test","hasCountry","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_this","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type2","getType","Type","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","countryCallingCode","version","v4","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","PLUS_CHARS","matchesEntirely","text","regular_expression","RegExp","_createForOfIteratorHelperLoose","o","allowArrayLike","it","next","bind","Array","isArray","minLen","_arrayLikeToArray","n","toString","slice","name","from","_unsupportedIterableToArray","done","arr","len","arr2","parseDigit","parseDigits","DIGITS","character","string","_step","result","_iterator","digit","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","element","indexOf","sort","mergeArrays","actual_length","minimum_length","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","_applyInternationalSeparatorStyle_js__WEBPACK_IMPORTED_MODULE_0__","number","_ref","useInternationalFormat","withNationalPrefix","formattedNumber","carrierCode","replace","pattern","internationalFormat","stripIddPrefix","_metadata_js__WEBPACK_IMPORTED_MODULE_0__","_constants_js__WEBPACK_IMPORTED_MODULE_1__","CAPTURING_DIGIT_PATTERN","countryMetadata","IDDPrefixPattern","search","matchedGroups","match","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__","_extractNationalNumber_js__WEBPACK_IMPORTED_MODULE_2__","_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_3__","possibleShorterNumber","possibleShorterNationalNumber","getNumberType","NON_FIXED_LINE_PHONE_TYPES","input","options","phone","isNumberTypeEqualTo","normalizeArguments","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_defineProperty","_slicedToArray","_arrayWithHoles","_i","_s","_e","_arr","_n","_d","err","_iterableToArrayLimit","_nonIterableRest","args","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_objectSpread","defaultCountry","parsePhoneNumberFromString","_parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__","_ParseError_js__WEBPACK_IMPORTED_MODULE_1__","_metadata_js__WEBPACK_IMPORTED_MODULE_2__","error","AC","AD","AE","AF","AG","AI","AL","AM","AO","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GT","GU","GW","GY","HK","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW","applyInternationalSeparatorStyle","_constants_js__WEBPACK_IMPORTED_MODULE_0__","trim","extractCountryCallingCode","_stripIddPrefix_js__WEBPACK_IMPORTED_MODULE_0__","_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign_js__WEBPACK_IMPORTED_MODULE_1__","_constants_js__WEBPACK_IMPORTED_MODULE_3__","numberWithoutIDD","_extractCountryCallin","shorterNumber","_countryCallingCode","extractNationalNumber","_extractNationalNumberFromPossiblyIncompleteNumber_js__WEBPACK_IMPORTED_MODULE_0__","_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_2__","_extractNationalNumbe","nationalNumberBefore","nationalNumberAfter","shouldHaveExtractedNationalPrefix","isPossibleIncompleteNationalNumber","extractNationalNumberFromPossiblyIncompleteNumber","prefixPattern","prefixMatch","exec","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","getCountryByCallingCode","_getNumberType_js__WEBPACK_IMPORTED_MODULE_1__","nationalPhoneNumber","possibleCountries","selectCountryFromList","isPossiblePhoneNumber","isPossibleNumber","_helpers_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_1__","isNonGeographicCallingCode","parseRFC3966","formatRFC3966","_isViablePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__","_part$split2","isViablePhoneNumber","isViablePhoneNumberStart","_extension_createExtensionPattern_js__WEBPACK_IMPORTED_MODULE_1__","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","createExtensionPattern","getExtensionDigitsPattern","maxLength","purpose","optionalExtnSuffix","possibleSeparatorsBetweenNumberAndExtLabel","possibleSeparatorsNumberExtLabelNoComma","getInternationalPhoneNumberPrefix","libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__","ONLY_DIGITS_REGEXP","prefix","getInputValuePrefix","removeInputValuePrefix","international","withCountryCallingCode","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","_wrapNativeSuper","Class","_cache","Map","fn","Function","has","get","set","Wrapper","_construct","_getPrototypeOf","create","_setPrototypeOf","Parent","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","e","p","setPrototypeOf","__proto__","getPrototypeOf","ParseError","_Error","subClass","superClass","_inherits","_super","Derived","hasNativeReflectConstruct","Super","NewTarget","_createSuper","code","min_isValidPhoneNumber","metadata_min_json","isValidPhoneNumber","getCountries","es6_metadata","react","react_default","en_json","AB","AQ","BV","GS","HM","OS","PN","TF","UM","ZZ","prop_types","prop_types_default","PropTypes_metadata","shape","isRequired","PropTypes_labels","objectOf","classnames","classnames_default","InputSmart","InputBasic","getRegionalIndicatorSymbol","letter","String","fromCodePoint","toUpperCase","charCodeAt","_excluded","_excluded2","_extends","assign","hasOwnProperty","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","CountrySelect","onChange","rest","onChange_","event","getSelectedOption","createElement","_ref2","label","divider","disabled","style","DIVIDER_STYLE","propTypes","func","arrayOf","bool","fontSize","backgroundColor","color","CountrySelectWithIcon","_ref3","className","Icon","iconComponent","Arrow","getIconAspectRatio","arrowComponent","unicodeFlags","selectedOption","aspectRatio","option","elementType","defaultProps","Flag_excluded","Flag_extends","Flag_objectWithoutProperties","Flag_objectWithoutPropertiesLoose","Flag_FlagComponent","countryName","flags","flagUrl","title","alt","role","src","toLowerCase","InternationalIcon_excluded","InternationalIcon_excluded2","_excluded3","InternationalIcon_extends","InternationalIcon_objectWithoutProperties","InternationalIcon_objectWithoutPropertiesLoose","InternationalIcon_InternationalIcon","InternationalIcon1x1","InternationalIcon3x2","xmlns","viewBox","stroke","fill","strokeWidth","strokeMiterlimit","strokeLinecap","x1","y1","x2","y2","countries_createForOfIteratorHelperLoose","countries_arrayLikeToArray","countries_unsupportedIterableToArray","isCountrySupportedWithError","console","getSupportedCountries","CountryIcon_excluded","CountryIcon_extends","CountryIcon_objectWithoutProperties","CountryIcon_objectWithoutPropertiesLoose","createCountryIconComponent","FlagComponent","flagComponent","InternationalIcon","internationalIcon","CountryIcon","_aspectRatio","AsYouType","parsePhoneNumber","getPhoneDigitsForNewCountry","phoneDigits","prevCountry","newCountry","useNationalFormat","countryCallingCodePrefix","_Object$keys","country_calling_code","stripCountryCallingCode","newCountryPrefix","defaultValue","e164","asYouType","getNumberValue","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","getCountryForPartialE164Number","partialE164Number","_ref4","required","derived_country","formatter","getCountry","getCountryFromPossiblyIncompleteInternationalPhoneNumber","couldNumberBelongToCountry","convertInternationalPhoneDigitsToNational","phoneNumber","getNumber","formatNational","compareStrings","locales","localeCompare","intlPhoneNumberPrefix","getInitialPhoneDigits","_ref6","generateNationalNumberDigits","PhoneInputWithCountry_excluded","PhoneInputWithCountry_ownKeys","PhoneInputWithCountry_extends","PhoneInputWithCountry_objectWithoutProperties","PhoneInputWithCountry_objectWithoutPropertiesLoose","PhoneInputWithCountry_defineProperty","PhoneInputWithCountry_PhoneNumberInput_","_React$PureComponent","PhoneNumberInput_","inputRef","current","ref","_this$props","focusInputOnCountrySelection","_this$state","state","newPhoneDigits","newValue","focus","setState","hasUserSelectedACountry","_phoneDigits","_this$props2","addInternationalOption","limitMaxLength","countryCallingCodeEditable","_this$state2","_onPhoneDigitsChange","_ref5","prevPhoneDigits","countryRequired","getAnyCountry","_value","onPhoneDigitsChange","getFirstSupportedCountry","stateUpdate","forceRerender","isFocused","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","createRef","_this$props3","_international","labels","_addInternationalOption","displayInitialValueAsLocalNumber","initialValueFormat","_metadata","_this$props4","_defaultCountry","_countries","preSelectedCountry","getPreSelectedCountry","PhoneInputWithCountry_objectSpread","prevProps","newDefaultCountry","newReset","reset","prevDefaultCountry","prevValue","prevReset","_getInitialPhoneDigits","parameters","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","parsedCountry","hasUserSelectedACountryUpdate","supportedCountries","getPhoneInputWithCountryStateUpdateFromNewProps","onCountryChange","selectedCountry","prevState","_this$props5","countryOptionsOrder","useMemoCountrySelectOptions","order","optionsOnTop","optionsOnBottom","appendTo","index","splice","sortCountryOptions","countryNames","compareStringsLocales","_compareStrings","countrySelectOptions","unshift","phoneInputHelpers_getCountrySelectOptions","countryOptions","getSupportedCountryOptions","generator","dependencies","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","getCountrySelectOptions","_this$props6","readOnly","autoComplete","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","_this$state3","InputComponent","onCountryFocus","onCountryBlur","setInputRef","PureComponent","PhoneNumberInput","forwardRef","oneOf","oneOfType","any","PhoneInputWithCountry","PhoneInputWithCountryDefault_extends","createPhoneInput","defaultMetadata","PhoneInputDefault","_arguments","count_occurences","symbol","count","closeBraces","retained_template","template","placeholder","empty_placeholder","cut_before","opening_braces","closing_braces","dangling_braces","templateFormatter_createForOfIteratorHelperLoose","templateFormatter_arrayLikeToArray","templateFormatter_unsupportedIterableToArray","format_format","caret","should_close_braces","characters_in_template","value_character_index","filled_in_template","templateFormatter","found","possibly_last_input_character_index","isReadOnly","hasAttribute","getSelection","selectionStart","selectionEnd","start","end","Keys","setCaretPosition","caret_position","navigator","ANDROID_USER_AGENT_REG_EXP","userAgent","isAndroid","setSelectionRange","setTimeout","inputControl_onKeyDown","_parse","on_change","operation","keyCode","getOperation","preventDefault","selection","eraseSelection","formatInputText","_parse2","parse_character","focused_input_character_index","parse_parse","newValueAndCaret","edit","formatted","Input","parse","onKeyDown","internalRef","setRef","_onChange","_onKeyDown","isEmptyValue","onCut","onPaste","react_Input","parseIncompletePhoneNumber","inputValuePrefix","InputSmart_excluded","InputSmart_extends","InputSmart_objectWithoutProperties","InputSmart_objectWithoutPropertiesLoose","getTemplate","usePhoneDigits","useNationalFormatForDefaultCountryValue","countryMismatchDetected","onCountryMismatch","actualCountry","getPhoneDigitsForValue","_len","_key","_useState2","setPrevCountry","_useState4","setPrevDefaultCountry","_useState6","setPhoneDigits","_useState8","valueForPhoneDigits","setValueForPhoneDigits","_useState10","setRerenderTrigger","rerender","getValueForPhoneDigits","_countryMismatchDetected","onSetPhoneDigits","PhoneInput_slicedToArray","PhoneInput_arrayWithHoles","PhoneInput_iterableToArrayLimit","PhoneInput_arrayLikeToArray","PhoneInput_unsupportedIterableToArray","PhoneInput_nonIterableRest","PhoneInput_PhoneInput","Component","_usePhoneDigits2","modules_PhoneInput","PhoneInputBrowser_excluded","PhoneInputBrowser_extends","PhoneInputBrowser_objectWithoutProperties","PhoneInputBrowser_objectWithoutPropertiesLoose","createInput","PhoneInput","PhoneNumber_PhoneNumber","isPossibleNumber_","SINGLE_IDD_PREFIX_REG_EXP","RFC3966","DEFAULT_OPTIONS","formatExtension","extension","formatNumber","addExtension","formatNationalNumber","fromCountry","iddPrefix","getIddPrefix","formatIDD","formatAs","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","chooseFormatForNumber","PhoneNumber_ownKeys","PhoneNumber_objectSpread","PhoneNumber_defineProperty","PhoneNumber","isCountryCode","national_number","isValidNumber","parsePhoneNumber_parsePhoneNumber","constants","EXTN_PATTERN","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","_parseInput","extract","throwOnError","startsAt","extractFormattedPhoneNumber","withExtensionStripped","numberWithoutExtension","matches","extractExtension","parseInput","formattedPhoneNumber","_parsePhoneNumber","defaultCallingCode","exactCountry","hasSelectedNumberingPlan","valid","extended","possible","formatIncompletePhoneNumber","parsePhoneNumberCharacter","_helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_0__","prevParsedCharacters","AsYouType_AsYouType","AsYouTypeState","onCallingCodeChange","missingPlus","digits","resetNationalSignificantNumber","initCountryAndCallingCode","nationalSignificantNumber","getNationalDigits","nationalSignificantNumberMatchesInput","complexPrefixBeforeNationalSignificantNumber","properties","setCountry","setCallingCode","nextDigits","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","repeat","times","cutAndStripNonPairedParens","cutBeforeIndex","pop","cleared_string","_dangling_braces","stripNonPairedParens","formatCompleteNumber","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","useNationalPrefixFormattingRule","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","formattedNationalNumber","isValidFormattedNationalNumber","AsYouTypeFormatter_PatternParser_defineProperties","PatternParser","AsYouTypeFormatter_PatternParser_classCallCheck","context","or","instructions","parsePattern","_this$context$","branches","op","expandSingleElementArray","OPERATOR","operator","before","rightPart","startContext","getContext","endContext","oneOfSet","parseOneOfSet","ILLEGAL_CHARACTER_REGEXP","values","nextValue","fromCharCode","array","AsYouTypeFormatter_PatternMatcher_createForOfIteratorHelperLoose","AsYouTypeFormatter_PatternMatcher_arrayLikeToArray","AsYouTypeFormatter_PatternMatcher_unsupportedIterableToArray","AsYouTypeFormatter_PatternMatcher_defineProperties","AsYouTypeFormatter_PatternMatcher_PatternMatcher","PatternMatcher","AsYouTypeFormatter_PatternMatcher_classCallCheck","matchTree","allowOverflow","_match","matchedChars","overflow","characters","tree","last","characterString","partialMatch","restCharacters","JSON","stringify","_result","_step2","_iterator2","_char","AsYouTypeFormatter_createForOfIteratorHelperLoose","AsYouTypeFormatter_arrayLikeToArray","AsYouTypeFormatter_unsupportedIterableToArray","AsYouTypeFormatter_defineProperties","LONGEST_DUMMY_PHONE_NUMBER","NATIONAL_PREFIX_SEPARATORS_PATTERN","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","NON_ALTERING_FORMAT_REG_EXP","AsYouTypeFormatter_AsYouTypeFormatter","AsYouTypeFormatter","AsYouTypeFormatter_classCallCheck","resetFormat","chosenFormat","nationalNumberTemplate","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","isNANP","matchingFormats","narrowDownMatchingFormats","formattedCompleteNumber","setNationalNumberTemplate","lastIndexOf","formatNationalNumberWithNextDigits","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","_this2","leadingDigitsPatternIndex","formatSuits","formatMatches","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","Math","min","leadingDigitsPattern","_this3","_loop","getFormatFormat","createTemplateForFormat","_ret","getTemplateForFormat","spacing","internationalPrefix","getInternationalPrefixBeforeCountryCallingCode","getDigitsWithoutInternationalPrefix","strictPattern","nationalNumberDummyDigits","nationalPrefixIncludedInTemplate","numberFormat","numberFormatWithNationalPrefix","position","populateTemplateWithDigits","helpers_extractCountryCallingCode","AsYouTypeParser_arrayLikeToArray","AsYouTypeParser_unsupportedIterableToArray","AsYouTypeParser_defineProperties","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser_AsYouTypeParser","AsYouTypeParser","onNationalSignificantNumberChange","AsYouTypeParser_classCallCheck","justLeadingPlus","_extractFormattedDigi","_extractFormattedDigi4","extractedNumber","hasPlus","_extractFormattedDigitsAndPlus","formattedDigits","extractFormattedDigitsAndPlus","_extractFormattedDigi2","startInternationalNumber","inputDigits","hasReceivedThreeLeadingDigits","appendDigits","extractIddPrefix","isWaitingForCountryCallingCode","appendNationalSignificantNumberDigits","hasExtractedNationalSignificantNumber","extractNationalSignificantNumber","update","couldPossiblyExtractAnotherNationalSignificantNumber","nationalDigits","onExtractedNationalNumber","prevNationalSignificantNumber","_extractNationalNumbe2","nationalSignificantNumberIndex","extractAnotherNationalSignificantNumber","fixMissingPlus","extractCallingCodeAndNationalSignificantNumber","_extractCountryCallin2","newCallingCode","AsYouType_slicedToArray","AsYouType_arrayWithHoles","AsYouType_iterableToArrayLimit","AsYouType_arrayLikeToArray","AsYouType_unsupportedIterableToArray","AsYouType_nonIterableRest","AsYouType_defineProperties","optionsOrDefaultCountry","AsYouType_classCallCheck","_this$getCountryAndCa2","getCountryAndCallingCode","_this$parser$input","parser","formattedOutput","determineTheCountryIfNeeded","reExtractNationalSignificantNumber","getFullNumber","getNonFormattedNumber","isInternational","getCallingCode","_getCountry","isCountryCallingCodeAmbiguous","determineTheCountry","getNonFormattedNationalNumberWithPrefix","isPossible","isValid","getNonFormattedTemplate","_parsePhoneNumberFromString_js__WEBPACK_IMPORTED_MODULE_1__","_normalizeArguments","formatPhoneNumber","formatPhoneNumberIntl"],"sources":["static/js/0.5836fac0.chunk.js"],"mappings":"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CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,KAAM,KAAM,MACnB,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,GAAM,CAAC,MACP,IAAO,CAAC,MACR,IAAO,CAAC,KAAM,MACdd,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,KAAM,MACd,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,KAAM,MACd,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAAC,MACR,IAAO,CAA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"},"input":"(this[\"webpackJsonplightence-admin\"] = this[\"webpackJsonplightence-admin\"] || []).push([[0],{\n\n/***/ 2245:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ Metadata; });\n__webpack_require__.d(__webpack_exports__, \"b\", function() { return /* binding */ getCountryCallingCode; });\n__webpack_require__.d(__webpack_exports__, \"c\", function() { return /* binding */ isSupportedCountry; });\n\n// UNUSED EXPORTS: validateMetadata, getExtPrefix\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/tools/semver-compare.js\n// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\n/* harmony default export */ var semver_compare = (function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n});\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/metadata.js\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n      // The test case could be found by searching for \"nonGeographical\".\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        // In that metadata, there was no concept of \"non-geographic\" metadata\n        // so metadata for `001` country code was stored along with other countries.\n        // The test case can be found by searching for:\n        // \"should work around `nonGeographic` metadata not existing\".\n        var countryCodes = this.countryCallingCodes()[callingCode];\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n  return Metadata;\n}();\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // \"possible length\" data is always present in Google's metadata.\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n  return NumberingPlan;\n}();\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n    this._format = format;\n    this.metadata = metadata;\n  }\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() &&\n      // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n    this.type = type;\n    this.metadata = metadata;\n  }\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n  return Type;\n}();\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n    case 'MOBILE':\n      return types[1];\n    case 'TOLL_FREE':\n      return types[2];\n    case 'PREMIUM_RATE':\n      return types[3];\n    case 'PERSONAL_NUMBER':\n      return types[4];\n    case 'VOICEMAIL':\n      return types[5];\n    case 'UAN':\n      return types[6];\n    case 'PAGER':\n      return types[7];\n    case 'VOIP':\n      return types[8];\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\nfunction validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\nfunction getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nfunction getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n  throw new Error(\"Unknown country: \".concat(country));\n}\nfunction isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\nfunction setVersion(metadata) {\n  var version = metadata.version;\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (semver_compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (semver_compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n\n/***/ }),\n\n/***/ 2250:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return MIN_LENGTH_FOR_NSN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return MAX_LENGTH_FOR_NSN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MAX_LENGTH_COUNTRY_CODE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return VALID_DIGITS; });\n/* unused harmony export WHITESPACE */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return VALID_PUNCTUATION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return PLUS_CHARS; });\n// The minimum length of the national significant number.\nvar MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nvar MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nvar MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nvar VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nvar WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nvar VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nvar PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n\n/***/ }),\n\n/***/ 2256:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return matchesEntirely; });\n/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nfunction matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n\n/***/ }),\n\n/***/ 2263:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export DIGITS */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return parseDigit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return parseDigits; });\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nvar DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n};\n\nfunction parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nfunction parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    var digit = parseDigit(character);\n    if (digit) {\n      result += digit;\n    }\n  }\n  return result;\n}\n\n/***/ }),\n\n/***/ 2271:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ checkNumberLength; });\n\n// UNUSED EXPORTS: checkNumberLengthForType\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/helpers/mergeArrays.js\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nfunction mergeArrays(a, b) {\n  var merged = a.slice();\n  for (var _iterator = _createForOfIteratorHelperLoose(b), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js\n\nfunction checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nfunction checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n    var mobile_type = metadata.type('MOBILE');\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n\n/***/ }),\n\n/***/ 2281:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return FIRST_GROUP_PATTERN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return formatNationalNumberUsingFormat; });\n/* harmony import */ var _applyInternationalSeparatorStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2315);\n // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nvar FIRST_GROUP_PATTERN = /(\\$\\d)/;\nfunction formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n    withNationalPrefix = _ref.withNationalPrefix,\n    carrierCode = _ref.carrierCode,\n    metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() :\n  // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n  if (useInternationalFormat) {\n    return Object(_applyInternationalSeparatorStyle_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(formattedNumber);\n  }\n  return formattedNumber;\n}\n\n/***/ }),\n\n/***/ 2282:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return stripIddPrefix; });\n/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2245);\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2250);\n\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + _constants_js__WEBPACK_IMPORTED_MODULE_1__[/* VALID_DIGITS */ \"e\"] + '])');\nfunction stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n  var countryMetadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n  return number;\n}\n\n/***/ }),\n\n/***/ 2283:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return extractCountryCallingCodeFromInternationalNumberWithoutPlusSign; });\n/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2245);\n/* harmony import */ var _matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2256);\n/* harmony import */ var _extractNationalNumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2317);\n/* harmony import */ var _checkNumberLength_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2271);\n\n\n\n\n\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nfunction extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? Object(_metadata_js__WEBPACK_IMPORTED_MODULE_0__[/* getCountryCallingCode */ \"b\"])(country, metadata) : callingCode;\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n    var _extractNationalNumbe = Object(_extractNationalNumber_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"])(possibleShorterNumber, metadata),\n      possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n    var _extractNationalNumbe2 = Object(_extractNationalNumber_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"])(number, metadata),\n      nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n    if (!Object(_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(nationalNumber, metadata.nationalNumberPattern()) && Object(_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || Object(_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"])(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n  return {\n    number: number\n  };\n}\n\n/***/ }),\n\n/***/ 2284:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getNumberType; });\n/* unused harmony export isNumberTypeEqualTo */\n/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2245);\n/* harmony import */ var _matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2256);\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nfunction getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n  metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!Object(_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\n    // For example, for \"US\" country.\n    // Old metadata (< `1.0.18`) had a specific \"types\" data structure\n    // that happened to be `undefined` for `MOBILE` in that case.\n    // Newer metadata (>= `1.0.18`) has another data structure that is\n    // not `undefined` for `MOBILE` in that case (it's just an empty array).\n    // So this `if` is just for backwards compatibility with old metadata.\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n    return 'FIXED_LINE';\n  }\n  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {\n    var type = _step.value;\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nfunction isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n  return Object(_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(nationalNumber, type.pattern());\n}\n\n/***/ }),\n\n/***/ 2285:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export default */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return normalizeArguments; });\n/* harmony import */ var _parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2334);\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n    text = _normalizeArguments.text,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata;\n  return Object(_parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(text, options, metadata);\n}\nfunction normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n    arg_1 = _Array$prototype$slic2[0],\n    arg_2 = _Array$prototype$slic2[1],\n    arg_3 = _Array$prototype$slic2[2],\n    arg_4 = _Array$prototype$slic2[3];\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n\n/***/ }),\n\n/***/ 2286:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return parsePhoneNumberFromString; });\n/* harmony import */ var _parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2334);\n/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2326);\n/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2245);\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n\n\nfunction parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !Object(_metadata_js__WEBPACK_IMPORTED_MODULE_2__[/* isSupportedCountry */ \"c\"])(options.defaultCountry, metadata)) {\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n  try {\n    return Object(_parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof _ParseError_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"]) {//\n    } else {\n      throw error;\n    }\n  }\n}\n\n/***/ }),\n\n/***/ 2314:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  \"version\": 4,\n  \"country_calling_codes\": {\n    \"1\": [\"US\", \"AG\", \"AI\", \"AS\", \"BB\", \"BM\", \"BS\", \"CA\", \"DM\", \"DO\", \"GD\", \"GU\", \"JM\", \"KN\", \"KY\", \"LC\", \"MP\", \"MS\", \"PR\", \"SX\", \"TC\", \"TT\", \"VC\", \"VG\", \"VI\"],\n    \"7\": [\"RU\", \"KZ\"],\n    \"20\": [\"EG\"],\n    \"27\": [\"ZA\"],\n    \"30\": [\"GR\"],\n    \"31\": [\"NL\"],\n    \"32\": [\"BE\"],\n    \"33\": [\"FR\"],\n    \"34\": [\"ES\"],\n    \"36\": [\"HU\"],\n    \"39\": [\"IT\", \"VA\"],\n    \"40\": [\"RO\"],\n    \"41\": [\"CH\"],\n    \"43\": [\"AT\"],\n    \"44\": [\"GB\", \"GG\", \"IM\", \"JE\"],\n    \"45\": [\"DK\"],\n    \"46\": [\"SE\"],\n    \"47\": [\"NO\", \"SJ\"],\n    \"48\": [\"PL\"],\n    \"49\": [\"DE\"],\n    \"51\": [\"PE\"],\n    \"52\": [\"MX\"],\n    \"53\": [\"CU\"],\n    \"54\": [\"AR\"],\n    \"55\": [\"BR\"],\n    \"56\": [\"CL\"],\n    \"57\": [\"CO\"],\n    \"58\": [\"VE\"],\n    \"60\": [\"MY\"],\n    \"61\": [\"AU\", \"CC\", \"CX\"],\n    \"62\": [\"ID\"],\n    \"63\": [\"PH\"],\n    \"64\": [\"NZ\"],\n    \"65\": [\"SG\"],\n    \"66\": [\"TH\"],\n    \"81\": [\"JP\"],\n    \"82\": [\"KR\"],\n    \"84\": [\"VN\"],\n    \"86\": [\"CN\"],\n    \"90\": [\"TR\"],\n    \"91\": [\"IN\"],\n    \"92\": [\"PK\"],\n    \"93\": [\"AF\"],\n    \"94\": [\"LK\"],\n    \"95\": [\"MM\"],\n    \"98\": [\"IR\"],\n    \"211\": [\"SS\"],\n    \"212\": [\"MA\", \"EH\"],\n    \"213\": [\"DZ\"],\n    \"216\": [\"TN\"],\n    \"218\": [\"LY\"],\n    \"220\": [\"GM\"],\n    \"221\": [\"SN\"],\n    \"222\": [\"MR\"],\n    \"223\": [\"ML\"],\n    \"224\": [\"GN\"],\n    \"225\": [\"CI\"],\n    \"226\": [\"BF\"],\n    \"227\": [\"NE\"],\n    \"228\": [\"TG\"],\n    \"229\": [\"BJ\"],\n    \"230\": [\"MU\"],\n    \"231\": [\"LR\"],\n    \"232\": [\"SL\"],\n    \"233\": [\"GH\"],\n    \"234\": [\"NG\"],\n    \"235\": [\"TD\"],\n    \"236\": [\"CF\"],\n    \"237\": [\"CM\"],\n    \"238\": [\"CV\"],\n    \"239\": [\"ST\"],\n    \"240\": [\"GQ\"],\n    \"241\": [\"GA\"],\n    \"242\": [\"CG\"],\n    \"243\": [\"CD\"],\n    \"244\": [\"AO\"],\n    \"245\": [\"GW\"],\n    \"246\": [\"IO\"],\n    \"247\": [\"AC\"],\n    \"248\": [\"SC\"],\n    \"249\": [\"SD\"],\n    \"250\": [\"RW\"],\n    \"251\": [\"ET\"],\n    \"252\": [\"SO\"],\n    \"253\": [\"DJ\"],\n    \"254\": [\"KE\"],\n    \"255\": [\"TZ\"],\n    \"256\": [\"UG\"],\n    \"257\": [\"BI\"],\n    \"258\": [\"MZ\"],\n    \"260\": [\"ZM\"],\n    \"261\": [\"MG\"],\n    \"262\": [\"RE\", \"YT\"],\n    \"263\": [\"ZW\"],\n    \"264\": [\"NA\"],\n    \"265\": [\"MW\"],\n    \"266\": [\"LS\"],\n    \"267\": [\"BW\"],\n    \"268\": [\"SZ\"],\n    \"269\": [\"KM\"],\n    \"290\": [\"SH\", \"TA\"],\n    \"291\": [\"ER\"],\n    \"297\": [\"AW\"],\n    \"298\": [\"FO\"],\n    \"299\": [\"GL\"],\n    \"350\": [\"GI\"],\n    \"351\": [\"PT\"],\n    \"352\": [\"LU\"],\n    \"353\": [\"IE\"],\n    \"354\": [\"IS\"],\n    \"355\": [\"AL\"],\n    \"356\": [\"MT\"],\n    \"357\": [\"CY\"],\n    \"358\": [\"FI\", \"AX\"],\n    \"359\": [\"BG\"],\n    \"370\": [\"LT\"],\n    \"371\": [\"LV\"],\n    \"372\": [\"EE\"],\n    \"373\": [\"MD\"],\n    \"374\": [\"AM\"],\n    \"375\": [\"BY\"],\n    \"376\": [\"AD\"],\n    \"377\": [\"MC\"],\n    \"378\": [\"SM\"],\n    \"380\": [\"UA\"],\n    \"381\": [\"RS\"],\n    \"382\": [\"ME\"],\n    \"383\": [\"XK\"],\n    \"385\": [\"HR\"],\n    \"386\": [\"SI\"],\n    \"387\": [\"BA\"],\n    \"389\": [\"MK\"],\n    \"420\": [\"CZ\"],\n    \"421\": [\"SK\"],\n    \"423\": [\"LI\"],\n    \"500\": [\"FK\"],\n    \"501\": [\"BZ\"],\n    \"502\": [\"GT\"],\n    \"503\": [\"SV\"],\n    \"504\": [\"HN\"],\n    \"505\": [\"NI\"],\n    \"506\": [\"CR\"],\n    \"507\": [\"PA\"],\n    \"508\": [\"PM\"],\n    \"509\": [\"HT\"],\n    \"590\": [\"GP\", \"BL\", \"MF\"],\n    \"591\": [\"BO\"],\n    \"592\": [\"GY\"],\n    \"593\": [\"EC\"],\n    \"594\": [\"GF\"],\n    \"595\": [\"PY\"],\n    \"596\": [\"MQ\"],\n    \"597\": [\"SR\"],\n    \"598\": [\"UY\"],\n    \"599\": [\"CW\", \"BQ\"],\n    \"670\": [\"TL\"],\n    \"672\": [\"NF\"],\n    \"673\": [\"BN\"],\n    \"674\": [\"NR\"],\n    \"675\": [\"PG\"],\n    \"676\": [\"TO\"],\n    \"677\": [\"SB\"],\n    \"678\": [\"VU\"],\n    \"679\": [\"FJ\"],\n    \"680\": [\"PW\"],\n    \"681\": [\"WF\"],\n    \"682\": [\"CK\"],\n    \"683\": [\"NU\"],\n    \"685\": [\"WS\"],\n    \"686\": [\"KI\"],\n    \"687\": [\"NC\"],\n    \"688\": [\"TV\"],\n    \"689\": [\"PF\"],\n    \"690\": [\"TK\"],\n    \"691\": [\"FM\"],\n    \"692\": [\"MH\"],\n    \"850\": [\"KP\"],\n    \"852\": [\"HK\"],\n    \"853\": [\"MO\"],\n    \"855\": [\"KH\"],\n    \"856\": [\"LA\"],\n    \"880\": [\"BD\"],\n    \"886\": [\"TW\"],\n    \"960\": [\"MV\"],\n    \"961\": [\"LB\"],\n    \"962\": [\"JO\"],\n    \"963\": [\"SY\"],\n    \"964\": [\"IQ\"],\n    \"965\": [\"KW\"],\n    \"966\": [\"SA\"],\n    \"967\": [\"YE\"],\n    \"968\": [\"OM\"],\n    \"970\": [\"PS\"],\n    \"971\": [\"AE\"],\n    \"972\": [\"IL\"],\n    \"973\": [\"BH\"],\n    \"974\": [\"QA\"],\n    \"975\": [\"BT\"],\n    \"976\": [\"MN\"],\n    \"977\": [\"NP\"],\n    \"992\": [\"TJ\"],\n    \"993\": [\"TM\"],\n    \"994\": [\"AZ\"],\n    \"995\": [\"GE\"],\n    \"996\": [\"KG\"],\n    \"998\": [\"UZ\"]\n  },\n  \"countries\": {\n    \"AC\": [\"247\", \"00\", \"(?:[01589]\\\\d|[46])\\\\d{4}\", [5, 6]],\n    \"AD\": [\"376\", \"00\", \"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\", [6, 8, 9], [[\"(\\\\d{3})(\\\\d{3})\", \"$1 $2\", [\"[135-9]\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"1\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"6\"]]]],\n    \"AE\": [\"971\", \"00\", \"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\", [5, 6, 7, 8, 9, 10, 11, 12], [[\"(\\\\d{3})(\\\\d{2,9})\", \"$1 $2\", [\"60|8\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[236]|[479][2-8]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d)(\\\\d{5})\", \"$1 $2 $3\", [\"[479]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"5\"], \"0$1\"]], \"0\"],\n    \"AF\": [\"93\", \"00\", \"[2-7]\\\\d{8}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2-7]\"], \"0$1\"]], \"0\"],\n    \"AG\": [\"1\", \"011\", \"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([457]\\\\d{6})$\", \"268$1\", 0, \"268\"],\n    \"AI\": [\"1\", \"011\", \"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2457]\\\\d{6})$\", \"264$1\", 0, \"264\"],\n    \"AL\": [\"355\", \"00\", \"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\", [6, 7, 8, 9], [[\"(\\\\d{3})(\\\\d{3,4})\", \"$1 $2\", [\"80|9\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"4[2-6]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2358][2-5]|4\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[23578]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"6\"], \"0$1\"]], \"0\"],\n    \"AM\": [\"374\", \"00\", \"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\", [8], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"[89]0\"], \"0 $1\"], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"2|3[12]\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"1|47\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"[3-9]\"], \"0$1\"]], \"0\"],\n    \"AO\": [\"244\", \"00\", \"[29]\\\\d{8}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[29]\"]]]],\n    \"AR\": [\"54\", \"00\", \"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\", [10, 11], [[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\", \"$1 $2-$3\", [\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\", \"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\", \"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\", \"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"], \"0$1\", 1], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2-$3\", [\"1\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"[68]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2-$3\", [\"[23]\"], \"0$1\", 1], [\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\", \"$2 15-$3-$4\", [\"9(?:2[2-469]|3[3-578])\", \"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\", \"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\", \"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\", \"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"], \"0$1\", 0, \"$1 $2 $3-$4\"], [\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$2 15-$3-$4\", [\"91\"], \"0$1\", 0, \"$1 $2 $3-$4\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\", \"$1-$2-$3\", [\"8\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$2 15-$3-$4\", [\"9\"], \"0$1\", 0, \"$1 $2 $3-$4\"]], \"0\", 0, \"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\", \"9$1\"],\n    \"AS\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([267]\\\\d{6})$\", \"684$1\", 0, \"684\"],\n    \"AT\": [\"43\", \"00\", \"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\", [4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [[\"(\\\\d)(\\\\d{3,12})\", \"$1 $2\", [\"1(?:11|[2-9])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})\", \"$1 $2\", [\"517\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3,5})\", \"$1 $2\", [\"5[079]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3,10})\", \"$1 $2\", [\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3,9})\", \"$1 $2\", [\"[2-467]|5[2-6]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"5\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\", \"$1 $2 $3\", [\"5\"], \"0$1\"]], \"0\"],\n    \"AU\": [\"61\", \"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\", \"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\", [5, 6, 7, 8, 9, 10, 12], [[\"(\\\\d{2})(\\\\d{3,4})\", \"$1 $2\", [\"16\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\", \"$1 $2 $3\", [\"16\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"14|4\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[2378]\"], \"(0$1)\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1(?:30|[89])\"]]], \"0\", 0, \"0|(183[12])\", 0, 0, 0, [[\"(?:(?:2(?:[0-26-9]\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\d|2[0-8]))\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\", [9]], [\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\", [9]], [\"180(?:0\\\\d{3}|2)\\\\d{3}\", [7, 10]], [\"190[0-26]\\\\d{6}\", [10]], 0, 0, 0, [\"163\\\\d{2,6}\", [5, 6, 7, 8, 9]], [\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\", [9]], [\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\", [6, 8, 10, 12]]], \"0011\"],\n    \"AW\": [\"297\", \"00\", \"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[25-9]\"]]]],\n    \"AX\": [\"358\", \"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\", \"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\", [5, 6, 7, 8, 9, 10, 11, 12], 0, \"0\", 0, 0, 0, 0, \"18\", 0, \"00\"],\n    \"AZ\": [\"994\", \"00\", \"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"90\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"1[28]|2|365|46\", \"1[28]|2|365[45]|46\", \"1[28]|2|365(?:4|5[02])|46\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[13-9]\"], \"0$1\"]], \"0\"],\n    \"BA\": [\"387\", \"00\", \"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"6[1-3]|[7-9]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2-$3\", [\"[3-5]|6[56]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"6\"], \"0$1\"]], \"0\"],\n    \"BB\": [\"1\", \"011\", \"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-9]\\\\d{6})$\", \"246$1\", 0, \"246\"],\n    \"BD\": [\"880\", \"00\", \"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\", [6, 7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{4,6})\", \"$1-$2\", [\"31[5-8]|[459]1\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3,7})\", \"$1-$2\", [\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3,6})\", \"$1-$2\", [\"[13-9]|22\"], \"0$1\"], [\"(\\\\d)(\\\\d{7,8})\", \"$1-$2\", [\"2\"], \"0$1\"]], \"0\"],\n    \"BE\": [\"32\", \"00\", \"4\\\\d{8}|[1-9]\\\\d{7}\", [8, 9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"(?:80|9)0\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[239]|4[23]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[15-8]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"4\"], \"0$1\"]], \"0\"],\n    \"BF\": [\"226\", \"00\", \"[025-7]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[025-7]\"]]]],\n    \"BG\": [\"359\", \"00\", \"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\", [6, 7, 8, 9], [[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"2\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"43[1-6]|70[1-9]\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"2\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\", \"$1 $2 $3\", [\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"(?:70|8)0\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\", \"$1 $2 $3\", [\"43[1-7]|7\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[48]|9[08]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"9\"], \"0$1\"]], \"0\"],\n    \"BH\": [\"973\", \"00\", \"[136-9]\\\\d{7}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[13679]|8[047]\"]]]],\n    \"BI\": [\"257\", \"00\", \"(?:[267]\\\\d|31)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2367]\"]]]],\n    \"BJ\": [\"229\", \"00\", \"(?:[25689]\\\\d|40)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[24-689]\"]]]],\n    \"BL\": [\"590\", \"00\", \"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\", [9], 0, \"0\", 0, 0, 0, 0, 0, [[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"], [\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"], [\"80[0-5]\\\\d{6}\"], 0, 0, 0, 0, 0, [\"976[01]\\\\d{5}\"]]],\n    \"BM\": [\"1\", \"011\", \"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-8]\\\\d{6})$\", \"441$1\", 0, \"441\"],\n    \"BN\": [\"673\", \"00\", \"[2-578]\\\\d{6}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-578]\"]]]],\n    \"BO\": [\"591\", \"00(?:1\\\\d)?\", \"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\", [8, 9], [[\"(\\\\d)(\\\\d{7})\", \"$1 $2\", [\"[23]|4[46]\"]], [\"(\\\\d{8})\", \"$1\", [\"[67]\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"]]], \"0\", 0, \"0(1\\\\d)?\"],\n    \"BQ\": [\"599\", \"00\", \"(?:[34]1|7\\\\d)\\\\d{5}\", [7], 0, 0, 0, 0, 0, 0, \"[347]\"],\n    \"BR\": [\"55\", \"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\", \"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-46-9]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\", [8, 9, 10, 11], [[\"(\\\\d{4})(\\\\d{4})\", \"$1-$2\", [\"300|4(?:0[02]|37)\", \"4(?:02|37)0|[34]00\"]], [\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\", \"$1 $2 $3\", [\"(?:[358]|90)0\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2-$3\", [\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"], \"($1)\"], [\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\", \"$1 $2-$3\", [\"[16][1-9]|[2-57-9]\"], \"($1)\"]], \"0\", 0, \"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\", \"$2\"],\n    \"BS\": [\"1\", \"011\", \"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([3-8]\\\\d{6})$\", \"242$1\", 0, \"242\"],\n    \"BT\": [\"975\", \"00\", \"[17]\\\\d{7}|[2-8]\\\\d{6}\", [7, 8], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2-68]|7[246]\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"1[67]|7\"]]]],\n    \"BW\": [\"267\", \"00\", \"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\", [7, 8, 10], [[\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"90\"]], [\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[24-6]|3[15-79]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[37]\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"0\"]], [\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"BY\": [\"375\", \"810\", \"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\", [6, 7, 8, 9, 10, 11], [[\"(\\\\d{3})(\\\\d{3})\", \"$1 $2\", [\"800\"], \"8 $1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\", \"$1 $2 $3\", [\"800\"], \"8 $1\"], [\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\", \"$1 $2-$3\", [\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\", \"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"], \"8 0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2-$3-$4\", [\"1(?:[56]|7[467])|2[1-3]\"], \"8 0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2-$3-$4\", [\"[1-4]\"], \"8 0$1\"], [\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"[89]\"], \"8 $1\"]], \"8\", 0, \"0|80?\", 0, 0, 0, 0, \"8~10\"],\n    \"BZ\": [\"501\", \"00\", \"(?:0800\\\\d|[2-8])\\\\d{6}\", [7, 11], [[\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"[2-8]\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\", \"$1-$2-$3-$4\", [\"0\"]]]],\n    \"CA\": [\"1\", \"011\", \"(?:[2-8]\\\\d|90)\\\\d{8}|3\\\\d{6}\", [7, 10], 0, \"1\", 0, 0, 0, 0, 0, [[\"(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|6[578])|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|13|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\", [10]], [\"\", [10]], [\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\", [10]], [\"900[2-9]\\\\d{6}\", [10]], [\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:00|2[125-7]|33|44|66|77|88)|622)[2-9]\\\\d{6}\", [10]], 0, [\"310\\\\d{4}\", [7]], 0, [\"600[2-9]\\\\d{6}\", [10]]]],\n    \"CC\": [\"61\", \"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\", \"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\", [6, 7, 8, 9, 10, 12], 0, \"0\", 0, \"0|([59]\\\\d{7})$\", \"8$1\", 0, 0, [[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\", [9]], [\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\", [9]], [\"180(?:0\\\\d{3}|2)\\\\d{3}\", [7, 10]], [\"190[0-26]\\\\d{6}\", [10]], 0, 0, 0, 0, [\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\", [9]], [\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\", [6, 8, 10, 12]]], \"0011\"],\n    \"CD\": [\"243\", \"00\", \"[189]\\\\d{8}|[1-68]\\\\d{6}\", [7, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"88\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"[1-6]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[89]\"], \"0$1\"]], \"0\"],\n    \"CF\": [\"236\", \"00\", \"(?:[27]\\\\d{3}|8776)\\\\d{4}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[278]\"]]]],\n    \"CG\": [\"242\", \"00\", \"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\", [9], [[\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[02]\"]]]],\n    \"CH\": [\"41\", \"00\", \"8\\\\d{11}|[2-9]\\\\d{8}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8[047]|90\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2-79]|81\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4 $5\", [\"8\"], \"0$1\"]], \"0\"],\n    \"CI\": [\"225\", \"00\", \"[02]\\\\d{9}\", [10], [[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\", \"$1 $2 $3 $4\", [\"2\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3 $4\", [\"0\"]]]],\n    \"CK\": [\"682\", \"00\", \"[2-578]\\\\d{4}\", [5], [[\"(\\\\d{2})(\\\\d{3})\", \"$1 $2\", [\"[2-578]\"]]]],\n    \"CL\": [\"56\", \"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\", \"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\", [9, 10, 11], [[\"(\\\\d{5})(\\\\d{4})\", \"$1 $2\", [\"219\", \"2196\"], \"($1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"44\"]], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"2[1-36]\"], \"($1)\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"9[2-9]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"], \"($1)\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"60|8\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"60\"]]]],\n    \"CM\": [\"237\", \"00\", \"[26]\\\\d{8}|88\\\\d{6,7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"88\"]], [\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4 $5\", [\"[26]|88\"]]]],\n    \"CN\": [\"86\", \"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\", \"1[127]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-689]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\", [7, 8, 9, 10, 11, 12], [[\"(\\\\d{2})(\\\\d{5,6})\", \"$1 $2\", [\"(?:10|2[0-57-9])[19]\", \"(?:10|2[0-57-9])(?:10|9[56])\", \"(?:10|2[0-57-9])(?:100|9[56])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5,6})\", \"$1 $2\", [\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\", \"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\", \"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\", \"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"(?:4|80)0\"]], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"10|2(?:[02-57-9]|1[1-9])\", \"10|2(?:[02-57-9]|1[1-9])\", \"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{7,8})\", \"$1 $2\", [\"9\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"80\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[3-578]\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"1[3-9]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3 $4\", [\"[12]\"], \"0$1\", 1]], \"0\", 0, \"0|(1(?:[12]\\\\d|79)\\\\d\\\\d)\", 0, 0, 0, 0, \"00\"],\n    \"CO\": [\"57\", \"00(?:4(?:[14]4|56)|[579])\", \"(?:60\\\\d\\\\d|9101)\\\\d{6}|(?:1\\\\d|3)\\\\d{9}\", [10, 11], [[\"(\\\\d{3})(\\\\d{7})\", \"$1 $2\", [\"6\"], \"($1)\"], [\"(\\\\d{3})(\\\\d{7})\", \"$1 $2\", [\"3[0-357]|91\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{7})\", \"$1-$2-$3\", [\"1\"], \"0$1\", 0, \"$1 $2 $3\"]], \"0\", 0, \"0(4(?:[14]4|56)|[579])?\"],\n    \"CR\": [\"506\", \"00\", \"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\", [8, 10], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2-7]|8[3-9]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"[89]\"]]], 0, 0, \"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\n    \"CU\": [\"53\", \"119\", \"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\", [6, 7, 8, 10], [[\"(\\\\d{2})(\\\\d{4,6})\", \"$1 $2\", [\"2[1-4]|[34]\"], \"(0$1)\"], [\"(\\\\d)(\\\\d{6,7})\", \"$1 $2\", [\"7\"], \"(0$1)\"], [\"(\\\\d)(\\\\d{7})\", \"$1 $2\", [\"5\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{7})\", \"$1 $2\", [\"8\"], \"0$1\"]], \"0\"],\n    \"CV\": [\"238\", \"0\", \"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"[2-589]\"]]]],\n    \"CW\": [\"599\", \"00\", \"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\", [7, 8], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[3467]\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"9[4-8]\"]]], 0, 0, 0, 0, 0, \"[69]\"],\n    \"CX\": [\"61\", \"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\", \"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\", [6, 7, 8, 9, 10, 12], 0, \"0\", 0, \"0|([59]\\\\d{7})$\", \"8$1\", 0, 0, [[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\", [9]], [\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\", [9]], [\"180(?:0\\\\d{3}|2)\\\\d{3}\", [7, 10]], [\"190[0-26]\\\\d{6}\", [10]], 0, 0, 0, 0, [\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\", [9]], [\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\", [6, 8, 10, 12]]], \"0011\"],\n    \"CY\": [\"357\", \"00\", \"(?:[279]\\\\d|[58]0)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"[257-9]\"]]]],\n    \"CZ\": [\"420\", \"00\", \"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2-8]|9[015-7]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"96\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"9\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"9\"]]]],\n    \"DE\": [\"49\", \"00\", \"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\", [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [[\"(\\\\d{2})(\\\\d{3,13})\", \"$1 $2\", [\"3[02]|40|[68]9\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3,12})\", \"$1 $2\", [\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\", \"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{2,11})\", \"$1 $2\", [\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\", \"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"138\"], \"0$1\"], [\"(\\\\d{5})(\\\\d{2,10})\", \"$1 $2\", [\"3\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5,11})\", \"$1 $2\", [\"181\"], \"0$1\"], [\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\", \"$1 $2 $3\", [\"1(?:3|80)|9\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{7,8})\", \"$1 $2\", [\"1[67]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{7,12})\", \"$1 $2\", [\"8\"], \"0$1\"], [\"(\\\\d{5})(\\\\d{6})\", \"$1 $2\", [\"185\", \"1850\", \"18500\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{7})\", \"$1 $2\", [\"18[68]\"], \"0$1\"], [\"(\\\\d{5})(\\\\d{6})\", \"$1 $2\", [\"15[0568]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{7})\", \"$1 $2\", [\"15[1279]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{8})\", \"$1 $2\", [\"18\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\", \"$1 $2 $3\", [\"1(?:6[023]|7)\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\", \"$1 $2 $3\", [\"15[279]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\", \"$1 $2 $3\", [\"15\"], \"0$1\"]], \"0\"],\n    \"DJ\": [\"253\", \"00\", \"(?:2\\\\d|77)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[27]\"]]]],\n    \"DK\": [\"45\", \"00\", \"[2-9]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2-9]\"]]]],\n    \"DM\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-7]\\\\d{6})$\", \"767$1\", 0, \"767\"],\n    \"DO\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, 0, 0, 0, \"8001|8[024]9\"],\n    \"DZ\": [\"213\", \"00\", \"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[1-4]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"9\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[5-8]\"], \"0$1\"]], \"0\"],\n    \"EC\": [\"593\", \"00\", \"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\", [8, 9, 10, 11], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2-$3\", [\"[2-7]\"], \"(0$1)\", 0, \"$1-$2-$3\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"9\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"1\"]]], \"0\"],\n    \"EE\": [\"372\", \"00\", \"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\", [7, 8, 10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\", \"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]], [\"(\\\\d{4})(\\\\d{3,4})\", \"$1 $2\", [\"[45]|8(?:00|[1-49])\", \"[45]|8(?:00[1-9]|[1-49])\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"EG\": [\"20\", \"00\", \"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\", [8, 9, 10], [[\"(\\\\d)(\\\\d{7,8})\", \"$1 $2\", [\"[23]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{6,7})\", \"$1 $2\", [\"1[35]|[4-6]|8[2468]|9[235-7]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[189]\"], \"0$1\"]], \"0\"],\n    \"EH\": [\"212\", \"00\", \"[5-8]\\\\d{8}\", [9], 0, \"0\", 0, 0, 0, 0, \"528[89]\"],\n    \"ER\": [\"291\", \"00\", \"[178]\\\\d{6}\", [7], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[178]\"], \"0$1\"]], \"0\"],\n    \"ES\": [\"34\", \"00\", \"[5-9]\\\\d{8}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[89]00\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[5-9]\"]]]],\n    \"ET\": [\"251\", \"00\", \"(?:11|[2-579]\\\\d)\\\\d{7}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[1-579]\"], \"0$1\"]], \"0\"],\n    \"FI\": [\"358\", \"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\", \"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\", [5, 6, 7, 8, 9, 10, 11, 12], [[\"(\\\\d)(\\\\d{4,9})\", \"$1 $2\", [\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3,7})\", \"$1 $2\", [\"[12]00|[368]|70[07-9]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4,8})\", \"$1 $2\", [\"[1245]|7[135]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{6,10})\", \"$1 $2\", [\"7\"], \"0$1\"]], \"0\", 0, 0, 0, 0, \"1[03-79]|[2-9]\", 0, \"00\"],\n    \"FJ\": [\"679\", \"0(?:0|52)\", \"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\", [7, 11], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[235-9]|45\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"0\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"FK\": [\"500\", \"00\", \"[2-7]\\\\d{4}\", [5]],\n    \"FM\": [\"691\", \"00\", \"(?:[39]\\\\d\\\\d|820)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[389]\"]]]],\n    \"FO\": [\"298\", \"00\", \"[2-9]\\\\d{5}\", [6], [[\"(\\\\d{6})\", \"$1\", [\"[2-9]\"]]], 0, 0, \"(10(?:01|[12]0|88))\"],\n    \"FR\": [\"33\", \"00\", \"[1-9]\\\\d{8}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"], \"0 $1\"], [\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4 $5\", [\"[1-79]\"], \"0$1\"]], \"0\"],\n    \"GA\": [\"241\", \"00\", \"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\", [7, 8], [[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2-7]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"0\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"11|[67]\"], \"0$1\"]], 0, 0, \"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\", \"$1\"],\n    \"GB\": [\"44\", \"00\", \"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\", [7, 9, 10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"800\", \"8001\", \"80011\", \"800111\", \"8001111\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"845\", \"8454\", \"84546\", \"845464\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{6})\", \"$1 $2\", [\"800\"], \"0$1\"], [\"(\\\\d{5})(\\\\d{4,5})\", \"$1 $2\", [\"1(?:38|5[23]|69|76|94)\", \"1(?:(?:38|69)7|5(?:24|39)|768|946)\", \"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{5,6})\", \"$1 $2\", [\"1(?:[2-69][02-9]|[78])\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[25]|7(?:0|6[02-9])\", \"[25]|7(?:0|6(?:[03-9]|2[356]))\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{6})\", \"$1 $2\", [\"7\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[1389]\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, [[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0235])|4(?:[0-5]\\\\d\\\\d|69[7-9]|70[013579])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|8(?:[02]\\\\d|1[0-246-9])))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\", [9, 10]], [\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\", [10]], [\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"], [\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\", [7, 10]], [\"70\\\\d{8}\", [10]], 0, [\"(?:3[0347]|55)\\\\d{8}\", [10]], [\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\", [10]], [\"56\\\\d{8}\", [10]]], 0, \" x\"],\n    \"GD\": [\"1\", \"011\", \"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-9]\\\\d{6})$\", \"473$1\", 0, \"473\"],\n    \"GE\": [\"995\", \"00\", \"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"70\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"32\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[57]\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[348]\"], \"0$1\"]], \"0\"],\n    \"GF\": [\"594\", \"00\", \"(?:[56]94|80\\\\d|976)\\\\d{6}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[569]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\"],\n    \"GG\": [\"44\", \"00\", \"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\", [7, 9, 10], 0, \"0\", 0, \"0|([25-9]\\\\d{5})$\", \"1481$1\", 0, 0, [[\"1481[25-9]\\\\d{5}\", [10]], [\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\", [10]], [\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"], [\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\", [7, 10]], [\"70\\\\d{8}\", [10]], 0, [\"(?:3[0347]|55)\\\\d{8}\", [10]], [\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\", [10]], [\"56\\\\d{8}\", [10]]]],\n    \"GH\": [\"233\", \"00\", \"(?:[235]\\\\d{3}|800)\\\\d{5}\", [8, 9], [[\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"8\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[235]\"], \"0$1\"]], \"0\"],\n    \"GI\": [\"350\", \"00\", \"(?:[25]\\\\d\\\\d|606)\\\\d{5}\", [8], [[\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"2\"]]]],\n    \"GL\": [\"299\", \"00\", \"(?:19|[2-689]\\\\d|70)\\\\d{4}\", [6], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"19|[2-9]\"]]]],\n    \"GM\": [\"220\", \"00\", \"[2-9]\\\\d{6}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-9]\"]]]],\n    \"GN\": [\"224\", \"00\", \"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"3\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[67]\"]]]],\n    \"GP\": [\"590\", \"00\", \"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[569]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, [[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|6[0-289]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"], [\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"], [\"80[0-5]\\\\d{6}\"], 0, 0, 0, 0, 0, [\"976[01]\\\\d{5}\"]]],\n    \"GQ\": [\"240\", \"00\", \"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[235]\"]], [\"(\\\\d{3})(\\\\d{6})\", \"$1 $2\", [\"[89]\"]]]],\n    \"GR\": [\"30\", \"00\", \"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\", [10, 11, 12], [[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"21|7\"]], [\"(\\\\d{4})(\\\\d{6})\", \"$1 $2\", [\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2689]\"]], [\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"GT\": [\"502\", \"00\", \"(?:1\\\\d{3}|[2-7])\\\\d{7}\", [8, 11], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2-7]\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"]]]],\n    \"GU\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([3-9]\\\\d{6})$\", \"671$1\", 0, \"671\"],\n    \"GW\": [\"245\", \"00\", \"[49]\\\\d{8}|4\\\\d{6}\", [7, 9], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"40\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[49]\"]]]],\n    \"GY\": [\"592\", \"001\", \"9008\\\\d{3}|(?:[2-467]\\\\d\\\\d|862)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-46-9]\"]]]],\n    \"HK\": [\"852\", \"00(?:30|5[09]|[126-9]?)\", \"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\", [5, 6, 7, 8, 9, 11], [[\"(\\\\d{3})(\\\\d{2,5})\", \"$1 $2\", [\"900\", \"9003\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"9\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"HN\": [\"504\", \"00\", \"8\\\\d{10}|[237-9]\\\\d{7}\", [8, 11], [[\"(\\\\d{4})(\\\\d{4})\", \"$1-$2\", [\"[237-9]\"]]]],\n    \"HR\": [\"385\", \"00\", \"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\", [6, 7, 8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\", \"$1 $2 $3\", [\"6[01]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\", \"$1 $2 $3\", [\"8\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{3})\", \"$1 $2 $3\", [\"1\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[67]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"9\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[2-5]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"], \"0$1\"]], \"0\"],\n    \"HT\": [\"509\", \"00\", \"[2-489]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"[2-489]\"]]]],\n    \"HU\": [\"36\", \"00\", \"[235-7]\\\\d{8}|[1-9]\\\\d{7}\", [8, 9], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"(06 $1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"], \"(06 $1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[2-9]\"], \"06 $1\"]], \"06\"],\n    \"ID\": [\"62\", \"00[89]\", \"(?:(?:00[1-9]|8\\\\d)\\\\d{4}|[1-36])\\\\d{6}|00\\\\d{10}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\", [7, 8, 9, 10, 11, 12, 13], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"15\"]], [\"(\\\\d{2})(\\\\d{5,9})\", \"$1 $2\", [\"2[124]|[36]1\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{5,7})\", \"$1 $2\", [\"800\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5,8})\", \"$1 $2\", [\"[2-79]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\", \"$1-$2-$3\", [\"8[1-35-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{6,8})\", \"$1 $2\", [\"1\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"804\"], \"0$1\"], [\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"80\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\", \"$1-$2-$3\", [\"8\"], \"0$1\"]], \"0\"],\n    \"IE\": [\"353\", \"00\", \"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\", [7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"2[24-9]|47|58|6[237-9]|9[35-9]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[45]0\"], \"(0$1)\"], [\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[2569]|4[1-69]|7[14]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"70\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"81\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[78]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1\"]], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"4\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\"],\n    \"IL\": [\"972\", \"0(?:0|1[2-9])\", \"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\", [7, 8, 9, 10, 11, 12], [[\"(\\\\d{4})(\\\\d{3})\", \"$1-$2\", [\"125\"]], [\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\", \"$1-$2-$3\", [\"121\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"[2-489]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"[57]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1-$2-$3\", [\"12\"]], [\"(\\\\d{4})(\\\\d{6})\", \"$1-$2\", [\"159\"]], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1-$2-$3-$4\", [\"1[7-9]\"]], [\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\", \"$1-$2 $3-$4\", [\"15\"]]], \"0\"],\n    \"IM\": [\"44\", \"00\", \"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\", [10], 0, \"0\", 0, \"0|([25-8]\\\\d{5})$\", \"1624$1\", 0, \"74576|(?:16|7[56])24\"],\n    \"IN\": [\"91\", \"00\", \"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\", [8, 9, 10, 11, 12, 13], [[\"(\\\\d{8})\", \"$1\", [\"5(?:0|2[23]|3[03]|[67]1|88)\", \"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\", \"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"], 0, 1], [\"(\\\\d{4})(\\\\d{4,5})\", \"$1 $2\", [\"180\", \"1800\"], 0, 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"140\"], 0, 1], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\", \"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\", \"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\", \"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\", \"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"], \"0$1\", 1], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\", \"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\", \"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"], \"0$1\", 1], [\"(\\\\d{5})(\\\\d{5})\", \"$1 $2\", [\"[6-9]\"], \"0$1\", 1], [\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\", \"$1 $2 $3\", [\"1(?:6|8[06])\", \"1(?:6|8[06]0)\"], 0, 1], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"18\"], 0, 1]], \"0\"],\n    \"IO\": [\"246\", \"00\", \"3\\\\d{6}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"3\"]]]],\n    \"IQ\": [\"964\", \"00\", \"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\", [8, 9, 10], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[2-6]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"0$1\"]], \"0\"],\n    \"IR\": [\"98\", \"00\", \"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\", [4, 5, 6, 7, 10], [[\"(\\\\d{4,5})\", \"$1\", [\"96\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4,5})\", \"$1 $2\", [\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"9\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[1-8]\"], \"0$1\"]], \"0\"],\n    \"IS\": [\"354\", \"00|1(?:0(?:01|[12]0)|100)\", \"(?:38\\\\d|[4-9])\\\\d{6}\", [7, 9], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[4-9]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"3\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"IT\": [\"39\", \"00\", \"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\", [6, 7, 8, 9, 10, 11], [[\"(\\\\d{2})(\\\\d{4,6})\", \"$1 $2\", [\"0[26]\"]], [\"(\\\\d{3})(\\\\d{3,6})\", \"$1 $2\", [\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\", \"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]], [\"(\\\\d{4})(\\\\d{2,6})\", \"$1 $2\", [\"0(?:[13-579][2-46-8]|8[236-8])\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"894\"]], [\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"0[26]|5\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"1(?:44|[679])|[378]\"]], [\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"0[13-57-9][0159]|14\"]], [\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\", \"$1 $2 $3\", [\"0[26]\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"0\"]], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\", \"$1 $2 $3\", [\"3\"]]], 0, 0, 0, 0, 0, 0, [[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"], [\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\", [9, 10]], [\"80(?:0\\\\d{3}|3)\\\\d{3}\", [6, 9]], [\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\", [6, 8, 9, 10]], [\"1(?:78\\\\d|99)\\\\d{6}\", [9, 10]], 0, 0, 0, [\"55\\\\d{8}\", [10]], [\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\", [6, 9]]]],\n    \"JE\": [\"44\", \"00\", \"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\", [10], 0, \"0\", 0, \"0|([0-24-8]\\\\d{5})$\", \"1534$1\", 0, 0, [[\"1534[0-24-8]\\\\d{5}\"], [\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"], [\"80(?:07(?:35|81)|8901)\\\\d{4}\"], [\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"], [\"701511\\\\d{4}\"], 0, [\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"], [\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"], [\"56\\\\d{8}\"]]],\n    \"JM\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\", [10], 0, \"1\", 0, 0, 0, 0, \"658|876\"],\n    \"JO\": [\"962\", \"00\", \"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\", [8, 9], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2356]|87\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{5,6})\", \"$1 $2\", [\"[89]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1 $2\", [\"70\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"0$1\"]], \"0\"],\n    \"JP\": [\"81\", \"010\", \"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\", [8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1-$2-$3\", [\"(?:12|57|99)0\"], \"0$1\"], [\"(\\\\d{4})(\\\\d)(\\\\d{4})\", \"$1-$2-$3\", [\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])\", \"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\", \"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"60\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1-$2-$3\", [\"[36]|4(?:2[09]|7[01])\", \"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\", \"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\", \"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\", \"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\", \"$1-$2-$3\", [\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"800\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1-$2-$3\", [\"[257-9]\"], \"0$1\"]], \"0\"],\n    \"KE\": [\"254\", \"000\", \"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\", [7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{5,7})\", \"$1 $2\", [\"[24-6]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{6})\", \"$1 $2\", [\"[17]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[89]\"], \"0$1\"]], \"0\"],\n    \"KG\": [\"996\", \"00\", \"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\", [9, 10], [[\"(\\\\d{4})(\\\\d{5})\", \"$1 $2\", [\"3(?:1[346]|[24-79])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[235-79]|88\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\"],\n    \"KH\": [\"855\", \"00[14-9]\", \"1\\\\d{9}|[1-9]\\\\d{7,8}\", [8, 9, 10], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[1-9]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1\"]]], \"0\"],\n    \"KI\": [\"686\", \"00\", \"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\", [5, 8], 0, \"0\"],\n    \"KM\": [\"269\", \"00\", \"[3478]\\\\d{6}\", [7], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"[3478]\"]]]],\n    \"KN\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-7]\\\\d{6})$\", \"869$1\", 0, \"869\"],\n    \"KP\": [\"850\", \"00|99\", \"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\", [8, 10], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2-7]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"0$1\"]], \"0\"],\n    \"KR\": [\"82\", \"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\", \"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\", [5, 6, 8, 9, 10, 11, 12, 13, 14], [[\"(\\\\d{2})(\\\\d{3,4})\", \"$1-$2\", [\"(?:3[1-3]|[46][1-4]|5[1-5])1\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{4})\", \"$1-$2\", [\"1\"]], [\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\", \"$1-$2-$3\", [\"2\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1-$2-$3\", [\"60|8\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\", \"$1-$2-$3\", [\"[1346]|5[1-5]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1-$2-$3\", [\"[57]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\", \"$1-$2-$3\", [\"5\"], \"0$1\"]], \"0\", 0, \"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\n    \"KW\": [\"965\", \"00\", \"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\", [7, 8], [[\"(\\\\d{4})(\\\\d{3,4})\", \"$1 $2\", [\"[169]|2(?:[235]|4[1-35-9])|52\"]], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[245]\"]]]],\n    \"KY\": [\"1\", \"011\", \"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-9]\\\\d{6})$\", \"345$1\", 0, \"345\"],\n    \"KZ\": [\"7\", \"810\", \"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\", [10, 14], 0, \"8\", 0, 0, 0, 0, \"33|7\", 0, \"8~10\"],\n    \"LA\": [\"856\", \"00\", \"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\", [8, 9, 10], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"2[13]|3[14]|[4-8]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"30[013-9]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"[23]\"], \"0$1\"]], \"0\"],\n    \"LB\": [\"961\", \"00\", \"[27-9]\\\\d{7}|[13-9]\\\\d{6}\", [7, 8], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[27-9]\"]]], \"0\"],\n    \"LC\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-8]\\\\d{6})$\", \"758$1\", 0, \"758\"],\n    \"LI\": [\"423\", \"00\", \"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\", [7, 9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"[2379]|8(?:0[09]|7)\", \"[2379]|8(?:0(?:02|9)|7)\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"69\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"6\"]]], \"0\", 0, \"0|(1001)\"],\n    \"LK\": [\"94\", \"00\", \"[1-9]\\\\d{8}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[1-689]\"], \"0$1\"]], \"0\"],\n    \"LR\": [\"231\", \"00\", \"(?:2|33|5\\\\d|77|88)\\\\d{7}|[4-6]\\\\d{6}\", [7, 8, 9], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[4-6]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"2\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[3578]\"], \"0$1\"]], \"0\"],\n    \"LS\": [\"266\", \"00\", \"(?:[256]\\\\d\\\\d|800)\\\\d{5}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2568]\"]]]],\n    \"LT\": [\"370\", \"00\", \"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\", [8], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"52[0-7]\"], \"(8-$1)\", 1], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"[7-9]\"], \"8 $1\", 1], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"37|4(?:[15]|6[1-8])\"], \"(8-$1)\", 1], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[3-6]\"], \"(8-$1)\", 1]], \"8\", 0, \"[08]\"],\n    \"LU\": [\"352\", \"00\", \"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\", [4, 5, 6, 7, 8, 9, 10, 11], [[\"(\\\\d{2})(\\\\d{3})\", \"$1 $2\", [\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"20[2-689]\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\", \"$1 $2 $3 $4\", [\"2(?:[0367]|4[3-8])\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"80[01]|90[015]\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"20\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"6\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\", \"$1 $2 $3 $4 $5\", [\"2(?:[0367]|4[3-8])\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\", \"$1 $2 $3 $4\", [\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]], 0, 0, \"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\n    \"LV\": [\"371\", \"00\", \"(?:[268]\\\\d|90)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[269]|8[01]\"]]]],\n    \"LY\": [\"218\", \"00\", \"[2-9]\\\\d{8}\", [9], [[\"(\\\\d{2})(\\\\d{7})\", \"$1-$2\", [\"[2-9]\"], \"0$1\"]], \"0\"],\n    \"MA\": [\"212\", \"00\", \"[5-8]\\\\d{8}\", [9], [[\"(\\\\d{5})(\\\\d{4})\", \"$1-$2\", [\"5(?:29|38)\", \"5(?:29[89]|389)\", \"5(?:29[89]|389)0\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"5[45]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{5})\", \"$1-$2\", [\"5(?:2[2-489]|3[5-9]|9)|892\", \"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1-$2\", [\"8\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{6})\", \"$1-$2\", [\"[5-7]\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, [[\"5(?:29(?:[189][05]|2[29]|3[01])|389[05])\\\\d{4}|5(?:2(?:[0-25-7]\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[08]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"], [\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[017]\\\\d|2[0-2]|6[0-8]|8[0-3]))\\\\d{6}\"], [\"80\\\\d{7}\"], [\"89\\\\d{7}\"], 0, 0, 0, 0, [\"592(?:4[0-2]|93)\\\\d{4}\"]]],\n    \"MC\": [\"377\", \"00\", \"(?:[3489]|6\\\\d)\\\\d{7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"4\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[389]\"]], [\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4 $5\", [\"6\"], \"0$1\"]], \"0\"],\n    \"MD\": [\"373\", \"00\", \"(?:[235-7]\\\\d|[89]0)\\\\d{6}\", [8], [[\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[89]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"22|3\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"[25-7]\"], \"0$1\"]], \"0\"],\n    \"ME\": [\"382\", \"00\", \"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[2-9]\"], \"0$1\"]], \"0\"],\n    \"MF\": [\"590\", \"00\", \"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\", [9], 0, \"0\", 0, 0, 0, 0, 0, [[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"], [\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"], [\"80[0-5]\\\\d{6}\"], 0, 0, 0, 0, 0, [\"976[01]\\\\d{5}\"]]],\n    \"MG\": [\"261\", \"00\", \"[23]\\\\d{8}\", [9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[23]\"], \"0$1\"]], \"0\", 0, \"0|([24-9]\\\\d{6})$\", \"20$1\"],\n    \"MH\": [\"692\", \"011\", \"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"[2-6]\"]]], \"1\"],\n    \"MK\": [\"389\", \"00\", \"[2-578]\\\\d{7}\", [8], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"2|34[47]|4(?:[37]7|5[47]|64)\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[347]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[58]\"], \"0$1\"]], \"0\"],\n    \"ML\": [\"223\", \"00\", \"[24-9]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[24-9]\"]]]],\n    \"MM\": [\"95\", \"00\", \"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\", [6, 7, 8, 9, 10], [[\"(\\\\d)(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"16|2\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[12]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[4-7]|8[1-35]\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\", \"$1 $2 $3\", [\"9(?:2[0-4]|[35-9]|4[137-9])\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"2\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"92\"], \"0$1\"], [\"(\\\\d)(\\\\d{5})(\\\\d{4})\", \"$1 $2 $3\", [\"9\"], \"0$1\"]], \"0\"],\n    \"MN\": [\"976\", \"001\", \"[12]\\\\d{7,9}|[5-9]\\\\d{7}\", [8, 9, 10], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"[12]1\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[5-9]\"]], [\"(\\\\d{3})(\\\\d{5,6})\", \"$1 $2\", [\"[12]2[1-3]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{5,6})\", \"$1 $2\", [\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\", \"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"], \"0$1\"], [\"(\\\\d{5})(\\\\d{4,5})\", \"$1 $2\", [\"[12]\"], \"0$1\"]], \"0\"],\n    \"MO\": [\"853\", \"00\", \"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\", [7, 8], [[\"(\\\\d{4})(\\\\d{3})\", \"$1 $2\", [\"0\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[268]\"]]]],\n    \"MP\": [\"1\", \"011\", \"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-9]\\\\d{6})$\", \"670$1\", 0, \"670\"],\n    \"MQ\": [\"596\", \"00\", \"(?:69|80)\\\\d{7}|(?:59|97)6\\\\d{6}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[569]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\"],\n    \"MR\": [\"222\", \"00\", \"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2-48]\"]]]],\n    \"MS\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([34]\\\\d{6})$\", \"664$1\", 0, \"664\"],\n    \"MT\": [\"356\", \"00\", \"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2357-9]\"]]]],\n    \"MU\": [\"230\", \"0(?:0|[24-7]0|3[03])\", \"(?:5|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\", [7, 8, 10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-46]|8[013]\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"5\"]], [\"(\\\\d{5})(\\\\d{5})\", \"$1 $2\", [\"8\"]]], 0, 0, 0, 0, 0, 0, 0, \"020\"],\n    \"MV\": [\"960\", \"0(?:0|19)\", \"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\", [7, 10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"[3467]|9[13-9]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[89]\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"MW\": [\"265\", \"00\", \"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\", [7, 9], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1[2-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"2\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[137-9]\"], \"0$1\"]], \"0\"],\n    \"MX\": [\"52\", \"0[09]\", \"1(?:(?:44|99)[1-9]|65[0-689])\\\\d{7}|(?:1(?:[017]\\\\d|[235][1-9]|4[0-35-9]|6[0-46-9]|8[1-79]|9[1-8])|[2-9]\\\\d)\\\\d{8}\", [10, 11], [[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"33|5[56]|81\"], 0, 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2-9]\"], 0, 1], [\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$2 $3 $4\", [\"1(?:33|5[56]|81)\"], 0, 1], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$2 $3 $4\", [\"1\"], 0, 1]], \"01\", 0, \"0(?:[12]|4[45])|1\", 0, 0, 0, 0, \"00\"],\n    \"MY\": [\"60\", \"00\", \"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\", [8, 9, 10], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1-$2 $3\", [\"[4-79]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1-$2 $3\", [\"1(?:[02469]|[378][1-9]|53)|8\", \"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"], \"0$1\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1-$2 $3\", [\"3\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\", \"$1-$2-$3-$4\", [\"1(?:[367]|80)\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1-$2 $3\", [\"15\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1-$2 $3\", [\"1\"], \"0$1\"]], \"0\"],\n    \"MZ\": [\"258\", \"00\", \"(?:2|8\\\\d)\\\\d{7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"2|8[2-79]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"NA\": [\"264\", \"00\", \"[68]\\\\d{7,8}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"88\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"6\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"87\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"], \"0$1\"]], \"0\"],\n    \"NC\": [\"687\", \"00\", \"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\", [6], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1.$2.$3\", [\"[02-57-9]\"]]]],\n    \"NE\": [\"227\", \"00\", \"[027-9]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"08\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[089]|2[013]|7[04]\"]]]],\n    \"NF\": [\"672\", \"00\", \"[13]\\\\d{5}\", [6], [[\"(\\\\d{2})(\\\\d{4})\", \"$1 $2\", [\"1[0-3]\"]], [\"(\\\\d)(\\\\d{5})\", \"$1 $2\", [\"[13]\"]]], 0, 0, \"([0-258]\\\\d{4})$\", \"3$1\"],\n    \"NG\": [\"234\", \"009\", \"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\", [7, 8, 10, 11, 12, 13, 14], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"78\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[12]|9(?:0[3-9]|[1-9])\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\", \"$1 $2 $3\", [\"[3-7]|8[2-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[7-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\", \"$1 $2 $3\", [\"[78]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\", \"$1 $2 $3\", [\"[78]\"], \"0$1\"]], \"0\"],\n    \"NI\": [\"505\", \"00\", \"(?:1800|[25-8]\\\\d{3})\\\\d{4}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[125-8]\"]]]],\n    \"NL\": [\"31\", \"00\", \"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\", [5, 6, 7, 8, 9, 10, 11], [[\"(\\\\d{3})(\\\\d{4,7})\", \"$1 $2\", [\"[89]0\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1 $2\", [\"66\"], \"0$1\"], [\"(\\\\d)(\\\\d{8})\", \"$1 $2\", [\"6\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[1-578]|91\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\", \"$1 $2 $3\", [\"9\"], \"0$1\"]], \"0\"],\n    \"NO\": [\"47\", \"00\", \"(?:0|[2-9]\\\\d{3})\\\\d{4}\", [5, 8], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"[489]|59\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[235-7]\"]]], 0, 0, 0, 0, 0, \"[02-689]|7[0-8]\"],\n    \"NP\": [\"977\", \"00\", \"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\", [8, 10, 11], [[\"(\\\\d)(\\\\d{7})\", \"$1-$2\", [\"1[2-6]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{6})\", \"$1-$2\", [\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{7})\", \"$1-$2\", [\"9\"]]], \"0\"],\n    \"NR\": [\"674\", \"00\", \"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[4-68]\"]]]],\n    \"NU\": [\"683\", \"00\", \"(?:[47]|888\\\\d)\\\\d{3}\", [4, 7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"8\"]]]],\n    \"NZ\": [\"64\", \"0(?:0|161)\", \"[29]\\\\d{7,9}|50\\\\d{5}(?:\\\\d{2,3})?|6[0-35-9]\\\\d{6}|7\\\\d{7,8}|8\\\\d{4,9}|(?:11\\\\d|[34])\\\\d{7}\", [5, 6, 7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{3,8})\", \"$1 $2\", [\"8[1-579]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\", \"$1 $2 $3\", [\"50[036-8]|[89]0\", \"50(?:[0367]|88)|[89]0\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"24|[346]|7[2-57-9]|9[2-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"2(?:10|74)|[59]|80\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"1|2[028]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\", \"$1 $2 $3\", [\"2(?:[169]|7[0-35-9])|7|86\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, 0, \"00\"],\n    \"OM\": [\"968\", \"00\", \"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\", [7, 8, 9], [[\"(\\\\d{3})(\\\\d{4,6})\", \"$1 $2\", [\"[58]\"]], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"2\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[179]\"]]]],\n    \"PA\": [\"507\", \"00\", \"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\", [7, 8, 10, 11], [[\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"[1-57-9]\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1-$2\", [\"[68]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"PE\": [\"51\", \"00|19(?:1[124]|77|90)00\", \"(?:[14-8]|9\\\\d)\\\\d{7}\", [8, 9], [[\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"80\"], \"(0$1)\"], [\"(\\\\d)(\\\\d{7})\", \"$1 $2\", [\"1\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"[4-8]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"9\"]]], \"0\", 0, 0, 0, 0, 0, 0, \"00\", \" Anexo \"],\n    \"PF\": [\"689\", \"00\", \"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\", [6, 8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"44\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"4|8[7-9]\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"]]]],\n    \"PG\": [\"675\", \"00|140[1-3]\", \"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\", [7, 8], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"18|[2-69]|85\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[78]\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"PH\": [\"63\", \"00\", \"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\", [6, 8, 9, 10, 11, 12, 13], [[\"(\\\\d)(\\\\d{5})\", \"$1 $2\", [\"2\"], \"(0$1)\"], [\"(\\\\d{4})(\\\\d{4,6})\", \"$1 $2\", [\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\", \"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"], \"(0$1)\"], [\"(\\\\d{5})(\\\\d{4})\", \"$1 $2\", [\"346|4(?:27|9[35])|883\", \"3469|4(?:279|9(?:30|56))|8834\"], \"(0$1)\"], [\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"2\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[3-7]|8[2-8]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[89]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"]], [\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3 $4\", [\"1\"]]], \"0\"],\n    \"PK\": [\"92\", \"00\", \"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\", [8, 9, 10, 11, 12], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\", \"$1 $2 $3\", [\"[89]0\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{5})\", \"$1 $2\", [\"1\"]], [\"(\\\\d{3})(\\\\d{6,7})\", \"$1 $2\", [\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\", \"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{7,8})\", \"$1 $2\", [\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"], \"(0$1)\"], [\"(\\\\d{5})(\\\\d{5})\", \"$1 $2\", [\"58\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{7})\", \"$1 $2\", [\"3\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"[24-9]\"], \"(0$1)\"]], \"0\"],\n    \"PL\": [\"48\", \"00\", \"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\", [6, 7, 8, 9, 10], [[\"(\\\\d{5})\", \"$1\", [\"19\"]], [\"(\\\\d{3})(\\\\d{3})\", \"$1 $2\", [\"11|20|64\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1 $2 $3\", [\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\", \"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\", \"$1 $2 $3\", [\"64\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"1[2-8]|[2-7]|8[1-79]|9[145]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"8\"]]]],\n    \"PM\": [\"508\", \"00\", \"(?:[45]|80\\\\d\\\\d)\\\\d{5}\", [6, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"[45]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"], \"0$1\"]], \"0\"],\n    \"PR\": [\"1\", \"011\", \"(?:[589]\\\\d\\\\d|787)\\\\d{7}\", [10], 0, \"1\", 0, 0, 0, 0, \"787|939\"],\n    \"PS\": [\"970\", \"00\", \"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\", [8, 9, 10], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[2489]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"5\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1\"]]], \"0\"],\n    \"PT\": [\"351\", \"00\", \"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"2[12]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"16|[236-9]\"]]]],\n    \"PW\": [\"680\", \"01[12]\", \"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-9]\"]]]],\n    \"PY\": [\"595\", \"00\", \"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\", [6, 7, 8, 9, 10, 11], [[\"(\\\\d{3})(\\\\d{3,6})\", \"$1 $2\", [\"[2-9]0\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"], \"(0$1)\"], [\"(\\\\d{3})(\\\\d{4,5})\", \"$1 $2\", [\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"87\"]], [\"(\\\\d{3})(\\\\d{6})\", \"$1 $2\", [\"9(?:[5-79]|8[1-6])\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2-8]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"9\"]]], \"0\"],\n    \"QA\": [\"974\", \"00\", \"[2-7]\\\\d{7}|800\\\\d{4}(?:\\\\d{2})?|2\\\\d{6}\", [7, 8, 9], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"2[126]|8\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[2-7]\"]]]],\n    \"RE\": [\"262\", \"00\", \"976\\\\d{6}|(?:26|[68]\\\\d)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2689]\"], \"0$1\"]], \"0\", 0, 0, 0, 0, \"26[23]|69|[89]\"],\n    \"RO\": [\"40\", \"00\", \"(?:[2378]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\", [6, 9], [[\"(\\\\d{3})(\\\\d{3})\", \"$1 $2\", [\"2[3-6]\", \"2[3-6]\\\\d9\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})\", \"$1 $2\", [\"219|31\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[23]1\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[237-9]\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, 0, 0, \" int \"],\n    \"RS\": [\"381\", \"00\", \"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\", [6, 7, 8, 9, 10, 11, 12], [[\"(\\\\d{3})(\\\\d{3,9})\", \"$1 $2\", [\"(?:2[389]|39)0|[7-9]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{5,10})\", \"$1 $2\", [\"[1-36]\"], \"0$1\"]], \"0\"],\n    \"RU\": [\"7\", \"810\", \"8\\\\d{13}|[347-9]\\\\d{9}\", [10, 14], [[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"7(?:1[0-8]|2[1-9])\", \"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\", \"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"], \"8 ($1)\", 1], [\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"7(?:1[0-68]|2[1-9])\", \"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\", \"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"], \"8 ($1)\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"8 ($1)\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2-$3-$4\", [\"[349]|8(?:[02-7]|1[1-8])\"], \"8 ($1)\", 1], [\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"8\"], \"8 ($1)\"]], \"8\", 0, 0, 0, 0, \"3[04-689]|[489]\", 0, \"8~10\"],\n    \"RW\": [\"250\", \"00\", \"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\", [8, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"0\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[7-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"2\"]]], \"0\"],\n    \"SA\": [\"966\", \"00\", \"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\", [9, 10], [[\"(\\\\d{4})(\\\\d{5})\", \"$1 $2\", [\"9\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"5\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"81\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"]]], \"0\"],\n    \"SB\": [\"677\", \"0[01]\", \"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\", [5, 7], [[\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\n    \"SC\": [\"248\", \"010|0[0-2]\", \"800\\\\d{4}|(?:[249]\\\\d|64)\\\\d{5}\", [7], [[\"(\\\\d)(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[246]|9[57]\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"SD\": [\"249\", \"00\", \"[19]\\\\d{8}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[19]\"], \"0$1\"]], \"0\"],\n    \"SE\": [\"46\", \"00\", \"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\", [6, 7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\", \"$1-$2 $3\", [\"20\"], \"0$1\", 0, \"$1 $2 $3\"], [\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"9(?:00|39|44|9)\"], \"0$1\", 0, \"$1 $2\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\", \"$1-$2 $3\", [\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"], \"0$1\", 0, \"$1 $2 $3\"], [\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\", \"$1-$2 $3 $4\", [\"8\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\", \"$1-$2 $3\", [\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"], \"0$1\", 0, \"$1 $2 $3\"], [\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\", \"$1-$2 $3\", [\"9(?:00|39|44)\"], \"0$1\", 0, \"$1 $2 $3\"], [\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\", \"$1-$2 $3 $4\", [\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1-$2 $3 $4\", [\"10|7\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\", \"$1-$2 $3 $4\", [\"8\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1-$2 $3 $4\", [\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\", \"$1-$2 $3 $4\", [\"9\"], \"0$1\", 0, \"$1 $2 $3 $4\"], [\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1-$2 $3 $4 $5\", [\"[26]\"], \"0$1\", 0, \"$1 $2 $3 $4 $5\"]], \"0\"],\n    \"SG\": [\"65\", \"0[0-3]\\\\d\", \"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\", [8, 10, 11], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[369]|8(?:0[1-5]|[1-9])\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"]], [\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\", \"$1 $2 $3\", [\"7\"]], [\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"]]]],\n    \"SH\": [\"290\", \"00\", \"(?:[256]\\\\d|8)\\\\d{3}\", [4, 5], 0, 0, 0, 0, 0, 0, \"[256]\"],\n    \"SI\": [\"386\", \"00|10(?:22|66|88|99)\", \"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\", [5, 6, 7, 8], [[\"(\\\\d{2})(\\\\d{3,6})\", \"$1 $2\", [\"8[09]|9\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"59|8\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[37][01]|4[0139]|51|6\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[1-57]\"], \"(0$1)\"]], \"0\", 0, 0, 0, 0, 0, 0, \"00\"],\n    \"SJ\": [\"47\", \"00\", \"0\\\\d{4}|(?:[489]\\\\d|[57]9)\\\\d{6}\", [5, 8], 0, 0, 0, 0, 0, 0, \"79\"],\n    \"SK\": [\"421\", \"00\", \"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\", [6, 7, 9], [[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\", \"$1 $2 $3\", [\"21\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\", \"$1 $2 $3\", [\"[3-5][1-8]1\", \"[3-5][1-8]1[67]\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\", \"$1/$2 $3 $4\", [\"2\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[689]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1/$2 $3 $4\", [\"[3-5]\"], \"0$1\"]], \"0\"],\n    \"SL\": [\"232\", \"00\", \"(?:[237-9]\\\\d|66)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"[236-9]\"], \"(0$1)\"]], \"0\"],\n    \"SM\": [\"378\", \"00\", \"(?:0549|[5-7]\\\\d)\\\\d{6}\", [8, 10], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[5-7]\"]], [\"(\\\\d{4})(\\\\d{6})\", \"$1 $2\", [\"0\"]]], 0, 0, \"([89]\\\\d{5})$\", \"0549$1\"],\n    \"SN\": [\"221\", \"00\", \"(?:[378]\\\\d|93)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[379]\"]]]],\n    \"SO\": [\"252\", \"00\", \"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\", [6, 7, 8, 9], [[\"(\\\\d{2})(\\\\d{4})\", \"$1 $2\", [\"8[125]\"]], [\"(\\\\d{6})\", \"$1\", [\"[134]\"]], [\"(\\\\d)(\\\\d{6})\", \"$1 $2\", [\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]], [\"(\\\\d)(\\\\d{7})\", \"$1 $2\", [\"24|[67]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[3478]|64|90\"]], [\"(\\\\d{2})(\\\\d{5,7})\", \"$1 $2\", [\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\"]]], \"0\"],\n    \"SR\": [\"597\", \"00\", \"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\", [6, 7], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1-$2-$3\", [\"56\"]], [\"(\\\\d{3})(\\\\d{3})\", \"$1-$2\", [\"[2-5]\"]], [\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"[6-8]\"]]]],\n    \"SS\": [\"211\", \"00\", \"[19]\\\\d{8}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[19]\"], \"0$1\"]], \"0\"],\n    \"ST\": [\"239\", \"00\", \"(?:22|9\\\\d)\\\\d{5}\", [7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[29]\"]]]],\n    \"SV\": [\"503\", \"00\", \"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\", [7, 8, 11], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[89]\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[267]\"]], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[89]\"]]]],\n    \"SX\": [\"1\", \"011\", \"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|(5\\\\d{6})$\", \"721$1\", 0, \"721\"],\n    \"SY\": [\"963\", \"00\", \"[1-39]\\\\d{8}|[1-5]\\\\d{7}\", [8, 9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[1-5]\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"9\"], \"0$1\", 1]], \"0\"],\n    \"SZ\": [\"268\", \"00\", \"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\", [8, 9], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[0237]\"]], [\"(\\\\d{5})(\\\\d{4})\", \"$1 $2\", [\"9\"]]]],\n    \"TA\": [\"290\", \"00\", \"8\\\\d{3}\", [4], 0, 0, 0, 0, 0, 0, \"8\"],\n    \"TC\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-479]\\\\d{6})$\", \"649$1\", 0, \"649\"],\n    \"TD\": [\"235\", \"00|16\", \"(?:22|[69]\\\\d|77)\\\\d{6}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[2679]\"]]], 0, 0, 0, 0, 0, 0, 0, \"00\"],\n    \"TG\": [\"228\", \"00\", \"[279]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[279]\"]]]],\n    \"TH\": [\"66\", \"00[1-9]\", \"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\", [8, 9, 10, 13], [[\"(\\\\d)(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"2\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[13-9]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"1\"]]], \"0\"],\n    \"TJ\": [\"992\", \"810\", \"(?:00|[1-57-9]\\\\d)\\\\d{7}\", [9], [[\"(\\\\d{6})(\\\\d)(\\\\d{2})\", \"$1 $2 $3\", [\"331\", \"3317\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"[34]7|91[78]\"]], [\"(\\\\d{4})(\\\\d)(\\\\d{4})\", \"$1 $2 $3\", [\"3[1-5]\"]], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[0-57-9]\"]]], 0, 0, 0, 0, 0, 0, 0, \"8~10\"],\n    \"TK\": [\"690\", \"00\", \"[2-47]\\\\d{3,6}\", [4, 5, 6, 7]],\n    \"TL\": [\"670\", \"00\", \"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\", [7, 8], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[2-489]|70\"]], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"7\"]]]],\n    \"TM\": [\"993\", \"810\", \"[1-6]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2-$3-$4\", [\"12\"], \"(8 $1)\"], [\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\", \"$1 $2-$3-$4\", [\"[1-5]\"], \"(8 $1)\"], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"6\"], \"8 $1\"]], \"8\", 0, 0, 0, 0, 0, 0, \"8~10\"],\n    \"TN\": [\"216\", \"00\", \"[2-57-9]\\\\d{7}\", [8], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2-57-9]\"]]]],\n    \"TO\": [\"676\", \"00\", \"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\", [5, 7], [[\"(\\\\d{2})(\\\\d{3})\", \"$1-$2\", [\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]], [\"(\\\\d{4})(\\\\d{3})\", \"$1 $2\", [\"0\"]], [\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[5-9]\"]]]],\n    \"TR\": [\"90\", \"00\", \"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\", [7, 10, 12, 13], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"512|8[01589]|90\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"5(?:[0-59]|61)\", \"5(?:[0-59]|616)\", \"5(?:[0-59]|6161)\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[24][1-8]|3[1-9]\"], \"(0$1)\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\", \"$1 $2 $3\", [\"80\"], \"0$1\", 1]], \"0\"],\n    \"TT\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-46-8]\\\\d{6})$\", \"868$1\", 0, \"868\"],\n    \"TV\": [\"688\", \"00\", \"(?:2|7\\\\d\\\\d|90)\\\\d{4}\", [5, 6, 7], [[\"(\\\\d{2})(\\\\d{3})\", \"$1 $2\", [\"2\"]], [\"(\\\\d{2})(\\\\d{4})\", \"$1 $2\", [\"90\"]], [\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"7\"]]]],\n    \"TW\": [\"886\", \"0(?:0[25-79]|19)\", \"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\", [7, 8, 9, 10, 11], [[\"(\\\\d{2})(\\\\d)(\\\\d{4})\", \"$1 $2 $3\", [\"202\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[258]0\"], \"0$1\"], [\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\", \"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[49]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\", \"$1 $2 $3\", [\"7\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, 0, 0, \"#\"],\n    \"TZ\": [\"255\", \"00[056]\", \"(?:[25-8]\\\\d|41|90)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"[89]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[24]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1 $2\", [\"5\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[67]\"], \"0$1\"]], \"0\"],\n    \"UA\": [\"380\", \"00\", \"[89]\\\\d{9}|[3-9]\\\\d{8}\", [9, 10], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\", \"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{5})\", \"$1 $2\", [\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\", \"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[3-7]|89|9[1-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[89]\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, 0, \"0~0\"],\n    \"UG\": [\"256\", \"00[057]\", \"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\", [9], [[\"(\\\\d{4})(\\\\d{5})\", \"$1 $2\", [\"202\", \"2024\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{6})\", \"$1 $2\", [\"[27-9]|4(?:6[45]|[7-9])\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1 $2\", [\"[34]\"], \"0$1\"]], \"0\"],\n    \"US\": [\"1\", \"011\", \"[2-9]\\\\d{9}|3\\\\d{6}\", [10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1-$2\", [\"310\"], 0, 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"($1) $2-$3\", [\"[2-9]\"], 0, 1, \"$1-$2-$3\"]], \"1\", 0, 0, 0, 0, 0, [[\"505(?:[2-57-9]\\\\d\\\\d|6(?:[0-35-9]\\\\d|44))\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-289]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"], [\"\"], [\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"], [\"900[2-9]\\\\d{6}\"], [\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-7]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\n    \"UY\": [\"598\", \"0(?:0|1[3-9]\\\\d)\", \"4\\\\d{9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\", [7, 8, 10], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"405|8|90\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"9\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[124]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"4\"], \"0$1\"]], \"0\", 0, 0, 0, 0, 0, 0, \"00\", \" int. \"],\n    \"UZ\": [\"998\", \"810\", \"(?:33|55|[679]\\\\d|88)\\\\d{7}\", [9], [[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[35-9]\"], \"8 $1\"]], \"8\", 0, 0, 0, 0, 0, 0, \"8~10\"],\n    \"VA\": [\"39\", \"00\", \"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\", [6, 7, 8, 9, 10, 11], 0, 0, 0, 0, 0, 0, \"06698\"],\n    \"VC\": [\"1\", \"011\", \"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-7]\\\\d{6})$\", \"784$1\", 0, \"784\"],\n    \"VE\": [\"58\", \"00\", \"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\", [10], [[\"(\\\\d{3})(\\\\d{7})\", \"$1-$2\", [\"[24-689]\"], \"0$1\"]], \"0\"],\n    \"VG\": [\"1\", \"011\", \"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-578]\\\\d{6})$\", \"284$1\", 0, \"284\"],\n    \"VI\": [\"1\", \"011\", \"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\", [10], 0, \"1\", 0, \"1|([2-9]\\\\d{6})$\", \"340$1\", 0, \"340\"],\n    \"VN\": [\"84\", \"00\", \"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\", [7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"80\"], \"0$1\", 1], [\"(\\\\d{4})(\\\\d{4,6})\", \"$1 $2\", [\"1\"], 0, 1], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"[69]\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[3578]\"], \"0$1\", 1], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"2[48]\"], \"0$1\", 1], [\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\", \"$1 $2 $3\", [\"2\"], \"0$1\", 1]], \"0\"],\n    \"VU\": [\"678\", \"00\", \"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\", [5, 7], [[\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"[57-9]\"]]]],\n    \"WF\": [\"681\", \"00\", \"(?:40|72)\\\\d{4}|8\\\\d{5}(?:\\\\d{3})?\", [6, 9], [[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3\", [\"[478]\"]], [\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\", \"$1 $2 $3 $4\", [\"8\"]]]],\n    \"WS\": [\"685\", \"0\", \"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\", [5, 6, 7, 10], [[\"(\\\\d{5})\", \"$1\", [\"[2-5]|6[1-9]\"]], [\"(\\\\d{3})(\\\\d{3,7})\", \"$1 $2\", [\"[68]\"]], [\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"7\"]]]],\n    \"XK\": [\"383\", \"00\", \"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\", [8, 9], [[\"(\\\\d{3})(\\\\d{5})\", \"$1 $2\", [\"[89]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[2-4]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[23]\"], \"0$1\"]], \"0\"],\n    \"YE\": [\"967\", \"00\", \"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\", [7, 8, 9], [[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"[1-6]|7[24-68]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"7\"], \"0$1\"]], \"0\"],\n    \"YT\": [\"262\", \"00\", \"80\\\\d{7}|(?:26|63)9\\\\d{6}\", [9], 0, \"0\", 0, 0, 0, 0, \"269|63\"],\n    \"ZA\": [\"27\", \"00\", \"[1-79]\\\\d{8}|8\\\\d{4,9}\", [5, 6, 7, 8, 9, 10], [[\"(\\\\d{2})(\\\\d{3,4})\", \"$1 $2\", [\"8[1-4]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\", \"$1 $2 $3\", [\"8[1-4]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"860\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"[1-9]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"8\"], \"0$1\"]], \"0\"],\n    \"ZM\": [\"260\", \"00\", \"800\\\\d{6}|(?:21|63|[79]\\\\d)\\\\d{7}\", [9], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[28]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1 $2\", [\"[79]\"], \"0$1\"]], \"0\"],\n    \"ZW\": [\"263\", \"00\", \"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\", [5, 6, 7, 8, 9, 10], [[\"(\\\\d{3})(\\\\d{3,5})\", \"$1 $2\", [\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"], \"0$1\"], [\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\", \"$1 $2 $3\", [\"[49]\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{4})\", \"$1 $2\", [\"80\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{7})\", \"$1 $2\", [\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\", \"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"], \"(0$1)\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"7\"], \"0$1\"], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\", \"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{6})\", \"$1 $2\", [\"8\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3,5})\", \"$1 $2\", [\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"], \"0$1\"], [\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\", \"$1 $2 $3\", [\"29[013-9]|39|54\"], \"0$1\"], [\"(\\\\d{4})(\\\\d{3,5})\", \"$1 $2\", [\"(?:25|54)8\", \"258|5483\"], \"0$1\"]], \"0\"]\n  },\n  \"nonGeographic\": {\n    \"800\": [\"800\", 0, \"(?:00|[1-9]\\\\d)\\\\d{6}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"\\\\d\"]]], 0, 0, 0, 0, 0, 0, [0, 0, [\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\n    \"808\": [\"808\", 0, \"[1-9]\\\\d{7}\", [8], [[\"(\\\\d{4})(\\\\d{4})\", \"$1 $2\", [\"[1-9]\"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, 0, [\"[1-9]\\\\d{7}\"]]],\n    \"870\": [\"870\", 0, \"7\\\\d{11}|[35-7]\\\\d{8}\", [9, 12], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"[35-7]\"]]], 0, 0, 0, 0, 0, 0, [0, [\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"]]],\n    \"878\": [\"878\", 0, \"10\\\\d{10}\", [12], [[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\", \"$1 $2 $3\", [\"1\"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, [\"10\\\\d{10}\"]]],\n    \"881\": [\"881\", 0, \"[0-36-9]\\\\d{8}\", [9], [[\"(\\\\d)(\\\\d{3})(\\\\d{5})\", \"$1 $2 $3\", [\"[0-36-9]\"]]], 0, 0, 0, 0, 0, 0, [0, [\"[0-36-9]\\\\d{8}\"]]],\n    \"882\": [\"882\", 0, \"[13]\\\\d{6}(?:\\\\d{2,5})?|285\\\\d{9}|(?:[19]\\\\d|49)\\\\d{6}\", [7, 8, 9, 10, 11, 12], [[\"(\\\\d{2})(\\\\d{5})\", \"$1 $2\", [\"16|342\"]], [\"(\\\\d{2})(\\\\d{6})\", \"$1 $2\", [\"4\"]], [\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\", \"$1 $2 $3\", [\"[19]\"]], [\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\", \"$1 $2 $3\", [\"3[23]\"]], [\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\", \"$1 $2 $3\", [\"1\"]], [\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"34[57]\"]], [\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"34\"]], [\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\", \"$1 $2 $3\", [\"[1-3]\"]]], 0, 0, 0, 0, 0, 0, [0, [\"342\\\\d{4}|(?:337|49)\\\\d{6}|3(?:2|47|7\\\\d{3})\\\\d{7}\", [7, 8, 9, 10, 12]], 0, 0, 0, 0, 0, 0, [\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:(?:285\\\\d\\\\d|3(?:45|[69]\\\\d{3}))\\\\d|9[89])\\\\d{6}\"]]],\n    \"883\": [\"883\", 0, \"(?:210|370\\\\d\\\\d)\\\\d{7}|51\\\\d{7}(?:\\\\d{3})?\", [9, 10, 12], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3\", [\"510\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\", \"$1 $2 $3\", [\"2\"]], [\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"51[13]\"]], [\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1 $2 $3 $4\", [\"[35]\"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, 0, 0, [\"(?:210|(?:370[1-9]|51[013]0)\\\\d)\\\\d{7}|5100\\\\d{5}\"]]],\n    \"888\": [\"888\", 0, \"\\\\d{11}\", [11], [[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\", \"$1 $2 $3\"]], 0, 0, 0, 0, 0, 0, [0, 0, 0, 0, 0, 0, [\"\\\\d{11}\"]]],\n    \"979\": [\"979\", 0, \"[1359]\\\\d{8}\", [9], [[\"(\\\\d)(\\\\d{4})(\\\\d{4})\", \"$1 $2 $3\", [\"[1359]\"]]], 0, 0, 0, 0, 0, 0, [0, 0, 0, [\"[1359]\\\\d{8}\"]]]\n  }\n});\n\n/***/ }),\n\n/***/ 2315:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return applyInternationalSeparatorStyle; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2250);\n // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nfunction applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(_constants_js__WEBPACK_IMPORTED_MODULE_0__[/* VALID_PUNCTUATION */ \"f\"], \"]+\"), 'g'), ' ').trim();\n}\n\n/***/ }),\n\n/***/ 2316:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return extractCountryCallingCode; });\n/* harmony import */ var _stripIddPrefix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2282);\n/* harmony import */ var _extractCountryCallingCodeFromInternationalNumberWithoutPlusSign_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2283);\n/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2245);\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2250);\n\n\n\n\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nfunction extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = Object(_stripIddPrefix_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = Object(_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(number, country, callingCode, metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          shorterNumber = _extractCountryCallin.number;\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n  if (number[1] === '0') {\n    return {};\n  }\n  metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n  while (i - 1 <= _constants_js__WEBPACK_IMPORTED_MODULE_3__[/* MAX_LENGTH_COUNTRY_CODE */ \"a\"] && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n    i++;\n  }\n  return {};\n}\n\n/***/ }),\n\n/***/ 2317:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return extractNationalNumber; });\n/* harmony import */ var _extractNationalNumberFromPossiblyIncompleteNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2318);\n/* harmony import */ var _matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2256);\n/* harmony import */ var _checkNumberLength_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2271);\n\n\n\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nfunction extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = Object(_extractNationalNumberFromPossiblyIncompleteNumber_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(number, metadata),\n    carrierCode = _extractNationalNumbe.carrierCode,\n    nationalNumber = _extractNationalNumbe.nationalNumber;\n  if (nationalNumber !== number) {\n    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\n      // Don't strip the national prefix.\n      return {\n        nationalNumber: number\n      };\n    } // Check the national (significant) number length after extracting national prefix and carrier code.\n    // Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\n\n    if (metadata.possibleLengths()) {\n      // The number remaining after stripping the national prefix and carrier code\n      // should be long enough to have a possible length for the country.\n      // Otherwise, don't strip the national prefix and carrier code,\n      // since the original number could be a valid number.\n      // This check has been copy-pasted \"as is\" from Google's original library:\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      // It doesn't check for the \"possibility\" of the original `number`.\n      // I guess it's fine not checking that one. It works as is anyway.\n      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\n        // Don't strip the national prefix.\n        return {\n          nationalNumber: number\n        };\n      }\n    }\n  }\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (Object(_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(nationalNumberBefore, metadata.nationalNumberPattern()) && !Object(_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(nationalNumberAfter, metadata.nationalNumberPattern())) {\n    return false;\n  } // This \"is possible\" national number (length) check has been commented out\n  // because it's superceded by the (effectively) same check done in the\n  // `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\n  // In other words, why run the same check twice if it could only be run once.\n  // // Check the national (significant) number length after extracting national prefix and carrier code.\n  // // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\n  // // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\n  // if (metadata.possibleLengths()) {\n  // \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\n  // \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\n  // \t\treturn false\n  // \t}\n  // }\n\n  return true;\n}\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\n  switch (Object(_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"])(nationalNumber, metadata)) {\n    case 'TOO_SHORT':\n    case 'INVALID_LENGTH':\n      // This library ignores \"local-only\" phone numbers (for simplicity).\n      // See the readme for more info on what are \"local-only\" phone numbers.\n      // case 'IS_POSSIBLE_LOCAL_ONLY':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/***/ }),\n\n/***/ 2318:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return extractNationalNumberFromPossiblyIncompleteNumber; });\n/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\nfunction extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n        // then carrier code is the first one.\n\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n      var nationalPrefix;\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n  return {\n    nationalNumber: number\n  };\n}\n\n/***/ }),\n\n/***/ 2319:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getCountryByCallingCode; });\n/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2245);\n/* harmony import */ var _getNumberType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2284);\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nfunction getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n  for (var _iterator = _createForOfIteratorHelperLoose(possibleCountries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country); // Leading digits check would be the simplest and fastest one.\n    // Leading digits patterns are only defined for about 20% of all countries.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // Matching \"leading digits\" is a sufficient but not necessary condition.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (Object(_getNumberType_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      return country;\n    }\n  }\n}\n\n/***/ }),\n\n/***/ 2320:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isPossiblePhoneNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return isPossibleNumber; });\n/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2245);\n/* harmony import */ var _helpers_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2271);\n\n\nfunction isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n  metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nfunction isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (Object(_helpers_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n\n/***/ }),\n\n/***/ 2321:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return parseRFC3966; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return formatRFC3966; });\n/* harmony import */ var _isViablePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2322);\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nfunction parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n  for (var _iterator = _createForOfIteratorHelperLoose(text.split(';')), _step; !(_step = _iterator()).done;) {\n    var part = _step.value;\n    var _part$split = part.split('='),\n      _part$split2 = _slicedToArray(_part$split, 2),\n      name = _part$split2[0],\n      value = _part$split2[1];\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n      case 'ext':\n        ext = value;\n        break;\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n  if (!Object(_isViablePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(number)) {\n    return {};\n  }\n  var result = {\n    number: number\n  };\n  if (ext) {\n    result.ext = ext;\n  }\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nfunction formatRFC3966(_ref) {\n  var number = _ref.number,\n    ext = _ref.ext;\n  if (!number) {\n    return '';\n  }\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n\n/***/ }),\n\n/***/ 2322:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export VALID_PHONE_NUMBER */\n/* unused harmony export VALID_PHONE_NUMBER_WITH_EXTENSION */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isViablePhoneNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return isViablePhoneNumberStart; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2250);\n/* harmony import */ var _extension_createExtensionPattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2323);\n\n //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__[/* VALID_DIGITS */ \"e\"] + ']{' + _constants_js__WEBPACK_IMPORTED_MODULE_0__[/* MIN_LENGTH_FOR_NSN */ \"c\"] + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nvar VALID_PHONE_NUMBER = '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__[/* PLUS_CHARS */ \"d\"] + ']{0,1}' + '(?:' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__[/* VALID_PUNCTUATION */ \"f\"] + ']*' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__[/* VALID_DIGITS */ \"e\"] + ']' + '){3,}' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__[/* VALID_PUNCTUATION */ \"f\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[/* VALID_DIGITS */ \"e\"] + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__[/* PLUS_CHARS */ \"d\"] + ']{0,1}' + '(?:' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__[/* VALID_PUNCTUATION */ \"f\"] + ']*' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__[/* VALID_DIGITS */ \"e\"] + ']' + '){1,2}' + '$', 'i');\nvar VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + Object(_extension_createExtensionPattern_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nfunction isViablePhoneNumber(number) {\n  return number.length >= _constants_js__WEBPACK_IMPORTED_MODULE_0__[/* MIN_LENGTH_FOR_NSN */ \"c\"] && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nfunction isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}\n\n/***/ }),\n\n/***/ 2323:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return createExtensionPattern; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2250);\n // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(_constants_js__WEBPACK_IMPORTED_MODULE_0__[/* VALID_DIGITS */ \"e\"], \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\nfunction createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n\n/***/ }),\n\n/***/ 2324:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getInternationalPhoneNumberPrefix; });\n/* harmony import */ var libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2245);\n\nvar ONLY_DIGITS_REGEXP = /^\\d+$/;\nfunction getInternationalPhoneNumberPrefix(country, metadata) {\n  // Standard international phone number prefix: \"+\" and \"country calling code\".\n  var prefix = '+' + Object(libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__[/* getCountryCallingCode */ \"b\"])(country, metadata); // Get \"leading digits\" for a phone number of the country.\n  // If there're \"leading digits\" then they can be part of the prefix too.\n\n  metadata = new libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n  metadata.selectNumberingPlan(country);\n  if (metadata.numberingPlan.leadingDigits() && ONLY_DIGITS_REGEXP.test(metadata.numberingPlan.leadingDigits())) {\n    prefix += metadata.numberingPlan.leadingDigits();\n  }\n  return prefix;\n}\n\n/***/ }),\n\n/***/ 2325:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getInputValuePrefix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return removeInputValuePrefix; });\n/* harmony import */ var libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2245);\n\nfunction getInputValuePrefix(_ref) {\n  var country = _ref.country,\n    international = _ref.international,\n    withCountryCallingCode = _ref.withCountryCallingCode,\n    metadata = _ref.metadata;\n  return country && international && !withCountryCallingCode ? \"+\".concat(Object(libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__[/* getCountryCallingCode */ \"b\"])(country, metadata)) : '';\n}\nfunction removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n  return value;\n}\n\n/***/ }),\n\n/***/ 2326:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ParseError; });\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\n// https://stackoverflow.com/a/46971044/970769\n// \"Breaking changes in Typescript 2.1\"\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nvar ParseError = /*#__PURE__*/function (_Error) {\n  _inherits(ParseError, _Error);\n  var _super = _createSuper(ParseError);\n  function ParseError(code) {\n    var _this;\n    _classCallCheck(this, ParseError);\n    _this = _super.call(this, code); // Set the prototype explicitly.\n    // Any subclass of FooError will have to manually set the prototype as well.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError.prototype);\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n  return _createClass(ParseError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\n\n/***/ }),\n\n/***/ 2330:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ min_isValidPhoneNumber; });\n\n// UNUSED EXPORTS: parsePhoneNumber, formatPhoneNumber, formatPhoneNumberIntl, isPossiblePhoneNumber, getCountries, getCountryCallingCode, isSupportedCountry\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/metadata.min.json.js\nvar metadata_min_json = __webpack_require__(2314);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js\nvar parsePhoneNumberFromString = __webpack_require__(2450);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/libphonenumber/formatPhoneNumber.js\nvar formatPhoneNumber = __webpack_require__(2451);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isValidPhoneNumber.js\nvar isValidPhoneNumber = __webpack_require__(2452);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isPossiblePhoneNumber.js\nvar isPossiblePhoneNumber = __webpack_require__(2453);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/getCountries.js\nvar getCountries = __webpack_require__(2454);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/metadata.js + 1 modules\nvar es6_metadata = __webpack_require__(2245);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/locale/en.json.js\n/* harmony default export */ var en_json = ({\n  \"ext\": \"ext.\",\n  \"country\": \"Phone number country\",\n  \"phone\": \"Phone\",\n  \"AB\": \"Abkhazia\",\n  \"AC\": \"Ascension Island\",\n  \"AD\": \"Andorra\",\n  \"AE\": \"United Arab Emirates\",\n  \"AF\": \"Afghanistan\",\n  \"AG\": \"Antigua and Barbuda\",\n  \"AI\": \"Anguilla\",\n  \"AL\": \"Albania\",\n  \"AM\": \"Armenia\",\n  \"AO\": \"Angola\",\n  \"AQ\": \"Antarctica\",\n  \"AR\": \"Argentina\",\n  \"AS\": \"American Samoa\",\n  \"AT\": \"Austria\",\n  \"AU\": \"Australia\",\n  \"AW\": \"Aruba\",\n  \"AX\": \"Åland Islands\",\n  \"AZ\": \"Azerbaijan\",\n  \"BA\": \"Bosnia and Herzegovina\",\n  \"BB\": \"Barbados\",\n  \"BD\": \"Bangladesh\",\n  \"BE\": \"Belgium\",\n  \"BF\": \"Burkina Faso\",\n  \"BG\": \"Bulgaria\",\n  \"BH\": \"Bahrain\",\n  \"BI\": \"Burundi\",\n  \"BJ\": \"Benin\",\n  \"BL\": \"Saint Barthélemy\",\n  \"BM\": \"Bermuda\",\n  \"BN\": \"Brunei Darussalam\",\n  \"BO\": \"Bolivia\",\n  \"BQ\": \"Bonaire, Sint Eustatius and Saba\",\n  \"BR\": \"Brazil\",\n  \"BS\": \"Bahamas\",\n  \"BT\": \"Bhutan\",\n  \"BV\": \"Bouvet Island\",\n  \"BW\": \"Botswana\",\n  \"BY\": \"Belarus\",\n  \"BZ\": \"Belize\",\n  \"CA\": \"Canada\",\n  \"CC\": \"Cocos (Keeling) Islands\",\n  \"CD\": \"Congo, Democratic Republic of the\",\n  \"CF\": \"Central African Republic\",\n  \"CG\": \"Congo\",\n  \"CH\": \"Switzerland\",\n  \"CI\": \"Cote d'Ivoire\",\n  \"CK\": \"Cook Islands\",\n  \"CL\": \"Chile\",\n  \"CM\": \"Cameroon\",\n  \"CN\": \"China\",\n  \"CO\": \"Colombia\",\n  \"CR\": \"Costa Rica\",\n  \"CU\": \"Cuba\",\n  \"CV\": \"Cape Verde\",\n  \"CW\": \"Curaçao\",\n  \"CX\": \"Christmas Island\",\n  \"CY\": \"Cyprus\",\n  \"CZ\": \"Czech Republic\",\n  \"DE\": \"Germany\",\n  \"DJ\": \"Djibouti\",\n  \"DK\": \"Denmark\",\n  \"DM\": \"Dominica\",\n  \"DO\": \"Dominican Republic\",\n  \"DZ\": \"Algeria\",\n  \"EC\": \"Ecuador\",\n  \"EE\": \"Estonia\",\n  \"EG\": \"Egypt\",\n  \"EH\": \"Western Sahara\",\n  \"ER\": \"Eritrea\",\n  \"ES\": \"Spain\",\n  \"ET\": \"Ethiopia\",\n  \"FI\": \"Finland\",\n  \"FJ\": \"Fiji\",\n  \"FK\": \"Falkland Islands\",\n  \"FM\": \"Federated States of Micronesia\",\n  \"FO\": \"Faroe Islands\",\n  \"FR\": \"France\",\n  \"GA\": \"Gabon\",\n  \"GB\": \"United Kingdom\",\n  \"GD\": \"Grenada\",\n  \"GE\": \"Georgia\",\n  \"GF\": \"French Guiana\",\n  \"GG\": \"Guernsey\",\n  \"GH\": \"Ghana\",\n  \"GI\": \"Gibraltar\",\n  \"GL\": \"Greenland\",\n  \"GM\": \"Gambia\",\n  \"GN\": \"Guinea\",\n  \"GP\": \"Guadeloupe\",\n  \"GQ\": \"Equatorial Guinea\",\n  \"GR\": \"Greece\",\n  \"GS\": \"South Georgia and the South Sandwich Islands\",\n  \"GT\": \"Guatemala\",\n  \"GU\": \"Guam\",\n  \"GW\": \"Guinea-Bissau\",\n  \"GY\": \"Guyana\",\n  \"HK\": \"Hong Kong\",\n  \"HM\": \"Heard Island and McDonald Islands\",\n  \"HN\": \"Honduras\",\n  \"HR\": \"Croatia\",\n  \"HT\": \"Haiti\",\n  \"HU\": \"Hungary\",\n  \"ID\": \"Indonesia\",\n  \"IE\": \"Ireland\",\n  \"IL\": \"Israel\",\n  \"IM\": \"Isle of Man\",\n  \"IN\": \"India\",\n  \"IO\": \"British Indian Ocean Territory\",\n  \"IQ\": \"Iraq\",\n  \"IR\": \"Iran\",\n  \"IS\": \"Iceland\",\n  \"IT\": \"Italy\",\n  \"JE\": \"Jersey\",\n  \"JM\": \"Jamaica\",\n  \"JO\": \"Jordan\",\n  \"JP\": \"Japan\",\n  \"KE\": \"Kenya\",\n  \"KG\": \"Kyrgyzstan\",\n  \"KH\": \"Cambodia\",\n  \"KI\": \"Kiribati\",\n  \"KM\": \"Comoros\",\n  \"KN\": \"Saint Kitts and Nevis\",\n  \"KP\": \"North Korea\",\n  \"KR\": \"South Korea\",\n  \"KW\": \"Kuwait\",\n  \"KY\": \"Cayman Islands\",\n  \"KZ\": \"Kazakhstan\",\n  \"LA\": \"Laos\",\n  \"LB\": \"Lebanon\",\n  \"LC\": \"Saint Lucia\",\n  \"LI\": \"Liechtenstein\",\n  \"LK\": \"Sri Lanka\",\n  \"LR\": \"Liberia\",\n  \"LS\": \"Lesotho\",\n  \"LT\": \"Lithuania\",\n  \"LU\": \"Luxembourg\",\n  \"LV\": \"Latvia\",\n  \"LY\": \"Libya\",\n  \"MA\": \"Morocco\",\n  \"MC\": \"Monaco\",\n  \"MD\": \"Moldova\",\n  \"ME\": \"Montenegro\",\n  \"MF\": \"Saint Martin (French Part)\",\n  \"MG\": \"Madagascar\",\n  \"MH\": \"Marshall Islands\",\n  \"MK\": \"North Macedonia\",\n  \"ML\": \"Mali\",\n  \"MM\": \"Myanmar\",\n  \"MN\": \"Mongolia\",\n  \"MO\": \"Macao\",\n  \"MP\": \"Northern Mariana Islands\",\n  \"MQ\": \"Martinique\",\n  \"MR\": \"Mauritania\",\n  \"MS\": \"Montserrat\",\n  \"MT\": \"Malta\",\n  \"MU\": \"Mauritius\",\n  \"MV\": \"Maldives\",\n  \"MW\": \"Malawi\",\n  \"MX\": \"Mexico\",\n  \"MY\": \"Malaysia\",\n  \"MZ\": \"Mozambique\",\n  \"NA\": \"Namibia\",\n  \"NC\": \"New Caledonia\",\n  \"NE\": \"Niger\",\n  \"NF\": \"Norfolk Island\",\n  \"NG\": \"Nigeria\",\n  \"NI\": \"Nicaragua\",\n  \"NL\": \"Netherlands\",\n  \"NO\": \"Norway\",\n  \"NP\": \"Nepal\",\n  \"NR\": \"Nauru\",\n  \"NU\": \"Niue\",\n  \"NZ\": \"New Zealand\",\n  \"OM\": \"Oman\",\n  \"OS\": \"South Ossetia\",\n  \"PA\": \"Panama\",\n  \"PE\": \"Peru\",\n  \"PF\": \"French Polynesia\",\n  \"PG\": \"Papua New Guinea\",\n  \"PH\": \"Philippines\",\n  \"PK\": \"Pakistan\",\n  \"PL\": \"Poland\",\n  \"PM\": \"Saint Pierre and Miquelon\",\n  \"PN\": \"Pitcairn\",\n  \"PR\": \"Puerto Rico\",\n  \"PS\": \"Palestine\",\n  \"PT\": \"Portugal\",\n  \"PW\": \"Palau\",\n  \"PY\": \"Paraguay\",\n  \"QA\": \"Qatar\",\n  \"RE\": \"Reunion\",\n  \"RO\": \"Romania\",\n  \"RS\": \"Serbia\",\n  \"RU\": \"Russia\",\n  \"RW\": \"Rwanda\",\n  \"SA\": \"Saudi Arabia\",\n  \"SB\": \"Solomon Islands\",\n  \"SC\": \"Seychelles\",\n  \"SD\": \"Sudan\",\n  \"SE\": \"Sweden\",\n  \"SG\": \"Singapore\",\n  \"SH\": \"Saint Helena\",\n  \"SI\": \"Slovenia\",\n  \"SJ\": \"Svalbard and Jan Mayen\",\n  \"SK\": \"Slovakia\",\n  \"SL\": \"Sierra Leone\",\n  \"SM\": \"San Marino\",\n  \"SN\": \"Senegal\",\n  \"SO\": \"Somalia\",\n  \"SR\": \"Suriname\",\n  \"SS\": \"South Sudan\",\n  \"ST\": \"Sao Tome and Principe\",\n  \"SV\": \"El Salvador\",\n  \"SX\": \"Sint Maarten\",\n  \"SY\": \"Syria\",\n  \"SZ\": \"Swaziland\",\n  \"TA\": \"Tristan da Cunha\",\n  \"TC\": \"Turks and Caicos Islands\",\n  \"TD\": \"Chad\",\n  \"TF\": \"French Southern Territories\",\n  \"TG\": \"Togo\",\n  \"TH\": \"Thailand\",\n  \"TJ\": \"Tajikistan\",\n  \"TK\": \"Tokelau\",\n  \"TL\": \"Timor-Leste\",\n  \"TM\": \"Turkmenistan\",\n  \"TN\": \"Tunisia\",\n  \"TO\": \"Tonga\",\n  \"TR\": \"Turkey\",\n  \"TT\": \"Trinidad and Tobago\",\n  \"TV\": \"Tuvalu\",\n  \"TW\": \"Taiwan\",\n  \"TZ\": \"Tanzania\",\n  \"UA\": \"Ukraine\",\n  \"UG\": \"Uganda\",\n  \"UM\": \"United States Minor Outlying Islands\",\n  \"US\": \"United States\",\n  \"UY\": \"Uruguay\",\n  \"UZ\": \"Uzbekistan\",\n  \"VA\": \"Holy See (Vatican City State)\",\n  \"VC\": \"Saint Vincent and the Grenadines\",\n  \"VE\": \"Venezuela\",\n  \"VG\": \"Virgin Islands, British\",\n  \"VI\": \"Virgin Islands, U.S.\",\n  \"VN\": \"Vietnam\",\n  \"VU\": \"Vanuatu\",\n  \"WF\": \"Wallis and Futuna\",\n  \"WS\": \"Samoa\",\n  \"XK\": \"Kosovo\",\n  \"YE\": \"Yemen\",\n  \"YT\": \"Mayotte\",\n  \"ZA\": \"South Africa\",\n  \"ZM\": \"Zambia\",\n  \"ZW\": \"Zimbabwe\",\n  \"ZZ\": \"International\"\n});\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(59);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/PropTypes.js\n\nvar PropTypes_metadata = prop_types_default.a.shape({\n  country_calling_codes: prop_types_default.a.object.isRequired,\n  countries: prop_types_default.a.object.isRequired\n});\nvar PropTypes_labels = prop_types_default.a.objectOf(prop_types_default.a.string);\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(14);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/InputSmart.js + 9 modules\nvar InputSmart = __webpack_require__(2331);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/InputBasic.js + 1 modules\nvar InputBasic = __webpack_require__(2338);\n\n// CONCATENATED MODULE: ./node_modules/country-flag-icons/modules/unicode.js\n/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\nfunction getCountryFlag(country) {\n  return getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1]);\n}\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\n\nfunction getRegionalIndicatorSymbol(letter) {\n  return String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0));\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/CountrySelect.js\nvar _excluded = [\"value\", \"onChange\", \"options\"],\n  _excluded2 = [\"value\", \"options\", \"className\", \"iconComponent\", \"getIconAspectRatio\", \"arrowComponent\", \"unicodeFlags\"];\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n\n\n\nfunction CountrySelect(_ref) {\n  var value = _ref.value,\n    onChange = _ref.onChange,\n    options = _ref.options,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var onChange_ = Object(react[\"useCallback\"])(function (event) {\n    var value = event.target.value;\n    onChange(value === 'ZZ' ? undefined : value);\n  }, [onChange]);\n  var selectedOption = Object(react[\"useMemo\"])(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]); // \"ZZ\" means \"International\".\n  // (HTML requires each `<option/>` have some string `value`).\n\n  return /*#__PURE__*/react_default.a.createElement(\"select\", _extends({}, rest, {\n    value: value || 'ZZ',\n    onChange: onChange_\n  }), options.map(function (_ref2) {\n    var value = _ref2.value,\n      label = _ref2.label,\n      divider = _ref2.divider;\n    return /*#__PURE__*/react_default.a.createElement(\"option\", {\n      key: divider ? '|' : value || 'ZZ',\n      value: divider ? '|' : value || 'ZZ',\n      disabled: divider ? true : false,\n      style: divider ? DIVIDER_STYLE : undefined\n    }, label);\n  }));\n}\nCountrySelect.propTypes = {\n  /**\r\n   * A two-letter country code.\r\n   * Example: \"US\", \"RU\", etc.\r\n   */\n  value: prop_types_default.a.string,\n  /**\r\n   * A function of `value: string`.\r\n   * Updates the `value` property.\r\n   */\n  onChange: prop_types_default.a.func.isRequired,\n  // `<select/>` options.\n  options: prop_types_default.a.arrayOf(prop_types_default.a.shape({\n    value: prop_types_default.a.string,\n    label: prop_types_default.a.string,\n    divider: prop_types_default.a.bool\n  })).isRequired\n};\nvar DIVIDER_STYLE = {\n  fontSize: '1px',\n  backgroundColor: 'currentColor',\n  color: 'inherit'\n};\nfunction CountrySelectWithIcon(_ref3) {\n  var value = _ref3.value,\n    options = _ref3.options,\n    className = _ref3.className,\n    Icon = _ref3.iconComponent,\n    getIconAspectRatio = _ref3.getIconAspectRatio,\n    Arrow = _ref3.arrowComponent,\n    unicodeFlags = _ref3.unicodeFlags,\n    rest = _objectWithoutProperties(_ref3, _excluded2);\n  var selectedOption = Object(react[\"useMemo\"])(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]);\n  return /*#__PURE__*/react_default.a.createElement(\"div\", {\n    className: \"PhoneInputCountry\"\n  }, /*#__PURE__*/react_default.a.createElement(CountrySelect, _extends({}, rest, {\n    value: value,\n    options: options,\n    className: classnames_default()('PhoneInputCountrySelect', className)\n  })), unicodeFlags && value && /*#__PURE__*/react_default.a.createElement(\"div\", {\n    className: \"PhoneInputCountryIconUnicode\"\n  }, getCountryFlag(value)), !(unicodeFlags && value) && /*#__PURE__*/react_default.a.createElement(Icon, {\n    \"aria-hidden\": true,\n    country: value,\n    label: selectedOption && selectedOption.label,\n    aspectRatio: unicodeFlags ? 1 : undefined\n  }), /*#__PURE__*/react_default.a.createElement(Arrow, null));\n}\nCountrySelectWithIcon.propTypes = {\n  // Country flag component.\n  iconComponent: prop_types_default.a.elementType,\n  // Select arrow component.\n  arrowComponent: prop_types_default.a.elementType.isRequired,\n  // Set to `true` to render Unicode flag icons instead of SVG images.\n  unicodeFlags: prop_types_default.a.bool\n};\nCountrySelectWithIcon.defaultProps = {\n  arrowComponent: function arrowComponent() {\n    return /*#__PURE__*/react_default.a.createElement(\"div\", {\n      className: \"PhoneInputCountrySelectArrow\"\n    });\n  }\n};\nfunction getSelectedOption(options, value) {\n  for (var _iterator = _createForOfIteratorHelperLoose(options), _step; !(_step = _iterator()).done;) {\n    var option = _step.value;\n    if (!option.divider && option.value === value) {\n      return option;\n    }\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/Flag.js\nvar Flag_excluded = [\"country\", \"countryName\", \"flags\", \"flagUrl\"];\nfunction Flag_extends() {\n  Flag_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return Flag_extends.apply(this, arguments);\n}\nfunction Flag_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = Flag_objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction Flag_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n\n // Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\n\nfunction Flag_FlagComponent(_ref) {\n  var country = _ref.country,\n    countryName = _ref.countryName,\n    flags = _ref.flags,\n    flagUrl = _ref.flagUrl,\n    rest = Flag_objectWithoutProperties(_ref, Flag_excluded);\n  if (flags && flags[country]) {\n    return flags[country]({\n      title: countryName\n    });\n  }\n  return /*#__PURE__*/react_default.a.createElement(\"img\", Flag_extends({}, rest, {\n    alt: countryName,\n    role: countryName ? undefined : \"presentation\",\n    src: flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())\n  }));\n}\nFlag_FlagComponent.propTypes = {\n  // The country to be selected by default.\n  // Two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: prop_types_default.a.string.isRequired,\n  // Will be HTML `title` attribute of the `<img/>`.\n  countryName: prop_types_default.a.string.isRequired,\n  // Country flag icon components.\n  // By default flag icons are inserted as `<img/>`s\n  // with their `src` pointed to `country-flag-icons` gitlab pages website.\n  // There might be cases (e.g. an offline application)\n  // where having a large (3 megabyte) `<svg/>` flags\n  // bundle is more appropriate.\n  // `import flags from 'react-phone-number-input/flags'`.\n  flags: prop_types_default.a.objectOf(prop_types_default.a.elementType),\n  // A URL for a country flag icon.\n  // By default it points to `country-flag-icons` gitlab pages website.\n  flagUrl: prop_types_default.a.string.isRequired\n};\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/InternationalIcon.js\nvar InternationalIcon_excluded = [\"aspectRatio\"],\n  InternationalIcon_excluded2 = [\"title\"],\n  _excluded3 = [\"title\"];\nfunction InternationalIcon_extends() {\n  InternationalIcon_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return InternationalIcon_extends.apply(this, arguments);\n}\nfunction InternationalIcon_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = InternationalIcon_objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction InternationalIcon_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n\nfunction InternationalIcon_InternationalIcon(_ref) {\n  var aspectRatio = _ref.aspectRatio,\n    rest = InternationalIcon_objectWithoutProperties(_ref, InternationalIcon_excluded);\n  if (aspectRatio === 1) {\n    return /*#__PURE__*/react_default.a.createElement(InternationalIcon1x1, rest);\n  } else {\n    return /*#__PURE__*/react_default.a.createElement(InternationalIcon3x2, rest);\n  }\n}\nInternationalIcon_InternationalIcon.propTypes = {\n  title: prop_types_default.a.string.isRequired,\n  aspectRatio: prop_types_default.a.number\n}; // 3x2.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon3x2(_ref2) {\n  var title = _ref2.title,\n    rest = InternationalIcon_objectWithoutProperties(_ref2, InternationalIcon_excluded2);\n  return /*#__PURE__*/react_default.a.createElement(\"svg\", InternationalIcon_extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 75 50\"\n  }), /*#__PURE__*/react_default.a.createElement(\"title\", null, title), /*#__PURE__*/react_default.a.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeMiterlimit: \"10\"\n  }, /*#__PURE__*/react_default.a.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"\n  }), /*#__PURE__*/react_default.a.createElement(\"path\", {\n    d: \"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"\n  }), /*#__PURE__*/react_default.a.createElement(\"line\", {\n    x1: \"26\",\n    y1: \"25\",\n    x2: \"74\",\n    y2: \"25\"\n  }), /*#__PURE__*/react_default.a.createElement(\"line\", {\n    x1: \"50\",\n    y1: \"1\",\n    x2: \"50\",\n    y2: \"49\"\n  }), /*#__PURE__*/react_default.a.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"\n  }), /*#__PURE__*/react_default.a.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"\n  })), /*#__PURE__*/react_default.a.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"none\",\n    fill: \"currentColor\",\n    d: \"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"\n  }));\n}\nInternationalIcon3x2.propTypes = {\n  title: prop_types_default.a.string.isRequired\n}; // 1x1.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon1x1(_ref3) {\n  var title = _ref3.title,\n    rest = InternationalIcon_objectWithoutProperties(_ref3, _excluded3);\n  return /*#__PURE__*/react_default.a.createElement(\"svg\", InternationalIcon_extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\"\n  }), /*#__PURE__*/react_default.a.createElement(\"title\", null, title), /*#__PURE__*/react_default.a.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\"\n  }, /*#__PURE__*/react_default.a.createElement(\"path\", {\n    d: \"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"\n  }), /*#__PURE__*/react_default.a.createElement(\"path\", {\n    d: \"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"\n  }), /*#__PURE__*/react_default.a.createElement(\"path\", {\n    d: \"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"\n  }), /*#__PURE__*/react_default.a.createElement(\"path\", {\n    d: \"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"\n  }), /*#__PURE__*/react_default.a.createElement(\"line\", {\n    x1: \"27.8\",\n    y1: \"0.85\",\n    x2: \"27.8\",\n    y2: \"34.61\"\n  }), /*#__PURE__*/react_default.a.createElement(\"line\", {\n    x1: \"15.2\",\n    y1: \"22.23\",\n    x2: \"49.15\",\n    y2: \"22.23\"\n  })), /*#__PURE__*/react_default.a.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"transparent\",\n    fill: \"currentColor\",\n    d: \"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"\n  }));\n}\nInternationalIcon1x1.propTypes = {\n  title: prop_types_default.a.string.isRequired\n};\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/helpers/countries.js\nfunction countries_createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = countries_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction countries_unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return countries_arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return countries_arrayLikeToArray(o, minLen);\n}\nfunction countries_arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\n\nfunction sortCountryOptions(options, order) {\n  if (!order) {\n    return options;\n  }\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n  for (var _iterator = countries_createForOfIteratorHelperLoose(order), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      (function () {\n        var countryCode = void 0;\n        if (element === '🌐') {\n          countryCode = undefined;\n        } else {\n          countryCode = element;\n        } // Find the position of the option.\n\n        var index = options.indexOf(options.filter(function (option) {\n          return option.value === countryCode;\n        })[0]); // Get the option.\n\n        var option = options[index]; // Remove the option from its default position.\n\n        options.splice(index, 1); // Add the option on top.\n\n        appendTo.push(option);\n      })();\n    }\n  }\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\nfunction getSupportedCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (option) {\n      switch (option) {\n        case '🌐':\n        case '|':\n        case '...':\n        case '…':\n          return true;\n        default:\n          return isCountrySupportedWithError(option, metadata);\n      }\n    });\n    if (countryOptions.length > 0) {\n      return countryOptions;\n    }\n  }\n}\nfunction isCountrySupportedWithError(country, metadata) {\n  if (Object(es6_metadata[\"c\" /* isSupportedCountry */])(country, metadata)) {\n    return true;\n  } else {\n    console.error(\"Country not found: \".concat(country));\n    return false;\n  }\n}\nfunction getSupportedCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n  return countries;\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/CountryIcon.js\nvar CountryIcon_excluded = [\"country\", \"label\", \"aspectRatio\"];\nfunction CountryIcon_extends() {\n  CountryIcon_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return CountryIcon_extends.apply(this, arguments);\n}\nfunction CountryIcon_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = CountryIcon_objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction CountryIcon_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n\n\n\n\nfunction createCountryIconComponent(_ref) {\n  var flags = _ref.flags,\n    flagUrl = _ref.flagUrl,\n    FlagComponent = _ref.flagComponent,\n    InternationalIcon = _ref.internationalIcon;\n  function CountryIcon(_ref2) {\n    var country = _ref2.country,\n      label = _ref2.label,\n      aspectRatio = _ref2.aspectRatio,\n      rest = CountryIcon_objectWithoutProperties(_ref2, CountryIcon_excluded);\n\n    // `aspectRatio` is currently a hack for the default \"International\" icon\n    // to render it as a square when Unicode flag icons are used.\n    // So `aspectRatio` property is only used with the default \"International\" icon.\n    var _aspectRatio = InternationalIcon === InternationalIcon_InternationalIcon ? aspectRatio : undefined;\n    return /*#__PURE__*/react_default.a.createElement(\"div\", CountryIcon_extends({}, rest, {\n      className: classnames_default()('PhoneInputCountryIcon', {\n        'PhoneInputCountryIcon--square': _aspectRatio === 1,\n        'PhoneInputCountryIcon--border': country\n      })\n    }), country ? /*#__PURE__*/react_default.a.createElement(FlagComponent, {\n      country: country,\n      countryName: label,\n      flags: flags,\n      flagUrl: flagUrl,\n      className: \"PhoneInputCountryIconImg\"\n    }) : /*#__PURE__*/react_default.a.createElement(InternationalIcon, {\n      title: label,\n      aspectRatio: _aspectRatio,\n      className: \"PhoneInputCountryIconImg\"\n    }));\n  }\n  CountryIcon.propTypes = {\n    country: prop_types_default.a.string,\n    label: prop_types_default.a.string.isRequired,\n    aspectRatio: prop_types_default.a.number\n  };\n  return CountryIcon;\n}\n/* harmony default export */ var modules_CountryIcon = (createCountryIconComponent({\n  // Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n  flagComponent: Flag_FlagComponent,\n  internationalIcon: InternationalIcon_InternationalIcon\n}));\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/AsYouType.js + 7 modules\nvar AsYouType = __webpack_require__(2440);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/helpers/getInternationalPhoneNumberPrefix.js\nvar getInternationalPhoneNumberPrefix = __webpack_require__(2324);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/helpers/phoneInputHelpers.js\n\n\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\n\nfunction getPreSelectedCountry(_ref) {\n  var value = _ref.value,\n    phoneNumber = _ref.phoneNumber,\n    defaultCountry = _ref.defaultCountry,\n    getAnyCountry = _ref.getAnyCountry,\n    countries = _ref.countries,\n    required = _ref.required,\n    metadata = _ref.metadata;\n  var country; // If can get country from E.164 phone number\n  // then it overrides the `country` passed (or not passed).\n\n  if (phoneNumber && phoneNumber.country) {\n    // `country` will be left `undefined` in case of non-detection.\n    country = phoneNumber.country;\n  } else if (defaultCountry) {\n    if (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\n      country = defaultCountry;\n    }\n  } // Only pre-select a country if it's in the available `countries` list.\n\n  if (countries && countries.indexOf(country) < 0) {\n    country = undefined;\n  } // If there will be no \"International\" option\n  // then some `country` must be selected.\n  // It will still be the wrong country though.\n  // But still country `<select/>` can't be left in a broken state.\n\n  if (!country && required && countries && countries.length > 0) {\n    country = getAnyCountry(); // noCountryMatchesTheNumber = true\n  }\n\n  return country;\n}\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\n\nfunction phoneInputHelpers_getCountrySelectOptions(_ref2) {\n  var countries = _ref2.countries,\n    countryNames = _ref2.countryNames,\n    addInternationalOption = _ref2.addInternationalOption,\n    compareStringsLocales = _ref2.compareStringsLocales,\n    _compareStrings = _ref2.compareStrings;\n\n  // Default country name comparator uses `String.localeCompare()`.\n  if (!_compareStrings) {\n    _compareStrings = compareStrings;\n  } // Generates a `<Select/>` option for each country.\n\n  var countrySelectOptions = countries.map(function (country) {\n    return {\n      value: country,\n      // All `locale` country names included in this library\n      // include all countries (this is checked at build time).\n      // The only case when a country name might be missing\n      // is when a developer supplies their own `labels` property.\n      // To guard against such cases, a missing country name\n      // is substituted by country code.\n      label: countryNames[country] || country\n    };\n  }); // Sort the list of countries alphabetically.\n\n  countrySelectOptions.sort(function (a, b) {\n    return _compareStrings(a.label, b.label, compareStringsLocales);\n  }); // Add the \"International\" option to the country list (if suitable)\n\n  if (addInternationalOption) {\n    countrySelectOptions.unshift({\n      label: countryNames.ZZ\n    });\n  }\n  return countrySelectOptions;\n}\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\n\nfunction parsePhoneNumber(value, metadata) {\n  return Object(parsePhoneNumberFromString[\"a\" /* default */])(value || '', metadata);\n}\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\n\nfunction generateNationalNumberDigits(phoneNumber) {\n  return phoneNumber.formatNational().replace(/\\D/g, '');\n}\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\n\nfunction getPhoneDigitsForNewCountry(phoneDigits, _ref3) {\n  var prevCountry = _ref3.prevCountry,\n    newCountry = _ref3.newCountry,\n    metadata = _ref3.metadata,\n    useNationalFormat = _ref3.useNationalFormat;\n  if (prevCountry === newCountry) {\n    return phoneDigits;\n  } // If `parsed_input` is empty\n  // then no need to migrate anything.\n\n  if (!phoneDigits) {\n    if (useNationalFormat) {\n      return '';\n    } else {\n      // If `phoneDigits` is empty then set `phoneDigits` to\n      // `+{getCountryCallingCode(newCountry)}`.\n      return Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(newCountry, metadata);\n    }\n  } // If switching to some country.\n  // (from \"International\" or another country)\n  // If switching from \"International\" then `phoneDigits` starts with a `+`.\n  // Otherwise it may or may not start with a `+`.\n\n  if (newCountry) {\n    // If the phone number was entered in international format\n    // then migrate it to the newly selected country.\n    // The phone number may be incomplete.\n    // The phone number entered not necessarily starts with\n    // the previously selected country phone prefix.\n    if (phoneDigits[0] === '+') {\n      // If the international phone number is for the new country\n      // then convert it to local if required.\n      if (useNationalFormat) {\n        // // If a phone number is being input in international form\n        // // and the country can already be derived from it,\n        // // and if it is the new country, then format as a national number.\n        // const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\n        // if (derived_country === newCountry) {\n        // \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\n        // }\n        // Actually, the two countries don't necessarily need to match:\n        // the condition could be looser here, because several countries\n        // might share the same international phone number format\n        // (for example, \"NANPA\" countries like US, Canada, etc).\n        // The looser condition would be just \"same nternational phone number format\"\n        // which would mean \"same country calling code\" in the context of `libphonenumber-js`.\n        if (phoneDigits.indexOf('+' + Object(es6_metadata[\"b\" /* getCountryCallingCode */])(newCountry, metadata)) === 0) {\n          return stripCountryCallingCode(phoneDigits, newCountry, metadata);\n        } // Simply discard the previously entered international phone number,\n        // because otherwise any \"smart\" transformation like getting the\n        // \"national (significant) number\" part and then prepending the\n        // newly selected country's \"country calling code\" to it\n        // would just be confusing for a user without being actually useful.\n\n        return ''; // // Simply strip the leading `+` character\n        // // therefore simply converting all digits into a \"local\" phone number.\n        // // https://github.com/catamphetamine/react-phone-number-input/issues/287\n        // return phoneDigits.slice(1)\n      }\n\n      if (prevCountry) {\n        var newCountryPrefix = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(newCountry, metadata);\n        if (phoneDigits.indexOf(newCountryPrefix) === 0) {\n          return phoneDigits;\n        } else {\n          return newCountryPrefix;\n        }\n      } else {\n        var defaultValue = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(newCountry, metadata); // If `phoneDigits`'s country calling code part is the same\n        // as for the new `country`, then leave `phoneDigits` as is.\n\n        if (phoneDigits.indexOf(defaultValue) === 0) {\n          return phoneDigits;\n        } // If `phoneDigits`'s country calling code part is not the same\n        // as for the new `country`, then set `phoneDigits` to\n        // `+{getCountryCallingCode(newCountry)}`.\n\n        return defaultValue;\n      } // // If the international phone number already contains\n      // // any country calling code then trim the country calling code part.\n      // // (that could also be the newly selected country phone code prefix as well)\n      // // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\n      // // (e.g. if a user enters an international number\n      // //  not belonging to any of the reduced `countries` list).\n      // phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\n      // // Prepend country calling code prefix\n      // // for the newly selected country.\n      // return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\n    }\n  } // If switching to \"International\" from a country.\n  else {\n    // If the phone number was entered in national format.\n    if (phoneDigits[0] !== '+') {\n      // Format the national phone number as an international one.\n      // The phone number entered not necessarily even starts with\n      // the previously selected country phone prefix.\n      // Even if the phone number belongs to whole another country\n      // it will still be parsed into some national phone number.\n      //\n      // Ignore the now-uncovered `|| ''` code branch:\n      // previously `e164()` function could return an empty string\n      // even when `phoneDigits` were not empty.\n      // Now it always returns some `value` when there're any `phoneDigits`.\n      // Still, didn't remove the `|| ''` code branch just in case\n      // that logic changes somehow in some future, so there're no\n      // possible bugs related to that.\n      //\n      // (ignore the `|| ''` code branch)\n\n      /* istanbul ignore next */\n      return e164(phoneDigits, prevCountry, metadata) || '';\n    }\n  }\n  return phoneDigits;\n}\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nfunction e164(number, country, metadata) {\n  if (!number) {\n    return;\n  } // If the phone number is being input in international format.\n\n  if (number[0] === '+') {\n    // If it's just the `+` sign then return nothing.\n    if (number === '+') {\n      return;\n    } // Return a E.164 phone number.\n    //\n    // Could return `number` \"as is\" here, but there's a possibility\n    // that some user might incorrectly input an international number\n    // with a \"national prefix\". Such numbers aren't considered valid,\n    // but `libphonenumber-js` is \"forgiving\" when it comes to parsing\n    // user's input, and this input component follows that behavior.\n    //\n\n    var asYouType = new AsYouType[\"a\" /* default */](country, metadata);\n    asYouType.input(number); // This function would return `undefined` only when `number` is `\"+\"`,\n    // but at this point it is known that `number` is not `\"+\"`.\n\n    return asYouType.getNumberValue();\n  } // For non-international phone numbers\n  // an accompanying country code is required.\n  // The situation when `country` is `undefined`\n  // and a non-international phone number is passed\n  // to this function shouldn't happen.\n\n  if (!country) {\n    return;\n  }\n  var partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata); //\n  // Even if no \"national (significant) number\" digits have been input,\n  // still return a non-`undefined` value.\n  // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\n  //\n  // For example, if the user has selected country `US` and entered `\"1\"`\n  // then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\n  // digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\n  // because otherwise the app would think that the input is empty and mark it as such\n  // while in reality it isn't empty, which might be thought of as a \"bug\", or just\n  // a \"weird\" behavior.\n  //\n  // if (partial_national_significant_number) {\n\n  return \"+\".concat(Object(es6_metadata[\"b\" /* getCountryCallingCode */])(country, metadata)).concat(partial_national_significant_number || ''); // }\n}\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\nfunction trimNumber(number, country, metadata) {\n  var nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata);\n  if (nationalSignificantNumberPart) {\n    var overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n    if (overflowDigitsCount > 0) {\n      return number.slice(0, number.length - overflowDigitsCount);\n    }\n  }\n  return number;\n}\nfunction getMaxNumberLength(country, metadata) {\n  // Get \"possible lengths\" for a phone number of the country.\n  metadata = new es6_metadata[\"a\" /* default */](metadata);\n  metadata.selectNumberingPlan(country); // Return the last \"possible length\".\n\n  return metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1];\n} // If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nfunction getCountryForPartialE164Number(partialE164Number, _ref4) {\n  var country = _ref4.country,\n    countries = _ref4.countries,\n    required = _ref4.required,\n    metadata = _ref4.metadata;\n  if (partialE164Number === '+') {\n    // Don't change the currently selected country yet.\n    return country;\n  }\n  var derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata); // If a phone number is being input in international form\n  // and the country can already be derived from it,\n  // then select that country.\n\n  if (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n    return derived_country;\n  } // If \"International\" country option has not been disabled\n  // and the international phone number entered doesn't correspond\n  // to the currently selected country then reset the currently selected country.\n  else if (country && !required && !couldNumberBelongToCountry(partialE164Number, country, metadata)) {\n    return undefined;\n  } // Don't change the currently selected country.\n\n  return country;\n}\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\n\nfunction onPhoneDigitsChange(phoneDigits, _ref5) {\n  var prevPhoneDigits = _ref5.prevPhoneDigits,\n    country = _ref5.country,\n    defaultCountry = _ref5.defaultCountry,\n    countryRequired = _ref5.countryRequired,\n    getAnyCountry = _ref5.getAnyCountry,\n    countries = _ref5.countries,\n    international = _ref5.international,\n    limitMaxLength = _ref5.limitMaxLength,\n    countryCallingCodeEditable = _ref5.countryCallingCodeEditable,\n    metadata = _ref5.metadata;\n  if (international && countryCallingCodeEditable === false) {\n    var prefix = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata); // The `<input/>` value must start with the country calling code.\n\n    if (phoneDigits.indexOf(prefix) !== 0) {\n      var _value; // If a phone number input is declared as\n      // `international` and `withCountryCallingCode`,\n      // then it's gonna be non-empty even before the user\n      // has input anything in it.\n      // This will result in its contents (the country calling code part)\n      // being selected when the user tabs into such field.\n      // If the user then starts inputting the national part digits,\n      // then `<input/>` value changes from `+xxx` to `y`\n      // because inputting anything while having the `<input/>` value\n      // selected results in erasing the `<input/>` value.\n      // So, the component handles such case by restoring\n      // the intended `<input/>` value: `+xxxy`.\n      // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\n\n      if (phoneDigits && phoneDigits[0] !== '+') {\n        phoneDigits = prefix + phoneDigits;\n        _value = e164(phoneDigits, country, metadata);\n      } else {\n        phoneDigits = prefix;\n      }\n      return {\n        phoneDigits: phoneDigits,\n        value: _value,\n        country: country\n      };\n    }\n  } // If `international` property is `false`, then it means\n  // \"enforce national-only format during input\",\n  // so, if that's the case, then remove all `+` characters,\n  // but only if some country is currently selected.\n  // (not if \"International\" country is selected).\n\n  if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n    phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata);\n  } // Trim the input to not exceed the maximum possible number length.\n\n  if (phoneDigits && country && limitMaxLength) {\n    phoneDigits = trimNumber(phoneDigits, country, metadata);\n  } // If this `onChange()` event was triggered\n  // as a result of selecting \"International\" country,\n  // then force-prepend a `+` sign if the phone number\n  // `<input/>` value isn't in international format.\n  // Also, force-prepend a `+` sign if international\n  // phone number input format is set.\n\n  if (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\n    phoneDigits = '+' + phoneDigits;\n  } // If the previously entered phone number\n  // has been entered in international format\n  // and the user decides to erase it,\n  // then also reset the `country`\n  // because it was most likely automatically selected\n  // while the user was typing in the phone number\n  // in international format.\n  // This fixes the issue when a user is presented\n  // with a phone number input with no country selected\n  // and then types in their local phone number\n  // then discovers that the input's messed up\n  // (a `+` has been prepended at the start of their input\n  //  and a random country has been selected),\n  // decides to undo it all by erasing everything\n  // and then types in their local phone number again\n  // resulting in a seemingly correct phone number\n  // but in reality that phone number has incorrect country.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/273\n\n  if (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\n    if (international) {\n      country = undefined;\n    } else {\n      country = defaultCountry;\n    }\n  } // Also resets such \"randomly\" selected country\n  // as soon as the user erases the number\n  // digit-by-digit up to the leading `+` sign.\n\n  if (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\n    country = undefined;\n  } // Generate the new `value` property.\n\n  var value;\n  if (phoneDigits) {\n    if (phoneDigits[0] === '+') {\n      if (phoneDigits === '+') {\n        value = undefined;\n      } else if (country && Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata).indexOf(phoneDigits) === 0) {\n        // Selected a `country` but started inputting an\n        // international phone number for another country.\n        // Even though the input value is non-empty,\n        // the `value` is assumed `undefined` in such case.\n        // The `country` will be reset (or re-selected)\n        // immediately after such mismatch has been detected\n        // by the phone number input component, and `value`\n        // will be set to the currently entered international prefix.\n        //\n        // For example, if selected `country` `\"US\"`\n        // and started inputting phone number `\"+2\"`\n        // then `value` `undefined` will be returned from this function,\n        // and then, immediately after that, `country` will be reset\n        // and the `value` will be set to `\"+2\"`.\n        //\n        value = undefined;\n      } else {\n        value = e164(phoneDigits, country, metadata);\n      }\n    } else {\n      value = e164(phoneDigits, country, metadata);\n    }\n  } // Derive the country from the phone number.\n  // (regardless of whether there's any country currently selected,\n  //  because there could be several countries corresponding to one country calling code)\n\n  if (value) {\n    country = getCountryForPartialE164Number(value, {\n      country: country,\n      countries: countries,\n      metadata: metadata\n    }); // If `international` property is `false`, then it means\n    // \"enforce national-only format during input\",\n    // so, if that's the case, then remove all `+` characters,\n    // but only if some country is currently selected.\n    // (not if \"International\" country is selected).\n\n    if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n      phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata); // Re-calculate `value` because `phoneDigits` has changed.\n\n      value = e164(phoneDigits, country, metadata);\n    }\n  }\n  if (!country && countryRequired) {\n    country = defaultCountry || getAnyCountry();\n  }\n  return {\n    phoneDigits: phoneDigits,\n    country: country,\n    value: value\n  };\n}\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\n  // Handle the case when a user might have pasted\n  // a phone number in international format.\n  if (input.indexOf(Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata)) === 0) {\n    // Create \"as you type\" formatter.\n    var formatter = new AsYouType[\"a\" /* default */](country, metadata); // Input partial national phone number.\n\n    formatter.input(input); // Return the parsed partial national phone number.\n\n    var phoneNumber = formatter.getNumber();\n    if (phoneNumber) {\n      // Transform the number to a national one,\n      // and remove all non-digits.\n      return phoneNumber.formatNational().replace(/\\D/g, '');\n    } else {\n      return '';\n    }\n  } else {\n    // Just remove the `+` sign.\n    return input.replace(/\\D/g, '');\n  }\n}\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nfunction getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\n  var formatter = new AsYouType[\"a\" /* default */](null, metadata);\n  formatter.input(number); // // `001` is a special \"non-geograpical entity\" code\n  // // in Google's `libphonenumber` library.\n  // if (formatter.getCountry() === '001') {\n  // \treturn\n  // }\n\n  return formatter.getCountry();\n}\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\n\nfunction compareStrings(a, b, locales) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b, locales);\n  }\n  /* istanbul ignore next */\n\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\n\nfunction stripCountryCallingCode(number, country, metadata) {\n  // Just an optimization, so that it\n  // doesn't have to iterate through all country calling codes.\n  if (country) {\n    var countryCallingCodePrefix = '+' + Object(es6_metadata[\"b\" /* getCountryCallingCode */])(country, metadata); // If `country` fits the actual `number`.\n\n    if (number.length < countryCallingCodePrefix.length) {\n      if (countryCallingCodePrefix.indexOf(number) === 0) {\n        return '';\n      }\n    } else {\n      if (number.indexOf(countryCallingCodePrefix) === 0) {\n        return number.slice(countryCallingCodePrefix.length);\n      }\n    }\n  } // If `country` doesn't fit the actual `number`.\n  // Try all available country calling codes.\n\n  for (var _i = 0, _Object$keys = Object.keys(metadata.country_calling_codes); _i < _Object$keys.length; _i++) {\n    var country_calling_code = _Object$keys[_i];\n    if (number.indexOf(country_calling_code) === '+'.length) {\n      return number.slice('+'.length + country_calling_code.length);\n    }\n  }\n  return '';\n}\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\n\nfunction getNationalSignificantNumberDigits(number, country, metadata) {\n  // Create \"as you type\" formatter.\n  var formatter = new AsYouType[\"a\" /* default */](country, metadata); // Input partial national phone number.\n\n  formatter.input(number); // Return the parsed partial national phone number.\n\n  var phoneNumber = formatter.getNumber();\n  return phoneNumber && phoneNumber.nationalNumber;\n}\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\n\nfunction couldNumberBelongToCountry(number, country, metadata) {\n  var intlPhoneNumberPrefix = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata);\n  var i = 0;\n  while (i < number.length && i < intlPhoneNumberPrefix.length) {\n    if (number[i] !== intlPhoneNumberPrefix[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\n\nfunction getInitialPhoneDigits(_ref6) {\n  var value = _ref6.value,\n    phoneNumber = _ref6.phoneNumber,\n    defaultCountry = _ref6.defaultCountry,\n    international = _ref6.international,\n    useNationalFormat = _ref6.useNationalFormat,\n    metadata = _ref6.metadata;\n\n  // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `useNationalFormat` is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n  if ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\n    return generateNationalNumberDigits(phoneNumber);\n  } // If `international` property is `true`,\n  // meaning \"enforce international phone number format\",\n  // then always show country calling code in the input field.\n\n  if (!value && international && defaultCountry) {\n    return Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(defaultCountry, metadata);\n  }\n  return value;\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n\nfunction getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\n  var metadata = props.metadata,\n    countries = props.countries,\n    newDefaultCountry = props.defaultCountry,\n    newValue = props.value,\n    newReset = props.reset,\n    international = props.international,\n    displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber,\n    initialValueFormat = props.initialValueFormat;\n  var prevDefaultCountry = prevProps.defaultCountry,\n    prevValue = prevProps.value,\n    prevReset = prevProps.reset;\n  var country = state.country,\n    value = state.value,\n    hasUserSelectedACountry = state.hasUserSelectedACountry;\n  var _getInitialPhoneDigits = function _getInitialPhoneDigits(parameters) {\n    return getInitialPhoneDigits(_objectSpread(_objectSpread({}, parameters), {}, {\n      international: international,\n      useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n      metadata: metadata\n    }));\n  }; // Some users requested a way to reset the component\n  // (both number `<input/>` and country `<select/>`).\n  // Whenever `reset` property changes both number `<input/>`\n  // and country `<select/>` are reset.\n  // It's not implemented as some instance `.reset()` method\n  // because `ref` is forwarded to `<input/>`.\n  // It's also not replaced with just resetting `country` on\n  // external `value` reset, because a user could select a country\n  // and then not input any `value`, and so the selected country\n  // would be \"stuck\", if not using this `reset` property.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n  if (newReset !== prevReset) {\n    return {\n      phoneDigits: _getInitialPhoneDigits({\n        value: undefined,\n        defaultCountry: newDefaultCountry\n      }),\n      value: undefined,\n      country: newDefaultCountry,\n      hasUserSelectedACountry: undefined\n    };\n  } // `value` is the value currently shown in the component:\n  // it's stored in the component's `state`, and it's not the `value` property.\n  // `prevValue` is \"previous `value` property\".\n  // `newValue` is \"new `value` property\".\n  // If the default country changed\n  // (e.g. in case of ajax GeoIP detection after page loaded)\n  // then select it, but only if the user hasn't already manually\n  // selected a country, and no phone number has been manually entered so far.\n  // Because if the user has already started inputting a phone number\n  // then they're okay with no country being selected at all (\"International\")\n  // and they don't want to be disturbed, don't want their input to be screwed, etc.\n\n  if (newDefaultCountry !== prevDefaultCountry) {\n    var isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata);\n    var noValueHasBeenEnteredByTheUser =\n    // By default, \"no value has been entered\" means `value` is `undefined`.\n    !value ||\n    // When `international` is `true`, and some country has been pre-selected,\n    // then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\n    // so in case of `international` being `true`, \"the user hasn't entered anything\" situation\n    // doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\n    international && value === _getInitialPhoneDigits({\n      value: undefined,\n      defaultCountry: prevDefaultCountry\n    }); // Only update the `defaultCountry` property if no phone number\n    // has been entered by the user or pre-set by the application.\n\n    var noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser;\n    if (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\n      return {\n        country: newDefaultCountry,\n        // If `phoneDigits` is empty, then automatically select the new `country`\n        // and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\n        // The code assumes that \"no phone number has been entered by the user\",\n        // and no `value` property has been passed, so the `phoneNumber` parameter\n        // of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\n        phoneDigits: _getInitialPhoneDigits({\n          value: undefined,\n          defaultCountry: newDefaultCountry\n        }),\n        // `value` is `undefined` and it stays so.\n        value: undefined\n      };\n    }\n  } // If a new `value` is set externally.\n  // (e.g. as a result of an ajax API request\n  //  to get user's phone after page loaded)\n  // The first part — `newValue !== prevValue` —\n  // is basically `props.value !== prevProps.value`\n  // so it means \"if value property was changed externally\".\n  // The second part — `newValue !== value` —\n  // is for ignoring the `getDerivedStateFromProps()` call\n  // which happens in `this.onChange()` right after `this.setState()`.\n  // If this `getDerivedStateFromProps()` call isn't ignored\n  // then the country flag would reset on each input.\n\n  if (newValue !== prevValue && newValue !== value) {\n    var phoneNumber;\n    var parsedCountry;\n    if (newValue) {\n      phoneNumber = parsePhoneNumber(newValue, metadata);\n      var supportedCountries = getSupportedCountries(countries, metadata);\n      if (phoneNumber && phoneNumber.country) {\n        // Ignore `else` because all countries are supported in metadata.\n\n        /* istanbul ignore next */\n        if (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\n          parsedCountry = phoneNumber.country;\n        }\n      } else {\n        parsedCountry = getCountryForPartialE164Number(newValue, {\n          country: undefined,\n          countries: supportedCountries,\n          metadata: metadata\n        });\n      }\n    }\n    var hasUserSelectedACountryUpdate;\n    if (!newValue) {\n      // Reset `hasUserSelectedACountry` flag in `state`.\n      hasUserSelectedACountryUpdate = {\n        hasUserSelectedACountry: undefined\n      };\n    }\n    return _objectSpread(_objectSpread({}, hasUserSelectedACountryUpdate), {}, {\n      phoneDigits: _getInitialPhoneDigits({\n        phoneNumber: phoneNumber,\n        value: newValue,\n        defaultCountry: newDefaultCountry\n      }),\n      value: newValue,\n      country: newValue ? parsedCountry : newDefaultCountry\n    });\n  } // `defaultCountry` didn't change.\n  // `value` didn't change.\n  // `phoneDigits` didn't change, because `value` didn't change.\n  //\n  // So no need to update state.\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/PhoneInputWithCountry.js\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nvar PhoneInputWithCountry_excluded = [\"name\", \"disabled\", \"readOnly\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"containerComponent\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"initialValueFormat\", \"onCountryChange\", \"limitMaxLength\", \"countryCallingCodeEditable\", \"focusInputOnCountrySelection\", \"reset\", \"metadata\", \"international\", \"locales\"];\nfunction PhoneInputWithCountry_ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction PhoneInputWithCountry_objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? PhoneInputWithCountry_ownKeys(Object(source), !0).forEach(function (key) {\n      PhoneInputWithCountry_defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : PhoneInputWithCountry_ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction PhoneInputWithCountry_extends() {\n  PhoneInputWithCountry_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return PhoneInputWithCountry_extends.apply(this, arguments);\n}\nfunction PhoneInputWithCountry_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = PhoneInputWithCountry_objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction PhoneInputWithCountry_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction PhoneInputWithCountry_defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar PhoneInputWithCountry_PhoneNumberInput_ = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n  var _super = _createSuper(PhoneNumberInput_);\n  function PhoneNumberInput_(props) {\n    var _this;\n    _classCallCheck(this, PhoneNumberInput_);\n    _this = _super.call(this, props);\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"setInputRef\", function (instance) {\n      _this.inputRef.current = instance;\n      var ref = _this.props.inputRef;\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(instance);\n        } else {\n          ref.current = instance;\n        }\n      }\n    });\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n        international = _this$props.international,\n        metadata = _this$props.metadata,\n        onChange = _this$props.onChange,\n        focusInputOnCountrySelection = _this$props.focusInputOnCountrySelection;\n      var _this$state = _this.state,\n        prevPhoneDigits = _this$state.phoneDigits,\n        prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n        prevCountry: prevCountry,\n        newCountry: newCountry,\n        metadata: metadata,\n        // Convert the phone number to \"national\" format\n        // when the user changes the selected country by hand.\n        useNationalFormat: !international\n      });\n      var newValue = e164(newPhoneDigits, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      if (focusInputOnCountrySelection) {\n        _this.inputRef.current.focus();\n      } // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        phoneDigits: newPhoneDigits,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onChange\", function (_phoneDigits) {\n      var _this$props2 = _this.props,\n        defaultCountry = _this$props2.defaultCountry,\n        onChange = _this$props2.onChange,\n        addInternationalOption = _this$props2.addInternationalOption,\n        international = _this$props2.international,\n        limitMaxLength = _this$props2.limitMaxLength,\n        countryCallingCodeEditable = _this$props2.countryCallingCodeEditable,\n        metadata = _this$props2.metadata;\n      var _this$state2 = _this.state,\n        countries = _this$state2.countries,\n        prevPhoneDigits = _this$state2.phoneDigits,\n        currentlySelectedCountry = _this$state2.country;\n      var _onPhoneDigitsChange = onPhoneDigitsChange(_phoneDigits, {\n          prevPhoneDigits: prevPhoneDigits,\n          country: currentlySelectedCountry,\n          countryRequired: !addInternationalOption,\n          defaultCountry: defaultCountry,\n          getAnyCountry: function getAnyCountry() {\n            return _this.getFirstSupportedCountry({\n              countries: countries\n            });\n          },\n          countries: countries,\n          international: international,\n          limitMaxLength: limitMaxLength,\n          countryCallingCodeEditable: countryCallingCodeEditable,\n          metadata: metadata\n        }),\n        phoneDigits = _onPhoneDigitsChange.phoneDigits,\n        country = _onPhoneDigitsChange.country,\n        value = _onPhoneDigitsChange.value;\n      var stateUpdate = {\n        phoneDigits: phoneDigits,\n        value: value,\n        country: country\n      };\n      if (countryCallingCodeEditable === false) {\n        // If it simply did `setState({ phoneDigits: intlPrefix })` here,\n        // then it would have no effect when erasing an inital international prefix\n        // via Backspace, because `phoneDigits` in `state` wouldn't change\n        // as a result, because it was `prefix` and it became `prefix`,\n        // so the component wouldn't rerender, and the user would be able\n        // to erase the country calling code part, and that part is\n        // assumed to be non-eraseable. That's why the component is\n        // forcefully rerendered here.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n        if (!value && phoneDigits === _this.state.phoneDigits) {\n          // Force a re-render of the `<input/>` in order to reset its value.\n          stateUpdate.forceRerender = {};\n        }\n      }\n      _this.setState(stateUpdate,\n      // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n      var onFocus = _this.props.onFocus;\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n      _this._onBlur();\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n      var countrySelectProps = _this.props.countrySelectProps;\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n      var countrySelectProps = _this.props.countrySelectProps;\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n    _this.inputRef = /*#__PURE__*/react_default.a.createRef();\n    var _this$props3 = _this.props,\n      _value = _this$props3.value,\n      labels = _this$props3.labels,\n      _international = _this$props3.international,\n      _addInternationalOption = _this$props3.addInternationalOption,\n      displayInitialValueAsLocalNumber = _this$props3.displayInitialValueAsLocalNumber,\n      initialValueFormat = _this$props3.initialValueFormat,\n      _metadata = _this$props3.metadata;\n    var _this$props4 = _this.props,\n      _defaultCountry = _this$props4.defaultCountry,\n      _countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n    _countries = getSupportedCountries(_countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    var preSelectedCountry = getPreSelectedCountry({\n      value: _value,\n      phoneNumber: phoneNumber,\n      defaultCountry: _defaultCountry,\n      required: !_addInternationalOption,\n      countries: _countries || Object(getCountries[\"a\" /* default */])(_metadata),\n      getAnyCountry: function getAnyCountry() {\n        return _this.getFirstSupportedCountry({\n          countries: _countries\n        });\n      },\n      metadata: _metadata\n    });\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: preSelectedCountry,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: _countries,\n      // `phoneDigits` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value` is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `phoneDigits` are `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n      phoneDigits: getInitialPhoneDigits({\n        value: _value,\n        phoneNumber: phoneNumber,\n        defaultCountry: _defaultCountry,\n        international: _international,\n        useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n        metadata: _metadata\n      }),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `phoneDigits` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `phoneDigits` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    }\n  }, {\n    key: \"getCountrySelectOptions\",\n    value: function getCountrySelectOptions(_ref) {\n      var countries = _ref.countries;\n      var _this$props5 = this.props,\n        international = _this$props5.international,\n        countryCallingCodeEditable = _this$props5.countryCallingCodeEditable,\n        countryOptionsOrder = _this$props5.countryOptionsOrder,\n        addInternationalOption = _this$props5.addInternationalOption,\n        labels = _this$props5.labels,\n        locales = _this$props5.locales,\n        metadata = _this$props5.metadata;\n      return this.useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(phoneInputHelpers_getCountrySelectOptions({\n          countries: countries || Object(getCountries[\"a\" /* default */])(metadata),\n          countryNames: labels,\n          addInternationalOption: international && countryCallingCodeEditable === false ? false : addInternationalOption,\n          compareStringsLocales: locales // compareStrings\n        }), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n    }\n  }, {\n    key: \"useMemoCountrySelectOptions\",\n    value: function useMemoCountrySelectOptions(generator, dependencies) {\n      if (!this.countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)) {\n        this.countrySelectOptionsMemo = generator();\n        this.countrySelectOptionsMemoDependencies = dependencies;\n      }\n      return this.countrySelectOptionsMemo;\n    }\n  }, {\n    key: \"getFirstSupportedCountry\",\n    value: function getFirstSupportedCountry(_ref2) {\n      var countries = _ref2.countries;\n      var countryOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return countryOptions[0].value;\n    } // A shorthand for not passing `metadata` as a second argument.\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n        name = _this$props6.name,\n        disabled = _this$props6.disabled,\n        readOnly = _this$props6.readOnly,\n        autoComplete = _this$props6.autoComplete,\n        style = _this$props6.style,\n        className = _this$props6.className,\n        inputRef = _this$props6.inputRef,\n        inputComponent = _this$props6.inputComponent,\n        numberInputProps = _this$props6.numberInputProps,\n        smartCaret = _this$props6.smartCaret,\n        CountrySelectComponent = _this$props6.countrySelectComponent,\n        countrySelectProps = _this$props6.countrySelectProps,\n        ContainerComponent = _this$props6.containerComponent,\n        defaultCountry = _this$props6.defaultCountry,\n        countriesProperty = _this$props6.countries,\n        countryOptionsOrder = _this$props6.countryOptionsOrder,\n        labels = _this$props6.labels,\n        flags = _this$props6.flags,\n        flagComponent = _this$props6.flagComponent,\n        flagUrl = _this$props6.flagUrl,\n        addInternationalOption = _this$props6.addInternationalOption,\n        internationalIcon = _this$props6.internationalIcon,\n        displayInitialValueAsLocalNumber = _this$props6.displayInitialValueAsLocalNumber,\n        initialValueFormat = _this$props6.initialValueFormat,\n        onCountryChange = _this$props6.onCountryChange,\n        limitMaxLength = _this$props6.limitMaxLength,\n        countryCallingCodeEditable = _this$props6.countryCallingCodeEditable,\n        focusInputOnCountrySelection = _this$props6.focusInputOnCountrySelection,\n        reset = _this$props6.reset,\n        metadata = _this$props6.metadata,\n        international = _this$props6.international,\n        locales = _this$props6.locales,\n        rest = PhoneInputWithCountry_objectWithoutProperties(_this$props6, PhoneInputWithCountry_excluded);\n      var _this$state3 = this.state,\n        country = _this$state3.country,\n        countries = _this$state3.countries,\n        phoneDigits = _this$state3.phoneDigits,\n        isFocused = _this$state3.isFocused;\n      var InputComponent = smartCaret ? InputSmart[\"a\" /* default */] : InputBasic[\"a\" /* default */];\n      var countrySelectOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return /*#__PURE__*/react_default.a.createElement(ContainerComponent, {\n        style: style,\n        className: classnames_default()(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused,\n          'PhoneInput--disabled': disabled,\n          'PhoneInput--readOnly': readOnly\n        })\n      }, /*#__PURE__*/react_default.a.createElement(CountrySelectComponent, PhoneInputWithCountry_extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        readOnly: readOnly || countrySelectProps && countrySelectProps.readOnly,\n        iconComponent: this.CountryIcon\n      })), /*#__PURE__*/react_default.a.createElement(InputComponent, PhoneInputWithCountry_extends({\n        ref: this.setInputRef,\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: phoneDigits || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        readOnly: readOnly,\n        inputComponent: inputComponent,\n        className: classnames_default()('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value:\n    // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    function getDerivedStateFromProps(props, state) {\n      return PhoneInputWithCountry_objectSpread({\n        // Emulate `prevProps` via `state.props`.\n        props: props\n      }, getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state));\n    }\n  }]);\n  return PhoneNumberInput_;\n}(react_default.a.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\nvar PhoneNumberInput = /*#__PURE__*/react_default.a.forwardRef(function (props, ref) {\n  return /*#__PURE__*/react_default.a.createElement(PhoneInputWithCountry_PhoneNumberInput_, PhoneInputWithCountry_extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   *\r\n   * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n   */\n  value: prop_types_default.a.string,\n  /**\r\n   * A function of `value: string?`.\r\n   *\r\n   * Updates the `value` property as the user inputs a phone number.\r\n   *\r\n   * If the user erases the input value, the argument is `undefined`.\r\n   */\n  onChange: prop_types_default.a.func.isRequired,\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: prop_types_default.a.func,\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: prop_types_default.a.func,\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `disabled`.\r\n   */\n  disabled: prop_types_default.a.bool,\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `readonly`.\r\n   */\n  readOnly: prop_types_default.a.bool,\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com\r\n   * /web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: prop_types_default.a.string.isRequired,\n  /**\r\n   * Set to `\"national\"` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if `initialValueFormat` is `\"national\"`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, `initialValueFormat` is `undefined`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `undefined` by default)\n  initialValueFormat: prop_types_default.a.oneOf(['national']),\n  // `displayInitialValueAsLocalNumber` property has been\n  // superceded by `initialValueFormat` property.\n  displayInitialValueAsLocalNumber: prop_types_default.a.bool,\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: prop_types_default.a.string,\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: PropTypes_labels.isRequired,\n  /**\r\n   * Country `<select/>` options are sorted by their labels.\r\n   * The default sorting function uses `a.localeCompare(b, locales)`,\r\n   * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n   * Some languages, like Chinese, support multiple sorting variants\r\n   * (called \"collations\"), and the user might prefer one or another.\r\n   * Also, sometimes the Operating System language is not always\r\n   * the preferred language for a person using a website or an application,\r\n   * so there should be a way to specify custom locale.\r\n   * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n   * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n   */\n  locales: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.arrayOf(prop_types_default.a.string)]),\n  /*\r\n   * Custom country `<select/>` options sorting function.\r\n   * The default one uses `a.localeCompare(b)`, and,\r\n   * if that's not available, falls back to simple `a > b`/`a < b`.\r\n   * There have been requests to add custom sorter for cases\r\n   * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n   * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n  compareStrings: PropTypes.func,\r\n   */\n\n  /**\r\n   * A URL template of a country flag, where\r\n   * \"{XX}\" is a two-letter country code in upper case,\r\n   * or where \"{xx}\" is a two-letter country code in lower case.\r\n   * By default it points to `country-flag-icons` gitlab pages website.\r\n   * I imagine someone might want to download those country flag icons\r\n   * and host them on their own servers instead\r\n   * (all flags are available in the `country-flag-icons` library).\r\n   * There's a catch though: new countries may be added in future,\r\n   * so when hosting country flag icons on your own server\r\n   * one should check the `CHANGELOG.md` every time before updating this library,\r\n   * otherwise there's a possibility that some new country flag would be missing.\r\n   */\n  flagUrl: prop_types_default.a.string.isRequired,\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags will be used instead of the default ones.\r\n   * The the \"Flags\" section of the readme for more info.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n   *\r\n   * Example:\r\n   *\r\n   * `import flags from 'country-flag-icons/react/3x2'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: prop_types_default.a.objectOf(prop_types_default.a.elementType),\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * `country: string` — The country code.\r\n   * * `countryName: string` — The country name.\r\n   * * `flagUrl: string` — The `flagUrl` property (see above).\r\n   * * `flags: object` — The `flags` property (see above).\r\n   */\n  flagComponent: prop_types_default.a.elementType.isRequired,\n  /**\r\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n   */\n  addInternationalOption: prop_types_default.a.bool.isRequired,\n  /**\r\n   * \"International\" icon component.\r\n   * Should have the same aspect ratio.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `title: string` — \"International\" country option label.\r\n   */\n  internationalIcon: prop_types_default.a.elementType.isRequired,\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"XX\"` — inserts an option for \"XX\" country.\r\n   * * `\"🌐\"` — inserts \"International\" option.\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptionsOrder: prop_types_default.a.arrayOf(prop_types_default.a.string),\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: prop_types_default.a.object,\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: prop_types_default.a.string,\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name: string?` — HTML `name` attribute.\r\n   * * `value: string?` — The currently selected country code.\r\n   * * `onChange(value: string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n   * * `disabled: boolean?` — HTML `disabled` attribute.\r\n   * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className: string` — CSS class name.\r\n   */\n  countrySelectComponent: prop_types_default.a.elementType.isRequired,\n  /**\r\n   * Country `<select/>` component props.\r\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n   */\n  countrySelectProps: prop_types_default.a.object,\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  inputComponent: prop_types_default.a.elementType.isRequired,\n  /**\r\n   * Wrapping `<div/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `style: object` — A component CSS style object.\r\n   * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n   */\n  containerComponent: prop_types_default.a.elementType.isRequired,\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: prop_types_default.a.object,\n  /**\r\n   * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n   * the caret position is moved right before the next available digit skipping\r\n   * any punctuation in between. This is called \"smart\" caret positioning.\r\n   * Another case would be the phone number format changing as a result of\r\n   * the user inserting the digit somewhere in the middle, which would require\r\n   * re-positioning the caret because all digit positions have changed.\r\n   * This \"smart\" caret positioning feature can be turned off by passing\r\n   * `smartCaret={false}` property: use it in case of any possible issues\r\n   * with caret position during phone number input.\r\n   */\n  // Is `true` by default.\n  smartCaret: prop_types_default.a.bool.isRequired,\n  /**\r\n   * Set to `true` to force \"international\" phone number format.\r\n   * Set to `false` to force \"national\" phone number format.\r\n   * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n   */\n  international: prop_types_default.a.bool,\n  /**\r\n   * If set to `true`, the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: prop_types_default.a.bool.isRequired,\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: prop_types_default.a.bool.isRequired,\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: PropTypes_metadata.isRequired,\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: prop_types_default.a.func,\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: prop_types_default.a.bool.isRequired\n};\nPhoneNumberInput.defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n  /**\r\n   * Country `<select/>` component.\r\n   */\n  countrySelectComponent: CountrySelectWithIcon,\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag_FlagComponent,\n  /**\r\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon_InternationalIcon,\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n  /**\r\n   * Wrapping `<div/>` component.\r\n   */\n  containerComponent: 'div',\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: prop_types_default.a.any,\n  /**\r\n   *\r\n   */\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false,\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: true,\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: true\n};\n/* harmony default export */ var PhoneInputWithCountry = (PhoneNumberInput);\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  var i = 0;\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/PhoneInputWithCountryDefault.js\nfunction PhoneInputWithCountryDefault_extends() {\n  PhoneInputWithCountryDefault_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return PhoneInputWithCountryDefault_extends.apply(this, arguments);\n}\n\n\n\n\n\nfunction createPhoneInput(defaultMetadata) {\n  var PhoneInputDefault = /*#__PURE__*/react_default.a.forwardRef(function (props, ref) {\n    return /*#__PURE__*/react_default.a.createElement(PhoneInputWithCountry, PhoneInputWithCountryDefault_extends({\n      ref: ref\n    }, props));\n  });\n  PhoneInputDefault.propTypes = {\n    metadata: PropTypes_metadata.isRequired,\n    labels: PropTypes_labels.isRequired\n  };\n  PhoneInputDefault.defaultProps = {\n    metadata: defaultMetadata,\n    labels: en_json\n  };\n  return PhoneInputDefault;\n}\n/* harmony default export */ var PhoneInputWithCountryDefault = (createPhoneInput());\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/min/index.js\n\n\n\nfunction call(func, _arguments) {\n  var args = Array.prototype.slice.call(_arguments);\n  args.push(metadata_min_json[\"a\" /* default */]);\n  return func.apply(this, args);\n}\n/* harmony default export */ var min = (createPhoneInput(metadata_min_json[\"a\" /* default */]));\nfunction min_parsePhoneNumber() {\n  return call(parsePhoneNumberFromString[\"a\" /* default */], arguments);\n}\nfunction min_formatPhoneNumber() {\n  return call(formatPhoneNumber[\"a\" /* default */], arguments);\n}\nfunction formatPhoneNumberIntl() {\n  return call(formatPhoneNumber[\"b\" /* formatPhoneNumberIntl */], arguments);\n}\nfunction min_isValidPhoneNumber() {\n  return call(isValidPhoneNumber[\"a\" /* default */], arguments);\n}\nfunction min_isPossiblePhoneNumber() {\n  return call(isPossiblePhoneNumber[\"a\" /* default */], arguments);\n}\nfunction min_getCountries() {\n  return call(getCountries[\"a\" /* default */], arguments);\n}\nfunction getCountryCallingCode() {\n  return call(es6_metadata[\"b\" /* getCountryCallingCode */], arguments);\n}\nfunction isSupportedCountry() {\n  return call(es6_metadata[\"c\" /* isSupportedCountry */], arguments);\n}\n\n/***/ }),\n\n/***/ 2331:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// UNUSED EXPORTS: createInput\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(59);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// CONCATENATED MODULE: ./node_modules/input-format/modules/edit.js\n// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nfunction edit(value, caret, operation) {\n  switch (operation) {\n    case 'Backspace':\n      // If there exists the previous character,\n      // then erase it and reposition the caret.\n      if (caret > 0) {\n        // Remove the previous character\n        value = value.slice(0, caret - 1) + value.slice(caret); // Position the caret where the previous (erased) character was\n\n        caret--;\n      }\n      break;\n    case 'Delete':\n      // Remove current digit (if any)\n      value = value.slice(0, caret) + value.slice(caret + 1);\n      break;\n  }\n  return {\n    value: value,\n    caret: caret\n  };\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/parse.js\n// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nfunction parse_parse(text, caret_position, parse_character) {\n  var value = '';\n  var focused_input_character_index = 0;\n  var index = 0;\n  while (index < text.length) {\n    var character = parse_character(text[index], value);\n    if (character !== undefined) {\n      value += character;\n      if (caret_position !== undefined) {\n        if (caret_position === index) {\n          focused_input_character_index = value.length - 1;\n        } else if (caret_position > index) {\n          focused_input_character_index = value.length;\n        }\n      }\n    }\n    index++;\n  } // If caret position wasn't specified\n\n  if (caret_position === undefined) {\n    // Then set caret position to \"after the last input character\"\n    focused_input_character_index = value.length;\n  }\n  var result = {\n    value: value,\n    caret: focused_input_character_index\n  };\n  return result;\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/helpers.js\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n// Counts all occurences of a symbol in a string\nfunction count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    if (character === symbol) {\n      count++;\n    }\n  }\n  return count;\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/closeBraces.js\n\nfunction closeBraces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n    cut_before++;\n  }\n  return retained_template;\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/templateFormatter.js\nfunction templateFormatter_createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = templateFormatter_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction templateFormatter_unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return templateFormatter_arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return templateFormatter_arrayLikeToArray(o, minLen);\n}\nfunction templateFormatter_arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n // Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\n\n/* harmony default export */ var templateFormatter = (function (template) {\n  var placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var should_close_braces = arguments.length > 2 ? arguments[2] : undefined;\n  if (!template) {\n    return function (value) {\n      return {\n        text: value\n      };\n    };\n  }\n  var characters_in_template = count_occurences(placeholder, template);\n  return function (value) {\n    if (!value) {\n      return {\n        text: '',\n        template: template\n      };\n    }\n    var value_character_index = 0;\n    var filled_in_template = ''; // Using `.split('')` here instead of normal `for ... of`\n    // because the importing application doesn't neccessarily include an ES6 polyfill.\n    // The `.split('')` approach discards \"exotic\" UTF-8 characters\n    // (the ones consisting of four bytes)\n    // but template placeholder characters don't fall into that range\n    // and appending UTF-8 characters to a string in parts still works.\n\n    for (var _iterator = templateFormatter_createForOfIteratorHelperLoose(template.split('')), _step; !(_step = _iterator()).done;) {\n      var character = _step.value;\n      if (character !== placeholder) {\n        filled_in_template += character;\n        continue;\n      }\n      filled_in_template += value[value_character_index];\n      value_character_index++; // If the last available value character has been filled in,\n      // then return the filled in template\n      // (either trim the right part or retain it,\n      //  if no more character placeholders in there)\n\n      if (value_character_index === value.length) {\n        // If there are more character placeholders\n        // in the right part of the template\n        // then simply trim it.\n        if (value.length < characters_in_template) {\n          break;\n        }\n      }\n    }\n    if (should_close_braces) {\n      filled_in_template = closeBraces(filled_in_template, template);\n    }\n    return {\n      text: filled_in_template,\n      template: template\n    };\n  };\n});\n// CONCATENATED MODULE: ./node_modules/input-format/modules/format.js\n // Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\n\nfunction format_format(value, caret, formatter) {\n  if (typeof formatter === 'string') {\n    formatter = templateFormatter(formatter);\n  }\n  var _ref = formatter(value) || {},\n    text = _ref.text,\n    template = _ref.template;\n  if (text === undefined) {\n    text = value;\n  }\n  if (template) {\n    if (caret === undefined) {\n      caret = text.length;\n    } else {\n      var index = 0;\n      var found = false;\n      var possibly_last_input_character_index = -1;\n      while (index < text.length && index < template.length) {\n        // Character placeholder found\n        if (text[index] !== template[index]) {\n          if (caret === 0) {\n            found = true;\n            caret = index;\n            break;\n          }\n          possibly_last_input_character_index = index;\n          caret--;\n        }\n        index++;\n      } // If the caret was positioned after last input character,\n      // then the text caret index is just after the last input character.\n\n      if (!found) {\n        caret = possibly_last_input_character_index + 1;\n      }\n    }\n  }\n  return {\n    text: text,\n    caret: caret\n  };\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/dom.js\nfunction isReadOnly(element) {\n  return element.hasAttribute('readonly');\n} // Gets <input/> selection bounds\n\nfunction getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nvar Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nfunction getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nfunction getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nfunction setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n// CONCATENATED MODULE: ./node_modules/input-format/modules/inputControl.js\n\n\n\n // Deprecated.\n// I don't know why this function exists.\n\nfunction onCut(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  } // The actual cut hasn't happened just yet hence the timeout.\n\n  setTimeout(function () {\n    return formatInputText(input, _parse, _format, undefined, on_change);\n  }, 0);\n} // Deprecated.\n// I don't know why this function exists.\n\nfunction onPaste(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  }\n  var selection = getSelection(input); // If selection is made,\n  // just erase the selected text\n  // prior to pasting\n\n  if (selection) {\n    eraseSelection(input, selection);\n  }\n  formatInputText(input, _parse, _format, undefined, on_change);\n}\nfunction inputControl_onChange(event, input, _parse, _format, on_change) {\n  formatInputText(input, _parse, _format, undefined, on_change);\n} // \"Delete\" and \"Backspace\" keys are special\n// in a way that they're not handled by the regular `onChange()` handler\n// and instead are intercepted and re-applied manually.\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\n// results in erasing a character, but that character might be any character,\n// while it would be a better \"user experience\" if it erased not just any character\n// but the closest \"meaningful\" character.\n// For example, if a template is `(xxx) xxx-xxxx`,\n// and the `<input/>` value is `(111) 222-3333`,\n// then, if a user begins erasing the `3333` part via \"Backspace\"\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\n// Nothing wrong with that, but it would be a better \"user experience\"\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\n// character, which would be the rightmost `2`.\n// So, what this `onKeyDown()` handler does is it intercepts\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\n// following the logic described above.\n\nfunction inputControl_onKeyDown(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  }\n  var operation = getOperation(event);\n  switch (operation) {\n    case 'Delete':\n    case 'Backspace':\n      // Intercept this operation and perform it manually.\n      event.preventDefault();\n      var selection = getSelection(input); // If a selection is made, just erase the selected text.\n\n      if (selection) {\n        eraseSelection(input, selection);\n        return formatInputText(input, _parse, _format, undefined, on_change);\n      } // Else, perform the (character erasing) operation manually.\n\n      return formatInputText(input, _parse, _format, operation, on_change);\n    default: // Will be handled normally as part of the `onChange` handler.\n  }\n}\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\n\nfunction eraseSelection(input, selection) {\n  var text = input.value;\n  text = text.slice(0, selection.start) + text.slice(selection.end);\n  input.value = text;\n  setCaretPosition(input, selection.start);\n}\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\n\nfunction formatInputText(input, _parse, _format, operation, on_change) {\n  // Parse `<input/>` textual value.\n  // Get the `value` and `caret` position.\n  var _parse2 = parse_parse(input.value, getCaretPosition(input), _parse),\n    value = _parse2.value,\n    caret = _parse2.caret; // If a user performed an operation (\"Backspace\", \"Delete\")\n  // then apply that operation and get the new `value` and `caret` position.\n\n  if (operation) {\n    var newValueAndCaret = edit(value, caret, operation);\n    value = newValueAndCaret.value;\n    caret = newValueAndCaret.caret;\n  } // Format the `value`.\n  // (and reposition the caret accordingly)\n\n  var formatted = format_format(value, caret, _format);\n  var text = formatted.text;\n  caret = formatted.caret; // Set `<input/>` textual value manually\n  // to prevent React from resetting the caret position\n  // later inside a subsequent `render()`.\n  // Doesn't work for custom `inputComponent`s for some reason.\n\n  input.value = text; // Position the caret properly.\n\n  setCaretPosition(input, caret); // If the `<input/>` textual value did change,\n  // then the parsed `value` may have changed too.\n\n  on_change(value);\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/react/Input.js\nvar _excluded = [\"value\", \"parse\", \"format\", \"inputComponent\", \"onChange\", \"onKeyDown\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n// This is just `./ReactInput.js` rewritten in Hooks.\n\n\n // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nfunction Input(_ref, ref) {\n  var value = _ref.value,\n    parse = _ref.parse,\n    format = _ref.format,\n    InputComponent = _ref.inputComponent,\n    onChange = _ref.onChange,\n    onKeyDown = _ref.onKeyDown,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var internalRef = Object(react[\"useRef\"])();\n  var setRef = Object(react[\"useCallback\"])(function (instance) {\n    internalRef.current = instance;\n    if (ref) {\n      if (typeof ref === 'function') {\n        ref(instance);\n      } else {\n        ref.current = instance;\n      }\n    }\n  }, [ref]);\n  var _onChange = Object(react[\"useCallback\"])(function (event) {\n    return inputControl_onChange(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange]);\n  var _onKeyDown = Object(react[\"useCallback\"])(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n    return inputControl_onKeyDown(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange, onKeyDown]);\n  return /*#__PURE__*/react_default.a.createElement(InputComponent, _extends({}, rest, {\n    ref: setRef,\n    value: format(isEmptyValue(value) ? '' : value).text,\n    onKeyDown: _onKeyDown,\n    onChange: _onChange\n  }));\n}\nInput = /*#__PURE__*/react_default.a.forwardRef(Input);\nInput.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: prop_types_default.a.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: prop_types_default.a.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: prop_types_default.a.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: prop_types_default.a.string.isRequired,\n  // Is parsed from <input/> text.\n  value: prop_types_default.a.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: prop_types_default.a.func.isRequired,\n  // Passthrough\n  onKeyDown: prop_types_default.a.func,\n  onCut: prop_types_default.a.func,\n  onPaste: prop_types_default.a.func\n};\nInput.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n};\n/* harmony default export */ var react_Input = (Input);\nfunction isEmptyValue(value) {\n  return value === undefined || value === null;\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/AsYouType.js + 7 modules\nvar AsYouType = __webpack_require__(2440);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js\nvar parseIncompletePhoneNumber = __webpack_require__(2422);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/helpers/inputValuePrefix.js\nvar inputValuePrefix = __webpack_require__(2325);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/InputSmart.js\nvar InputSmart_excluded = [\"country\", \"international\", \"withCountryCallingCode\", \"metadata\"];\nfunction InputSmart_extends() {\n  InputSmart_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return InputSmart_extends.apply(this, arguments);\n}\nfunction InputSmart_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = InputSmart_objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction InputSmart_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n\n\n\n\nfunction createInput(defaultMetadata) {\n  /**\r\n   * `InputSmart` is a \"smarter\" implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's and maintains the caret's position in the process.\r\n   * The caret positioning is maintained using `input-format` library.\r\n   * Relies on being run in a DOM environment for calling caret positioning functions.\r\n   */\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      metadata = _ref.metadata,\n      rest = InputSmart_objectWithoutProperties(_ref, InputSmart_excluded);\n    var format = Object(react[\"useCallback\"])(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType[\"a\" /* default */](country, metadata);\n      var prefix = Object(inputValuePrefix[\"a\" /* getInputValuePrefix */])({\n        country: country,\n        international: international,\n        withCountryCallingCode: withCountryCallingCode,\n        metadata: metadata\n      }); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n      if (prefix) {\n        text = Object(inputValuePrefix[\"b\" /* removeInputValuePrefix */])(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = Object(inputValuePrefix[\"b\" /* removeInputValuePrefix */])(template, prefix);\n        }\n      }\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return /*#__PURE__*/react_default.a.createElement(react_Input, InputSmart_extends({}, rest, {\n      ref: ref,\n      parse: parseIncompletePhoneNumber[\"b\" /* parsePhoneNumberCharacter */],\n      format: format\n    }));\n  }\n  InputSmart = /*#__PURE__*/react_default.a.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: prop_types_default.a.string.isRequired,\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: prop_types_default.a.func.isRequired,\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: prop_types_default.a.string,\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: prop_types_default.a.bool,\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: prop_types_default.a.bool,\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: prop_types_default.a.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\n/* harmony default export */ var modules_InputSmart = __webpack_exports__[\"a\"] = (createInput());\n\n/***/ }),\n\n/***/ 2332:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// UNUSED EXPORTS: parsePhoneNumber, formatPhoneNumber, formatPhoneNumberIntl, isValidPhoneNumber, isPossiblePhoneNumber, getCountries, getCountryCallingCode, isSupportedCountry\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/metadata.min.json.js\nvar metadata_min_json = __webpack_require__(2314);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js\nvar parsePhoneNumberFromString = __webpack_require__(2450);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/libphonenumber/formatPhoneNumber.js\nvar formatPhoneNumber = __webpack_require__(2451);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isValidPhoneNumber.js\nvar isValidPhoneNumber = __webpack_require__(2452);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isPossiblePhoneNumber.js\nvar isPossiblePhoneNumber = __webpack_require__(2453);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/getCountries.js\nvar getCountries = __webpack_require__(2454);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/metadata.js + 1 modules\nvar es6_metadata = __webpack_require__(2245);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(59);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/AsYouType.js + 7 modules\nvar AsYouType = __webpack_require__(2440);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/parseDigits.js\nvar parseDigits = __webpack_require__(2263);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/helpers/getInternationalPhoneNumberPrefix.js\nvar getInternationalPhoneNumberPrefix = __webpack_require__(2324);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/usePhoneDigits.js\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n\n\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\n\nfunction usePhoneDigits(_ref) {\n  var _this = this;\n  var value = _ref.value,\n    onChange = _ref.onChange,\n    country = _ref.country,\n    defaultCountry = _ref.defaultCountry,\n    international = _ref.international,\n    withCountryCallingCode = _ref.withCountryCallingCode,\n    useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n    metadata = _ref.metadata;\n  var countryMismatchDetected = Object(react[\"useRef\"])();\n  var onCountryMismatch = function onCountryMismatch(value, country, actualCountry) {\n    console.error(\"[react-phone-number-input] Expected phone number \".concat(value, \" to correspond to country \").concat(country, \" but \").concat(actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t', \".\"));\n    countryMismatchDetected.current = true;\n  };\n  var getInitialPhoneDigits = function getInitialPhoneDigits(options) {\n    return getPhoneDigitsForValue(value, country, international, withCountryCallingCode, defaultCountry, useNationalFormatForDefaultCountryValue, metadata, function () {\n      if (options && options.onCountryMismatch) {\n        options.onCountryMismatch();\n      }\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      onCountryMismatch.apply(_this, args);\n    });\n  }; // This is only used to detect `country` property change.\n\n  var _useState = Object(react[\"useState\"])(country),\n    _useState2 = _slicedToArray(_useState, 2),\n    prevCountry = _useState2[0],\n    setPrevCountry = _useState2[1]; // This is only used to detect `defaultCountry` property change.\n\n  var _useState3 = Object(react[\"useState\"])(defaultCountry),\n    _useState4 = _slicedToArray(_useState3, 2),\n    prevDefaultCountry = _useState4[0],\n    setPrevDefaultCountry = _useState4[1]; // `phoneDigits` is the `value` passed to the `<input/>`.\n\n  var _useState5 = Object(react[\"useState\"])(getInitialPhoneDigits()),\n    _useState6 = _slicedToArray(_useState5, 2),\n    phoneDigits = _useState6[0],\n    setPhoneDigits = _useState6[1]; // This is only used to detect `value` property changes.\n\n  var _useState7 = Object(react[\"useState\"])(value),\n    _useState8 = _slicedToArray(_useState7, 2),\n    valueForPhoneDigits = _useState8[0],\n    setValueForPhoneDigits = _useState8[1]; // Rerender hack.\n\n  var _useState9 = Object(react[\"useState\"])(),\n    _useState10 = _slicedToArray(_useState9, 2),\n    rerenderTrigger = _useState10[0],\n    setRerenderTrigger = _useState10[1];\n  var rerender = Object(react[\"useCallback\"])(function () {\n    return setRerenderTrigger({});\n  }, [setRerenderTrigger]);\n  function getValueForPhoneDigits(phoneDigits) {\n    // If the user hasn't input any digits then `value` is `undefined`.\n    if (!phoneDigits) {\n      return;\n    }\n    if (country && international && !withCountryCallingCode) {\n      phoneDigits = \"+\".concat(Object(es6_metadata[\"b\" /* getCountryCallingCode */])(country, metadata)).concat(phoneDigits);\n    } // Return the E.164 phone number value.\n    //\n    // Even if no \"national (significant) number\" digits have been input,\n    // still return a non-`undefined` value.\n    // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\n    //\n    // For example, if the user has selected country `US` and entered `\"1\"`\n    // then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\n    // digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\n    // because otherwise the app would think that the input is empty and mark it as such\n    // while in reality it isn't empty, which might be thought of as a \"bug\", or just\n    // a \"weird\" behavior.\n    //\n    // The only case when there's any input and `getNumberValue()` still returns `undefined`\n    // is when that input is `\"+\"`.\n    //\n\n    var asYouType = new AsYouType[\"a\" /* default */](country || defaultCountry, metadata);\n    asYouType.input(phoneDigits);\n    return asYouType.getNumberValue();\n  } // If `value` property has been changed externally\n  // then re-initialize the component.\n\n  Object(react[\"useEffect\"])(function () {\n    if (value !== valueForPhoneDigits) {\n      setValueForPhoneDigits(value);\n      setPhoneDigits(getInitialPhoneDigits());\n    }\n  }, [value]); // If the `country` has been changed then re-initialize the component.\n\n  Object(react[\"useEffect\"])(function () {\n    if (country !== prevCountry) {\n      setPrevCountry(country);\n      var _countryMismatchDetected;\n      var _phoneDigits = getInitialPhoneDigits({\n        onCountryMismatch: function onCountryMismatch() {\n          _countryMismatchDetected = true;\n        }\n      });\n      setPhoneDigits(_phoneDigits);\n      if (_countryMismatchDetected) {\n        setValueForPhoneDigits(getValueForPhoneDigits(_phoneDigits));\n      }\n    }\n  }, [country]); // If the `defaultCountry` has been changed then re-initialize the component.\n\n  Object(react[\"useEffect\"])(function () {\n    if (defaultCountry !== prevDefaultCountry) {\n      setPrevDefaultCountry(defaultCountry);\n      setPhoneDigits(getInitialPhoneDigits());\n    }\n  }, [defaultCountry]); // Update the `value` after `valueForPhoneDigits` has been updated.\n\n  Object(react[\"useEffect\"])(function () {\n    if (valueForPhoneDigits !== value) {\n      onChange(valueForPhoneDigits);\n    }\n  }, [valueForPhoneDigits]);\n  var onSetPhoneDigits = Object(react[\"useCallback\"])(function (phoneDigits) {\n    var value;\n    if (country) {\n      if (international && withCountryCallingCode) {\n        // The `<input/>` value must start with the country calling code.\n        var prefix = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata);\n        if (phoneDigits.indexOf(prefix) !== 0) {\n          // If a user tabs into a phone number input field\n          // that is `international` and `withCountryCallingCode`,\n          // and then starts inputting local phone number digits,\n          // the first digit would get \"swallowed\" if the fix below wasn't implemented.\n          // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\n          if (phoneDigits && phoneDigits[0] !== '+') {\n            phoneDigits = prefix + phoneDigits;\n          } else {\n            // // Reset phone digits if they don't start with the correct prefix.\n            // // Undo the `<input/>` value change if it doesn't.\n            if (countryMismatchDetected.current) {// In case of a `country`/`value` mismatch,\n              // if it performed an \"undo\" here, then\n              // it wouldn't let a user edit their phone number at all,\n              // so this special case at least allows phone number editing\n              // when `value` already doesn't match the `country`.\n            } else {\n              // If it simply did `phoneDigits = prefix` here,\n              // then it could have no effect when erasing phone number\n              // via Backspace, because `phoneDigits` in `state` wouldn't change\n              // as a result, because it was `prefix` and it became `prefix`,\n              // so the component wouldn't rerender, and the user would be able\n              // to erase the country calling code part, and that part is\n              // assumed to be non-eraseable. That's why the component is\n              // forcefully rerendered here.\n              setPhoneDigits(prefix);\n              setValueForPhoneDigits(undefined); // Force a re-render of the `<input/>` with previous `phoneDigits` value.\n\n              return rerender();\n            }\n          }\n        }\n      } else {\n        // Entering phone number either in \"national\" format\n        // when `country` has been specified, or in \"international\" format\n        // when `country` has been specified but `withCountryCallingCode` hasn't.\n        // Therefore, `+` is not allowed.\n        if (phoneDigits && phoneDigits[0] === '+') {\n          // Remove the `+`.\n          phoneDigits = phoneDigits.slice(1);\n        }\n      }\n    } else if (!defaultCountry) {\n      // Force a `+` in the beginning of a `value`\n      // when no `country` and `defaultCountry` have been specified.\n      if (phoneDigits && phoneDigits[0] !== '+') {\n        // Prepend a `+`.\n        phoneDigits = '+' + phoneDigits;\n      }\n    } // Convert `phoneDigits` to `value`.\n\n    if (phoneDigits) {\n      value = getValueForPhoneDigits(phoneDigits);\n    }\n    setPhoneDigits(phoneDigits);\n    setValueForPhoneDigits(value);\n  }, [country, international, withCountryCallingCode, defaultCountry, metadata, setPhoneDigits, setValueForPhoneDigits, rerender, countryMismatchDetected]);\n  return [phoneDigits, onSetPhoneDigits];\n}\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {boolean} [withCountryCallingCode]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nfunction getPhoneDigitsForValue(value, country, international, withCountryCallingCode, defaultCountry, useNationalFormatForDefaultCountryValue, metadata, onCountryMismatch) {\n  if (country && international && withCountryCallingCode) {\n    var prefix = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata);\n    if (value) {\n      if (value.indexOf(prefix) !== 0) {\n        onCountryMismatch(value, country);\n      }\n      return value;\n    }\n    return prefix;\n  }\n  if (!value) {\n    return '';\n  }\n  if (!country && !defaultCountry) {\n    return value;\n  }\n  var asYouType = new AsYouType[\"a\" /* default */](undefined, metadata);\n  asYouType.input(value);\n  var phoneNumber = asYouType.getNumber();\n  if (phoneNumber) {\n    if (country) {\n      if (phoneNumber.country && phoneNumber.country !== country) {\n        onCountryMismatch(value, country, phoneNumber.country);\n      } else if (phoneNumber.countryCallingCode !== Object(es6_metadata[\"b\" /* getCountryCallingCode */])(country, metadata)) {\n        onCountryMismatch(value, country);\n      }\n      if (international) {\n        return phoneNumber.nationalNumber;\n      }\n      return Object(parseDigits[\"a\" /* default */])(phoneNumber.formatNational());\n    } else {\n      // `phoneNumber.countryCallingCode` is compared here  instead of\n      // `phoneNumber.country`, because, for example, a person could have\n      // previously input a phone number (in \"national\" format) that isn't\n      // 100% valid for the `defaultCountry`, and if `phoneNumber.country`\n      // was compared, then it wouldn't match, and such phone number\n      // wouldn't be formatted as a \"national\" one, and instead would be\n      // formatted as an \"international\" one, confusing the user.\n      // Comparing `phoneNumber.countryCallingCode` works around such issues.\n      //\n      // Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\n      // The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\n      // The user then clicks \"Save\", the page is refreshed, and the user sees\n      // that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\n      // the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\n      // was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\n      // is not a valid national number for US, and `phoneNumber.country` is compared\n      // instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\n      // comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\n      // is no longer the case.\n      //\n      if (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === Object(es6_metadata[\"b\" /* getCountryCallingCode */])(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\n        return Object(parseDigits[\"a\" /* default */])(phoneNumber.formatNational());\n      }\n      return value;\n    }\n  } else {\n    return '';\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/PhoneInput.js\nvar _excluded = [\"Component\", \"country\", \"defaultCountry\", \"useNationalFormatForDefaultCountryValue\", \"value\", \"onChange\", \"metadata\", \"international\", \"withCountryCallingCode\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction PhoneInput_slicedToArray(arr, i) {\n  return PhoneInput_arrayWithHoles(arr) || PhoneInput_iterableToArrayLimit(arr, i) || PhoneInput_unsupportedIterableToArray(arr, i) || PhoneInput_nonIterableRest();\n}\nfunction PhoneInput_nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction PhoneInput_unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return PhoneInput_arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return PhoneInput_arrayLikeToArray(o, minLen);\n}\nfunction PhoneInput_arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction PhoneInput_iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction PhoneInput_arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n\n\nfunction PhoneInput_PhoneInput(_ref, ref) {\n  var Component = _ref.Component,\n    country = _ref.country,\n    defaultCountry = _ref.defaultCountry,\n    useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n    value = _ref.value,\n    onChange = _ref.onChange,\n    metadata = _ref.metadata,\n    international = _ref.international,\n    withCountryCallingCode = _ref.withCountryCallingCode,\n    rest = _objectWithoutProperties(_ref, _excluded);\n\n  // \"Phone digits\" includes not only \"digits\" but also a `+` sign.\n  var _usePhoneDigits = usePhoneDigits({\n      value: value,\n      onChange: onChange,\n      country: country,\n      defaultCountry: defaultCountry,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      useNationalFormatForDefaultCountryValue: useNationalFormatForDefaultCountryValue,\n      metadata: metadata\n    }),\n    _usePhoneDigits2 = PhoneInput_slicedToArray(_usePhoneDigits, 2),\n    phoneDigits = _usePhoneDigits2[0],\n    setPhoneDigits = _usePhoneDigits2[1];\n  return /*#__PURE__*/react_default.a.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    metadata: metadata,\n    international: international,\n    withCountryCallingCode: withCountryCallingCode,\n    country: country || defaultCountry,\n    value: phoneDigits,\n    onChange: setPhoneDigits\n  }));\n}\nPhoneInput_PhoneInput = /*#__PURE__*/react_default.a.forwardRef(PhoneInput_PhoneInput);\nPhoneInput_PhoneInput.propTypes = {\n  /**\r\n   * The phone number (in E.164 format).\r\n   * Examples: `\"+12\"`, `\"+12133734253\"`.\r\n   * An \"empty\" `value` could be represented by any \"falsy\" value like `undefined`, `null` or an empty string `\"\"`.\r\n   */\n  value: prop_types_default.a.string,\n  /**\r\n   * A function of `value: string?`.\r\n   * Updates the `value` property (to `undefined` in case it's empty).\r\n   */\n  onChange: prop_types_default.a.func.isRequired,\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * as a national phone number (example: `(213) 373-4253`),\r\n   * or as an international phone number without \"country calling code\"\r\n   * if `international` property is passed (example: `213 373 4253`).\r\n   * Example: \"US\".\r\n   * If no `country` is passed then `value`\r\n   * is formatted as an international phone number.\r\n   * (example: `+1 213 373 4253`)\r\n   */\n  country: prop_types_default.a.string,\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n   * The user can still input a phone number in international format.\r\n   * Example: \"US\".\r\n   * `country` and `defaultCountry` properties are mutually exclusive.\r\n   */\n  defaultCountry: prop_types_default.a.string,\n  /**\r\n   * If `country` property is passed along with `international={true}` property\r\n   * then the phone number will be input in \"international\" format for that `country`\r\n   * (without \"country calling code\").\r\n   * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n   * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n   * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n   * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n   * (without \"country calling code\" `+1`).\r\n   */\n  international: prop_types_default.a.bool,\n  /**\r\n   * If `country` and `international` properties are set,\r\n   * then by default it won't include \"country calling code\" in the input field.\r\n   * To change that, pass `withCountryCallingCode` property,\r\n   * and it will include \"country calling code\" in the input field.\r\n   */\n  withCountryCallingCode: prop_types_default.a.bool,\n  /**\r\n   * A component that renders the `<input/>` itself and also\r\n   * parses and formats its `value` as the user inputs it.\r\n   */\n  Component: prop_types_default.a.elementType.isRequired,\n  /**\r\n   * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n   * then the `value` will be formatted as a national phone number by default.\r\n   * To format the initial `value` of `defaultCountry` as an international number instead\r\n   * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n   */\n  useNationalFormatForDefaultCountryValue: prop_types_default.a.bool.isRequired,\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   */\n  metadata: prop_types_default.a.object.isRequired\n};\nPhoneInput_PhoneInput.defaultProps = {\n  /**\r\n   * Set to `true` to force international phone number format\r\n   * (without \"country calling code\") when `country` is specified.\r\n   */\n  // international: false,\n\n  /**\r\n   * Prefer national format when formatting E.164 phone number `value`\r\n   * corresponding to `defaultCountry`.\r\n   */\n  useNationalFormatForDefaultCountryValue: true\n};\n/* harmony default export */ var modules_PhoneInput = (PhoneInput_PhoneInput);\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/InputSmart.js + 9 modules\nvar InputSmart = __webpack_require__(2331);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/InputBasic.js + 1 modules\nvar InputBasic = __webpack_require__(2338);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/PhoneInputBrowser.js\nvar PhoneInputBrowser_excluded = [\"smartCaret\"];\nfunction PhoneInputBrowser_extends() {\n  PhoneInputBrowser_extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return PhoneInputBrowser_extends.apply(this, arguments);\n}\nfunction PhoneInputBrowser_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = PhoneInputBrowser_objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction PhoneInputBrowser_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n\n\n\n\nfunction createInput(defaultMetadata) {\n  function PhoneInput(_ref, ref) {\n    var smartCaret = _ref.smartCaret,\n      rest = PhoneInputBrowser_objectWithoutProperties(_ref, PhoneInputBrowser_excluded);\n    return /*#__PURE__*/react_default.a.createElement(modules_PhoneInput, PhoneInputBrowser_extends({}, rest, {\n      ref: ref,\n      Component: smartCaret ? InputSmart[\"a\" /* default */] : InputBasic[\"a\" /* default */]\n    }));\n  }\n  PhoneInput = /*#__PURE__*/react_default.a.forwardRef(PhoneInput);\n  PhoneInput.propTypes = {\n    /**\r\n     * HTML `<input/>` `type` attribute.\r\n     */\n    type: prop_types_default.a.string,\n    /**\r\n     * HTML `<input/>` `autocomplete` attribute.\r\n     */\n    autoComplete: prop_types_default.a.string,\n    /**\r\n     * By default, the caret position is being \"intelligently\" managed\r\n     * while a user inputs a phone number.\r\n     * This \"smart\" caret behavior can be turned off\r\n     * by passing `smartCaret={false}` property.\r\n     * This is just an \"escape hatch\" for any possible caret position issues.\r\n     */\n    // Is `true` by default.\n    smartCaret: prop_types_default.a.bool.isRequired,\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: prop_types_default.a.object.isRequired\n  };\n  PhoneInput.defaultProps = {\n    /**\r\n     * HTML `<input/>` `type=\"tel\"`.\r\n     */\n    type: 'tel',\n    /**\r\n     * Remember (and autofill) the value as a phone number.\r\n     */\n    autoComplete: 'tel',\n    /**\r\n     * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n     */\n    smartCaret: true,\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: defaultMetadata\n  };\n  return PhoneInput;\n}\n/* harmony default export */ var PhoneInputBrowser = (createInput());\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/input/index.js\n\n\n\nfunction call(func, _arguments) {\n  var args = Array.prototype.slice.call(_arguments);\n  args.push(metadata_min_json[\"a\" /* default */]);\n  return func.apply(this, args);\n}\n/* harmony default export */ var input = __webpack_exports__[\"a\"] = (createInput(metadata_min_json[\"a\" /* default */]));\nfunction parsePhoneNumber() {\n  return call(parsePhoneNumberFromString[\"a\" /* default */], arguments);\n}\nfunction input_formatPhoneNumber() {\n  return call(formatPhoneNumber[\"a\" /* default */], arguments);\n}\nfunction formatPhoneNumberIntl() {\n  return call(formatPhoneNumber[\"b\" /* formatPhoneNumberIntl */], arguments);\n}\nfunction input_isValidPhoneNumber() {\n  return call(isValidPhoneNumber[\"a\" /* default */], arguments);\n}\nfunction input_isPossiblePhoneNumber() {\n  return call(isPossiblePhoneNumber[\"a\" /* default */], arguments);\n}\nfunction input_getCountries() {\n  return call(getCountries[\"a\" /* default */], arguments);\n}\nfunction getCountryCallingCode() {\n  return call(es6_metadata[\"b\" /* getCountryCallingCode */], arguments);\n}\nfunction isSupportedCountry() {\n  return call(es6_metadata[\"c\" /* isSupportedCountry */], arguments);\n}\n\n/***/ }),\n\n/***/ 2333:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ PhoneNumber_PhoneNumber; });\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/metadata.js + 1 modules\nvar es6_metadata = __webpack_require__(2245);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isPossibleNumber_.js\nvar isPossibleNumber_ = __webpack_require__(2320);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js\nvar matchesEntirely = __webpack_require__(2256);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/getNumberType.js\nvar getNumberType = __webpack_require__(2284);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/validate_.js\n\n\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nfunction isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new es6_metadata[\"a\" /* default */](metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return Object(getNumberType[\"a\" /* default */])(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return Object(matchesEntirely[\"a\" /* default */])(national_number, metadata.nationalNumberPattern());\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js\nvar formatNationalNumberUsingFormat = __webpack_require__(2281);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nfunction getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new es6_metadata[\"a\" /* default */](metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/RFC3966.js\nvar RFC3966 = __webpack_require__(2321);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/format_.js\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\n\n\n\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  }\n}; // Formats a phone number\n//\n// Example use cases:\n//\n// ```js\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n// formatNumber('+78005553535', 'NATIONAL')\n// formatNumber('+78005553535', 'NATIONAL', metadata)\n// ```\n//\n\nfunction formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n  metadata = new es6_metadata[\"a\" /* default */](metadata);\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n    case 'RFC3966':\n      return Object(RFC3966[\"a\" /* formatRFC3966 */])({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n  if (!format) {\n    return number;\n  }\n  return Object(formatNationalNumberUsingFormat[\"b\" /* default */])(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {\n    var format = _step.value;\n\n    // Validate leading digits.\n    // The test case for \"else path\" could be found by searching for\n    // \"format.leadingDigitsPatterns().length === 0\".\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n    if (Object(matchesEntirely[\"a\" /* default */])(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = Object(es6_metadata[\"b\" /* getCountryCallingCode */])(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n    return formattedNumber;\n  }\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/PhoneNumber.js\nfunction PhoneNumber_ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction PhoneNumber_objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? PhoneNumber_ownKeys(Object(source), !0).forEach(function (key) {\n      PhoneNumber_defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : PhoneNumber_ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction PhoneNumber_defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\n\n\n\n\n\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nvar PhoneNumber_PhoneNumber = /*#__PURE__*/function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n    var _metadata = new es6_metadata[\"a\" /* default */](metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n      _metadata.country(countryCallingCode);\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return Object(isPossibleNumber_[\"a\" /* default */])(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new es6_metadata[\"a\" /* default */](this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return Object(getNumberType[\"a\" /* default */])(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? PhoneNumber_objectSpread(PhoneNumber_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n  return PhoneNumber;\n}();\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n\n/***/ }),\n\n/***/ 2334:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ parsePhoneNumber_parsePhoneNumber; });\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/constants.js\nvar constants = __webpack_require__(2250);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/ParseError.js\nvar ParseError = __webpack_require__(2326);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/metadata.js + 1 modules\nvar es6_metadata = __webpack_require__(2245);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js\nvar isViablePhoneNumber = __webpack_require__(2322);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js\nvar createExtensionPattern = __webpack_require__(2323);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js\n // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + Object(createExtensionPattern[\"a\" /* default */])() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nfunction extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n    i++;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js\nvar parseIncompletePhoneNumber = __webpack_require__(2422);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isPossibleNumber_.js\nvar isPossibleNumber_ = __webpack_require__(2320);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/RFC3966.js\nvar RFC3966 = __webpack_require__(2321);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/PhoneNumber.js + 3 modules\nvar PhoneNumber = __webpack_require__(2333);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js\nvar matchesEntirely = __webpack_require__(2256);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js\nvar extractCountryCallingCode = __webpack_require__(2316);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js\nvar extractNationalNumber = __webpack_require__(2317);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js\nvar getCountryByCallingCode = __webpack_require__(2319);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/parse_.js\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + constants[\"d\" /* PLUS_CHARS */] + constants[\"e\" /* VALID_DIGITS */] + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + constants[\"e\" /* VALID_DIGITS */] + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nfunction parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new es6_metadata[\"a\" /* default */](metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError[\"a\" /* default */]('INVALID_COUNTRY');\n    }\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n    formattedPhoneNumber = _parseInput.number,\n    ext = _parseInput.ext,\n    error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError[\"a\" /* default */]('TOO_SHORT');\n      }\n      throw new ParseError[\"a\" /* default */]('NOT_A_NUMBER');\n    }\n    return {};\n  }\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n    country = _parsePhoneNumber.country,\n    nationalNumber = _parsePhoneNumber.nationalNumber,\n    countryCallingCode = _parsePhoneNumber.countryCallingCode,\n    carrierCode = _parsePhoneNumber.carrierCode;\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError[\"a\" /* default */]('INVALID_COUNTRY');\n    }\n    return {};\n  } // Validate national (significant) number length.\n\n  if (!nationalNumber || nationalNumber.length < constants[\"c\" /* MIN_LENGTH_FOR_NSN */]) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError[\"a\" /* default */]('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n  if (nationalNumber.length > constants[\"b\" /* MAX_LENGTH_FOR_NSN */]) {\n    if (options.v2) {\n      throw new ParseError[\"a\" /* default */]('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n    return {};\n  }\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber[\"a\" /* default */](countryCallingCode, nationalNumber, metadata.metadata);\n    if (country) {\n      phoneNumber.country = country;\n    }\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? Object(matchesEntirely[\"a\" /* default */])(nationalNumber, metadata.nationalNumberPattern()) : false;\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && Object(isPossibleNumber_[\"b\" /* isPossibleNumber */])(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError[\"a\" /* default */]('TOO_LONG');\n    }\n    return;\n  }\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n  if (startsAt < 0) {\n    return;\n  }\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nfunction parseInput(text, v2, extract) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return Object(RFC3966[\"b\" /* parseRFC3966 */])(text);\n  }\n  var number = extractFormattedPhoneNumber(text, extract, v2); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n  if (!Object(isViablePhoneNumber[\"a\" /* default */])(number)) {\n    if (Object(isViablePhoneNumber[\"b\" /* isViablePhoneNumberStart */])(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n  var withExtensionStripped = extractExtension(number);\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n  if (ext) {\n    result.ext = ext;\n  }\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = Object(extractCountryCallingCode[\"a\" /* default */])(Object(parseIncompletePhoneNumber[\"a\" /* default */])(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n    countryCallingCode = _extractCountryCallin.countryCallingCode,\n    number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n  var country;\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n    countryCallingCode = defaultCallingCode || Object(es6_metadata[\"b\" /* getCountryCallingCode */])(defaultCountry, metadata.metadata);\n  } else return {};\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n  var _extractNationalNumbe = Object(extractNationalNumber[\"a\" /* default */])(Object(parseIncompletePhoneNumber[\"a\" /* default */])(number), metadata),\n    nationalNumber = _extractNationalNumbe.nationalNumber,\n    carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n  var exactCountry = Object(getCountryByCallingCode[\"a\" /* default */])(countryCallingCode, nationalNumber, metadata);\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/parsePhoneNumber_.js\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nfunction parsePhoneNumber_parsePhoneNumber(text, options, metadata) {\n  return parse(text, _objectSpread(_objectSpread({}, options), {}, {\n    v2: true\n  }), metadata);\n}\n\n/***/ }),\n\n/***/ 2338:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// UNUSED EXPORTS: createInput\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(59);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js\nvar parseIncompletePhoneNumber = __webpack_require__(2422);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/AsYouType.js + 7 modules\nvar AsYouType = __webpack_require__(2440);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\n\nfunction formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n  return new AsYouType[\"a\" /* default */](country, metadata).input(value);\n}\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/helpers/inputValuePrefix.js\nvar inputValuePrefix = __webpack_require__(2325);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/InputBasic.js\nvar _excluded = [\"value\", \"onChange\", \"country\", \"international\", \"withCountryCallingCode\", \"metadata\", \"inputComponent\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n\n\n\nfunction createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic` is the most basic implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's input but doesn't control the caret in the process:\r\n   * when erasing or inserting digits in the middle of a phone number\r\n   * the caret usually jumps to the end (this is the expected behavior).\r\n   * Why does `InputBasic` exist when there's `InputSmart`?\r\n   * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n   * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n      onChange = _ref.onChange,\n      country = _ref.country,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      metadata = _ref.metadata,\n      Input = _ref.inputComponent,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var prefix = Object(inputValuePrefix[\"a\" /* getInputValuePrefix */])({\n      country: country,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      metadata: metadata\n    });\n    var _onChange = Object(react[\"useCallback\"])(function (event) {\n      var newValue = Object(parseIncompletePhoneNumber[\"a\" /* default */])(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n    return /*#__PURE__*/react_default.a.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n  InputBasic = /*#__PURE__*/react_default.a.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: prop_types_default.a.string.isRequired,\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: prop_types_default.a.func.isRequired,\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: prop_types_default.a.string,\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: prop_types_default.a.bool,\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: prop_types_default.a.bool,\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: prop_types_default.a.object.isRequired,\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: prop_types_default.a.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\n/* harmony default export */ var modules_InputBasic = __webpack_exports__[\"a\"] = (createInput());\nfunction format(prefix, value, country, metadata) {\n  return Object(inputValuePrefix[\"b\" /* removeInputValuePrefix */])(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}\n\n/***/ }),\n\n/***/ 2422:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return parseIncompletePhoneNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return parsePhoneNumberCharacter; });\n/* harmony import */ var _helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2263);\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nfunction parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nfunction parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n    return '+';\n  } // Allow digits.\n\n  return Object(_helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_0__[/* parseDigit */ \"b\"])(character);\n}\n\n/***/ }),\n\n/***/ 2440:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ AsYouType_AsYouType; });\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/metadata.js + 1 modules\nvar es6_metadata = __webpack_require__(2245);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/PhoneNumber.js + 3 modules\nvar PhoneNumber = __webpack_require__(2333);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeState.js\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nvar AsYouTypeState = /*#__PURE__*/function () {\n  function AsYouTypeState(_ref) {\n    var onCountryChange = _ref.onCountryChange,\n      onCallingCodeChange = _ref.onCallingCodeChange;\n    _classCallCheck(this, AsYouTypeState);\n    this.onCountryChange = onCountryChange;\n    this.onCallingCodeChange = onCallingCodeChange;\n  }\n  _createClass(AsYouTypeState, [{\n    key: \"reset\",\n    value: function reset(defaultCountry, defaultCallingCode) {\n      this.international = false;\n      this.IDDPrefix = undefined;\n      this.missingPlus = undefined;\n      this.callingCode = undefined;\n      this.digits = '';\n      this.resetNationalSignificantNumber();\n      this.initCountryAndCallingCode(defaultCountry, defaultCallingCode);\n    }\n  }, {\n    key: \"resetNationalSignificantNumber\",\n    value: function resetNationalSignificantNumber() {\n      this.nationalSignificantNumber = this.getNationalDigits();\n      this.nationalSignificantNumberMatchesInput = true;\n      this.nationalPrefix = undefined;\n      this.carrierCode = undefined;\n      this.complexPrefixBeforeNationalSignificantNumber = undefined;\n    }\n  }, {\n    key: \"update\",\n    value: function update(properties) {\n      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        this[key] = properties[key];\n      }\n    }\n  }, {\n    key: \"initCountryAndCallingCode\",\n    value: function initCountryAndCallingCode(country, callingCode) {\n      this.setCountry(country);\n      this.setCallingCode(callingCode);\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country) {\n      this.country = country;\n      this.onCountryChange(country);\n    }\n  }, {\n    key: \"setCallingCode\",\n    value: function setCallingCode(callingCode) {\n      this.callingCode = callingCode;\n      this.onCallingCodeChange(callingCode, this.country);\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(country, callingCode) {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.initCountryAndCallingCode(country, callingCode);\n    }\n  }, {\n    key: \"appendDigits\",\n    value: function appendDigits(nextDigits) {\n      this.digits += nextDigits;\n    }\n  }, {\n    key: \"appendNationalSignificantNumberDigits\",\n    value: function appendNationalSignificantNumberDigits(nextDigits) {\n      this.nationalSignificantNumber += nextDigits;\n    }\n    /**\r\n     * Returns the part of `this.digits` that corresponds to the national number.\r\n     * Basically, all digits that have been input by the user, except for the\r\n     * international prefix and the country calling code part\r\n     * (if the number is an international one).\r\n     * @return {string}\r\n     */\n  }, {\n    key: \"getNationalDigits\",\n    value: function getNationalDigits() {\n      if (this.international) {\n        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));\n      }\n      return this.digits;\n    }\n  }, {\n    key: \"getDigitsWithoutInternationalPrefix\",\n    value: function getDigitsWithoutInternationalPrefix() {\n      if (this.international) {\n        if (this.IDDPrefix) {\n          return this.digits.slice(this.IDDPrefix.length);\n        }\n      }\n      return this.digits;\n    }\n  }]);\n  return AsYouTypeState;\n}();\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\nvar DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nfunction countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    if (character === symbol) {\n      count++;\n    }\n  }\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nfunction repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n  var result = '';\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n    times >>= 1;\n    string += string;\n  }\n  return result + string;\n}\nfunction cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nfunction closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n    cut_before++;\n  }\n  return template.slice(0, cut_before);\n}\nfunction stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n    i++;\n  }\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n  for (var _i = 0, _dangling_braces = dangling_braces; _i < _dangling_braces.length; _i++) {\n    var index = _dangling_braces[_i];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n  return cleared_string;\n}\nfunction populateTemplateWithDigits(template, position, digits) {\n  // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for `digits` it is safe.\n  // for (const digit of digits)\n  for (var _iterator2 = _createForOfIteratorHelperLoose(digits.split('')), _step2; !(_step2 = _iterator2()).done;) {\n    var digit = _step2.value;\n\n    // If there is room for more digits in current `template`,\n    // then set the next digit in the `template`,\n    // and return the formatted digits so far.\n    // If more digits are entered than the current format could handle.\n    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n      return;\n    }\n    position = template.search(DIGIT_PLACEHOLDER_MATCHER);\n    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n  }\n  return [template, position];\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js + 1 modules\nvar checkNumberLength = __webpack_require__(2271);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/parseDigits.js\nvar parseDigits = __webpack_require__(2263);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js\nvar formatNationalNumberUsingFormat = __webpack_require__(2281);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js\n\n\n\nfunction formatCompleteNumber(state, format, _ref) {\n  var metadata = _ref.metadata,\n    shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule,\n    getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;\n  var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n  if (matcher.test(state.nationalSignificantNumber)) {\n    return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\n      metadata: metadata,\n      shouldTryNationalPrefixFormattingRule: shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix\n    });\n  }\n}\nfunction canFormatCompleteNumber(nationalSignificantNumber, metadata) {\n  return Object(checkNumberLength[\"a\" /* default */])(nationalSignificantNumber, metadata) === 'IS_POSSIBLE';\n}\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {\n  var metadata = _ref2.metadata,\n    shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule,\n    getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix;\n  // `format` has already been checked for `nationalPrefix` requirement.\n  var nationalSignificantNumber = state.nationalSignificantNumber,\n    international = state.international,\n    nationalPrefix = state.nationalPrefix,\n    carrierCode = state.carrierCode; // Format the number with using `national_prefix_formatting_rule`.\n  // If the resulting formatted number is a valid formatted number, then return it.\n  //\n  // Google's AsYouType formatter is different in a way that it doesn't try\n  // to format using the \"national prefix formatting rule\", and instead it\n  // simply prepends a national prefix followed by a \" \" character.\n  // This code does that too, but as a fallback.\n  // The reason is that \"national prefix formatting rule\" may use parentheses,\n  // which wouldn't be included has it used the simpler Google's way.\n  //\n\n  if (shouldTryNationalPrefixFormattingRule(format)) {\n    var formattedNumber = formatNationalNumber(state, format, {\n      useNationalPrefixFormattingRule: true,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n      metadata: metadata\n    });\n    if (formattedNumber) {\n      return formattedNumber;\n    }\n  } // Format the number without using `national_prefix_formatting_rule`.\n\n  return formatNationalNumber(state, format, {\n    useNationalPrefixFormattingRule: false,\n    getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n    metadata: metadata\n  });\n}\nfunction formatNationalNumber(state, format, _ref3) {\n  var metadata = _ref3.metadata,\n    useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule,\n    getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;\n  var formattedNationalNumber = Object(formatNationalNumberUsingFormat[\"b\" /* default */])(state.nationalSignificantNumber, format, {\n    carrierCode: state.carrierCode,\n    useInternationalFormat: state.international,\n    withNationalPrefix: useNationalPrefixFormattingRule,\n    metadata: metadata\n  });\n  if (!useNationalPrefixFormattingRule) {\n    if (state.nationalPrefix) {\n      // If a national prefix was extracted, then just prepend it,\n      // followed by a \" \" character.\n      formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n    } else if (state.complexPrefixBeforeNationalSignificantNumber) {\n      formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + ' ' + formattedNationalNumber;\n    }\n  }\n  if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\n    return formattedNationalNumber;\n  }\n} // Check that the formatted phone number contains exactly\n// the same digits that have been input by the user.\n// For example, when \"0111523456789\" is input for `AR` country,\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\n// which means that the national part of `this.digits` isn't simply equal to\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\n//\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\n// being formatted via `metadata[country].national_prefix_transform_rule`.\n// For example, for `VI` country, it prepends `340` to the national number,\n// and if this check hasn't been implemented, then there would be a bug\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\n//\n// So, all these \"gotchas\" are filtered out.\n//\n// In the original Google's code, the comments say:\n// \"Check that we didn't remove nor add any extra digits when we matched\n// this formatting pattern. This usually happens after we entered the last\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n// formatted but AYTF should retain all the number entered and not change\n// in order to match a format (of same leading digits and length) display\n// in that way.\"\n// \"If it's the same (i.e entered number and format is same), then it's\n// safe to return this in formatted number as nothing is lost / added.\"\n// Otherwise, don't use this format.\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n//\n\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\n  return Object(parseDigits[\"a\" /* default */])(formattedNationalNumber) === state.getNationalDigits();\n}\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternParser.js\nfunction AsYouTypeFormatter_PatternParser_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction AsYouTypeFormatter_PatternParser_defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction AsYouTypeFormatter_PatternParser_createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) AsYouTypeFormatter_PatternParser_defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) AsYouTypeFormatter_PatternParser_defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nvar PatternParser = /*#__PURE__*/function () {\n  function PatternParser() {\n    AsYouTypeFormatter_PatternParser_classCallCheck(this, PatternParser);\n  }\n  AsYouTypeFormatter_PatternParser_createClass(PatternParser, [{\n    key: \"parse\",\n    value: function parse(pattern) {\n      this.context = [{\n        or: true,\n        instructions: []\n      }];\n      this.parsePattern(pattern);\n      if (this.context.length !== 1) {\n        throw new Error('Non-finalized contexts left when pattern parse ended');\n      }\n      var _this$context$ = this.context[0],\n        branches = _this$context$.branches,\n        instructions = _this$context$.instructions;\n      if (branches) {\n        return {\n          op: '|',\n          args: branches.concat([expandSingleElementArray(instructions)])\n        };\n      }\n      /* istanbul ignore if */\n\n      if (instructions.length === 0) {\n        throw new Error('Pattern is required');\n      }\n      if (instructions.length === 1) {\n        return instructions[0];\n      }\n      return instructions;\n    }\n  }, {\n    key: \"startContext\",\n    value: function startContext(context) {\n      this.context.push(context);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.context.pop();\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.context[this.context.length - 1];\n    }\n  }, {\n    key: \"parsePattern\",\n    value: function parsePattern(pattern) {\n      if (!pattern) {\n        throw new Error('Pattern is required');\n      }\n      var match = pattern.match(OPERATOR);\n      if (!match) {\n        if (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\n          throw new Error(\"Illegal characters found in a pattern: \".concat(pattern));\n        }\n        this.getContext().instructions = this.getContext().instructions.concat(pattern.split(''));\n        return;\n      }\n      var operator = match[1];\n      var before = pattern.slice(0, match.index);\n      var rightPart = pattern.slice(match.index + operator.length);\n      switch (operator) {\n        case '(?:':\n          if (before) {\n            this.parsePattern(before);\n          }\n          this.startContext({\n            or: true,\n            instructions: [],\n            branches: []\n          });\n          break;\n        case ')':\n          if (!this.getContext().or) {\n            throw new Error('\")\" operator must be preceded by \"(?:\" operator');\n          }\n          if (before) {\n            this.parsePattern(before);\n          }\n          if (this.getContext().instructions.length === 0) {\n            throw new Error('No instructions found after \"|\" operator in an \"or\" group');\n          }\n          var _this$getContext = this.getContext(),\n            branches = _this$getContext.branches;\n          branches.push(expandSingleElementArray(this.getContext().instructions));\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '|',\n            args: branches\n          });\n          break;\n        case '|':\n          if (!this.getContext().or) {\n            throw new Error('\"|\" operator can only be used inside \"or\" groups');\n          }\n          if (before) {\n            this.parsePattern(before);\n          } // The top-level is an implicit \"or\" group, if required.\n\n          if (!this.getContext().branches) {\n            // `branches` are not defined only for the root implicit \"or\" operator.\n\n            /* istanbul ignore else */\n            if (this.context.length === 1) {\n              this.getContext().branches = [];\n            } else {\n              throw new Error('\"branches\" not found in an \"or\" group context');\n            }\n          }\n          this.getContext().branches.push(expandSingleElementArray(this.getContext().instructions));\n          this.getContext().instructions = [];\n          break;\n        case '[':\n          if (before) {\n            this.parsePattern(before);\n          }\n          this.startContext({\n            oneOfSet: true\n          });\n          break;\n        case ']':\n          if (!this.getContext().oneOfSet) {\n            throw new Error('\"]\" operator must be preceded by \"[\" operator');\n          }\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '[]',\n            args: parseOneOfSet(before)\n          });\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error(\"Unknown operator: \".concat(operator));\n      }\n      if (rightPart) {\n        this.parsePattern(rightPart);\n      }\n    }\n  }]);\n  return PatternParser;\n}();\n\nfunction parseOneOfSet(pattern) {\n  var values = [];\n  var i = 0;\n  while (i < pattern.length) {\n    if (pattern[i] === '-') {\n      if (i === 0 || i === pattern.length - 1) {\n        throw new Error(\"Couldn't parse a one-of set pattern: \".concat(pattern));\n      }\n      var prevValue = pattern[i - 1].charCodeAt(0) + 1;\n      var nextValue = pattern[i + 1].charCodeAt(0) - 1;\n      var value = prevValue;\n      while (value <= nextValue) {\n        values.push(String.fromCharCode(value));\n        value++;\n      }\n    } else {\n      values.push(pattern[i]);\n    }\n    i++;\n  }\n  return values;\n}\nvar ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/;\nvar OPERATOR = new RegExp(\n// any of:\n'(' +\n// or operator\n'\\\\|' +\n// or\n'|' +\n// or group start\n'\\\\(\\\\?\\\\:' +\n// or\n'|' +\n// or group end\n'\\\\)' +\n// or\n'|' +\n// one-of set start\n'\\\\[' +\n// or\n'|' +\n// one-of set end\n'\\\\]' + ')');\nfunction expandSingleElementArray(array) {\n  if (array.length === 1) {\n    return array[0];\n  }\n  return array;\n}\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternMatcher.js\nfunction AsYouTypeFormatter_PatternMatcher_createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = AsYouTypeFormatter_PatternMatcher_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction AsYouTypeFormatter_PatternMatcher_unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return AsYouTypeFormatter_PatternMatcher_arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AsYouTypeFormatter_PatternMatcher_arrayLikeToArray(o, minLen);\n}\nfunction AsYouTypeFormatter_PatternMatcher_arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction AsYouTypeFormatter_PatternMatcher_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction AsYouTypeFormatter_PatternMatcher_defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction AsYouTypeFormatter_PatternMatcher_createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) AsYouTypeFormatter_PatternMatcher_defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) AsYouTypeFormatter_PatternMatcher_defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nvar AsYouTypeFormatter_PatternMatcher_PatternMatcher = /*#__PURE__*/function () {\n  function PatternMatcher(pattern) {\n    AsYouTypeFormatter_PatternMatcher_classCallCheck(this, PatternMatcher);\n    this.matchTree = new PatternParser().parse(pattern);\n  }\n  AsYouTypeFormatter_PatternMatcher_createClass(PatternMatcher, [{\n    key: \"match\",\n    value: function match(string) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        allowOverflow = _ref.allowOverflow;\n      if (!string) {\n        throw new Error('String is required');\n      }\n      var result = _match(string.split(''), this.matchTree, true);\n      if (result && result.match) {\n        delete result.matchedChars;\n      }\n      if (result && result.overflow) {\n        if (!allowOverflow) {\n          return;\n        }\n      }\n      return result;\n    }\n  }]);\n  return PatternMatcher;\n}();\n/**\r\n * Matches `characters` against a pattern compiled into a `tree`.\r\n * @param  {string[]} characters\r\n * @param  {Tree} tree — A pattern compiled into a `tree`. See the `*.d.ts` file for the description of the `tree` structure.\r\n * @param  {boolean} last — Whether it's the last (rightmost) subtree on its level of the match tree.\r\n * @return {object} See the `*.d.ts` file for the description of the result object.\r\n */\n\n\nfunction _match(characters, tree, last) {\n  // If `tree` is a string, then `tree` is a single character.\n  // That's because when a pattern is parsed, multi-character-string parts\n  // of a pattern are compiled into arrays of single characters.\n  // I still wrote this piece of code for a \"general\" hypothetical case\n  // when `tree` could be a string of several characters, even though\n  // such case is not possible with the current implementation.\n  if (typeof tree === 'string') {\n    var characterString = characters.join('');\n    if (tree.indexOf(characterString) === 0) {\n      // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore else */\n      if (characters.length === tree.length) {\n        return {\n          match: true,\n          matchedChars: characters\n        };\n      } // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore next */\n\n      return {\n        partialMatch: true // matchedChars: characters\n      };\n    }\n\n    if (characterString.indexOf(tree) === 0) {\n      if (last) {\n        // The `else` path is not possible because `tree` is always a single character.\n        // The `else` case for `characters.length > tree.length` would be\n        // `characters.length <= tree.length` which means `characters.length <= 1`.\n        // `characters` array can't be empty, so that means `characters === [tree]`,\n        // which would also mean `tree.indexOf(characterString) === 0` and that'd mean\n        // that the `if (tree.indexOf(characterString) === 0)` condition before this\n        // `if` condition would be entered, and returned from there, not reaching this code.\n\n        /* istanbul ignore else */\n        if (characters.length > tree.length) {\n          return {\n            overflow: true\n          };\n        }\n      }\n      return {\n        match: true,\n        matchedChars: characters.slice(0, tree.length)\n      };\n    }\n    return;\n  }\n  if (Array.isArray(tree)) {\n    var restCharacters = characters.slice();\n    var i = 0;\n    while (i < tree.length) {\n      var subtree = tree[i];\n      var result = _match(restCharacters, subtree, last && i === tree.length - 1);\n      if (!result) {\n        return;\n      } else if (result.overflow) {\n        return result;\n      } else if (result.match) {\n        // Continue with the next subtree with the rest of the characters.\n        restCharacters = restCharacters.slice(result.matchedChars.length);\n        if (restCharacters.length === 0) {\n          if (i === tree.length - 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          } else {\n            return {\n              partialMatch: true // matchedChars: characters\n            };\n          }\n        }\n      } else {\n        /* istanbul ignore else */\n        if (result.partialMatch) {\n          return {\n            partialMatch: true // matchedChars: characters\n          };\n        } else {\n          throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(result, null, 2)));\n        }\n      }\n      i++;\n    } // If `last` then overflow has already been checked\n    // by the last element of the `tree` array.\n\n    /* istanbul ignore if */\n\n    if (last) {\n      return {\n        overflow: true\n      };\n    }\n    return {\n      match: true,\n      matchedChars: characters.slice(0, characters.length - restCharacters.length)\n    };\n  }\n  switch (tree.op) {\n    case '|':\n      var partialMatch;\n      for (var _iterator = AsYouTypeFormatter_PatternMatcher_createForOfIteratorHelperLoose(tree.args), _step; !(_step = _iterator()).done;) {\n        var branch = _step.value;\n        var _result = _match(characters, branch, last);\n        if (_result) {\n          if (_result.overflow) {\n            return _result;\n          } else if (_result.match) {\n            return {\n              match: true,\n              matchedChars: _result.matchedChars\n            };\n          } else {\n            /* istanbul ignore else */\n            if (_result.partialMatch) {\n              partialMatch = true;\n            } else {\n              throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(_result, null, 2)));\n            }\n          }\n        }\n      }\n      if (partialMatch) {\n        return {\n          partialMatch: true // matchedChars: ...\n        };\n      } // Not even a partial match.\n\n      return;\n    case '[]':\n      for (var _iterator2 = AsYouTypeFormatter_PatternMatcher_createForOfIteratorHelperLoose(tree.args), _step2; !(_step2 = _iterator2()).done;) {\n        var _char = _step2.value;\n        if (characters[0] === _char) {\n          if (characters.length === 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          }\n          if (last) {\n            return {\n              overflow: true\n            };\n          }\n          return {\n            match: true,\n            matchedChars: [_char]\n          };\n        }\n      } // No character matches.\n\n      return;\n\n    /* istanbul ignore next */\n\n    default:\n      throw new Error(\"Unsupported instruction tree: \".concat(tree));\n  }\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/constants.js\nvar constants = __webpack_require__(2250);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js\nvar applyInternationalSeparatorStyle = __webpack_require__(2315);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js\nfunction AsYouTypeFormatter_createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = AsYouTypeFormatter_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction AsYouTypeFormatter_unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return AsYouTypeFormatter_arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AsYouTypeFormatter_arrayLikeToArray(o, minLen);\n}\nfunction AsYouTypeFormatter_arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction AsYouTypeFormatter_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction AsYouTypeFormatter_defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction AsYouTypeFormatter_createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) AsYouTypeFormatter_defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) AsYouTypeFormatter_defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\n\n\n\n\n\n\n // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A regular expression that is used to determine if a `format` is\n// suitable to be used in the \"as you type formatter\".\n// A `format` is suitable when the resulting formatted number has\n// the same digits as the user has entered.\n//\n// In the simplest case, that would mean that the format\n// doesn't add any additional digits when formatting a number.\n// Google says that it also shouldn't add \"star\" (`*`) characters,\n// like it does in some Israeli formats.\n// Such basic format would only contain \"valid punctuation\"\n// and \"captured group\" identifiers ($1, $2, etc).\n//\n// An example of a format that adds additional digits:\n//\n// Country: `AR` (Argentina).\n// Format:\n// {\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n//    \"leading_digits_patterns\": [\"91\"],\n//    \"national_prefix_formatting_rule\": \"0$1\",\n//    \"format\": \"$2 15-$3-$4\",\n//    \"international_format\": \"$1 $2 $3-$4\"\n// }\n//\n// In the format above, the `format` adds `15` to the digits when formatting a number.\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\n// has previously removed `15` from a national number, so re-adding `15` in `format`\n// doesn't actually result in any extra digits added to user's input.\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\n//\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\n// `libphonenumber` code.\n//\n\nvar NON_ALTERING_FORMAT_REG_EXP = new RegExp('[' + constants[\"f\" /* VALID_PUNCTUATION */] + ']*' +\n// Google developers say:\n// \"We require that the first matching group is present in the\n//  output pattern to ensure no data is lost while formatting.\"\n'\\\\$1' + '[' + constants[\"f\" /* VALID_PUNCTUATION */] + ']*' + '(\\\\$\\\\d[' + constants[\"f\" /* VALID_PUNCTUATION */] + ']*)*' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\nvar AsYouTypeFormatter_AsYouTypeFormatter = /*#__PURE__*/function () {\n  function AsYouTypeFormatter(_ref) {\n    var state = _ref.state,\n      metadata = _ref.metadata;\n    AsYouTypeFormatter_classCallCheck(this, AsYouTypeFormatter);\n    this.metadata = metadata;\n    this.resetFormat();\n  }\n  AsYouTypeFormatter_createClass(AsYouTypeFormatter, [{\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.nationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan, state) {\n      this.resetFormat();\n      if (numberingPlan) {\n        this.isNANP = numberingPlan.callingCode() === '1';\n        this.matchingFormats = numberingPlan.formats();\n        if (state.nationalSignificantNumber) {\n          this.narrowDownMatchingFormats(state);\n        }\n      } else {\n        this.isNANP = undefined;\n        this.matchingFormats = [];\n      }\n    }\n    /**\r\n     * Formats an updated phone number.\r\n     * @param  {string} nextDigits — Additional phone number digits.\r\n     * @param  {object} state — `AsYouType` state.\r\n     * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n     */\n  }, {\n    key: \"format\",\n    value: function format(nextDigits, state) {\n      var _this = this;\n\n      // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNationalNumberWithNextDigits()`,\n      // which formats based on the chosen formatting pattern.\n      //\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`, so this library just follows it.\n      // Google's `libphonenumber` code doesn't explain in detail why does it\n      // attempt to format digits as a complete phone number\n      // instead of just going with a previoulsy (or newly) chosen `format`:\n      //\n      // \"Checks to see if there is an exact pattern match for these digits.\n      //  If so, we should use this instead of any other formatting template\n      //  whose leadingDigitsPattern also matches the input.\"\n      //\n      if (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\n        for (var _iterator = AsYouTypeFormatter_createForOfIteratorHelperLoose(this.matchingFormats), _step; !(_step = _iterator()).done;) {\n          var format = _step.value;\n          var formattedCompleteNumber = formatCompleteNumber(state, format, {\n            metadata: this.metadata,\n            shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format) {\n              return _this.shouldTryNationalPrefixFormattingRule(format, {\n                international: state.international,\n                nationalPrefix: state.nationalPrefix\n              });\n            },\n            getSeparatorAfterNationalPrefix: function getSeparatorAfterNationalPrefix(format) {\n              return _this.getSeparatorAfterNationalPrefix(format);\n            }\n          });\n          if (formattedCompleteNumber) {\n            this.resetFormat();\n            this.chosenFormat = format;\n            this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state);\n            this.populatedNationalNumberTemplate = formattedCompleteNumber; // With a new formatting template, the matched position\n            // using the old template needs to be reset.\n\n            this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER);\n            return formattedCompleteNumber;\n          }\n        }\n      } // Format the digits as a partial (incomplete) phone number\n      // using the previously chosen formatting pattern (or a newly chosen one).\n\n      return this.formatNationalNumberWithNextDigits(nextDigits, state);\n    } // Formats the next phone number digits.\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits, state) {\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat(state);\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If it can format the next (current) digits\n          // using the previously chosen phone number format\n          // then return the updated formatted number.\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then re-format the national phone number part\n          // using the newly selected format.\n          return this.formatNextNationalNumberDigits(state.getNationalDigits());\n        }\n      }\n    }\n  }, {\n    key: \"narrowDownMatchingFormats\",\n    value: function narrowDownMatchingFormats(_ref2) {\n      var _this2 = this;\n      var nationalSignificantNumber = _ref2.nationalSignificantNumber,\n        nationalPrefix = _ref2.nationalPrefix,\n        international = _ref2.international;\n      var leadingDigits = nationalSignificantNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        return _this2.formatSuits(format, international, nationalPrefix) && _this2.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"formatSuits\",\n    value: function formatSuits(format, international, nationalPrefix) {\n      // When a prefix before a national (significant) number is\n      // simply a national prefix, then it's parsed as `this.nationalPrefix`.\n      // In more complex cases, a prefix before national (significant) number\n      // could include a national prefix as well as some \"capturing groups\",\n      // and in that case there's no info whether a national prefix has been parsed.\n      // If national prefix is not used when formatting a phone number\n      // using this format, but a national prefix has been entered by the user,\n      // and was extracted, then discard such phone number format.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\n      if (nationalPrefix && !format.usesNationalPrefix() &&\n      // !format.domesticCarrierCodeFormattingRule() &&\n      !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n        return false;\n      } // If national prefix is mandatory for this phone number format\n      // and there're no guarantees that a national prefix is present in user input\n      // then discard this phone number format as not suitable.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\n\n      if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"formatMatches\",\n    value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\n      var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n      // leading digits pattern then it fits.\n      // The test case could be found by searching for \"leadingDigitsPatternsCount === 0\".\n\n      if (leadingDigitsPatternsCount === 0) {\n        return true;\n      } // Start narrowing down the list of possible formats based on the leading digits.\n      // (only previously matched formats take part in the narrowing down process)\n      // `leading_digits_patterns` start with 3 digits min\n      // and then go up from there one digit at a time.\n\n      leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n      var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Google imposes a requirement on the leading digits\n      // to be minimum 3 digits long in order to be eligible\n      // for checking those with a leading digits pattern.\n      //\n      // Since `leading_digits_patterns` start with 3 digits min,\n      // Google's original `libphonenumber` library only starts\n      // excluding any non-matching formats only when the\n      // national number entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives.\n      //\n      // For example, when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n      //\n      // Also, `leading_digits_patterns` doesn't always correspond to a single\n      // digits count. For example, `60|8` pattern would already match `8`\n      // but the `60` part would require having at least two leading digits,\n      // so the whole pattern would require inputting two digits first in order to\n      // decide on whether it matches the input, even when the input is \"80\".\n      //\n      // This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\n      // even when there's only 1 or 2 digits of the national (significant) number.\n      // To do that, it uses a non-strict pattern matcher written specifically for that.\n      //\n\n      if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n        // Before leading digits < 3 matching was implemented:\n        // return true\n        //\n        // After leading digits < 3 matching was implemented:\n        try {\n          return new AsYouTypeFormatter_PatternMatcher_PatternMatcher(leadingDigitsPattern).match(leadingDigits, {\n            allowOverflow: true\n          }) !== undefined;\n        } catch (error) /* istanbul ignore next */\n        {\n          // There's a slight possibility that there could be some undiscovered bug\n          // in the pattern matcher code. Since the \"leading digits < 3 matching\"\n          // feature is not \"essential\" for operation, it can fall back to the old way\n          // in case of any issues rather than halting the application's execution.\n          console.error(error);\n          return true;\n        }\n      } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\n      // available then use the usual regular expression matching.\n      //\n      // The whole pattern is wrapped in round brackets (`()`) because\n      // the pattern can use \"or\" operator (`|`) at the top level of the pattern.\n      //\n\n      return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format, international) {\n      return international ? format.internationalFormat() : format.format();\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat(state) {\n      var _this3 = this;\n      var _loop = function _loop() {\n        var format = _step2.value;\n\n        // If this format is currently being used\n        // and is still suitable, then stick to it.\n        if (_this3.chosenFormat === format) {\n          return \"break\";\n        } // Sometimes, a formatting rule inserts additional digits in a phone number,\n        // and \"as you type\" formatter can't do that: it should only use the digits\n        // that the user has input.\n        //\n        // For example, in Argentina, there's a format for mobile phone numbers:\n        //\n        // {\n        //    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n        //    \"leading_digits_patterns\": [\"91\"],\n        //    \"national_prefix_formatting_rule\": \"0$1\",\n        //    \"format\": \"$2 15-$3-$4\",\n        //    \"international_format\": \"$1 $2 $3-$4\"\n        // }\n        //\n        // In that format, `international_format` is used instead of `format`\n        // because `format` inserts `15` in the formatted number,\n        // and `AsYouType` formatter should only use the digits\n        // the user has actually input, without adding any extra digits.\n        // In this case, it wouldn't make a difference, because the `15`\n        // is first stripped when applying `national_prefix_for_parsing`\n        // and then re-added when using `format`, so in reality it doesn't\n        // add any new digits to the number, but to detect that, the code\n        // would have to be more complex: it would have to try formatting\n        // the digits using the format and then see if any digits have\n        // actually been added or removed, and then, every time a new digit\n        // is input, it should re-check whether the chosen format doesn't\n        // alter the digits.\n        //\n        // Google's code doesn't go that far, and so does this library:\n        // it simply requires that a `format` doesn't add any additonal\n        // digits to user's input.\n        //\n        // Also, people in general should move from inputting phone numbers\n        // in national format (possibly with national prefixes)\n        // and use international phone number format instead:\n        // it's a logical thing in the modern age of mobile phones,\n        // globalization and the internet.\n        //\n\n        /* istanbul ignore if */\n\n        if (!NON_ALTERING_FORMAT_REG_EXP.test(_this3.getFormatFormat(format, state.international))) {\n          return \"continue\";\n        }\n        if (!_this3.createTemplateForFormat(format, state)) {\n          // Remove the format if it can't generate a template.\n          _this3.matchingFormats = _this3.matchingFormats.filter(function (_) {\n            return _ !== format;\n          });\n          return \"continue\";\n        }\n        _this3.chosenFormat = format;\n        return \"break\";\n      };\n\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      //\n      // For some weird reason, `istanbul` says \"else path not taken\"\n      // for the `for of` line below. Supposedly that means that\n      // the loop doesn't ever go over the last element in the list.\n      // That's true because there always is `this.chosenFormat`\n      // when `this.matchingFormats` is non-empty.\n      // And, for some weird reason, it doesn't think that the case\n      // with empty `this.matchingFormats` qualifies for a valid \"else\" path.\n      // So simply muting this `istanbul` warning.\n      // It doesn't skip the contents of the `for of` loop,\n      // it just skips the `for of` line.\n      //\n\n      /* istanbul ignore next */\n      for (var _iterator2 = AsYouTypeFormatter_createForOfIteratorHelperLoose(this.matchingFormats.slice()), _step2; !(_step2 = _iterator2()).done;) {\n        var _ret = _loop();\n        if (_ret === \"break\") break;\n        if (_ret === \"continue\") continue;\n      }\n      if (!this.chosenFormat) {\n        // No format matches the national (significant) phone number.\n        this.resetFormat();\n      }\n      return this.chosenFormat;\n    }\n  }, {\n    key: \"createTemplateForFormat\",\n    value: function createTemplateForFormat(format, state) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n      var template = this.getTemplateForFormat(format, state); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (template) {\n        this.setNationalNumberTemplate(template, state);\n        return true;\n      }\n    }\n  }, {\n    key: \"getSeparatorAfterNationalPrefix\",\n    value: function getSeparatorAfterNationalPrefix(format) {\n      // `US` metadata doesn't have a `national_prefix_formatting_rule`,\n      // so the `if` condition below doesn't apply to `US`,\n      // but in reality there shoudl be a separator\n      // between a national prefix and a national (significant) number.\n      // So `US` national prefix separator is a \"special\" \"hardcoded\" case.\n      if (this.isNANP) {\n        return ' ';\n      } // If a `format` has a `national_prefix_formatting_rule`\n      // and that rule has a separator after a national prefix,\n      // then it means that there should be a separator\n      // between a national prefix and a national (significant) number.\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      } // At this point, there seems to be no clear evidence that\n      // there should be a separator between a national prefix\n      // and a national (significant) number. So don't insert one.\n\n      return '';\n    }\n  }, {\n    key: \"getInternationalPrefixBeforeCountryCallingCode\",\n    value: function getInternationalPrefixBeforeCountryCallingCode(_ref3, options) {\n      var IDDPrefix = _ref3.IDDPrefix,\n        missingPlus = _ref3.missingPlus;\n      if (IDDPrefix) {\n        return options && options.spacing === false ? IDDPrefix : IDDPrefix + ' ';\n      }\n      if (missingPlus) {\n        return '';\n      }\n      return '+';\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(state) {\n      if (!this.template) {\n        return;\n      } // `this.template` holds the template for a \"complete\" phone number.\n      // The currently entered phone number is most likely not \"complete\",\n      // so trim all non-populated digits.\n\n      var index = -1;\n      var i = 0;\n      var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {\n        spacing: false\n      }) : '';\n      while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }, {\n    key: \"setNationalNumberTemplate\",\n    value: function setNationalNumberTemplate(template, state) {\n      this.nationalNumberTemplate = template;\n      this.populatedNationalNumberTemplate = template; // With a new formatting template, the matched position\n      // using the old template needs to be reset.\n\n      this.populatedNationalNumberTemplatePosition = -1; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (state.international) {\n        this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, state.callingCode.length) + ' ' + template;\n      } else {\n        this.template = template;\n      }\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n  }, {\n    key: \"getTemplateForFormat\",\n    value: function getTemplateForFormat(format, _ref4) {\n      var nationalSignificantNumber = _ref4.nationalSignificantNumber,\n        international = _ref4.international,\n        nationalPrefix = _ref4.nationalPrefix,\n        complexPrefixBeforeNationalSignificantNumber = _ref4.complexPrefixBeforeNationalSignificantNumber;\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (nationalSignificantNumber.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalSignificantNumber : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalSignificantNumber`\n      // is used instead of `digits`.\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n      var numberFormat = this.getFormatFormat(format, international);\n      var nationalPrefixIncludedInTemplate; // If a user did input a national prefix (and that's guaranteed),\n      // and if a `format` does have a national prefix formatting rule,\n      // then see if that national prefix formatting rule\n      // prepends exactly the same national prefix the user has input.\n      // If that's the case, then use the `format` with the national prefix formatting rule.\n      // Otherwise, use  the `format` without the national prefix formatting rule,\n      // and prepend a national prefix manually to it.\n\n      if (this.shouldTryNationalPrefixFormattingRule(format, {\n        international: international,\n        nationalPrefix: nationalPrefix\n      })) {\n        var numberFormatWithNationalPrefix = numberFormat.replace(formatNationalNumberUsingFormat[\"a\" /* FIRST_GROUP_PATTERN */], format.nationalPrefixFormattingRule()); // If `national_prefix_formatting_rule` of a `format` simply prepends\n        // national prefix at the start of a national (significant) number,\n        // then such formatting can be used with `AsYouType` formatter.\n        // There seems to be no `else` case: everywhere in metadata,\n        // national prefix formatting rule is national prefix + $1,\n        // or `($1)`, in which case such format isn't even considered\n        // when the user has input a national prefix.\n\n        /* istanbul ignore else */\n\n        if (Object(parseDigits[\"a\" /* default */])(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + Object(parseDigits[\"a\" /* default */])('$1')) {\n          numberFormat = numberFormatWithNationalPrefix;\n          nationalPrefixIncludedInTemplate = true; // Replace all digits of the national prefix in the formatting template\n          // with `DIGIT_PLACEHOLDER`s.\n\n          if (nationalPrefix) {\n            var i = nationalPrefix.length;\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER); // If a prefix of a national (significant) number is not as simple\n      // as just a basic national prefix, then just prepend such prefix\n      // before the national (significant) number, optionally spacing\n      // the two with a whitespace.\n\n      if (!nationalPrefixIncludedInTemplate) {\n        if (complexPrefixBeforeNationalSignificantNumber) {\n          // Prepend the prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + ' ' + template;\n        } else if (nationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n      if (international) {\n        template = Object(applyInternationalSeparatorStyle[\"a\" /* default */])(template);\n      }\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      var result = populateTemplateWithDigits(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);\n      if (!result) {\n        // Reset the format.\n        this.resetFormat();\n        return;\n      }\n      this.populatedNationalNumberTemplate = result[0];\n      this.populatedNationalNumberTemplatePosition = result[1]; // Return the formatted phone number so far.\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }, {\n    key: \"shouldTryNationalPrefixFormattingRule\",\n    value: function shouldTryNationalPrefixFormattingRule(format, _ref5) {\n      var international = _ref5.international,\n        nationalPrefix = _ref5.nationalPrefix;\n      if (format.nationalPrefixFormattingRule()) {\n        // In some countries, `national_prefix_formatting_rule` is `($1)`,\n        // so it applies even if the user hasn't input a national prefix.\n        // `format.usesNationalPrefix()` detects such cases.\n        var usesNationalPrefix = format.usesNationalPrefix();\n        if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {\n          return true;\n        }\n      }\n    }\n  }]);\n  return AsYouTypeFormatter;\n}();\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js\nvar helpers_extractCountryCallingCode = __webpack_require__(2316);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js\nvar extractCountryCallingCodeFromInternationalNumberWithoutPlusSign = __webpack_require__(2283);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js\nvar extractNationalNumberFromPossiblyIncompleteNumber = __webpack_require__(2318);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js\nvar stripIddPrefix = __webpack_require__(2282);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeParser.js\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || AsYouTypeParser_unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction AsYouTypeParser_unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return AsYouTypeParser_arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AsYouTypeParser_arrayLikeToArray(o, minLen);\n}\nfunction AsYouTypeParser_arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction AsYouTypeParser_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction AsYouTypeParser_defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction AsYouTypeParser_createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) AsYouTypeParser_defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) AsYouTypeParser_defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\n\n\n\n\n\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART = '[' + constants[\"f\" /* VALID_PUNCTUATION */] + constants[\"e\" /* VALID_DIGITS */] + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i');\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '(?:' + '[' + constants[\"d\" /* PLUS_CHARS */] + ']' + '[' + constants[\"f\" /* VALID_PUNCTUATION */] + constants[\"e\" /* VALID_DIGITS */] + ']*' + '|' + '[' + constants[\"f\" /* VALID_PUNCTUATION */] + constants[\"e\" /* VALID_DIGITS */] + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + constants[\"f\" /* VALID_PUNCTUATION */] + constants[\"e\" /* VALID_DIGITS */] + ']+' + '.*' + '$'); // Tests whether `national_prefix_for_parsing` could match\n// different national prefixes.\n// Matches anything that's not a digit or a square bracket.\n\nvar COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/;\nvar AsYouTypeParser_AsYouTypeParser = /*#__PURE__*/function () {\n  function AsYouTypeParser(_ref) {\n    var defaultCountry = _ref.defaultCountry,\n      defaultCallingCode = _ref.defaultCallingCode,\n      metadata = _ref.metadata,\n      onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;\n    AsYouTypeParser_classCallCheck(this, AsYouTypeParser);\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.metadata = metadata;\n    this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;\n  }\n  AsYouTypeParser_createClass(AsYouTypeParser, [{\n    key: \"input\",\n    value: function input(text, state) {\n      var _extractFormattedDigi = extractFormattedDigitsAndPlus(text),\n        _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2),\n        formattedDigits = _extractFormattedDigi2[0],\n        hasPlus = _extractFormattedDigi2[1];\n      var digits = Object(parseDigits[\"a\" /* default */])(formattedDigits); // Checks for a special case: just a leading `+` has been entered.\n\n      var justLeadingPlus;\n      if (hasPlus) {\n        if (!state.digits) {\n          state.startInternationalNumber();\n          if (!digits) {\n            justLeadingPlus = true;\n          }\n        }\n      }\n      if (digits) {\n        this.inputDigits(digits, state);\n      }\n      return {\n        digits: digits,\n        justLeadingPlus: justLeadingPlus\n      };\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits, state) {\n      var digits = state.digits;\n      var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3; // Append phone number digits.\n\n      state.appendDigits(nextDigits); // Attempt to extract IDD prefix:\n      // Some users input their phone number in international format,\n      // but in an \"out-of-country\" dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers as soon as there're at least 3 digits.\n      // Google's library attempts to extract IDD prefix at 3 digits,\n      // so this library just copies that behavior.\n      // I guess that's because the most commot IDD prefixes are\n      // `00` (Europe) and `011` (US).\n      // There exist really long IDD prefixes too:\n      // for example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      // An IDD prefix is extracted here, and then every time when\n      // there's a new digit and the number couldn't be formatted.\n\n      if (hasReceivedThreeLeadingDigits) {\n        this.extractIddPrefix(state);\n      }\n      if (this.isWaitingForCountryCallingCode(state)) {\n        if (!this.extractCountryCallingCode(state)) {\n          return;\n        }\n      } else {\n        state.appendNationalSignificantNumberDigits(nextDigits);\n      } // If a phone number is being input in international format,\n      // then it's not valid for it to have a national prefix.\n      // Still, some people incorrectly input such numbers with a national prefix.\n      // In such cases, only attempt to strip a national prefix if the number becomes too long.\n      // (but that is done later, not here)\n\n      if (!state.international) {\n        if (!this.hasExtractedNationalSignificantNumber) {\n          this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n            return state.update(stateUpdate);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"isWaitingForCountryCallingCode\",\n    value: function isWaitingForCountryCallingCode(_ref2) {\n      var international = _ref2.international,\n        callingCode = _ref2.callingCode;\n      return international && !callingCode;\n    } // Extracts a country calling code from a number\n    // being entered in internatonal format.\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode(state) {\n      var _extractCountryCallin = Object(helpers_extractCountryCallingCode[\"a\" /* default */])('+' + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n        countryCallingCode = _extractCountryCallin.countryCallingCode,\n        number = _extractCountryCallin.number;\n      if (countryCallingCode) {\n        state.setCallingCode(countryCallingCode);\n        state.update({\n          nationalSignificantNumber: number\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan) {\n      if (numberingPlan) {\n        this.hasSelectedNumberingPlan = true;\n        var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);\n      } else {\n        this.hasSelectedNumberingPlan = undefined;\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = undefined;\n      }\n    }\n    /**\r\n     * Extracts a national (significant) number from user input.\r\n     * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n     * and doesn't apply `national_prefix_transform_rule` after that.\r\n     * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n     * @return {boolean} [extracted]\r\n     */\n  }, {\n    key: \"extractNationalSignificantNumber\",\n    value: function extractNationalSignificantNumber(nationalDigits, setState) {\n      if (!this.hasSelectedNumberingPlan) {\n        return;\n      }\n      var _extractNationalNumbe = Object(extractNationalNumberFromPossiblyIncompleteNumber[\"a\" /* default */])(nationalDigits, this.metadata),\n        nationalPrefix = _extractNationalNumbe.nationalPrefix,\n        nationalNumber = _extractNationalNumbe.nationalNumber,\n        carrierCode = _extractNationalNumbe.carrierCode;\n      if (nationalNumber === nationalDigits) {\n        return;\n      }\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n    /**\r\n     * In Google's code this function is called \"attempt to extract longer NDD\".\r\n     * \"Some national prefixes are a substring of others\", they say.\r\n     * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n     */\n  }, {\n    key: \"extractAnotherNationalSignificantNumber\",\n    value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\n      if (!this.hasExtractedNationalSignificantNumber) {\n        return this.extractNationalSignificantNumber(nationalDigits, setState);\n      }\n      if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\n        return;\n      }\n      var _extractNationalNumbe2 = Object(extractNationalNumberFromPossiblyIncompleteNumber[\"a\" /* default */])(nationalDigits, this.metadata),\n        nationalPrefix = _extractNationalNumbe2.nationalPrefix,\n        nationalNumber = _extractNationalNumbe2.nationalNumber,\n        carrierCode = _extractNationalNumbe2.carrierCode; // If a national prefix has been extracted previously,\n      // then it's always extracted as additional digits are added.\n      // That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\n      // doesn't do anything different from what it currently does.\n      // So, just in case, here's this check, though it doesn't occur.\n\n      /* istanbul ignore if */\n\n      if (nationalNumber === prevNationalSignificantNumber) {\n        return;\n      }\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n  }, {\n    key: \"onExtractedNationalNumber\",\n    value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {\n      var complexPrefixBeforeNationalSignificantNumber;\n      var nationalSignificantNumberMatchesInput; // This check also works with empty `this.nationalSignificantNumber`.\n\n      var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber); // If the extracted national (significant) number is the\n      // last substring of the `digits`, then it means that it hasn't been altered:\n      // no digits have been removed from the national (significant) number\n      // while applying `national_prefix_transform_rule`.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n\n      if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\n        nationalSignificantNumberMatchesInput = true; // If a prefix of a national (significant) number is not as simple\n        // as just a basic national prefix, then such prefix is stored in\n        // `this.complexPrefixBeforeNationalSignificantNumber` property and will be\n        // prepended \"as is\" to the national (significant) number to produce\n        // a formatted result.\n\n        var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex); // `prefixBeforeNationalNumber` is always non-empty,\n        // because `onExtractedNationalNumber()` isn't called\n        // when a national (significant) number hasn't been actually \"extracted\":\n        // when a national (significant) number is equal to the national part of `digits`,\n        // then `onExtractedNationalNumber()` doesn't get called.\n\n        if (prefixBeforeNationalNumber !== nationalPrefix) {\n          complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;\n        }\n      }\n      setState({\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode,\n        nationalSignificantNumber: nationalSignificantNumber,\n        nationalSignificantNumberMatchesInput: nationalSignificantNumberMatchesInput,\n        complexPrefixBeforeNationalSignificantNumber: complexPrefixBeforeNationalSignificantNumber\n      }); // `onExtractedNationalNumber()` is only called when\n      // the national (significant) number actually did change.\n\n      this.hasExtractedNationalSignificantNumber = true;\n      this.onNationalSignificantNumberChange();\n    }\n  }, {\n    key: \"reExtractNationalSignificantNumber\",\n    value: function reExtractNationalSignificantNumber(state) {\n      // Attempt to extract a national prefix.\n      //\n      // Some people incorrectly input national prefix\n      // in an international phone number.\n      // For example, some people write British phone numbers as `+44(0)...`.\n      //\n      // Also, in some rare cases, it is valid for a national prefix\n      // to be a part of an international phone number.\n      // For example, mobile phone numbers in Mexico are supposed to be\n      // dialled internationally using a `1` national prefix,\n      // so the national prefix will be part of an international number.\n      //\n      // Quote from:\n      // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n      //\n      // \"Dialing a Mexican cell phone from abroad\n      // When you are calling a cell phone number in Mexico from outside Mexico,\n      // it’s necessary to dial an additional “1” after Mexico’s country code\n      // (which is “52”) and before the area code.\n      // You also ignore the 045, and simply dial the area code and the\n      // cell phone’s number.\n      //\n      // If you don’t add the “1”, you’ll receive a recorded announcement\n      // asking you to redial using it.\n      //\n      // For example, if you are calling from the USA to a cell phone\n      // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n      // (Note that this is different to calling a land line in Mexico City\n      // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n      //\n      // Google's demo output:\n      // https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\n      //\n      if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, function (stateUpdate) {\n        return state.update(stateUpdate);\n      })) {\n        return true;\n      } // If no format matches the phone number, then it could be\n      // \"a really long IDD\" (quote from a comment in Google's library).\n      // An IDD prefix is first extracted when the user has entered at least 3 digits,\n      // and then here — every time when there's a new digit and the number\n      // couldn't be formatted.\n      // For example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      //\n      // Could also check `!hasReceivedThreeLeadingDigits` here\n      // to filter out the case when this check duplicates the one\n      // already performed when there're 3 leading digits,\n      // but it's not a big deal, and in most cases there\n      // will be a suitable `format` when there're 3 leading digits.\n      //\n\n      if (this.extractIddPrefix(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      } // Google's AsYouType formatter supports sort of an \"autocorrection\" feature\n      // when it \"autocorrects\" numbers that have been input for a country\n      // with that country's calling code.\n      // Such \"autocorrection\" feature looks weird, but different people have been requesting it:\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      // https://github.com/catamphetamine/libphonenumber-js/issues/375\n      // https://github.com/catamphetamine/libphonenumber-js/issues/316\n\n      if (this.fixMissingPlus(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"extractIddPrefix\",\n    value: function extractIddPrefix(state) {\n      // An IDD prefix can't be present in a number written with a `+`.\n      // Also, don't re-extract an IDD prefix if has already been extracted.\n      var international = state.international,\n        IDDPrefix = state.IDDPrefix,\n        digits = state.digits,\n        nationalSignificantNumber = state.nationalSignificantNumber;\n      if (international || IDDPrefix) {\n        return;\n      } // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n\n      var numberWithoutIDD = Object(stripIddPrefix[\"a\" /* default */])(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n      if (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\n        // If an IDD prefix was stripped then convert the IDD-prefixed number\n        // to international number for subsequent parsing.\n        state.update({\n          IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\n        });\n        this.startInternationalNumber(state, {\n          country: undefined,\n          callingCode: undefined\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"fixMissingPlus\",\n    value: function fixMissingPlus(state) {\n      if (!state.international) {\n        var _extractCountryCallin2 = Object(extractCountryCallingCodeFromInternationalNumberWithoutPlusSign[\"a\" /* default */])(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          newCallingCode = _extractCountryCallin2.countryCallingCode,\n          number = _extractCountryCallin2.number;\n        if (newCallingCode) {\n          state.update({\n            missingPlus: true\n          });\n          this.startInternationalNumber(state, {\n            country: state.country,\n            callingCode: newCallingCode\n          });\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(state, _ref3) {\n      var country = _ref3.country,\n        callingCode = _ref3.callingCode;\n      state.startInternationalNumber(country, callingCode); // If a national (significant) number has been extracted before, reset it.\n\n      if (state.nationalSignificantNumber) {\n        state.resetNationalSignificantNumber();\n        this.onNationalSignificantNumberChange();\n        this.hasExtractedNationalSignificantNumber = undefined;\n      }\n    }\n  }, {\n    key: \"extractCallingCodeAndNationalSignificantNumber\",\n    value: function extractCallingCodeAndNationalSignificantNumber(state) {\n      if (this.extractCountryCallingCode(state)) {\n        // `this.extractCallingCode()` is currently called when the number\n        // couldn't be formatted during the standard procedure.\n        // Normally, the national prefix would be re-extracted\n        // for an international number if such number couldn't be formatted,\n        // but since it's already not able to be formatted,\n        // there won't be yet another retry, so also extract national prefix here.\n        this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {\n          return state.update(stateUpdate);\n        });\n      }\n    }\n  }]);\n  return AsYouTypeParser;\n}();\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART);\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n  return text;\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\nfunction _extractFormattedDigitsAndPlus(text) {\n  // Extract a formatted phone number part from text.\n  var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n  if (extractedNumber[0] === '+') {\n    return [extractedNumber.slice('+'.length), true];\n  }\n  return [extractedNumber];\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\nfunction extractFormattedDigitsAndPlus(text) {\n  var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text),\n    _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2),\n    formattedDigits = _extractFormattedDigi4[0],\n    hasPlus = _extractFormattedDigi4[1]; // If the extracted phone number part\n  // can possibly be a part of some valid phone number\n  // then parse phone number characters from a formatted phone number.\n\n  if (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\n    formattedDigits = '';\n  }\n  return [formattedDigits, hasPlus];\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js\nvar getCountryByCallingCode = __webpack_require__(2319);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouType.js\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction AsYouType_slicedToArray(arr, i) {\n  return AsYouType_arrayWithHoles(arr) || AsYouType_iterableToArrayLimit(arr, i) || AsYouType_unsupportedIterableToArray(arr, i) || AsYouType_nonIterableRest();\n}\nfunction AsYouType_nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction AsYouType_unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return AsYouType_arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AsYouType_arrayLikeToArray(o, minLen);\n}\nfunction AsYouType_arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction AsYouType_iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction AsYouType_arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction AsYouType_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction AsYouType_defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction AsYouType_createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) AsYouType_defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) AsYouType_defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\n\n\n\n\n\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nvar AsYouType_AsYouType = /*#__PURE__*/function () {\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    AsYouType_classCallCheck(this, AsYouType);\n    this.metadata = new es6_metadata[\"a\" /* default */](metadata);\n    var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry),\n      _this$getCountryAndCa2 = AsYouType_slicedToArray(_this$getCountryAndCa, 2),\n      defaultCountry = _this$getCountryAndCa2[0],\n      defaultCallingCode = _this$getCountryAndCa2[1];\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.reset();\n  }\n  AsYouType_createClass(AsYouType, [{\n    key: \"getCountryAndCallingCode\",\n    value: function getCountryAndCallingCode(optionsOrDefaultCountry) {\n      // Set `defaultCountry` and `defaultCallingCode` options.\n      var defaultCountry;\n      var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n      if (optionsOrDefaultCountry) {\n        if (_typeof(optionsOrDefaultCountry) === 'object') {\n          defaultCountry = optionsOrDefaultCountry.defaultCountry;\n          defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n        } else {\n          defaultCountry = optionsOrDefaultCountry;\n        }\n      }\n      if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\n        defaultCountry = undefined;\n      }\n      if (defaultCallingCode) {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            defaultCountry = '001';\n          }\n        }\n      }\n      return [defaultCountry, defaultCallingCode];\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var _this$parser$input = this.parser.input(text, this.state),\n        digits = _this$parser$input.digits,\n        justLeadingPlus = _this$parser$input.justLeadingPlus;\n      if (justLeadingPlus) {\n        this.formattedOutput = '+';\n      } else if (digits) {\n        this.determineTheCountryIfNeeded(); // Match the available formats by the currently available leading digits.\n\n        if (this.state.nationalSignificantNumber) {\n          this.formatter.narrowDownMatchingFormats(this.state);\n        }\n        var formattedNationalNumber;\n        if (this.metadata.hasSelectedNumberingPlan()) {\n          formattedNationalNumber = this.formatter.format(digits, this.state);\n        }\n        if (formattedNationalNumber === undefined) {\n          // See if another national (significant) number could be re-extracted.\n          if (this.parser.reExtractNationalSignificantNumber(this.state)) {\n            this.determineTheCountryIfNeeded(); // If it could, then re-try formatting the new national (significant) number.\n\n            var nationalDigits = this.state.getNationalDigits();\n            if (nationalDigits) {\n              formattedNationalNumber = this.formatter.format(nationalDigits, this.state);\n            }\n          }\n        }\n        this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();\n      }\n      return this.formattedOutput;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n      this.state = new AsYouTypeState({\n        onCountryChange: function onCountryChange(country) {\n          // Before version `1.6.0`, the official `AsYouType` formatter API\n          // included the `.country` property of an `AsYouType` instance.\n          // Since that property (along with the others) have been moved to\n          // `this.state`, `this.country` property is emulated for compatibility\n          // with the old versions.\n          _this.country = country;\n        },\n        onCallingCodeChange: function onCallingCodeChange(callingCode, country) {\n          _this.metadata.selectNumberingPlan(country, callingCode);\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n          _this.parser.reset(_this.metadata.numberingPlan);\n        }\n      });\n      this.formatter = new AsYouTypeFormatter_AsYouTypeFormatter({\n        state: this.state,\n        metadata: this.metadata\n      });\n      this.parser = new AsYouTypeParser_AsYouTypeParser({\n        defaultCountry: this.defaultCountry,\n        defaultCallingCode: this.defaultCallingCode,\n        metadata: this.metadata,\n        state: this.state,\n        onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {\n          _this.determineTheCountryIfNeeded();\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n        }\n      });\n      this.state.reset(this.defaultCountry, this.defaultCallingCode);\n      this.formattedOutput = '';\n      return this;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.state.international;\n    }\n    /**\r\n     * Returns the \"calling code\" part of the phone number when it's being input\r\n     * in an international format.\r\n     * If no valid calling code has been entered so far, returns `undefined`.\r\n     * @return {string} [callingCode]\r\n     */\n  }, {\n    key: \"getCallingCode\",\n    value: function getCallingCode() {\n      // If the number is being input in national format and some \"default calling code\"\n      // has been passed to `AsYouType` constructor, then `this.state.callingCode`\n      // is equal to that \"default calling code\".\n      //\n      // If the number is being input in national format and no \"default calling code\"\n      // has been passed to `AsYouType` constructor, then returns `undefined`,\n      // even if a \"default country\" has been passed to `AsYouType` constructor.\n      //\n      if (this.isInternational()) {\n        return this.state.callingCode;\n      }\n    } // A legacy alias.\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.getCallingCode();\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      var digits = this.state.digits; // Return `undefined` if no digits have been input yet.\n\n      if (digits) {\n        return this._getCountry();\n      }\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * @return {string} [country]\r\n     */\n  }, {\n    key: \"_getCountry\",\n    value: function _getCountry() {\n      var country = this.state.country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        // `AsYouType.getCountry()` returns `undefined`\n        // for \"non-geographic\" phone numbering plans.\n        if (country === '001') {\n          return;\n        }\n      }\n      return country;\n    }\n  }, {\n    key: \"determineTheCountryIfNeeded\",\n    value: function determineTheCountryIfNeeded() {\n      // Suppose a user enters a phone number in international format,\n      // and there're several countries corresponding to that country calling code,\n      // and a country has been derived from the number, and then\n      // a user enters one more digit and the number is no longer\n      // valid for the derived country, so the country should be re-derived\n      // on every new digit in those cases.\n      //\n      // If the phone number is being input in national format,\n      // then it could be a case when `defaultCountry` wasn't specified\n      // when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\n      // and that \"calling code\" could correspond to a \"non-geographic entity\",\n      // or there could be several countries corresponding to that country calling code.\n      // In those cases, `this.country` is `undefined` and should be derived\n      // from the number. Again, if country calling code is ambiguous, then\n      // `this.country` should be re-derived with each new digit.\n      //\n      if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\n        this.determineTheCountry();\n      }\n    } // Prepends `+CountryCode ` in case of an international phone number\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      var _this2 = this;\n      if (this.isInternational()) {\n        var prefix = function prefix(text) {\n          return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {\n            spacing: text ? true : false\n          }) + text;\n        };\n        var callingCode = this.state.callingCode;\n        if (!callingCode) {\n          return prefix(\"\".concat(this.state.getDigitsWithoutInternationalPrefix()));\n        }\n        if (!formattedNationalNumber) {\n          return prefix(callingCode);\n        }\n        return prefix(\"\".concat(callingCode, \" \").concat(formattedNationalNumber));\n      }\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumberWithPrefix\",\n    value: function getNonFormattedNationalNumberWithPrefix() {\n      var _this$state = this.state,\n        nationalSignificantNumber = _this$state.nationalSignificantNumber,\n        complexPrefixBeforeNationalSignificantNumber = _this$state.complexPrefixBeforeNationalSignificantNumber,\n        nationalPrefix = _this$state.nationalPrefix;\n      var number = nationalSignificantNumber;\n      var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;\n      if (prefix) {\n        number = prefix + number;\n      }\n      return number;\n    }\n  }, {\n    key: \"getNonFormattedNumber\",\n    value: function getNonFormattedNumber() {\n      var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;\n      return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      var number = this.getNonFormattedNumber();\n      if (number) {\n        return number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n      }\n    }\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var callingCode = this.state.callingCode;\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);\n      return countryCodes && countryCodes.length > 1;\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.state.setCountry(Object(getCountryByCallingCode[\"a\" /* default */])(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, this.state.nationalSignificantNumber, this.metadata));\n    }\n    /**\r\n     * Returns a E.164 phone number value for the user's input.\r\n     *\r\n     * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n     * it will return `\"+12223334444\"`.\r\n     *\r\n     * For international phone number input, it will also auto-correct\r\n     * some minor errors such as using a national prefix when writing\r\n     * an international phone number. For example, if the user inputs\r\n     * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n     * `\"+447400000000\"` phone number value.\r\n     *\r\n     * Will return `undefined` if no digits have been input,\r\n     * or when inputting a phone number in national format and no\r\n     * default country or default \"country calling code\" have been set.\r\n     *\r\n     * @return {string} [value]\r\n     */\n  }, {\n    key: \"getNumberValue\",\n    value: function getNumberValue() {\n      var _this$state2 = this.state,\n        digits = _this$state2.digits,\n        callingCode = _this$state2.callingCode,\n        country = _this$state2.country,\n        nationalSignificantNumber = _this$state2.nationalSignificantNumber; // Will return `undefined` if no digits have been input.\n\n      if (!digits) {\n        return;\n      }\n      if (this.isInternational()) {\n        if (callingCode) {\n          return '+' + callingCode + nationalSignificantNumber;\n        } else {\n          return '+' + digits;\n        }\n      } else {\n        if (country || callingCode) {\n          var callingCode_ = country ? this.metadata.countryCallingCode() : callingCode;\n          return '+' + callingCode_ + nationalSignificantNumber;\n        }\n      }\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      var _this$state3 = this.state,\n        nationalSignificantNumber = _this$state3.nationalSignificantNumber,\n        carrierCode = _this$state3.carrierCode,\n        callingCode = _this$state3.callingCode; // `this._getCountry()` is basically same as `this.state.country`\n      // with the only change that it return `undefined` in case of a\n      // \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\n\n      var country = this._getCountry();\n      if (!nationalSignificantNumber) {\n        return;\n      }\n      if (!country && !callingCode) {\n        return;\n      }\n      var phoneNumber = new PhoneNumber[\"a\" /* default */](country || callingCode, nationalSignificantNumber, this.metadata.metadata);\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n      if (!phoneNumber) {\n        return false;\n      }\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n      if (!phoneNumber) {\n        return false;\n      }\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.state.nationalSignificantNumber;\n    }\n    /**\r\n     * Returns the phone number characters entered by the user.\r\n     * @return {string}\r\n     */\n  }, {\n    key: \"getChars\",\n    value: function getChars() {\n      return (this.state.international ? '+' : '') + this.state.digits;\n    }\n    /**\r\n     * Returns the template for the formatted phone number.\r\n     * @return {string}\r\n     */\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || '';\n    }\n  }]);\n  return AsYouType;\n}();\n\n\n/***/ }),\n\n/***/ 2450:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return parsePhoneNumberFromString; });\n/* harmony import */ var _parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2285);\n/* harmony import */ var _parsePhoneNumberFromString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2286);\n\n\nfunction parsePhoneNumberFromString() {\n  var _normalizeArguments = Object(_parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__[/* normalizeArguments */ \"a\"])(arguments),\n    text = _normalizeArguments.text,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata;\n  return Object(_parsePhoneNumberFromString_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(text, options, metadata);\n}\n\n/***/ }),\n\n/***/ 2451:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return formatPhoneNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return formatPhoneNumberIntl; });\n/* harmony import */ var libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2450);\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nfunction formatPhoneNumber(value, format, metadata) {\n  if (!metadata) {\n    if (_typeof(format) === 'object') {\n      metadata = format;\n      format = 'NATIONAL';\n    }\n  }\n  if (!value) {\n    return '';\n  }\n  var phoneNumber = Object(libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(value, metadata);\n  if (!phoneNumber) {\n    return '';\n  } // Deprecated.\n  // Legacy `format`s.\n\n  switch (format) {\n    case 'National':\n      format = 'NATIONAL';\n      break;\n    case 'International':\n      format = 'INTERNATIONAL';\n      break;\n  }\n  return phoneNumber.format(format);\n}\nfunction formatPhoneNumberIntl(value, metadata) {\n  return formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}\n\n/***/ }),\n\n/***/ 2452:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isValidPhoneNumber; });\n/* harmony import */ var _parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2285);\n/* harmony import */ var _parsePhoneNumberFromString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2286);\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n\nfunction isValidPhoneNumber() {\n  var _normalizeArguments = Object(_parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__[/* normalizeArguments */ \"a\"])(arguments),\n    text = _normalizeArguments.text,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata;\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    extract: false\n  });\n  var phoneNumber = Object(_parsePhoneNumberFromString_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(text, options, metadata);\n  return phoneNumber && phoneNumber.isValid() || false;\n}\n\n/***/ }),\n\n/***/ 2453:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isPossiblePhoneNumber; });\n/* harmony import */ var _parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2285);\n/* harmony import */ var _parsePhoneNumberFromString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2286);\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n\nfunction isPossiblePhoneNumber() {\n  var _normalizeArguments = Object(_parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__[/* normalizeArguments */ \"a\"])(arguments),\n    text = _normalizeArguments.text,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata;\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    extract: false\n  });\n  var phoneNumber = Object(_parsePhoneNumberFromString_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(text, options, metadata);\n  return phoneNumber && phoneNumber.isPossible() || false;\n}\n\n/***/ }),\n\n/***/ 2454:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getCountries; });\n/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2245);\n\nfunction getCountries(metadata) {\n  return new _metadata_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata).getCountries();\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["../../source/tools/semver-compare.js","../source/metadata.js","../source/constants.js","../../source/helpers/matchesEntirely.js","../../source/helpers/parseDigits.js","../../source/helpers/mergeArrays.js","../../source/helpers/checkNumberLength.js","../../source/helpers/formatNationalNumberUsingFormat.js","../../source/helpers/stripIddPrefix.js","../../source/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../../source/helpers/getNumberType.js","../source/parsePhoneNumber.js","../source/parsePhoneNumberFromString_.js","/workspace/ant-design-react-template/node_modules/libphonenumber-js/metadata.min.json.js","../../source/helpers/applyInternationalSeparatorStyle.js","../../source/helpers/extractCountryCallingCode.js","../../source/helpers/extractNationalNumber.js","../../source/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../../source/helpers/getCountryByCallingCode.js","../source/isPossibleNumber_.js","../../source/helpers/RFC3966.js","../../source/helpers/isViablePhoneNumber.js","../../../source/helpers/extension/createExtensionPattern.js","../../source/helpers/getInternationalPhoneNumberPrefix.js","../../source/helpers/inputValuePrefix.js","../source/ParseError.js","/workspace/ant-design-react-template/node_modules/react-phone-number-input/locale/en.json.js","../source/PropTypes.js","../source/unicode.js","../source/CountrySelect.js","../source/Flag.js","../source/InternationalIcon.js","../../source/helpers/countries.js","../source/CountryIcon.js","../../source/helpers/phoneInputHelpers.js","../../source/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js","../source/PhoneInputWithCountry.js","../source/PhoneInputWithCountryDefault.js","/workspace/ant-design-react-template/node_modules/react-phone-number-input/min/index.js","../source/edit.js","../source/parse.js","../source/helpers.js","../source/closeBraces.js","../source/templateFormatter.js","../source/format.js","../source/dom.js","../source/inputControl.js","../../source/react/Input.js","../source/InputSmart.js","../source/usePhoneDigits.js","../source/PhoneInput.js","../source/PhoneInputBrowser.js","/workspace/ant-design-react-template/node_modules/react-phone-number-input/input/index.js","../source/validate_.js","../../source/helpers/getIddPrefix.js","../source/format_.js","../source/PhoneNumber.js","../../../source/helpers/extension/extractExtension.js","../source/parse_.js","../source/parsePhoneNumber_.js","../source/formatIncompletePhoneNumber.js","../source/InputBasic.js","../source/parseIncompletePhoneNumber.js","../source/AsYouTypeState.js","../source/AsYouTypeFormatter.util.js","../source/AsYouTypeFormatter.complete.js","../source/AsYouTypeFormatter.PatternParser.js","../source/AsYouTypeFormatter.PatternMatcher.js","../source/AsYouTypeFormatter.js","../source/AsYouTypeParser.js","../source/AsYouType.js","../source/parsePhoneNumberFromString.js","../../source/libphonenumber/formatPhoneNumber.js","../source/isValidPhoneNumber.js","../source/isPossiblePhoneNumber.js","../source/getCountries.js"],"names":["a","b","split","pa","pb","i","na","Number","nb","isNaN","V2","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","metadata","validateMetadata","setVersion","call","keys","countries","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","getCountryMetadata","undefined","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","length","selectNumberingPlan","test","hasCountry","Error","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","getType","Type","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","is_object","Object","join","type_of","getExtPrefix","getCountryCallingCode","countryCallingCode","isSupportedCountry","version","v4","compare","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_PUNCTUATION","PLUS_CHARS","matchesEntirely","text","regular_expression","RegExp","DIGITS","parseDigit","character","parseDigits","string","result","digit","mergeArrays","merged","slice","element","indexOf","push","sort","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","actual_length","minimum_length","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","number","useInternationalFormat","withNationalPrefix","carrierCode","formattedNumber","replace","pattern","internationalFormat","applyInternationalSeparatorStyle","CAPTURING_DIGIT_PATTERN","stripIddPrefix","countryMetadata","IDDPrefixPattern","search","match","matchedGroups","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","possibleShorterNumber","extractNationalNumber","possibleShorterNationalNumber","NON_FIXED_LINE_PHONE_TYPES","getNumberType","input","options","phone","isNumberTypeEqualTo","parsePhoneNumber","normalizeArguments","arguments","parsePhoneNumber_","args","Array","prototype","arg_1","arg_2","arg_3","arg_4","TypeError","defaultCountry","isObject","parsePhoneNumberFromString","error","ParseError","trim","extractCountryCallingCode","numberWithoutIDD","shorterNumber","extractNationalNumberFromPossiblyIncompleteNumber","shouldHaveExtractedNationalPrefix","isPossibleIncompleteNationalNumber","nationalNumberBefore","nationalNumberAfter","prefixPattern","prefixMatch","exec","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","possibleNationalPrefix","USE_NON_GEOGRAPHIC_COUNTRY_CODE","getCountryByCallingCode","nationalPhoneNumber","isNonGeographicCallingCode","possibleCountries","selectCountryFromList","isPossiblePhoneNumber","isPossibleNumber","parseRFC3966","part","name","value","isViablePhoneNumber","formatRFC3966","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","VALID_PHONE_NUMBER_WITH_EXTENSION","createExtensionPattern","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumberStart","RFC3966_EXTN_PREFIX","getExtensionDigitsPattern","maxLength","purpose","extLimitAfterExplicitLabel","extLimitAfterLikelyLabel","extLimitAfterAmbiguousChar","extLimitWhenNotSure","possibleSeparatorsBetweenNumberAndExtLabel","possibleCharsAfterExtLabel","optionalExtnSuffix","explicitExtLabels","ambiguousExtLabels","ambiguousSeparator","possibleSeparatorsNumberExtLabelNoComma","autoDiallingAndExtLabelsFound","rfcExtn","explicitExtn","ambiguousExtn","americanStyleExtnWithSuffix","autoDiallingExtn","onlyCommasExtn","ONLY_DIGITS_REGEXP","getInternationalPhoneNumberPrefix","prefix","getInputValuePrefix","international","withCountryCallingCode","removeInputValuePrefix","code","setPrototypeOf","constructor","shape","PropTypes","object","isRequired","labels","objectOf","getCountryFlag","getRegionalIndicatorSymbol","letter","String","fromCodePoint","toUpperCase","charCodeAt","CountrySelect","onChange","rest","onChange_","useCallback","event","target","selectedOption","useMemo","getSelectedOption","label","divider","DIVIDER_STYLE","propTypes","func","arrayOf","bool","fontSize","backgroundColor","color","CountrySelectWithIcon","className","Icon","iconComponent","getIconAspectRatio","Arrow","arrowComponent","unicodeFlags","classNames","getUnicodeFlagIcon","elementType","defaultProps","option","FlagComponent","countryName","flags","flagUrl","title","toLowerCase","InternationalIcon","aspectRatio","InternationalIcon3x2","InternationalIcon1x1","sortCountryOptions","order","optionsOnTop","optionsOnBottom","appendTo","index","splice","concat","getSupportedCountryOptions","countryOptions","isCountrySupportedWithError","console","getSupportedCountries","createCountryIconComponent","flagComponent","internationalIcon","CountryIcon","_aspectRatio","DefaultInternationalIcon","Flag","getPreSelectedCountry","phoneNumber","getAnyCountry","required","couldNumberBelongToCountry","getCountrySelectOptions","countryNames","addInternationalOption","compareStringsLocales","_compareStrings","compareStrings","countrySelectOptions","unshift","ZZ","generateNationalNumberDigits","formatNational","getPhoneDigitsForNewCountry","phoneDigits","prevCountry","newCountry","useNationalFormat","stripCountryCallingCode","newCountryPrefix","defaultValue","e164","asYouType","AsYouType","getNumberValue","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","getCountryForPartialE164Number","partialE164Number","derived_country","getCountryFromPossiblyIncompleteInternationalPhoneNumber","onPhoneDigitsChange","prevPhoneDigits","countryRequired","limitMaxLength","countryCallingCodeEditable","convertInternationalPhoneDigitsToNational","formatter","getNumber","getCountry","locales","localeCompare","countryCallingCodePrefix","country_calling_code","intlPhoneNumberPrefix","getInitialPhoneDigits","getPhoneInputWithCountryStateUpdateFromNewProps","props","prevProps","state","newDefaultCountry","newValue","newReset","reset","displayInitialValueAsLocalNumber","initialValueFormat","prevDefaultCountry","prevValue","prevReset","hasUserSelectedACountry","_getInitialPhoneDigits","parameters","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","noValueHasBeenEntered","parsedCountry","supportedCountries","hasUserSelectedACountryUpdate","PhoneNumberInput_","instance","inputRef","current","ref","focusInputOnCountrySelection","newPhoneDigits","focus","setState","_phoneDigits","currentlySelectedCountry","getFirstSupportedCountry","stateUpdate","forceRerender","isFocused","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","React","createRef","preSelectedCountry","getCountries","onCountryChange","selectedCountry","prevState","countryOptionsOrder","useMemoCountrySelectOptions","generator","dependencies","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","disabled","readOnly","autoComplete","style","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","countriesProperty","InputComponent","InputSmart","InputBasic","onCountryFocus","onCountryBlur","setInputRef","PureComponent","PhoneNumberInput","forwardRef","oneOf","labelsPropType","oneOfType","metadataPropType","any","createPhoneInput","defaultMetadata","PhoneInputDefault","_arguments","apply","_parsePhoneNumber","formatPhoneNumber","_formatPhoneNumber","formatPhoneNumberIntl","_formatPhoneNumberIntl","isValidPhoneNumber","_isValidPhoneNumber","_isPossiblePhoneNumber","_getCountries","_getCountryCallingCode","_isSupportedCountry","edit","caret","operation","parse","caret_position","parse_character","focused_input_character_index","count_occurences","symbol","count","closeBraces","retained_template","template","placeholder","empty_placeholder","cut_before","opening_braces","closing_braces","dangling_braces","should_close_braces","characters_in_template","value_character_index","filled_in_template","close_braces","template_formatter","found","possibly_last_input_character_index","isReadOnly","hasAttribute","getSelection","selectionStart","selectionEnd","start","end","Keys","Backspace","Delete","getOperation","keyCode","getCaretPosition","setCaretPosition","isAndroid","setTimeout","setSelectionRange","navigator","ANDROID_USER_AGENT_REG_EXP","userAgent","onCut","_parse","on_change","formatInputText","onPaste","selection","eraseSelection","onKeyDown","preventDefault","newValueAndCaret","formatted","Input","internalRef","useRef","setRef","_onChange","onInputChange","_onKeyDown","onInputKeyDown","isEmptyValue","createInput","getTemplate","parsePhoneNumberCharacter","usePhoneDigits","useNationalFormatForDefaultCountryValue","countryMismatchDetected","onCountryMismatch","actualCountry","getPhoneDigitsForValue","useState","setPrevCountry","setPrevDefaultCountry","setPhoneDigits","valueForPhoneDigits","setValueForPhoneDigits","rerenderTrigger","setRerenderTrigger","rerender","getValueForPhoneDigits","useEffect","onSetPhoneDigits","PhoneInput","Component","isValidNumber","national_number","SINGLE_IDD_PREFIX_REG_EXP","getIddPrefix","DEFAULT_OPTIONS","formatExtension","extension","formatNumber","formatNationalNumber","addExtension","fromCountry","formatIDD","formatAs","chooseFormatForNumber","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","fromCountryCallingCode","iddPrefix","PhoneNumber","_metadata","isCountryCode","EXTN_PATTERN","extractExtension","numberWithoutExtension","matches","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parseInput","extract","formattedPhoneNumber","defaultCallingCode","hasSelectedNumberingPlan","valid","extended","possible","extractFormattedPhoneNumber","throwOnError","startsAt","withExtensionStripped","parseIncompletePhoneNumber","exactCountry","parseNumber","formatIncompletePhoneNumber","newValueFormatted","prevParsedCharacters","AsYouTypeState","onCallingCodeChange","missingPlus","digits","resetNationalSignificantNumber","initCountryAndCallingCode","nationalSignificantNumber","getNationalDigits","nationalSignificantNumberMatchesInput","complexPrefixBeforeNationalSignificantNumber","properties","key","setCountry","setCallingCode","nextDigits","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","countOccurences","repeat","times","cutAndStripNonPairedParens","cutBeforeIndex","stripNonPairedParens","closeNonPairedParens","pop","cleared_string","populateTemplateWithDigits","position","formatCompleteNumber","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","matcher","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","canFormatCompleteNumber","useNationalPrefixFormattingRule","formattedNationalNumber","isValidFormattedNationalNumber","PatternParser","context","or","instructions","parsePattern","branches","op","expandSingleElementArray","OPERATOR","ILLEGAL_CHARACTER_REGEXP","getContext","operator","before","rightPart","startContext","endContext","oneOfSet","parseOneOfSet","values","nextValue","fromCharCode","array","PatternMatcher","matchTree","allowOverflow","matchedChars","overflow","characters","tree","last","characterString","partialMatch","isArray","restCharacters","subtree","JSON","stringify","branch","char","DUMMY_DIGIT","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","LONGEST_DUMMY_PHONE_NUMBER","NATIONAL_PREFIX_SEPARATORS_PATTERN","SUPPORT_LEGACY_FORMATTING_PATTERNS","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","NON_ALTERING_FORMAT_REG_EXP","MIN_LEADING_DIGITS_LENGTH","AsYouTypeFormatter","resetFormat","chosenFormat","nationalNumberTemplate","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","isNANP","matchingFormats","narrowDownMatchingFormats","formattedCompleteNumber","setNationalNumberTemplate","lastIndexOf","formatNationalNumberWithNextDigits","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","leadingDigitsPatternIndex","formatSuits","formatMatches","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","Math","min","leadingDigitsPattern","getFormatFormat","createTemplateForFormat","getTemplateForFormat","spacing","internationalPrefix","getInternationalPrefixBeforeCountryCallingCode","getDigitsWithoutInternationalPrefix","strictPattern","nationalNumberDummyDigits","numberFormat","nationalPrefixIncludedInTemplate","numberFormatWithNationalPrefix","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser","onNationalSignificantNumberChange","extractFormattedDigitsAndPlus","formattedDigits","hasPlus","justLeadingPlus","startInternationalNumber","inputDigits","hasReceivedThreeLeadingDigits","appendDigits","extractIddPrefix","isWaitingForCountryCallingCode","appendNationalSignificantNumberDigits","hasExtractedNationalSignificantNumber","extractNationalSignificantNumber","update","couldPossiblyExtractAnotherNationalSignificantNumber","nationalDigits","onExtractedNationalNumber","prevNationalSignificantNumber","nationalSignificantNumberIndex","extractAnotherNationalSignificantNumber","extractCallingCodeAndNationalSignificantNumber","fixMissingPlus","newCallingCode","_extractFormattedDigitsAndPlus","extractedNumber","optionsOrDefaultCountry","getCountryAndCallingCode","parser","formattedOutput","determineTheCountryIfNeeded","reExtractNationalSignificantNumber","getFullNumber","getNonFormattedNumber","isInternational","getCallingCode","_getCountry","isCountryCallingCodeAmbiguous","determineTheCountry","getNonFormattedNationalNumberWithPrefix","callingCode_","isPossible","isValid","getNonFormattedTemplate","parsePhoneNumberFromString_"],"mappings":"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C,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,EAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,EAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,EAAC,IAAI,EAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,IAAI,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,EAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,EAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,EAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,EAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,EAAC,IAAI,EAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,EAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAAI,CAAC;IAAC,KAAK,EAAC,CAAC,IAA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ArCQ;EAuC5B;AACD;AACA;AACA;EACC6J,QAAQ,EAAEzL,oBAAS,CAAC4B,IA3CQ;EA6C5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACA8J,YAAY,EAAE1L,oBAAS,CAACtI,MAAVsI,CAAiBE,UAlEH;EAoE5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAuI,kBAAkB,EAAEzI,oBAAS,CAAC6M,KAAV7M,CAAgB,CAAC,UAAD,CAAhBA,CAxFQ;EA0F5B;EACA;EACAwI,gCAAgC,EAAExI,oBAAS,CAAC4B,IA5FhB;EA8F5B;AACD;AACA;AACA;AACA;AACA;EACC;EACAxG,cAAc,EAAE4E,oBAAS,CAACtI,MArGE;EAuG5B;AACD;AACA;AACA;AACA;AACA;AACA;EACCxF,SAAS,EAAE8N,oBAAS,CAAC2B,OAAV3B,CAAkBA,oBAAS,CAACtI,MAA5BsI,CA9GiB;EAgH5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCG,MAAM,EAAE2M,gBAAc,CAAC5M,UA1HK;EA4H5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCwH,OAAO,EAAE1H,oBAAS,CAAC+M,SAAV/M,CAAoB,CAC5BA,oBAAS,CAACtI,MADkB,EAE5BsI,oBAAS,CAAC2B,OAAV3B,CAAkBA,oBAAS,CAACtI,MAA5BsI,CAF4B,CAApBA,CAzImB;EA8I5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCgD,OAAO,EAAEhD,oBAAS,CAACtI,MAAVsI,CAAiBE,UArKE;EAuK5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"x","sourcesContent":["// Copy-pasted from:\r\n// https://github.com/substack/semver-compare/blob/master/index.js\r\n//\r\n// Inlining this function because some users reported issues with\r\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\r\n//\r\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\r\nexport default function(a, b) {\r\n    a = a.split('-')\r\n    b = b.split('-')\r\n    var pa = a[0].split('.')\r\n    var pb = b[0].split('.')\r\n    for (var i = 0; i < 3; i++) {\r\n        var na = Number(pa[i])\r\n        var nb = Number(pb[i])\r\n        if (na > nb) return 1\r\n        if (nb > na) return -1\r\n        if (!isNaN(na) && isNaN(nb)) return 1\r\n        if (isNaN(na) && !isNaN(nb)) return -1\r\n    }\r\n    if (a[1] && b[1]) {\r\n        return a[1] > b[1] ? 1 : (a[1] < b[1] ? -1 : 0)\r\n    }\r\n    return !a[1] && b[1] ? 1 : (a[1] && !b[1] ? -1 : 0)\r\n}","import compare from './tools/semver-compare.js'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nconst CALLING_CODE_REG_EXP = /^\\d+$/\r\n\r\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\t// The test case could be found by searching for \"nonGeographical\".\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\t// Supports just passing `callingCode` as the first argument.\r\n\t\tif (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\r\n\t\t\tcallingCode = countryCode\r\n\t\t\tcountryCode = null\r\n\t\t}\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\t// In that metadata, there was no concept of \"non-geographic\" metadata\r\n\t\t\t// so metadata for `001` country code was stored along with other countries.\r\n\t\t\t// The test case can be found by searching for:\r\n\t\t\t// \"should work around `nonGeographic` metadata not existing\".\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\treturn this.selectNumberingPlan(callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\t// Is always present.\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\t// Is only present when a country supports multiple IDD prefixes.\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\t// \"possible length\" data is always present in Google's metadata.\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\r\n\t\t\t// when `national_prefix_formatting_rule` is not present.\r\n\t\t\t// So, `true` or `false` are returned explicitly here, so that\r\n\t\t\t// `0` number isn't returned.\r\n\t\t\t? true\r\n\t\t\t: false\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif (!is_object(metadata) || !is_object(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tconst { version } = metadata\r\n\tif (typeof version === 'number') {\r\n\t\tthis.v1 = version === 1\r\n\t\tthis.v2 = version === 2\r\n\t\tthis.v3 = version === 3\r\n\t\tthis.v4 = version === 4\r\n\t} else {\r\n\t\tif (!version) {\r\n\t\t\tthis.v1 = true\r\n\t\t} else if (compare(version, V3) === -1) {\r\n\t\t\tthis.v2 = true\r\n\t\t} else if (compare(version, V4) === -1) {\r\n\t\t\tthis.v3 = true\r\n\t\t} else {\r\n\t\t\tthis.v4 = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }","// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\r\nexport default function matchesEntirely(text, regular_expression) {\r\n\t// If assigning the `''` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\ttext = text || ''\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}","// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS = {\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character) {\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\treturn result\r\n}","/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport default function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b) {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}","import mergeArrays from './mergeArrays.js'\r\n\r\nexport default function checkNumberLength(nationalNumber, metadata) {\r\n\treturn checkNumberLengthForType(nationalNumber, undefined, metadata)\r\n}\r\n\r\n// Checks whether a number is possible for the country based on its length.\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\t// Metadata before version `1.0.18` didn't contain `possible_lengths`.\r\n\tif (!possible_lengths) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE')) {\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographic entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\t\tif (mobile_type) {\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths) {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// } else {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info) {\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length) {\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly. Therefore, we use `\\d`, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport default function formatNationalNumberUsingFormat(\r\n\tnumber,\r\n\tformat,\r\n\t{\r\n\t\tuseInternationalFormat,\r\n\t\twithNationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tmetadata\r\n\t}\r\n) {\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat\r\n\t\t\t? format.internationalFormat()\r\n\t\t\t: (\r\n\t\t\t\t// This library doesn't use `domestic_carrier_code_formatting_rule`,\r\n\t\t\t\t// because that one is only used when formatting phone numbers\r\n\t\t\t\t// for dialing from a mobile phone, and this is not a dialing library.\r\n\t\t\t\t// carrierCode && format.domesticCarrierCodeFormattingRule()\r\n\t\t\t\t// \t// First, replace the $CC in the formatting rule with the desired carrier code.\r\n\t\t\t\t// \t// Then, replace the $FG in the formatting rule with the first group\r\n\t\t\t\t// \t// and the carrier code combined in the appropriate way.\r\n\t\t\t\t// \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\r\n\t\t\t\t// \t: (\r\n\t\t\t\t// \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t// \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t// \t\t\t: format.format()\r\n\t\t\t\t// \t)\r\n\t\t\t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t\t: format.format()\r\n\t\t\t)\r\n\t)\r\n\tif (useInternationalFormat) {\r\n\t\treturn applyInternationalSeparatorStyle(formattedNumber)\r\n\t}\r\n\treturn formattedNumber\r\n}","import Metadata from '../metadata.js'\r\nimport { VALID_DIGITS } from '../constants.js'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\t// Check if the number is IDD-prefixed.\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\t// If there're any digits after an IDD prefix,\r\n\t// then those digits are a country calling code.\r\n\t// Since no country code starts with a `0`,\r\n\t// the code below validates that the next digit (if present) is not `0`.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\r\n\t\tif (matchedGroups[1] === '0') {\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}","import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport extractNationalNumber from './extractNationalNumber.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\nimport getCountryCallingCode from '../getCountryCallingCode.js'\r\n\r\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\r\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tconst countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode\r\n\tif (number.indexOf(countryCallingCode) === 0) {\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(country, callingCode)\r\n\t\tconst possibleShorterNumber = number.slice(countryCallingCode.length)\r\n\t\tconst {\r\n\t\t\tnationalNumber: possibleShorterNationalNumber,\r\n\t\t} = extractNationalNumber(\r\n\t\t\tpossibleShorterNumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tconst {\r\n\t\t\tnationalNumber\r\n\t\t} = extractNationalNumber(\r\n\t\t\tnumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\t// If the number was not valid before but is valid now,\r\n\t\t// or if it was too long before, we consider the number\r\n\t\t// with the country calling code stripped to be a better result\r\n\t\t// and keep that instead.\r\n\t\t// For example, in Germany (+49), `49` is a valid area code,\r\n\t\t// so if a number starts with `49`, it could be both a valid\r\n\t\t// national German number or an international number without\r\n\t\t// a leading `+`.\r\n\t\tif (\r\n\t\t\t(\r\n\t\t\t\t!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t\t&&\r\n\t\t\t\tmatchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t)\r\n\t\t\t||\r\n\t\t\tcheckNumberLength(nationalNumber, metadata) === 'TOO_LONG'\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: possibleShorterNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn { number }\r\n}","import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES = [\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\r\n\t\t// For example, for \"US\" country.\r\n\t\t// Old metadata (< `1.0.18`) had a specific \"types\" data structure\r\n\t\t// that happened to be `undefined` for `MOBILE` in that case.\r\n\t\t// Newer metadata (>= `1.0.18`) has another data structure that is\r\n\t\t// not `undefined` for `MOBILE` in that case (it's just an empty array).\r\n\t\t// So this `if` is just for backwards compatibility with old metadata.\r\n\t\tif (!metadata.type('MOBILE')) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const type of NON_FIXED_LINE_PHONE_TYPES) {\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\r\n\t\t\treturn type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\r\n\ttype = metadata.type(type)\r\n\tif (!type || !type.pattern()) {\r\n\t\treturn false\r\n\t}\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0) {\r\n\t\treturn false\r\n\t}\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}","import parsePhoneNumber_ from './parsePhoneNumber_.js'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'","import parsePhoneNumber from './parsePhoneNumber_.js'\r\nimport ParseError from './ParseError.js'\r\nimport { isSupportedCountry } from './metadata.js'\r\n\r\nexport default function parsePhoneNumberFromString(text, options, metadata) {\r\n\t// Validate `defaultCountry`.\r\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\r\n\t\toptions = {\r\n\t\t\t...options,\r\n\t\t\tdefaultCountry: undefined\r\n\t\t}\r\n\t}\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\treturn parsePhoneNumber(text, options, metadata)\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\t//\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n","// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\d{6})$\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\d{6})$\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\d{6})$\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"(?:(?:2(?:[0-26-9]\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\d|2[0-8]))\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|22\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"(?:[25689]\\\\d|40)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]]]],\"BL\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-46-9]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\d{6})$\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-79]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}|3\\\\d{6}\",[7,10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|6[578])|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|13|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\",[10]],[\"\",[10]],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\",[10]],[\"900[2-9]\\\\d{6}\",[10]],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:00|2[125-7]|33|44|66|77|88)|622)[2-9]\\\\d{6}\",[10]],0,[\"310\\\\d{4}\",[7]],0,[\"600[2-9]\\\\d{6}\",[10]]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"1[127]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-689]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\d|79)\\\\d\\\\d)\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:60\\\\d\\\\d|9101)\\\\d{6}|(?:1\\\\d|3)\\\\d{9}\",[10,11],[[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3[0-357]|91\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0(4(?:[14]4|56)|[579])?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-579]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-579]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0235])|4(?:[0-5]\\\\d\\\\d|69[7-9]|70[013579])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|8(?:[02]\\\\d|1[0-246-9])))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"(?:[56]94|80\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d\\\\d|606)\\\\d{5}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|6[0-289]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\d{6})$\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"9008\\\\d{3}|(?:[2-467]\\\\d\\\\d|862)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"(?:(?:00[1-9]|8\\\\d)\\\\d{4}|[1-36])\\\\d{6}|00\\\\d{10}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([25-8]\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[378]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"30[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(1001)\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:2|33|5\\\\d|77|88)\\\\d{7}|[4-6]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[4-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29[89]|389)\",\"5(?:29[89]|389)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:29(?:[189][05]|2[29]|3[01])|389[05])\\\\d{4}|5(?:2(?:[0-25-7]\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[08]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[017]\\\\d|2[0-2]|6[0-8]|8[0-3]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\d{6})$\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[5-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"(?:69|80)\\\\d{7}|(?:59|97)6\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([34]\\\\d{6})$\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:5|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9[13-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"1(?:(?:44|99)[1-9]|65[0-689])\\\\d{7}|(?:1(?:[017]\\\\d|[235][1-9]|4[0-35-9]|6[0-46-9]|8[1-79]|9[1-8])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9]|53)|8\",\"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1(?:[367]|80)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[04]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|59\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-68]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[29]\\\\d{7,9}|50\\\\d{5}(?:\\\\d{2,3})?|6[0-35-9]\\\\d{6}|7\\\\d{7,8}|8\\\\d{4,9}|(?:11\\\\d|[34])\\\\d{7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-579]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|[89]0\",\"50(?:[0367]|88)|[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"00|19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,\"00\",\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|20|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"(?:[45]|80\\\\d\\\\d)\\\\d{5}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"[2-7]\\\\d{7}|800\\\\d{4}(?:\\\\d{2})?|2\\\\d{6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]]]],\"RE\":[\"262\",\"00\",\"976\\\\d{6}|(?:26|[68]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,\"26[23]|69|[89]\"],\"RO\":[\"40\",\"00\",\"(?:[2378]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"800\\\\d{4}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-5]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|[57]9)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3478]|64|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\d{6})$\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\d{6})$\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"(?:00|[1-57-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3[1-5]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\d{6})$\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[25-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\",\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|89|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"310\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"505(?:[2-57-9]\\\\d\\\\d|6(?:[0-35-9]\\\\d|44))\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-289]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-7]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"4\\\\d{9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"405|8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"(?:33|55|[679]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[35-9]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\d{6})$\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],\"WF\":[\"681\",\"00\",\"(?:40|72)\\\\d{4}|8\\\\d{5}(?:\\\\d{3})?\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[478]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"80\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\"],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|63|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:00|[1-9]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[35-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"[0-36-9]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-36-9]\"]]],0,0,0,0,0,0,[0,[\"[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|285\\\\d{9}|(?:[19]\\\\d|49)\\\\d{6}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"4\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34[57]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-3]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|3(?:2|47|7\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:(?:285\\\\d\\\\d|3(?:45|[69]\\\\d{3}))\\\\d|9[89])\\\\d{6}\"]]],\"883\":[\"883\",0,\"(?:210|370\\\\d\\\\d)\\\\d{7}|51\\\\d{7}(?:\\\\d{3})?\",[9,10,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[35]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:210|(?:370[1-9]|51[013]0)\\\\d)\\\\d{7}|5100\\\\d{5}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}","import { VALID_PUNCTUATION } from '../constants.js'\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\r\n\treturn formattedNumber.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}","import stripIddPrefix from './stripIddPrefix.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport Metadata from '../metadata.js'\r\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js'\r\n\r\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\r\nexport default function extractCountryCallingCode(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then either extract an \"IDD\" prefix, or extract a\r\n\t// country calling code from a number by autocorrecting it\r\n\t// by prepending a leading `+` in cases when it starts\r\n\t// with the country calling code.\r\n\t// https://wikitravel.org/en/International_dialling_prefix\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\tif (number[0] !== '+') {\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata)\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\t// Check to see if the number starts with the country calling code\r\n\t\t\t// for the default country. If so, we remove the country calling code,\r\n\t\t\t// and do some checks on the validity of the number before and after.\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\t\tnumber,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tcallingCode,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\t\t\t\tif (countryCallingCode) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0') {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\t\tif (metadata.hasCallingCode(countryCallingCode)) {\r\n\t\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\n\r\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\r\nexport default function extractNationalNumber(number, metadata) {\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst {\r\n\t\tcarrierCode,\r\n\t\tnationalNumber\r\n\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\tnumber,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (nationalNumber !== number) {\r\n\t\tif (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\r\n\t\t\t// Don't strip the national prefix.\r\n\t\t\treturn { nationalNumber: number }\r\n\t\t}\r\n\t\t// Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t\t// Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\r\n\t\tif (metadata.possibleLengths()) {\r\n\t\t\t// The number remaining after stripping the national prefix and carrier code\r\n\t\t\t// should be long enough to have a possible length for the country.\r\n\t\t\t// Otherwise, don't strip the national prefix and carrier code,\r\n\t\t\t// since the original number could be a valid number.\r\n\t\t\t// This check has been copy-pasted \"as is\" from Google's original library:\r\n\t\t\t// https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\r\n\t\t\t// It doesn't check for the \"possibility\" of the original `number`.\r\n\t\t\t// I guess it's fine not checking that one. It works as is anyway.\r\n\t\t\tif (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\r\n\t\t\t\t// Don't strip the national prefix.\r\n\t\t\t\treturn { nationalNumber: number }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { nationalNumber, carrierCode }\r\n}\r\n\r\n// In some countries, the same digit could be a national prefix\r\n// or a leading digit of a valid phone number.\r\n// For example, in Russia, national prefix is `8`,\r\n// and also `800 555 35 35` is a valid number\r\n// in which `8` is not a national prefix, but the first digit\r\n// of a national (significant) number.\r\n// Same's with Belarus:\r\n// `82004910060` is a valid national (significant) number,\r\n// but `2004910060` is not.\r\n// To support such cases (to prevent the code from always stripping\r\n// national prefix), a condition is imposed: a national prefix\r\n// is not extracted when the original number is \"viable\" and the\r\n// resultant number is not, a \"viable\" national number being the one\r\n// that matches `national_number_pattern`.\r\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\r\n\t// The equivalent in Google's code is:\r\n\t// https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\r\n\tif (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) &&\r\n\t\t!matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\r\n\t\treturn false\r\n\t}\r\n\t// This \"is possible\" national number (length) check has been commented out\r\n\t// because it's superceded by the (effectively) same check done in the\r\n\t// `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\r\n\t// In other words, why run the same check twice if it could only be run once.\r\n\t// // Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t// // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\r\n\t// // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\r\n\t// if (metadata.possibleLengths()) {\r\n\t// \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\r\n\t// \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\r\n\t// \t\treturn false\r\n\t// \t}\r\n\t// }\r\n\treturn true\r\n}\r\n\r\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'TOO_SHORT':\r\n\t\tcase 'INVALID_LENGTH':\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\treturn false\r\n\t\tdefault:\r\n\t\t\treturn true\r\n\t}\r\n}","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\r\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\r\n\tif (number && metadata.numberingPlan.nationalPrefixForParsing()) {\r\n\t\t// See METADATA.md for the description of\r\n\t\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\r\n\t\t// Attempt to parse the first digits as a national prefix.\r\n\t\tconst prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')')\r\n\t\tconst prefixMatch = prefixPattern.exec(number)\r\n\t\tif (prefixMatch) {\r\n\t\t\tlet nationalNumber\r\n\t\t\tlet carrierCode\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\t\t// If a `national_prefix_for_parsing` has any \"capturing groups\"\r\n\t\t\t// then it means that the national (significant) number is equal to\r\n\t\t\t// those \"capturing groups\" transformed via `national_prefix_transform_rule`,\r\n\t\t\t// and nothing could be said about the actual national prefix:\r\n\t\t\t// what is it and was it even there.\r\n\t\t\t// If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\r\n\t\t\t// then everything it matches is a national prefix.\r\n\t\t\t// To determine whether `national_prefix_for_parsing` matched any\r\n\t\t\t// \"capturing groups\", the value of the result of calling `.exec()`\r\n\t\t\t// is looked at, and if it has non-undefined values where there're\r\n\t\t\t// \"capturing groups\" in the regular expression, then it means\r\n\t\t\t// that \"capturing groups\" have been matched.\r\n\t\t\t// It's not possible to tell whether there'll be any \"capturing gropus\"\r\n\t\t\t// before the matching process, because a `national_prefix_for_parsing`\r\n\t\t\t// could exhibit both behaviors.\r\n\t\t\tconst capturedGroupsCount = prefixMatch.length - 1\r\n\t\t\tconst hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]\r\n\t\t\tif (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\r\n\t\t\t\tnationalNumber = number.replace(\r\n\t\t\t\t\tprefixPattern,\r\n\t\t\t\t\tmetadata.nationalPrefixTransformRule()\r\n\t\t\t\t)\r\n\t\t\t\t// If there's more than one captured group,\r\n\t\t\t\t// then carrier code is the second one.\r\n\t\t\t\tif (capturedGroupsCount > 1) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// If there're no \"capturing groups\",\r\n\t\t\t// or if there're \"capturing groups\" but no\r\n\t\t\t// `national_prefix_transform_rule`,\r\n\t\t\t// then just strip the national prefix from the number,\r\n\t\t\t// and possibly a carrier code.\r\n\t\t\t// Seems like there could be more.\r\n\t\t\telse {\r\n\t\t\t\t// `prefixBeforeNationalNumber` is the whole substring matched by\r\n\t\t\t\t// the `national_prefix_for_parsing` regular expression.\r\n\t\t\t\t// There seem to be no guarantees that it's just a national prefix.\r\n\t\t\t\t// For example, if there's a carrier code, it's gonna be a\r\n\t\t\t\t// part of `prefixBeforeNationalNumber` too.\r\n\t\t\t\tconst prefixBeforeNationalNumber = prefixMatch[0]\r\n\t\t\t\tnationalNumber = number.slice(prefixBeforeNationalNumber.length)\r\n\t\t\t\t// If there's at least one captured group,\r\n\t\t\t\t// then carrier code is the first one.\r\n\t\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Tries to guess whether a national prefix was present in the input.\r\n\t\t\t// This is not something copy-pasted from Google's library:\r\n\t\t\t// they don't seem to have an equivalent for that.\r\n\t\t\t// So this isn't an \"officially approved\" way of doing something like that.\r\n\t\t\t// But since there seems no other existing method, this library uses it.\r\n\t\t\tlet nationalPrefix\r\n\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\tconst possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1])\r\n\t\t\t\tconst possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup)\r\n\t\t\t\t// Example: an Argentinian (AR) phone number `0111523456789`.\r\n\t\t\t\t// `prefixMatch[0]` is `01115`, and `$1` is `11`,\r\n\t\t\t\t// and the rest of the phone number is `23456789`.\r\n\t\t\t\t// The national number is transformed via `9$1` to `91123456789`.\r\n\t\t\t\t// National prefix `0` is detected being present at the start.\r\n\t\t\t\t// if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\r\n\t\t\t\tif (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\r\n\t\t\t\t\tnationalPrefix = metadata.numberingPlan.nationalPrefix()\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnationalPrefix = prefixMatch[0]\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tnationalPrefix,\r\n\t\t\t\tcarrierCode\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n   return {\r\n   \tnationalNumber: number\r\n   }\r\n}","import Metadata from '../metadata.js'\r\nimport getNumberType from './getNumberType.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\t// Is always non-empty, because `callingCode` is always valid\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata)\r\n}\r\n\r\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\tfor (const country of possibleCountries) {\r\n\t\tmetadata.country(country)\r\n\t\t// Leading digits check would be the simplest and fastest one.\r\n\t\t// Leading digits patterns are only defined for about 20% of all countries.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\r\n\t\t// Matching \"leading digits\" is a sufficient but not necessary condition.\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}","import Metadata from './metadata.js'\r\nimport checkNumberLength from './helpers/checkNumberLength.js'\r\n\r\nexport default function isPossiblePhoneNumber(input, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2) {\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t} else {\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\t// Old metadata (< 1.0.18) had no \"possible length\" data.\r\n\tif (metadata.possibleLengths()) {\r\n\t\treturn isPossibleNumber(input.phone || input.nationalNumber, metadata)\r\n\t} else {\r\n\t\t// There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\r\n\t\t// were missing for \"non-geographical\" numbering plans.\r\n\t\t// Just assume the number is possible in such cases:\r\n\t\t// it's unlikely that anyone generated their custom metadata\r\n\t\t// in that short period of time (one day).\r\n\t\t// This code can be removed in some future major version update.\r\n\t\tif (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\r\n\t\t\t// \"Non-geographic entities\" did't have `possibleLengths`\r\n\t\t\t// due to a bug in metadata generation process.\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\tthrow new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isPossibleNumber(nationalNumber, metadata) { //, isInternational) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !isInternational\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}","import isViablePhoneNumber from './isViablePhoneNumber.js'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text) {\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';')) {\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name) {\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext }) {\r\n\tif (!number) {\r\n\t\treturn ''\r\n\t}\r\n\tif (number[0] !== '+') {\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}","import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from '../constants.js'\r\n\r\nimport createExtensionPattern from './extension/createExtensionPattern.js'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nexport const VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// This regular expression isn't present in Google's `libphonenumber`\r\n// and is only used to determine whether the phone number being input\r\n// is too short for it to even consider it a \"valid\" number.\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nconst VALID_PHONE_NUMBER_START_REG_EXP = new RegExp(\r\n\t'^' +\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){1,2}' +\r\n\t'$'\r\n, 'i')\r\n\r\nexport const VALID_PHONE_NUMBER_WITH_EXTENSION =\r\n\tVALID_PHONE_NUMBER +\r\n\t// Phone number extensions\r\n\t'(?:' + createExtensionPattern() + ')?'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER_WITH_EXTENSION +\r\n\t'$'\r\n, 'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number) {\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}\r\n\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nexport function isViablePhoneNumberStart(number) {\r\n\treturn VALID_PHONE_NUMBER_START_REG_EXP.test(number)\r\n}","import { VALID_DIGITS } from '../../constants.js'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\r\nconst getExtensionDigitsPattern = (maxLength) => `([${VALID_DIGITS}]{1,${maxLength}})`\r\n\r\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\r\nexport default function createExtensionPattern(purpose) {\r\n\t// We cap the maximum length of an extension based on the ambiguity of the way\r\n\t// the extension is prefixed. As per ITU, the officially allowed length for\r\n\t// extensions is actually 40, but we don't support this since we haven't seen real\r\n\t// examples and this introduces many false interpretations as the extension labels\r\n\t// are not standardized.\r\n\t/** @type {string} */\r\n\tvar extLimitAfterExplicitLabel = '20';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterLikelyLabel = '15';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterAmbiguousChar = '9';\r\n\t/** @type {string} */\r\n\tvar extLimitWhenNotSure = '6';\r\n\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\u00A0\\\\t,]*\";\r\n\t// Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\r\n\t/** @type {string} */\r\n\tvar possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*\";\r\n\t/** @type {string} */\r\n\tvar optionalExtnSuffix = \"#?\";\r\n\r\n\t// Here the extension is called out in more explicit way, i.e mentioning it obvious\r\n\t// patterns like \"ext.\".\r\n\t/** @type {string} */\r\n\tvar explicitExtLabels =\r\n\t  \"(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\";\r\n\t// One-character symbols that can be used to indicate an extension, and less\r\n\t// commonly used or more ambiguous extension labels.\r\n\t/** @type {string} */\r\n\tvar ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\";\r\n\t// When extension is not separated clearly.\r\n\t/** @type {string} */\r\n\tvar ambiguousSeparator = \"[- ]+\";\r\n\t// This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\r\n\t// comma as extension label may have it.\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsNumberExtLabelNoComma = \"[ \\u00A0\\\\t]*\";\r\n\t// \",,\" is commonly used for auto dialling the extension when connected. First\r\n\t// comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\r\n\t// not repeat it here. Semi-colon works in Iphone and Android also to pop up a\r\n\t// button with the extension number following.\r\n\t/** @type {string} */\r\n\tvar autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\r\n\r\n\t/** @type {string} */\r\n\tvar rfcExtn = RFC3966_EXTN_PREFIX\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\r\n\t/** @type {string} */\r\n\tvar explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel)\r\n\t     + optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t+ getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar americanStyleExtnWithSuffix = ambiguousSeparator\r\n\t+ getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\r\n\r\n\t/** @type {string} */\r\n\tvar autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t     + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterLikelyLabel)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t    + \"(?:,)+\" + possibleCharsAfterExtLabel\r\n\t    + getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t    + optionalExtnSuffix;\r\n\r\n\t// The first regular expression covers RFC 3966 format, where the extension is added\r\n\t// using \";ext=\". The second more generic where extension is mentioned with explicit\r\n\t// labels like \"ext:\". In both the above cases we allow more numbers in extension than\r\n\t// any other extension labels. The third one captures when single character extension\r\n\t// labels or less commonly used labels are used. In such cases we capture fewer\r\n\t// extension digits in order to reduce the chance of falsely interpreting two\r\n\t// numbers beside each other as a number + extension. The fourth one covers the\r\n\t// special case of American numbers where the extension is written with a hash\r\n\t// at the end, such as \"- 503#\". The fifth one is exclusively for extension\r\n\t// autodialling formats which are used when dialling and in this case we accept longer\r\n\t// extensions. The last one is more liberal on the number of commas that acts as\r\n\t// extension labels, so we have a strict cap on the number of digits in such extensions.\r\n\treturn rfcExtn + \"|\"\r\n\t       + explicitExtn + \"|\"\r\n\t       + ambiguousExtn + \"|\"\r\n\t       + americanStyleExtnWithSuffix + \"|\"\r\n\t       + autoDiallingExtn + \"|\"\r\n\t       + onlyCommasExtn;\r\n}","import {\r\n\tgetCountryCallingCode,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\nconst ONLY_DIGITS_REGEXP = /^\\d+$/\r\nexport default function getInternationalPhoneNumberPrefix(country, metadata) {\r\n\t// Standard international phone number prefix: \"+\" and \"country calling code\".\r\n\tlet prefix = '+' + getCountryCallingCode(country, metadata)\r\n\t// Get \"leading digits\" for a phone number of the country.\r\n\t// If there're \"leading digits\" then they can be part of the prefix too.\r\n\tmetadata = new Metadata(metadata)\r\n\tmetadata.selectNumberingPlan(country)\r\n\tif (metadata.numberingPlan.leadingDigits() && ONLY_DIGITS_REGEXP.test(metadata.numberingPlan.leadingDigits())) {\r\n\t\tprefix += metadata.numberingPlan.leadingDigits()\r\n\t}\r\n\treturn prefix\r\n}","import { getCountryCallingCode } from 'libphonenumber-js/core'\r\n\r\nexport function getInputValuePrefix({\r\n\tcountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tmetadata\r\n}) {\r\n\treturn country && international && !withCountryCallingCode ?\r\n\t\t`+${getCountryCallingCode(country, metadata)}` :\r\n\t\t''\r\n}\r\n\r\nexport function removeInputValuePrefix(value, prefix) {\r\n\tif (prefix) {\r\n\t\tvalue = value.slice(prefix.length)\r\n\t\tif (value[0] === ' ') {\r\n\t\t\tvalue = value.slice(1)\r\n\t\t}\r\n\t}\r\n\treturn value\r\n}","// https://stackoverflow.com/a/46971044/970769\r\n// \"Breaking changes in Typescript 2.1\"\r\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\r\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\r\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\nexport default class ParseError extends Error {\r\n  constructor(code) {\r\n    super(code)\r\n    // Set the prototype explicitly.\r\n    // Any subclass of FooError will have to manually set the prototype as well.\r\n    Object.setPrototypeOf(this, ParseError.prototype)\r\n    this.name = this.constructor.name\r\n  }\r\n}","export default {\n  \"ext\": \"ext.\",\n  \"country\": \"Phone number country\",\n  \"phone\": \"Phone\",\n  \"AB\": \"Abkhazia\",\n  \"AC\": \"Ascension Island\",\n  \"AD\": \"Andorra\",\n  \"AE\": \"United Arab Emirates\",\n  \"AF\": \"Afghanistan\",\n  \"AG\": \"Antigua and Barbuda\",\n  \"AI\": \"Anguilla\",\n  \"AL\": \"Albania\",\n  \"AM\": \"Armenia\",\n  \"AO\": \"Angola\",\n  \"AQ\": \"Antarctica\",\n  \"AR\": \"Argentina\",\n  \"AS\": \"American Samoa\",\n  \"AT\": \"Austria\",\n  \"AU\": \"Australia\",\n  \"AW\": \"Aruba\",\n  \"AX\": \"Åland Islands\",\n  \"AZ\": \"Azerbaijan\",\n  \"BA\": \"Bosnia and Herzegovina\",\n  \"BB\": \"Barbados\",\n  \"BD\": \"Bangladesh\",\n  \"BE\": \"Belgium\",\n  \"BF\": \"Burkina Faso\",\n  \"BG\": \"Bulgaria\",\n  \"BH\": \"Bahrain\",\n  \"BI\": \"Burundi\",\n  \"BJ\": \"Benin\",\n  \"BL\": \"Saint Barthélemy\",\n  \"BM\": \"Bermuda\",\n  \"BN\": \"Brunei Darussalam\",\n  \"BO\": \"Bolivia\",\n  \"BQ\": \"Bonaire, Sint Eustatius and Saba\",\n  \"BR\": \"Brazil\",\n  \"BS\": \"Bahamas\",\n  \"BT\": \"Bhutan\",\n  \"BV\": \"Bouvet Island\",\n  \"BW\": \"Botswana\",\n  \"BY\": \"Belarus\",\n  \"BZ\": \"Belize\",\n  \"CA\": \"Canada\",\n  \"CC\": \"Cocos (Keeling) Islands\",\n  \"CD\": \"Congo, Democratic Republic of the\",\n  \"CF\": \"Central African Republic\",\n  \"CG\": \"Congo\",\n  \"CH\": \"Switzerland\",\n  \"CI\": \"Cote d'Ivoire\",\n  \"CK\": \"Cook Islands\",\n  \"CL\": \"Chile\",\n  \"CM\": \"Cameroon\",\n  \"CN\": \"China\",\n  \"CO\": \"Colombia\",\n  \"CR\": \"Costa Rica\",\n  \"CU\": \"Cuba\",\n  \"CV\": \"Cape Verde\",\n  \"CW\": \"Curaçao\",\n  \"CX\": \"Christmas Island\",\n  \"CY\": \"Cyprus\",\n  \"CZ\": \"Czech Republic\",\n  \"DE\": \"Germany\",\n  \"DJ\": \"Djibouti\",\n  \"DK\": \"Denmark\",\n  \"DM\": \"Dominica\",\n  \"DO\": \"Dominican Republic\",\n  \"DZ\": \"Algeria\",\n  \"EC\": \"Ecuador\",\n  \"EE\": \"Estonia\",\n  \"EG\": \"Egypt\",\n  \"EH\": \"Western Sahara\",\n  \"ER\": \"Eritrea\",\n  \"ES\": \"Spain\",\n  \"ET\": \"Ethiopia\",\n  \"FI\": \"Finland\",\n  \"FJ\": \"Fiji\",\n  \"FK\": \"Falkland Islands\",\n  \"FM\": \"Federated States of Micronesia\",\n  \"FO\": \"Faroe Islands\",\n  \"FR\": \"France\",\n  \"GA\": \"Gabon\",\n  \"GB\": \"United Kingdom\",\n  \"GD\": \"Grenada\",\n  \"GE\": \"Georgia\",\n  \"GF\": \"French Guiana\",\n  \"GG\": \"Guernsey\",\n  \"GH\": \"Ghana\",\n  \"GI\": \"Gibraltar\",\n  \"GL\": \"Greenland\",\n  \"GM\": \"Gambia\",\n  \"GN\": \"Guinea\",\n  \"GP\": \"Guadeloupe\",\n  \"GQ\": \"Equatorial Guinea\",\n  \"GR\": \"Greece\",\n  \"GS\": \"South Georgia and the South Sandwich Islands\",\n  \"GT\": \"Guatemala\",\n  \"GU\": \"Guam\",\n  \"GW\": \"Guinea-Bissau\",\n  \"GY\": \"Guyana\",\n  \"HK\": \"Hong Kong\",\n  \"HM\": \"Heard Island and McDonald Islands\",\n  \"HN\": \"Honduras\",\n  \"HR\": \"Croatia\",\n  \"HT\": \"Haiti\",\n  \"HU\": \"Hungary\",\n  \"ID\": \"Indonesia\",\n  \"IE\": \"Ireland\",\n  \"IL\": \"Israel\",\n  \"IM\": \"Isle of Man\",\n  \"IN\": \"India\",\n  \"IO\": \"British Indian Ocean Territory\",\n  \"IQ\": \"Iraq\",\n  \"IR\": \"Iran\",\n  \"IS\": \"Iceland\",\n  \"IT\": \"Italy\",\n  \"JE\": \"Jersey\",\n  \"JM\": \"Jamaica\",\n  \"JO\": \"Jordan\",\n  \"JP\": \"Japan\",\n  \"KE\": \"Kenya\",\n  \"KG\": \"Kyrgyzstan\",\n  \"KH\": \"Cambodia\",\n  \"KI\": \"Kiribati\",\n  \"KM\": \"Comoros\",\n  \"KN\": \"Saint Kitts and Nevis\",\n  \"KP\": \"North Korea\",\n  \"KR\": \"South Korea\",\n  \"KW\": \"Kuwait\",\n  \"KY\": \"Cayman Islands\",\n  \"KZ\": \"Kazakhstan\",\n  \"LA\": \"Laos\",\n  \"LB\": \"Lebanon\",\n  \"LC\": \"Saint Lucia\",\n  \"LI\": \"Liechtenstein\",\n  \"LK\": \"Sri Lanka\",\n  \"LR\": \"Liberia\",\n  \"LS\": \"Lesotho\",\n  \"LT\": \"Lithuania\",\n  \"LU\": \"Luxembourg\",\n  \"LV\": \"Latvia\",\n  \"LY\": \"Libya\",\n  \"MA\": \"Morocco\",\n  \"MC\": \"Monaco\",\n  \"MD\": \"Moldova\",\n  \"ME\": \"Montenegro\",\n  \"MF\": \"Saint Martin (French Part)\",\n  \"MG\": \"Madagascar\",\n  \"MH\": \"Marshall Islands\",\n  \"MK\": \"North Macedonia\",\n  \"ML\": \"Mali\",\n  \"MM\": \"Myanmar\",\n  \"MN\": \"Mongolia\",\n  \"MO\": \"Macao\",\n  \"MP\": \"Northern Mariana Islands\",\n  \"MQ\": \"Martinique\",\n  \"MR\": \"Mauritania\",\n  \"MS\": \"Montserrat\",\n  \"MT\": \"Malta\",\n  \"MU\": \"Mauritius\",\n  \"MV\": \"Maldives\",\n  \"MW\": \"Malawi\",\n  \"MX\": \"Mexico\",\n  \"MY\": \"Malaysia\",\n  \"MZ\": \"Mozambique\",\n  \"NA\": \"Namibia\",\n  \"NC\": \"New Caledonia\",\n  \"NE\": \"Niger\",\n  \"NF\": \"Norfolk Island\",\n  \"NG\": \"Nigeria\",\n  \"NI\": \"Nicaragua\",\n  \"NL\": \"Netherlands\",\n  \"NO\": \"Norway\",\n  \"NP\": \"Nepal\",\n  \"NR\": \"Nauru\",\n  \"NU\": \"Niue\",\n  \"NZ\": \"New Zealand\",\n  \"OM\": \"Oman\",\n  \"OS\": \"South Ossetia\",\n  \"PA\": \"Panama\",\n  \"PE\": \"Peru\",\n  \"PF\": \"French Polynesia\",\n  \"PG\": \"Papua New Guinea\",\n  \"PH\": \"Philippines\",\n  \"PK\": \"Pakistan\",\n  \"PL\": \"Poland\",\n  \"PM\": \"Saint Pierre and Miquelon\",\n  \"PN\": \"Pitcairn\",\n  \"PR\": \"Puerto Rico\",\n  \"PS\": \"Palestine\",\n  \"PT\": \"Portugal\",\n  \"PW\": \"Palau\",\n  \"PY\": \"Paraguay\",\n  \"QA\": \"Qatar\",\n  \"RE\": \"Reunion\",\n  \"RO\": \"Romania\",\n  \"RS\": \"Serbia\",\n  \"RU\": \"Russia\",\n  \"RW\": \"Rwanda\",\n  \"SA\": \"Saudi Arabia\",\n  \"SB\": \"Solomon Islands\",\n  \"SC\": \"Seychelles\",\n  \"SD\": \"Sudan\",\n  \"SE\": \"Sweden\",\n  \"SG\": \"Singapore\",\n  \"SH\": \"Saint Helena\",\n  \"SI\": \"Slovenia\",\n  \"SJ\": \"Svalbard and Jan Mayen\",\n  \"SK\": \"Slovakia\",\n  \"SL\": \"Sierra Leone\",\n  \"SM\": \"San Marino\",\n  \"SN\": \"Senegal\",\n  \"SO\": \"Somalia\",\n  \"SR\": \"Suriname\",\n  \"SS\": \"South Sudan\",\n  \"ST\": \"Sao Tome and Principe\",\n  \"SV\": \"El Salvador\",\n  \"SX\": \"Sint Maarten\",\n  \"SY\": \"Syria\",\n  \"SZ\": \"Swaziland\",\n  \"TA\": \"Tristan da Cunha\",\n  \"TC\": \"Turks and Caicos Islands\",\n  \"TD\": \"Chad\",\n  \"TF\": \"French Southern Territories\",\n  \"TG\": \"Togo\",\n  \"TH\": \"Thailand\",\n  \"TJ\": \"Tajikistan\",\n  \"TK\": \"Tokelau\",\n  \"TL\": \"Timor-Leste\",\n  \"TM\": \"Turkmenistan\",\n  \"TN\": \"Tunisia\",\n  \"TO\": \"Tonga\",\n  \"TR\": \"Turkey\",\n  \"TT\": \"Trinidad and Tobago\",\n  \"TV\": \"Tuvalu\",\n  \"TW\": \"Taiwan\",\n  \"TZ\": \"Tanzania\",\n  \"UA\": \"Ukraine\",\n  \"UG\": \"Uganda\",\n  \"UM\": \"United States Minor Outlying Islands\",\n  \"US\": \"United States\",\n  \"UY\": \"Uruguay\",\n  \"UZ\": \"Uzbekistan\",\n  \"VA\": \"Holy See (Vatican City State)\",\n  \"VC\": \"Saint Vincent and the Grenadines\",\n  \"VE\": \"Venezuela\",\n  \"VG\": \"Virgin Islands, British\",\n  \"VI\": \"Virgin Islands, U.S.\",\n  \"VN\": \"Vietnam\",\n  \"VU\": \"Vanuatu\",\n  \"WF\": \"Wallis and Futuna\",\n  \"WS\": \"Samoa\",\n  \"XK\": \"Kosovo\",\n  \"YE\": \"Yemen\",\n  \"YT\": \"Mayotte\",\n  \"ZA\": \"South Africa\",\n  \"ZM\": \"Zambia\",\n  \"ZW\": \"Zimbabwe\",\n  \"ZZ\": \"International\"\n}","import PropTypes from 'prop-types'\r\n\r\nexport const metadata = PropTypes.shape({\r\n\tcountry_calling_codes : PropTypes.object.isRequired,\r\n\tcountries : PropTypes.object.isRequired\r\n})\r\n\r\nexport const labels = PropTypes.objectOf(PropTypes.string)","/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\r\nexport default function getCountryFlag(country) {\r\n\treturn getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1])\r\n}\r\n\r\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\r\nfunction getRegionalIndicatorSymbol(letter) {\r\n\treturn String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0))\r\n}","import React, { useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode'\r\n\r\nexport default function CountrySelect({\r\n\tvalue,\r\n\tonChange,\r\n\toptions,\r\n\t...rest\r\n}) {\r\n\tconst onChange_ = useCallback((event) => {\r\n\t\tconst value = event.target.value\r\n\t\tonChange(value === 'ZZ' ? undefined : value)\r\n\t}, [onChange])\r\n\r\n\tconst selectedOption = useMemo(() => {\r\n\t\treturn getSelectedOption(options, value)\r\n\t}, [options, value])\r\n\r\n\t// \"ZZ\" means \"International\".\r\n\t// (HTML requires each `<option/>` have some string `value`).\r\n\treturn (\r\n\t\t<select\r\n\t\t\t{...rest}\r\n\t\t\tvalue={value || 'ZZ'}\r\n\t\t\tonChange={onChange_}>\r\n\t\t\t{options.map(({ value, label, divider }) => (\r\n\t\t\t\t<option\r\n\t\t\t\t\tkey={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\tvalue={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\tdisabled={divider ? true : false}\r\n\t\t\t\t\tstyle={divider ? DIVIDER_STYLE : undefined}>\r\n\t\t\t\t\t{label}\r\n\t\t\t\t</option>\r\n\t\t\t))}\r\n\t\t</select>\r\n\t)\r\n}\r\n\r\nCountrySelect.propTypes = {\r\n\t/**\r\n\t * A two-letter country code.\r\n\t * Example: \"US\", \"RU\", etc.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string`.\r\n\t * Updates the `value` property.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// `<select/>` options.\r\n\toptions: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tvalue: PropTypes.string,\r\n\t\tlabel: PropTypes.string,\r\n\t\tdivider: PropTypes.bool\r\n\t})).isRequired\r\n}\r\n\r\nconst DIVIDER_STYLE = {\r\n\tfontSize: '1px',\r\n\tbackgroundColor: 'currentColor',\r\n\tcolor: 'inherit'\r\n}\r\n\r\nexport function CountrySelectWithIcon({\r\n\tvalue,\r\n\toptions,\r\n\tclassName,\r\n\ticonComponent: Icon,\r\n\tgetIconAspectRatio,\r\n\tarrowComponent: Arrow,\r\n\tunicodeFlags,\r\n\t...rest\r\n}) {\r\n\tconst selectedOption = useMemo(() => {\r\n\t\treturn getSelectedOption(options, value)\r\n\t}, [options, value])\r\n\r\n\treturn (\r\n\t\t<div className=\"PhoneInputCountry\">\r\n\t\t\t<CountrySelect\r\n\t\t\t\t{...rest}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\toptions={options}\r\n\t\t\t\tclassName={classNames('PhoneInputCountrySelect', className)}/>\r\n\r\n\t\t\t{/* Either a Unicode flag icon. */}\r\n\t\t\t{(unicodeFlags && value) &&\r\n\t\t\t\t<div className=\"PhoneInputCountryIconUnicode\">\r\n\t\t\t\t\t{getUnicodeFlagIcon(value)}\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\r\n\t\t\t{/* Or an SVG flag icon. */}\r\n\t\t\t{!(unicodeFlags && value) &&\r\n\t\t\t\t<Icon\r\n\t\t\t\t\taria-hidden\r\n\t\t\t\t\tcountry={value}\r\n\t\t\t\t\tlabel={selectedOption && selectedOption.label}\r\n\t\t\t\t\taspectRatio={unicodeFlags ? 1 : undefined}/>\r\n\t\t\t}\r\n\r\n\t\t\t<Arrow/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nCountrySelectWithIcon.propTypes = {\r\n\t// Country flag component.\r\n\ticonComponent: PropTypes.elementType,\r\n\r\n\t// Select arrow component.\r\n\tarrowComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Set to `true` to render Unicode flag icons instead of SVG images.\r\n\tunicodeFlags: PropTypes.bool\r\n}\r\n\r\nCountrySelectWithIcon.defaultProps = {\r\n\tarrowComponent: () => <div className=\"PhoneInputCountrySelectArrow\"/>\r\n}\r\n\r\nfunction getSelectedOption(options, value) {\r\n\tfor (const option of options) {\r\n\t\tif (!option.divider && option.value === value) {\r\n\t\t\treturn option\r\n\t\t}\r\n\t}\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n// Default country flag icon.\r\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\r\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\r\nexport default function FlagComponent({\r\n\tcountry,\r\n\tcountryName,\r\n\tflags,\r\n\tflagUrl,\r\n\t...rest\r\n}) {\r\n\tif (flags && flags[country]) {\r\n\t\treturn flags[country]({ title: countryName })\r\n\t}\r\n\treturn (\r\n\t\t<img\r\n\t\t\t{...rest}\r\n\t\t\talt={countryName}\r\n\t\t\trole={countryName ? undefined : \"presentation\"}\r\n\t\t\tsrc={flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())}/>\r\n\t)\r\n}\r\n\r\nFlagComponent.propTypes = {\r\n\t// The country to be selected by default.\r\n\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tcountry: PropTypes.string.isRequired,\r\n\r\n\t// Will be HTML `title` attribute of the `<img/>`.\r\n\tcountryName: PropTypes.string.isRequired,\r\n\r\n\t// Country flag icon components.\r\n\t// By default flag icons are inserted as `<img/>`s\r\n\t// with their `src` pointed to `country-flag-icons` gitlab pages website.\r\n\t// There might be cases (e.g. an offline application)\r\n\t// where having a large (3 megabyte) `<svg/>` flags\r\n\t// bundle is more appropriate.\r\n\t// `import flags from 'react-phone-number-input/flags'`.\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t// A URL for a country flag icon.\r\n\t// By default it points to `country-flag-icons` gitlab pages website.\r\n\tflagUrl: PropTypes.string.isRequired\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function InternationalIcon({ aspectRatio, ...rest }) {\r\n\tif (aspectRatio === 1) {\r\n\t\treturn <InternationalIcon1x1 {...rest}/>\r\n\t} else {\r\n\t\treturn <InternationalIcon3x2 {...rest}/>\r\n\t}\r\n}\r\n\r\nInternationalIcon.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\taspectRatio: PropTypes.number\r\n}\r\n\r\n// 3x2.\r\n// Using `<title/>` in `<svg/>`s:\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\r\nfunction InternationalIcon3x2({ title, ...rest }) {\r\n\treturn (\r\n\t\t<svg\r\n\t\t\t{...rest}\r\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\tviewBox=\"0 0 75 50\">\r\n\t\t\t<title>{title}</title>\r\n\t\t\t<g\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconGlobe\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeMiterlimit=\"10\">\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"/>\r\n\t\t\t\t<path d=\"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"/>\r\n\t\t\t\t<line x1=\"26\" y1=\"25\" x2=\"74\" y2=\"25\"/>\r\n\t\t\t\t<line x1=\"50\" y1=\"1\" x2=\"50\" y2=\"49\"/>\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"/>\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"/>\r\n\t\t\t</g>\r\n\t\t\t<path\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconPhone\"\r\n\t\t\t\tstroke=\"none\"\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"/>\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\nInternationalIcon3x2.propTypes = {\r\n\ttitle: PropTypes.string.isRequired\r\n}\r\n\r\n// 1x1.\r\n// Using `<title/>` in `<svg/>`s:\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\r\nfunction InternationalIcon1x1({ title, ...rest }) {\r\n\treturn (\r\n\t\t<svg\r\n\t\t\t{...rest}\r\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\tviewBox=\"0 0 50 50\">\r\n\t\t\t<title>{title}</title>\r\n\t\t\t<g\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconGlobe\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeLinecap=\"round\">\r\n\t\t\t\t<path d=\"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"/>\r\n\t\t\t\t<path d=\"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"/>\r\n\t\t\t\t<path d=\"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"/>\r\n\t\t\t\t<path d=\"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"/>\r\n\t\t\t\t<line x1=\"27.8\" y1=\"0.85\" x2=\"27.8\" y2=\"34.61\"/>\r\n\t\t\t\t<line x1=\"15.2\" y1=\"22.23\" x2=\"49.15\" y2=\"22.23\"/>\r\n\t\t\t</g>\r\n\t\t\t<path\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconPhone\"\r\n\t\t\t\tstroke=\"transparent\"\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"/>\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\nInternationalIcon1x1.propTypes = {\r\n\ttitle: PropTypes.string.isRequired\r\n}\r\n","import { isSupportedCountry } from 'libphonenumber-js/core'\r\nexport { getCountries } from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\r\nexport function sortCountryOptions(options, order) {\r\n\tif (!order) {\r\n\t\treturn options\r\n\t}\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\tfor (const element of order) {\r\n\t\tif (element === '|') {\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t} else if (element === '...' || element === '…') {\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t} else {\r\n\t\t\tlet countryCode\r\n\t\t\tif (element === '🌐') {\r\n\t\t\t\tcountryCode = undefined\r\n\t\t\t} else {\r\n\t\t\t\tcountryCode = element\r\n\t\t\t}\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === countryCode)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nexport function getSupportedCountryOptions(countryOptions, metadata) {\r\n\tif (countryOptions) {\r\n\t\tcountryOptions = countryOptions.filter((option) => {\r\n\t\t\tswitch (option) {\r\n\t\t\t\tcase '🌐':\r\n\t\t\t\tcase '|':\r\n\t\t\t\tcase '...':\r\n\t\t\t\tcase '…':\r\n\t\t\t\t\treturn true\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn isCountrySupportedWithError(option, metadata)\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (countryOptions.length > 0) {\r\n\t\t\treturn countryOptions\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isCountrySupportedWithError(country, metadata) {\r\n\tif (isSupportedCountry(country, metadata)) {\r\n\t\treturn true\r\n\t} else {\r\n\t\tconsole.error(`Country not found: ${country}`)\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nexport function getSupportedCountries(countries, metadata) {\r\n\tif (countries) {\r\n\t\tcountries = countries.filter(country => isCountrySupportedWithError(country, metadata))\r\n\t\tif (countries.length === 0) {\r\n\t\t\tcountries = undefined\r\n\t\t}\r\n\t}\r\n\treturn countries\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport DefaultInternationalIcon from './InternationalIcon.js'\r\nimport Flag from './Flag.js'\r\n\r\nexport function createCountryIconComponent({\r\n\tflags,\r\n\tflagUrl,\r\n\tflagComponent: FlagComponent,\r\n\tinternationalIcon: InternationalIcon\r\n}) {\r\n\tfunction CountryIcon({\r\n\t\tcountry,\r\n\t\tlabel,\r\n\t\taspectRatio,\r\n\t\t...rest\r\n\t}) {\r\n\t\t// `aspectRatio` is currently a hack for the default \"International\" icon\r\n\t\t// to render it as a square when Unicode flag icons are used.\r\n\t\t// So `aspectRatio` property is only used with the default \"International\" icon.\r\n\t\tconst _aspectRatio = InternationalIcon === DefaultInternationalIcon ? aspectRatio : undefined\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\t{...rest}\r\n\t\t\t\tclassName={classNames('PhoneInputCountryIcon', {\r\n\t\t\t\t\t'PhoneInputCountryIcon--square': _aspectRatio === 1,\r\n\t\t\t\t\t'PhoneInputCountryIcon--border': country\r\n\t\t\t\t})}>\r\n\t\t\t\t{\r\n\t\t\t\t\tcountry\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<FlagComponent\r\n\t\t\t\t\t\tcountry={country}\r\n\t\t\t\t\t\tcountryName={label}\r\n\t\t\t\t\t\tflags={flags}\r\n\t\t\t\t\t\tflagUrl={flagUrl}\r\n\t\t\t\t\t\tclassName=\"PhoneInputCountryIconImg\"/>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<InternationalIcon\r\n\t\t\t\t\t\ttitle={label}\r\n\t\t\t\t\t\taspectRatio={_aspectRatio}\r\n\t\t\t\t\t\tclassName=\"PhoneInputCountryIconImg\"/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tCountryIcon.propTypes = {\r\n\t\tcountry: PropTypes.string,\r\n\t\tlabel: PropTypes.string.isRequired,\r\n\t\taspectRatio: PropTypes.number\r\n\t}\r\n\r\n\treturn CountryIcon\r\n}\r\n\r\nexport default createCountryIconComponent({\r\n\t// Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\tflagComponent: Flag,\r\n\tinternationalIcon: DefaultInternationalIcon\r\n})","import parsePhoneNumber_, {\r\n\tgetCountryCallingCode,\r\n\tAsYouType,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix.js'\r\n\r\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\r\nexport function getPreSelectedCountry({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tlet country\r\n\r\n\t// If can get country from E.164 phone number\r\n\t// then it overrides the `country` passed (or not passed).\r\n\tif (phoneNumber && phoneNumber.country) {\r\n\t\t// `country` will be left `undefined` in case of non-detection.\r\n\t\tcountry = phoneNumber.country\r\n\t} else if (defaultCountry) {\r\n\t\tif (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// Only pre-select a country if it's in the available `countries` list.\r\n\tif (countries && countries.indexOf(country) < 0) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// If there will be no \"International\" option\r\n\t// then some `country` must be selected.\r\n\t// It will still be the wrong country though.\r\n\t// But still country `<select/>` can't be left in a broken state.\r\n\tif (!country && required && countries && countries.length > 0) {\r\n\t\tcountry = getAnyCountry()\r\n\t\t// noCountryMatchesTheNumber = true\r\n\t}\r\n\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\r\nexport function getCountrySelectOptions({\r\n\tcountries,\r\n\tcountryNames,\r\n\taddInternationalOption,\r\n\t// `locales` are only used in country name comparator:\r\n\t// depending on locale, string sorting order could be different.\r\n\tcompareStringsLocales,\r\n\tcompareStrings: _compareStrings\r\n}) {\r\n\t// Default country name comparator uses `String.localeCompare()`.\r\n\tif (!_compareStrings) {\r\n\t\t_compareStrings = compareStrings\r\n\t}\r\n\r\n\t// Generates a `<Select/>` option for each country.\r\n\tconst countrySelectOptions = countries.map((country) => ({\r\n\t\tvalue: country,\r\n\t\t// All `locale` country names included in this library\r\n\t\t// include all countries (this is checked at build time).\r\n\t\t// The only case when a country name might be missing\r\n\t\t// is when a developer supplies their own `labels` property.\r\n\t\t// To guard against such cases, a missing country name\r\n\t\t// is substituted by country code.\r\n\t\tlabel: countryNames[country] || country\r\n\t}))\r\n\r\n\t// Sort the list of countries alphabetically.\r\n\tcountrySelectOptions.sort((a, b) => _compareStrings(a.label, b.label, compareStringsLocales))\r\n\r\n\t// Add the \"International\" option to the country list (if suitable)\r\n\tif (addInternationalOption) {\r\n\t\tcountrySelectOptions.unshift({\r\n\t\t\tlabel: countryNames.ZZ\r\n\t\t})\r\n\t}\r\n\r\n\treturn countrySelectOptions\r\n}\r\n\r\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\r\nexport function parsePhoneNumber(value, metadata) {\r\n\treturn parsePhoneNumber_(value || '', metadata)\r\n}\r\n\r\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\r\nexport function generateNationalNumberDigits(phoneNumber) {\r\n\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n}\r\n\r\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\r\nexport function getPhoneDigitsForNewCountry(phoneDigits, {\r\n\tprevCountry,\r\n\tnewCountry,\r\n\tmetadata,\r\n\tuseNationalFormat\r\n}) {\r\n\tif (prevCountry === newCountry) {\r\n\t\treturn phoneDigits\r\n\t}\r\n\r\n\t// If `parsed_input` is empty\r\n\t// then no need to migrate anything.\r\n\tif (!phoneDigits) {\r\n\t\tif (useNationalFormat) {\r\n\t\t\treturn ''\r\n\t\t} else {\r\n\t\t\t// If `phoneDigits` is empty then set `phoneDigits` to\r\n\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\treturn getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// If switching to some country.\r\n\t// (from \"International\" or another country)\r\n\t// If switching from \"International\" then `phoneDigits` starts with a `+`.\r\n\t// Otherwise it may or may not start with a `+`.\r\n\tif (newCountry) {\r\n\t\t// If the phone number was entered in international format\r\n\t\t// then migrate it to the newly selected country.\r\n\t\t// The phone number may be incomplete.\r\n\t\t// The phone number entered not necessarily starts with\r\n\t\t// the previously selected country phone prefix.\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\t// If the international phone number is for the new country\r\n\t\t\t// then convert it to local if required.\r\n\t\t\tif (useNationalFormat) {\r\n\t\t\t\t// // If a phone number is being input in international form\r\n\t\t\t\t// // and the country can already be derived from it,\r\n\t\t\t\t// // and if it is the new country, then format as a national number.\r\n\t\t\t\t// const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\r\n\t\t\t\t// if (derived_country === newCountry) {\r\n\t\t\t\t// \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\r\n\t\t\t\t// }\r\n\r\n\t\t\t\t// Actually, the two countries don't necessarily need to match:\r\n\t\t\t\t// the condition could be looser here, because several countries\r\n\t\t\t\t// might share the same international phone number format\r\n\t\t\t\t// (for example, \"NANPA\" countries like US, Canada, etc).\r\n\t\t\t\t// The looser condition would be just \"same nternational phone number format\"\r\n\t\t\t\t// which would mean \"same country calling code\" in the context of `libphonenumber-js`.\r\n\t\t\t\tif (phoneDigits.indexOf('+' + getCountryCallingCode(newCountry, metadata)) === 0) {\r\n\t\t\t\t\treturn stripCountryCallingCode(phoneDigits, newCountry, metadata)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Simply discard the previously entered international phone number,\r\n\t\t\t\t// because otherwise any \"smart\" transformation like getting the\r\n\t\t\t\t// \"national (significant) number\" part and then prepending the\r\n\t\t\t\t// newly selected country's \"country calling code\" to it\r\n\t\t\t\t// would just be confusing for a user without being actually useful.\r\n\t\t\t\treturn ''\r\n\r\n\t\t\t\t// // Simply strip the leading `+` character\r\n\t\t\t\t// // therefore simply converting all digits into a \"local\" phone number.\r\n\t\t\t\t// // https://github.com/catamphetamine/react-phone-number-input/issues/287\r\n\t\t\t\t// return phoneDigits.slice(1)\r\n\t\t\t}\r\n\r\n\t\t\tif (prevCountry) {\r\n\t\t\t\tconst newCountryPrefix = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(newCountryPrefix) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn newCountryPrefix\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst defaultValue = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is the same\r\n\t\t\t\t// as for the new `country`, then leave `phoneDigits` as is.\r\n\t\t\t\tif (phoneDigits.indexOf(defaultValue) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t}\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is not the same\r\n\t\t\t\t// as for the new `country`, then set `phoneDigits` to\r\n\t\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\treturn defaultValue\r\n\t\t\t}\r\n\r\n\t\t\t// // If the international phone number already contains\r\n\t\t\t// // any country calling code then trim the country calling code part.\r\n\t\t\t// // (that could also be the newly selected country phone code prefix as well)\r\n\t\t\t// // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\r\n\t\t\t// // (e.g. if a user enters an international number\r\n\t\t\t// //  not belonging to any of the reduced `countries` list).\r\n\t\t\t// phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\r\n\r\n\t\t\t// // Prepend country calling code prefix\r\n\t\t\t// // for the newly selected country.\r\n\t\t\t// return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\r\n\t\t}\r\n\t}\r\n\t// If switching to \"International\" from a country.\r\n\telse {\r\n\t\t// If the phone number was entered in national format.\r\n\t\tif (phoneDigits[0] !== '+') {\r\n\t\t\t// Format the national phone number as an international one.\r\n\t\t\t// The phone number entered not necessarily even starts with\r\n\t\t\t// the previously selected country phone prefix.\r\n\t\t\t// Even if the phone number belongs to whole another country\r\n\t\t\t// it will still be parsed into some national phone number.\r\n\t\t\t//\r\n\t\t\t// Ignore the now-uncovered `|| ''` code branch:\r\n\t\t\t// previously `e164()` function could return an empty string\r\n\t\t\t// even when `phoneDigits` were not empty.\r\n\t\t\t// Now it always returns some `value` when there're any `phoneDigits`.\r\n\t\t\t// Still, didn't remove the `|| ''` code branch just in case\r\n\t\t\t// that logic changes somehow in some future, so there're no\r\n\t\t\t// possible bugs related to that.\r\n\t\t\t//\r\n\t\t\t// (ignore the `|| ''` code branch)\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn e164(phoneDigits, prevCountry, metadata) || ''\r\n\t\t}\r\n\t}\r\n\r\n\treturn phoneDigits\r\n}\r\n\r\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function e164(number, country, metadata) {\r\n\tif (!number) {\r\n\t\treturn\r\n\t}\r\n\t// If the phone number is being input in international format.\r\n\tif (number[0] === '+') {\r\n\t\t// If it's just the `+` sign then return nothing.\r\n\t\tif (number === '+') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Return a E.164 phone number.\r\n\t\t//\r\n\t\t// Could return `number` \"as is\" here, but there's a possibility\r\n\t\t// that some user might incorrectly input an international number\r\n\t\t// with a \"national prefix\". Such numbers aren't considered valid,\r\n\t\t// but `libphonenumber-js` is \"forgiving\" when it comes to parsing\r\n\t\t// user's input, and this input component follows that behavior.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country, metadata)\r\n\t\tasYouType.input(number)\r\n\t\t// This function would return `undefined` only when `number` is `\"+\"`,\r\n\t\t// but at this point it is known that `number` is not `\"+\"`.\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\t// For non-international phone numbers\r\n\t// an accompanying country code is required.\r\n\t// The situation when `country` is `undefined`\r\n\t// and a non-international phone number is passed\r\n\t// to this function shouldn't happen.\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\tconst partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata)\r\n\t//\r\n\t// Even if no \"national (significant) number\" digits have been input,\r\n\t// still return a non-`undefined` value.\r\n\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t//\r\n\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t// a \"weird\" behavior.\r\n\t//\r\n\t// if (partial_national_significant_number) {\r\n\t\treturn `+${getCountryCallingCode(country, metadata)}${partial_national_significant_number || ''}`\r\n\t// }\r\n}\r\n\r\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\r\nexport function trimNumber(number, country, metadata) {\r\n\tconst nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata)\r\n\tif (nationalSignificantNumberPart) {\r\n\t\tconst overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata)\r\n\t\tif (overflowDigitsCount > 0) {\r\n\t\t\treturn number.slice(0, number.length - overflowDigitsCount)\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}\r\n\r\nfunction getMaxNumberLength(country, metadata) {\r\n\t// Get \"possible lengths\" for a phone number of the country.\r\n\tmetadata = new Metadata(metadata)\r\n\tmetadata.selectNumberingPlan(country)\r\n\t// Return the last \"possible length\".\r\n\treturn metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1]\r\n}\r\n\r\n// If the phone number being input is an international one\r\n// then tries to derive the country from the phone number.\r\n// (regardless of whether there's any country currently selected)\r\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryForPartialE164Number(partialE164Number, {\r\n\tcountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tif (partialE164Number === '+') {\r\n\t\t// Don't change the currently selected country yet.\r\n\t\treturn country\r\n\t}\r\n\r\n\tconst derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata)\r\n\r\n\t// If a phone number is being input in international form\r\n\t// and the country can already be derived from it,\r\n\t// then select that country.\r\n\tif (derived_country && (!countries || (countries.indexOf(derived_country) >= 0))) {\r\n\t\treturn derived_country\r\n\t}\r\n\t// If \"International\" country option has not been disabled\r\n\t// and the international phone number entered doesn't correspond\r\n\t// to the currently selected country then reset the currently selected country.\r\n\telse if (country &&\r\n\t\t!required &&\r\n\t\t!couldNumberBelongToCountry(partialE164Number, country, metadata)) {\r\n\t\treturn undefined\r\n\t}\r\n\r\n\t// Don't change the currently selected country.\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\r\nexport function onPhoneDigitsChange(phoneDigits, {\r\n\tprevPhoneDigits,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tcountryRequired,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\tinternational,\r\n\tlimitMaxLength,\r\n\tcountryCallingCodeEditable,\r\n\tmetadata\r\n}) {\r\n\tif (international && countryCallingCodeEditable === false) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t// The `<input/>` value must start with the country calling code.\r\n\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\tlet value\r\n\t\t\t// If a phone number input is declared as\r\n\t\t\t// `international` and `withCountryCallingCode`,\r\n\t\t\t// then it's gonna be non-empty even before the user\r\n\t\t\t// has input anything in it.\r\n\t\t\t// This will result in its contents (the country calling code part)\r\n\t\t\t// being selected when the user tabs into such field.\r\n\t\t\t// If the user then starts inputting the national part digits,\r\n\t\t\t// then `<input/>` value changes from `+xxx` to `y`\r\n\t\t\t// because inputting anything while having the `<input/>` value\r\n\t\t\t// selected results in erasing the `<input/>` value.\r\n\t\t\t// So, the component handles such case by restoring\r\n\t\t\t// the intended `<input/>` value: `+xxxy`.\r\n\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t\t} else {\r\n\t\t\t\tphoneDigits = prefix\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tphoneDigits,\r\n\t\t\t\tvalue,\r\n\t\t\t\tcountry\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `international` property is `false`, then it means\r\n\t// \"enforce national-only format during input\",\r\n\t// so, if that's the case, then remove all `+` characters,\r\n\t// but only if some country is currently selected.\r\n\t// (not if \"International\" country is selected).\r\n\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// Trim the input to not exceed the maximum possible number length.\r\n\tif (phoneDigits && country && limitMaxLength) {\r\n\t\tphoneDigits = trimNumber(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// If this `onChange()` event was triggered\r\n\t// as a result of selecting \"International\" country,\r\n\t// then force-prepend a `+` sign if the phone number\r\n\t// `<input/>` value isn't in international format.\r\n\t// Also, force-prepend a `+` sign if international\r\n\t// phone number input format is set.\r\n\tif (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\r\n\t\tphoneDigits = '+' + phoneDigits\r\n\t}\r\n\r\n\t// If the previously entered phone number\r\n\t// has been entered in international format\r\n\t// and the user decides to erase it,\r\n\t// then also reset the `country`\r\n\t// because it was most likely automatically selected\r\n\t// while the user was typing in the phone number\r\n\t// in international format.\r\n\t// This fixes the issue when a user is presented\r\n\t// with a phone number input with no country selected\r\n\t// and then types in their local phone number\r\n\t// then discovers that the input's messed up\r\n\t// (a `+` has been prepended at the start of their input\r\n\t//  and a random country has been selected),\r\n\t// decides to undo it all by erasing everything\r\n\t// and then types in their local phone number again\r\n\t// resulting in a seemingly correct phone number\r\n\t// but in reality that phone number has incorrect country.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/273\r\n\tif (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\r\n\t\tif (international) {\r\n\t\t\tcountry = undefined\r\n\t\t} else {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\t// Also resets such \"randomly\" selected country\r\n\t// as soon as the user erases the number\r\n\t// digit-by-digit up to the leading `+` sign.\r\n\tif (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// Generate the new `value` property.\r\n\tlet value\r\n\tif (phoneDigits) {\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\tif (phoneDigits === '+') {\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else if (country && getInternationalPhoneNumberPrefix(country, metadata).indexOf(phoneDigits) === 0) {\r\n\t\t\t\t// Selected a `country` but started inputting an\r\n\t\t\t\t// international phone number for another country.\r\n\t\t\t\t// Even though the input value is non-empty,\r\n\t\t\t\t// the `value` is assumed `undefined` in such case.\r\n\t\t\t\t// The `country` will be reset (or re-selected)\r\n\t\t\t\t// immediately after such mismatch has been detected\r\n\t\t\t\t// by the phone number input component, and `value`\r\n\t\t\t\t// will be set to the currently entered international prefix.\r\n\t\t\t\t//\r\n\t\t\t\t// For example, if selected `country` `\"US\"`\r\n\t\t\t\t// and started inputting phone number `\"+2\"`\r\n\t\t\t\t// then `value` `undefined` will be returned from this function,\r\n\t\t\t\t// and then, immediately after that, `country` will be reset\r\n\t\t\t\t// and the `value` will be set to `\"+2\"`.\r\n\t\t\t\t//\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else {\r\n\t\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// Derive the country from the phone number.\r\n\t// (regardless of whether there's any country currently selected,\r\n\t//  because there could be several countries corresponding to one country calling code)\r\n\tif (value) {\r\n\t\tcountry = getCountryForPartialE164Number(value, {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\t// If `international` property is `false`, then it means\r\n\t\t// \"enforce national-only format during input\",\r\n\t\t// so, if that's the case, then remove all `+` characters,\r\n\t\t// but only if some country is currently selected.\r\n\t\t// (not if \"International\" country is selected).\r\n\t\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t\t\t// Re-calculate `value` because `phoneDigits` has changed.\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!country && countryRequired) {\r\n\t\tcountry = defaultCountry || getAnyCountry()\r\n\t}\r\n\r\n\treturn {\r\n\t\tphoneDigits,\r\n\t\tcountry,\r\n\t\tvalue\r\n\t}\r\n}\r\n\r\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\r\n\t// Handle the case when a user might have pasted\r\n\t// a phone number in international format.\r\n\tif (input.indexOf(getInternationalPhoneNumberPrefix(country, metadata)) === 0) {\r\n\t\t// Create \"as you type\" formatter.\r\n\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t// Input partial national phone number.\r\n\t\tformatter.input(input)\r\n\t\t// Return the parsed partial national phone number.\r\n\t\tconst phoneNumber = formatter.getNumber()\r\n\t\tif (phoneNumber) {\r\n\t\t\t// Transform the number to a national one,\r\n\t\t\t// and remove all non-digits.\r\n\t\t\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n\t\t} else {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t} else {\r\n\t\t// Just remove the `+` sign.\r\n\t\treturn input.replace(/\\D/g, '')\r\n\t}\r\n}\r\n\r\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\r\n\tconst formatter = new AsYouType(null, metadata)\r\n\tformatter.input(number)\r\n\t// // `001` is a special \"non-geograpical entity\" code\r\n\t// // in Google's `libphonenumber` library.\r\n\t// if (formatter.getCountry() === '001') {\r\n\t// \treturn\r\n\t// }\r\n\treturn formatter.getCountry()\r\n}\r\n\r\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\r\nexport function compareStrings(a, b, locales) {\r\n  // Use `String.localeCompare` if it's available.\r\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\r\n  // Which means everyone except IE <= 10 and Safari <= 10.\r\n  // `localeCompare()` is available in latest Node.js versions.\r\n  /* istanbul ignore else */\r\n  if (String.prototype.localeCompare) {\r\n    return a.localeCompare(b, locales);\r\n  }\r\n  /* istanbul ignore next */\r\n  return a < b ? -1 : (a > b ? 1 : 0);\r\n}\r\n\r\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\r\nexport function stripCountryCallingCode(number, country, metadata) {\r\n\t// Just an optimization, so that it\r\n\t// doesn't have to iterate through all country calling codes.\r\n\tif (country) {\r\n\t\tconst countryCallingCodePrefix = '+' + getCountryCallingCode(country, metadata)\r\n\r\n\t\t// If `country` fits the actual `number`.\r\n\t\tif (number.length < countryCallingCodePrefix.length) {\r\n\t\t\tif (countryCallingCodePrefix.indexOf(number) === 0) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (number.indexOf(countryCallingCodePrefix) === 0) {\r\n\t\t\t\treturn number.slice(countryCallingCodePrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `country` doesn't fit the actual `number`.\r\n\t// Try all available country calling codes.\r\n\tfor (const country_calling_code of Object.keys(metadata.country_calling_codes)) {\r\n\t\tif (number.indexOf(country_calling_code) === '+'.length) {\r\n\t\t\treturn number.slice('+'.length + country_calling_code.length)\r\n\t\t}\r\n\t}\r\n\r\n\treturn ''\r\n}\r\n\r\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\r\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\r\n\t// Create \"as you type\" formatter.\r\n\tconst formatter = new AsYouType(country, metadata)\r\n\t// Input partial national phone number.\r\n\tformatter.input(number)\r\n\t// Return the parsed partial national phone number.\r\n\tconst phoneNumber = formatter.getNumber()\r\n\treturn phoneNumber && phoneNumber.nationalNumber\r\n}\r\n\r\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\r\nexport function couldNumberBelongToCountry(number, country, metadata) {\r\n\tconst intlPhoneNumberPrefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\tlet i = 0\r\n\twhile (i < number.length && i < intlPhoneNumberPrefix.length) {\r\n\t\tif (number[i] !== intlPhoneNumberPrefix[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n\r\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\r\nexport function getInitialPhoneDigits({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\tuseNationalFormat,\r\n\tmetadata\r\n}) {\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `useNationalFormat` is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\r\n\t\treturn generateNationalNumberDigits(phoneNumber)\r\n\t}\r\n\t// If `international` property is `true`,\r\n\t// meaning \"enforce international phone number format\",\r\n\t// then always show country calling code in the input field.\r\n\tif (!value && international && defaultCountry) {\r\n\t\treturn getInternationalPhoneNumberPrefix(defaultCountry, metadata)\r\n\t}\r\n\treturn value\r\n}","import {\r\n\tgetInitialPhoneDigits,\r\n\tgetCountryForPartialE164Number,\r\n\tparsePhoneNumber\r\n} from './phoneInputHelpers.js'\r\n\r\nimport {\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries\r\n} from './countries.js'\r\n\r\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\r\n\tconst {\r\n\t\tmetadata,\r\n\t\tcountries,\r\n\t\tdefaultCountry: newDefaultCountry,\r\n\t\tvalue: newValue,\r\n\t\treset: newReset,\r\n\t\tinternational,\r\n\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t// superceded by `initialValueFormat` property.\r\n\t\tdisplayInitialValueAsLocalNumber,\r\n\t\tinitialValueFormat\r\n\t} = props\r\n\r\n\tconst {\r\n\t\tdefaultCountry: prevDefaultCountry,\r\n\t\tvalue: prevValue,\r\n\t\treset: prevReset\r\n\t} = prevProps\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tvalue,\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\thasUserSelectedACountry\r\n\t} = state\r\n\r\n\tconst _getInitialPhoneDigits = (parameters) => getInitialPhoneDigits({\r\n\t\t...parameters,\r\n\t\tinternational,\r\n\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\tmetadata\r\n\t})\r\n\r\n\t// Some users requested a way to reset the component\r\n\t// (both number `<input/>` and country `<select/>`).\r\n\t// Whenever `reset` property changes both number `<input/>`\r\n\t// and country `<select/>` are reset.\r\n\t// It's not implemented as some instance `.reset()` method\r\n\t// because `ref` is forwarded to `<input/>`.\r\n\t// It's also not replaced with just resetting `country` on\r\n\t// external `value` reset, because a user could select a country\r\n\t// and then not input any `value`, and so the selected country\r\n\t// would be \"stuck\", if not using this `reset` property.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\tif (newReset !== prevReset) {\r\n\t\treturn {\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: undefined,\r\n\t\t\tcountry: newDefaultCountry,\r\n\t\t\thasUserSelectedACountry: undefined\r\n\t\t}\r\n\t}\r\n\r\n\t// `value` is the value currently shown in the component:\r\n\t// it's stored in the component's `state`, and it's not the `value` property.\r\n\t// `prevValue` is \"previous `value` property\".\r\n\t// `newValue` is \"new `value` property\".\r\n\r\n\t// If the default country changed\r\n\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t// then select it, but only if the user hasn't already manually\r\n\t// selected a country, and no phone number has been manually entered so far.\r\n\t// Because if the user has already started inputting a phone number\r\n\t// then they're okay with no country being selected at all (\"International\")\r\n\t// and they don't want to be disturbed, don't want their input to be screwed, etc.\r\n\tif (newDefaultCountry !== prevDefaultCountry) {\r\n\t\tconst isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata)\r\n\t\tconst noValueHasBeenEnteredByTheUser = (\r\n\t\t\t// By default, \"no value has been entered\" means `value` is `undefined`.\r\n\t\t\t!value ||\r\n\t\t\t// When `international` is `true`, and some country has been pre-selected,\r\n\t\t\t// then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\r\n\t\t\t// so in case of `international` being `true`, \"the user hasn't entered anything\" situation\r\n\t\t\t// doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\r\n\t\t\t(international && value === _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: prevDefaultCountry\r\n\t\t\t}))\r\n\t\t)\r\n\t\t// Only update the `defaultCountry` property if no phone number\r\n\t\t// has been entered by the user or pre-set by the application.\r\n\t\tconst noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser\r\n\t\tif (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\r\n\t\t\treturn {\r\n\t\t\t\tcountry: newDefaultCountry,\r\n\t\t\t\t// If `phoneDigits` is empty, then automatically select the new `country`\r\n\t\t\t\t// and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\t// The code assumes that \"no phone number has been entered by the user\",\r\n\t\t\t\t// and no `value` property has been passed, so the `phoneNumber` parameter\r\n\t\t\t\t// of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\r\n\t\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\t\tvalue: undefined,\r\n\t\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t\t}),\r\n\t\t\t\t// `value` is `undefined` and it stays so.\r\n\t\t\t\tvalue: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If a new `value` is set externally.\r\n\t// (e.g. as a result of an ajax API request\r\n\t//  to get user's phone after page loaded)\r\n\t// The first part — `newValue !== prevValue` —\r\n\t// is basically `props.value !== prevProps.value`\r\n\t// so it means \"if value property was changed externally\".\r\n\t// The second part — `newValue !== value` —\r\n\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t// then the country flag would reset on each input.\r\n\tif (newValue !== prevValue && newValue !== value) {\r\n\t\tlet phoneNumber\r\n\t\tlet parsedCountry\r\n\t\tif (newValue) {\r\n\t\t\tphoneNumber = parsePhoneNumber(newValue, metadata)\r\n\t\t\tconst supportedCountries = getSupportedCountries(countries, metadata)\r\n\t\t\tif (phoneNumber && phoneNumber.country) {\r\n\t\t\t\t// Ignore `else` because all countries are supported in metadata.\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tif (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\r\n\t\t\t\t\tparsedCountry = phoneNumber.country\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tparsedCountry = getCountryForPartialE164Number(newValue, {\r\n\t\t\t\t\tcountry: undefined,\r\n\t\t\t\t\tcountries: supportedCountries,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet hasUserSelectedACountryUpdate\r\n\t\tif (!newValue) {\r\n\t\t\t// Reset `hasUserSelectedACountry` flag in `state`.\r\n\t\t\thasUserSelectedACountryUpdate = {\r\n\t\t\t\thasUserSelectedACountry: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\t...hasUserSelectedACountryUpdate,\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tvalue: newValue,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: newValue,\r\n\t\t\tcountry: newValue ? parsedCountry : newDefaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// `defaultCountry` didn't change.\r\n\t// `value` didn't change.\r\n\t// `phoneDigits` didn't change, because `value` didn't change.\r\n\t//\r\n\t// So no need to update state.\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js'\r\n\r\nimport Flag from './Flag.js'\r\nimport InternationalIcon from './InternationalIcon.js'\r\n\r\nimport {\r\n\tsortCountryOptions,\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries,\r\n\tgetSupportedCountryOptions,\r\n\tgetCountries\r\n} from './helpers/countries.js'\r\n\r\nimport { createCountryIconComponent } from './CountryIcon.js'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes.js'\r\n\r\nimport {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\tgetInitialPhoneDigits,\r\n\tonPhoneDigitsChange,\r\n\te164\r\n} from './helpers/phoneInputHelpers.js'\r\n\r\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js'\r\n\r\nclass PhoneNumberInput_ extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.inputRef = React.createRef()\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\taddInternationalOption,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `defaultCountry`.\r\n\t\tif (defaultCountry) {\r\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\tdefaultCountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = getSupportedCountries(countries, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\r\n\r\n\t\tconst preSelectedCountry = getPreSelectedCountry({\r\n\t\t\tvalue,\r\n\t\t\tphoneNumber,\r\n\t\t\tdefaultCountry,\r\n\t\t\trequired: !addInternationalOption,\r\n\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tthis.state = {\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops: this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry: preSelectedCountry,\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\r\n\t\t\tphoneDigits: getInitialPhoneDigits({\r\n\t\t\t\tvalue,\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\t\t\tmetadata\r\n\t\t\t}),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `phoneDigits` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { defaultCountry } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\t\tdefaultCountry = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== defaultCountry) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tconst { country } = this.state\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && country !== prevState.country) {\r\n\t\t\tonCountryChange(country)\r\n\t\t}\r\n\t}\r\n\r\n\tsetInputRef = (instance) => {\r\n\t\tthis.inputRef.current = instance\r\n\t\tconst { inputRef: ref } = this.props\r\n\t\tif (ref) {\r\n\t\t\tif (typeof ref === 'function') {\r\n\t\t\t\tref(instance)\r\n\t\t\t} else {\r\n\t\t\t\tref.current = instance\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountrySelectOptions({ countries }) {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tlocales,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\t\treturn this.useMemoCountrySelectOptions(() => {\r\n\t\t\treturn sortCountryOptions(\r\n\t\t\t\tgetCountrySelectOptions({\r\n\t\t\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\t\t\tcountryNames: labels,\r\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\r\n\t\t\t\t\tcompareStringsLocales: locales,\r\n\t\t\t\t\t// compareStrings\r\n\t\t\t\t}),\r\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\r\n\t\t\t)\r\n\t\t}, [\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tmetadata\r\n\t\t])\r\n\t}\r\n\r\n\tuseMemoCountrySelectOptions(generator, dependencies) {\r\n\t\tif (\r\n\t\t\t!this.countrySelectOptionsMemoDependencies ||\r\n\t\t\t!areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)\r\n\t\t) {\r\n\t\t\tthis.countrySelectOptionsMemo = generator()\r\n\t\t\tthis.countrySelectOptionsMemoDependencies = dependencies\r\n\t\t}\r\n\t\treturn this.countrySelectOptionsMemo\r\n\t}\r\n\r\n\tgetFirstSupportedCountry({ countries }) {\r\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\r\n\t\treturn countryOptions[0].value\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (newCountry) => {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tfocusInputOnCountrySelection\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: prevCountry\r\n\t\t} = this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\r\n\t\t\tprevCountry,\r\n\t\t\tnewCountry,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\tuseNationalFormat: !international\r\n\t\t})\r\n\r\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tif (focusInputOnCountrySelection) {\r\n\t\t\tthis.inputRef.current.focus()\r\n\t\t}\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountry: newCountry,\r\n\t\t\thasUserSelectedACountry: true,\r\n\t\t\tphoneDigits: newPhoneDigits,\r\n\t\t\tvalue: newValue\r\n\t\t},\r\n\t\t() => {\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(newValue)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_phoneDigits) => {\r\n\t\tconst {\r\n\t\t\tdefaultCountry,\r\n\t\t\tonChange,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry\r\n\t\t} = this.state\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tcountryRequired: !addInternationalOption,\r\n\t\t\tdefaultCountry,\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst stateUpdate = {\r\n\t\t\tphoneDigits,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t}\r\n\r\n\t\tif (countryCallingCodeEditable === false) {\r\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\r\n\t\t\t// then it would have no effect when erasing an inital international prefix\r\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t// forcefully rerendered here.\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\r\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\r\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\r\n\t\t\t\tstateUpdate.forceRerender = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\tstateUpdate,\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\t() => onChange(value)\r\n\t\t)\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tthis._onBlur()\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\t// this.setState({ countrySelectFocused: true })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onFocus } = countrySelectProps\r\n\t\t\tif (onFocus) {\r\n\t\t\t\tonFocus(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryBlur = (event) => {\r\n\t\tthis._onBlur()\r\n\t\t// this.setState({ countrySelectFocused: false })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onBlur } = countrySelectProps\r\n\t\t\tif (onBlur) {\r\n\t\t\t\tonBlur(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\treturn {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\t// Generic HTML attributes.\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\treadOnly,\r\n\t\t\tautoComplete,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\r\n\t\t\t// Number `<input/>` properties.\r\n\t\t\tinputRef,\r\n\t\t\tinputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\r\n\t\t\t// Country `<select/>` properties.\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\r\n\t\t\t// Container `<div/>` properties.\r\n\t\t\tcontainerComponent: ContainerComponent,\r\n\r\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries: countriesProperty,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagUrl,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternationalIcon,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tfocusInputOnCountrySelection,\r\n\t\t\treset,\r\n\t\t\tmetadata,\r\n\t\t\tinternational,\r\n\t\t\tlocales,\r\n\t\t\t// compareStrings,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\r\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\r\n\r\n\t\treturn (\r\n\t\t\t<ContainerComponent\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\r\n\t\t\t\t\t'PhoneInput--focus': isFocused,\r\n\t\t\t\t\t'PhoneInput--disabled': disabled,\r\n\t\t\t\t\t'PhoneInput--readOnly': readOnly\r\n\t\t\t\t})}>\r\n\r\n\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\r\n\t\t\t\t\taria-label={labels.country}\r\n\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\tvalue={country}\r\n\t\t\t\t\toptions={countrySelectOptions}\r\n\t\t\t\t\tonChange={this.onCountryChange}\r\n\t\t\t\t\tonFocus={this.onCountryFocus}\r\n\t\t\t\t\tonBlur={this.onCountryBlur}\r\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\r\n\t\t\t\t\treadOnly={readOnly || (countrySelectProps && countrySelectProps.readOnly)}\r\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\r\n\r\n\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t<InputComponent\r\n\t\t\t\t\tref={this.setInputRef}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tmetadata={metadata}\r\n\t\t\t\t\tcountry={country}\r\n\t\t\t\t\tvalue={phoneDigits || ''}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\treadOnly={readOnly}\r\n\t\t\t\t\tinputComponent={inputComponent}\r\n\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t'PhoneInputInput',\r\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\r\n\t\t\t\t\t\trest.className\r\n\t\t\t\t\t)}/>\r\n\t\t\t</ContainerComponent>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\r\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\r\n\t<PhoneNumberInput_ {...props} inputRef={ref}/>\r\n))\r\n\r\nPhoneNumberInput.propTypes = {\r\n\t/**\r\n\t * Phone number in `E.164` format.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `\"+12223333333\"`\r\n\t *\r\n\t * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t *\r\n\t * Updates the `value` property as the user inputs a phone number.\r\n\t *\r\n\t * If the user erases the input value, the argument is `undefined`.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * Toggles the `--focus` CSS class.\r\n\t * @ignore\r\n\t */\r\n\tonFocus: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onBlur` is usually passed by `redux-form`.\r\n\t * @ignore\r\n\t */\r\n\tonBlur: PropTypes.func,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `disabled`.\r\n\t */\r\n\tdisabled: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `readonly`.\r\n\t */\r\n\treadOnly: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t *\r\n\t * Web browser's \"autocomplete\" feature\r\n\t * remembers the phone number being input\r\n\t * and can also autofill the `<input/>`\r\n\t * with previously remembered phone numbers.\r\n\t *\r\n\t * https://developers.google.com\r\n\t * /web/updates/2015/06/checkout-faster-with-autofill\r\n\t *\r\n\t * For example, can be used to turn it off:\r\n\t *\r\n\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t *  One example is when you've implemented your own version\r\n\t *  of autocomplete for search. Another example is any form field\r\n\t *  where users will input and submit different kinds of information\r\n\t *  where it would not be useful to have the browser remember\r\n\t *  what was submitted previously\".\r\n\t */\r\n\t// (is `\"tel\"` by default)\r\n\tautoComplete: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Set to `\"national\"` to show the initial `value` in\r\n\t * \"national\" format rather than \"international\".\r\n\t *\r\n\t * For example, if `initialValueFormat` is `\"national\"`\r\n\t * and the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t *\r\n\t * By default, `initialValueFormat` is `undefined`,\r\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t *\r\n\t * The reason for such default behaviour is that\r\n\t * the newer generation grows up when there are no stationary phones\r\n\t * and therefore everyone inputs phone numbers in international format\r\n\t * in their smartphones so people gradually get more accustomed to\r\n\t * writing phone numbers in international format rather than in local format.\r\n\t * Future people won't be using \"national\" format, only \"international\".\r\n\t */\r\n\t// (is `undefined` by default)\r\n\tinitialValueFormat: PropTypes.oneOf(['national']),\r\n\r\n\t// `displayInitialValueAsLocalNumber` property has been\r\n\t// superceded by `initialValueFormat` property.\r\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\r\n\r\n\t/**\r\n\t * The country to be selected by default.\r\n\t * For example, can be set after a GeoIP lookup.\r\n\t *\r\n\t * Example: `\"US\"`.\r\n\t */\r\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If specified, only these countries will be available for selection.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t */\r\n\tcountries: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * Custom country `<select/>` option names.\r\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t *\r\n\t * See the `locales` directory for examples.\r\n\t */\r\n\tlabels: labelsPropType.isRequired,\r\n\r\n\t/**\r\n\t * Country `<select/>` options are sorted by their labels.\r\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\r\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n\t * Some languages, like Chinese, support multiple sorting variants\r\n\t * (called \"collations\"), and the user might prefer one or another.\r\n\t * Also, sometimes the Operating System language is not always\r\n\t * the preferred language for a person using a website or an application,\r\n\t * so there should be a way to specify custom locale.\r\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n\t */\r\n\tlocales: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.arrayOf(PropTypes.string)\r\n\t]),\r\n\r\n\t/*\r\n\t * Custom country `<select/>` options sorting function.\r\n\t * The default one uses `a.localeCompare(b)`, and,\r\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\r\n\t * There have been requests to add custom sorter for cases\r\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n\tcompareStrings: PropTypes.func,\r\n\t */\r\n\r\n\t/**\r\n\t * A URL template of a country flag, where\r\n\t * \"{XX}\" is a two-letter country code in upper case,\r\n\t * or where \"{xx}\" is a two-letter country code in lower case.\r\n\t * By default it points to `country-flag-icons` gitlab pages website.\r\n\t * I imagine someone might want to download those country flag icons\r\n\t * and host them on their own servers instead\r\n\t * (all flags are available in the `country-flag-icons` library).\r\n\t * There's a catch though: new countries may be added in future,\r\n\t * so when hosting country flag icons on your own server\r\n\t * one should check the `CHANGELOG.md` every time before updating this library,\r\n\t * otherwise there's a possibility that some new country flag would be missing.\r\n\t */\r\n\tflagUrl: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Custom country flag icon components.\r\n\t * These flags will be used instead of the default ones.\r\n\t * The the \"Flags\" section of the readme for more info.\r\n\t *\r\n\t * The shape is an object where keys are country codes\r\n\t * and values are flag icon components.\r\n\t * Flag icon components receive the same properties\r\n\t * as `flagComponent` (see below).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `import flags from 'country-flag-icons/react/3x2'`\r\n\t *\r\n\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t *\r\n\t * `<PhoneInput flags={flags} .../>`\r\n\t */\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t/**\r\n\t * Country flag icon component.\r\n\t *\r\n\t * Takes properties:\r\n\t *\r\n\t * * `country: string` — The country code.\r\n\t * * `countryName: string` — The country name.\r\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\r\n\t * * `flags: object` — The `flags` property (see above).\r\n\t */\r\n\tflagComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n\t */\r\n\taddInternationalOption: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * \"International\" icon component.\r\n\t * Should have the same aspect ratio.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `title: string` — \"International\" country option label.\r\n\t */\r\n\tinternationalIcon: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t *\r\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\r\n\t * * `\"🌐\"` — inserts \"International\" option.\r\n\t * * `\"|\"` — inserts a separator.\r\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t */\r\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS style object.\r\n\t */\r\n\tstyle: PropTypes.object,\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS class.\r\n\t */\r\n\tclassName: PropTypes.string,\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `name: string?` — HTML `name` attribute.\r\n\t * * `value: string?` — The currently selected country code.\r\n\t * * `onChange(value: string?)` — Updates the `value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\r\n\t * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n\t * * `className: string` — CSS class name.\r\n\t */\r\n\tcountrySelectComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Country `<select/>` component props.\r\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n\t */\r\n\tcountrySelectProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `value: string` — The formatted `value`.\r\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t *\r\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t */\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `style: object` — A component CSS style object.\r\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n\t */\r\n\tcontainerComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component props.\r\n\t */\r\n\tnumberInputProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n\t * the caret position is moved right before the next available digit skipping\r\n\t * any punctuation in between. This is called \"smart\" caret positioning.\r\n\t * Another case would be the phone number format changing as a result of\r\n\t * the user inserting the digit somewhere in the middle, which would require\r\n\t * re-positioning the caret because all digit positions have changed.\r\n\t * This \"smart\" caret positioning feature can be turned off by passing\r\n\t * `smartCaret={false}` property: use it in case of any possible issues\r\n\t * with caret position during phone number input.\r\n\t */\r\n\t// Is `true` by default.\r\n\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * Set to `true` to force \"international\" phone number format.\r\n\t * Set to `false` to force \"national\" phone number format.\r\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `true`, the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t *\r\n\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t */\r\n\tmetadata: metadataPropType.isRequired,\r\n\r\n\t/**\r\n\t * Is called every time the selected country changes:\r\n\t * either programmatically or when user selects it manually from the list.\r\n\t */\r\n\t// People have been asking for a way to get the selected country.\r\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t// For some it's just a \"business requirement\".\r\n\t// I guess it's about gathering as much info on the user as a website can\r\n\t// without introducing any addional fields that would complicate the form\r\n\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t// Assuming that the phone number's country is the user's country\r\n\t// is not 100% correct but in most cases I guess it's valid.\r\n\tonCountryChange: PropTypes.func,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: PropTypes.bool.isRequired\r\n}\r\n\r\nPhoneNumberInput.defaultProps = {\r\n\t/**\r\n\t * Remember (and autofill) the value as a phone number.\r\n\t */\r\n\tautoComplete: 'tel',\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t */\r\n\tcountrySelectComponent: CountrySelect,\r\n\r\n\t/**\r\n\t * Flag icon component.\r\n\t */\r\n\tflagComponent: Flag,\r\n\r\n\t/**\r\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n\t */\r\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\r\n\t/**\r\n\t * Default \"International\" country `<select/>` option icon.\r\n\t */\r\n\tinternationalIcon: InternationalIcon,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t */\r\n\tinputComponent: 'input',\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t */\r\n\tcontainerComponent: 'div',\r\n\r\n\t/**\r\n\t * Some users requested a way to reset the component:\r\n\t * both number `<input/>` and country `<select/>`.\r\n\t * Whenever `reset` property changes both number `<input/>`\r\n\t * and country `<select/>` are reset.\r\n\t * It's not implemented as some instance `.reset()` method\r\n\t * because `ref` is forwarded to `<input/>`.\r\n\t * It's also not replaced with just resetting `country` on\r\n\t * external `value` reset, because a user could select a country\r\n\t * and then not input any `value`, and so the selected country\r\n\t * would be \"stuck\", if not using this `reset` property.\r\n\t */\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\treset: PropTypes.any,\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t */\r\n\tsmartCaret: true,\r\n\r\n\t/**\r\n\t * Whether to add the \"International\" option\r\n\t * to the list of countries.\r\n\t */\r\n\taddInternationalOption: true,\r\n\r\n\t/**\r\n\t * If set to `true` the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: false,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: true,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: true\r\n}\r\n\r\nexport default PhoneNumberInput\r\n\r\nfunction areEqualArrays(a, b) {\r\n\tif (a.length !== b.length) {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 0\r\n\twhile (i < a.length) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport labels from '../locale/en.json.js'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes.js'\r\n\r\nimport PhoneInput from './PhoneInputWithCountry.js'\r\n\r\nexport function createPhoneInput(defaultMetadata) {\r\n\tconst PhoneInputDefault = React.forwardRef((props, ref) => (\r\n\t\t<PhoneInput ref={ref} {...props}/>\r\n\t))\r\n\r\n\tPhoneInputDefault.propTypes = {\r\n\t\tmetadata: metadataPropType.isRequired,\r\n\t\tlabels: labelsPropType.isRequired\r\n\t}\r\n\r\n\tPhoneInputDefault.defaultProps = {\r\n\t\tmetadata: defaultMetadata,\r\n\t\tlabels\r\n\t}\r\n\r\n\treturn PhoneInputDefault\r\n}\r\n\r\nexport default createPhoneInput()","import metadata from 'libphonenumber-js/min/metadata'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tisSupportedCountry as _isSupportedCountry\r\n} from '../core/index.js'\r\n\r\nimport { createPhoneInput } from '../modules/PhoneInputWithCountryDefault.js'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createPhoneInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\r\n//\r\n// Example:\r\n//\r\n// value - '88005553535'\r\n// caret - 2 // starting from 0; is positioned before the first zero\r\n// operation - 'Backspace'\r\n//\r\n// Returns\r\n// {\r\n// \tvalue: '8005553535'\r\n// \tcaret: 1\r\n// }\r\n//\r\n// Currently supports just 'Delete' and 'Backspace' operations\r\n//\r\nexport default function edit(value, caret, operation)\r\n{\r\n\tswitch (operation)\r\n\t{\r\n\t\tcase 'Backspace':\r\n\t\t\t// If there exists the previous character,\r\n\t\t\t// then erase it and reposition the caret.\r\n\t\t\tif (caret > 0)\r\n\t\t\t{\r\n\t\t\t\t// Remove the previous character\r\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret)\r\n\t\t\t\t// Position the caret where the previous (erased) character was\r\n\t\t\t\tcaret--\r\n\t\t\t}\r\n\t\t\tbreak\r\n\r\n\t\tcase 'Delete':\r\n\t\t\t// Remove current digit (if any)\r\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1)\r\n\t\t\tbreak\r\n\t}\r\n\r\n\treturn { value, caret }\r\n}","// Parses the `text`.\r\n//\r\n// Returns `{ value, caret }` where `caret` is\r\n// the caret position inside `value`\r\n// corresponding to the `caret_position` inside `text`.\r\n//\r\n// The `text` is parsed by feeding each character sequentially to\r\n// `parse_character(character, value)` function\r\n// and appending the result (if it's not `undefined`) to `value`.\r\n//\r\n// Example:\r\n//\r\n// `text` is `8 (800) 555-35-35`,\r\n// `caret_position` is `4` (before the first `0`).\r\n// `parse_character` is `(character, value) =>\r\n//   if (character >= '0' && character <= '9') { return character }`.\r\n//\r\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\r\n//\r\nexport default function parse(text, caret_position, parse_character)\r\n{\r\n\tlet value = ''\r\n\r\n\tlet focused_input_character_index = 0\r\n\r\n\tlet index = 0\r\n\twhile (index < text.length)\r\n\t{\r\n\t\tconst character = parse_character(text[index], value)\r\n\r\n\t\tif (character !== undefined)\r\n\t\t{\r\n\t\t\tvalue += character\r\n\r\n\t\t\tif (caret_position !== undefined)\r\n\t\t\t{\r\n\t\t\t\tif (caret_position === index)\r\n\t\t\t\t{\r\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (caret_position > index)\r\n\t\t\t\t{\r\n\t\t\t\t\tfocused_input_character_index = value.length\r\n\t\t\t\t}\r\n\t\t\t }\r\n\t\t}\r\n\r\n\t\tindex++\r\n\t}\r\n\r\n\t// If caret position wasn't specified\r\n\tif (caret_position === undefined)\r\n\t{\r\n\t\t// Then set caret position to \"after the last input character\"\r\n\t\tfocused_input_character_index = value.length\r\n\t}\r\n\r\n\tconst result =\r\n\t{\r\n\t\tvalue,\r\n\t\tcaret : focused_input_character_index\r\n\t}\r\n\r\n\treturn result\r\n}","// Counts all occurences of a symbol in a string\r\nexport function count_occurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes)\r\n\t// but template placeholder characters don't fall into that range\r\n\t// so skipping such miscellaneous \"exotic\" characters\r\n\t// won't matter here for just counting placeholder character occurrences.\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}","import { count_occurences } from './helpers.js'\r\n\r\nexport default function closeBraces(retained_template, template, placeholder = 'x', empty_placeholder = ' ')\r\n{\r\n\tlet cut_before = retained_template.length\r\n\r\n\tconst opening_braces = count_occurences('(', retained_template)\r\n\tconst closing_braces = count_occurences(')', retained_template)\r\n\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\r\n\twhile (dangling_braces > 0 && cut_before < template.length)\r\n\t{\r\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder)\r\n\r\n\t\tif (template[cut_before] === ')')\r\n\t\t{\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\r\n\t\tcut_before++\r\n\t}\r\n\r\n\treturn retained_template\r\n}\r\n","import { count_occurences } from './helpers.js'\r\nimport close_braces from './closeBraces.js'\r\n\r\n// Takes a `template` where character placeholders\r\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\r\n//\r\n// Returns a function which takes `value` characters\r\n// and returns the `template` filled with those characters.\r\n// If the `template` can only be partially filled\r\n// then it is cut off.\r\n//\r\n// If `should_close_braces` is `true`,\r\n// then it will also make sure all dangling braces are closed,\r\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\r\n//\r\nexport default function(template, placeholder = 'x', should_close_braces)\r\n{\r\n\tif (!template)\r\n\t{\r\n\t\treturn value => ({ text: value })\r\n\t}\r\n\r\n\tconst characters_in_template = count_occurences(placeholder, template)\r\n\r\n\treturn function(value)\r\n\t{\r\n\t\tif (!value)\r\n\t\t{\r\n\t\t\treturn { text: '', template }\r\n\t\t}\r\n\r\n\t\tlet value_character_index = 0\r\n\t\tlet filled_in_template = ''\r\n\r\n\t\t// Using `.split('')` here instead of normal `for ... of`\r\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t\t// (the ones consisting of four bytes)\r\n\t\t// but template placeholder characters don't fall into that range\r\n\t\t// and appending UTF-8 characters to a string in parts still works.\r\n\t\tfor (const character of template.split(''))\r\n\t\t{\r\n\t\t\tif (character !== placeholder)\r\n\t\t\t{\r\n\t\t\t\tfilled_in_template += character\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tfilled_in_template += value[value_character_index]\r\n\t\t\tvalue_character_index++\r\n\r\n\t\t\t// If the last available value character has been filled in,\r\n\t\t\t// then return the filled in template\r\n\t\t\t// (either trim the right part or retain it,\r\n\t\t\t//  if no more character placeholders in there)\r\n\t\t\tif (value_character_index === value.length)\r\n\t\t\t{\r\n\t\t\t\t// If there are more character placeholders\r\n\t\t\t\t// in the right part of the template\r\n\t\t\t\t// then simply trim it.\r\n\t\t\t\tif (value.length < characters_in_template)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (should_close_braces)\r\n\t\t{\r\n\t\t\tfilled_in_template = close_braces(filled_in_template, template)\r\n\t\t}\r\n\r\n\t\treturn { text: filled_in_template, template }\r\n\t}\r\n}","import template_formatter from './templateFormatter.js'\r\n\r\n// Formats `value` value preserving `caret` at the same character.\r\n//\r\n// `{ value, caret }` attribute is the result of `parse()` function call.\r\n//\r\n// Returns `{ text, caret }` where the new `caret` is the caret position\r\n// inside `text` text corresponding to the original `caret` position inside `value`.\r\n//\r\n// `formatter(value)` is a function returning `{ text, template }`.\r\n//\r\n// `text` is the `value` value formatted using `template`.\r\n// It may either cut off the non-filled right part of the `template`\r\n// or it may fill the non-filled character placeholders\r\n// in the right part of the `template` with `spacer`\r\n// which is a space (' ') character by default.\r\n//\r\n// `template` is the template used to format the `value`.\r\n// It can be either a full-length template or a partial template.\r\n//\r\n// `formatter` can also be a string — a `template`\r\n// where character placeholders are denoted by 'x'es.\r\n// In this case `formatter` function is automatically created.\r\n//\r\n// Example:\r\n//\r\n// `value` is '880',\r\n// `caret` is `2` (before the first `0`)\r\n//\r\n// `formatter` is `'880' =>\r\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\r\n//\r\n// The result is `{ text: '8 (80 )', caret: 4 }`.\r\n//\r\nexport default function format(value, caret, formatter)\r\n{\r\n\tif (typeof formatter === 'string')\r\n\t{\r\n\t\tformatter = template_formatter(formatter)\r\n\t}\r\n\r\n\tlet { text, template } = formatter(value) || {}\r\n\r\n\tif (text === undefined)\r\n\t{\r\n\t\t text = value\r\n\t}\r\n\r\n\tif (template)\r\n\t{\r\n\t\tif (caret === undefined)\r\n\t\t{\r\n\t\t\tcaret = text.length\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet index = 0\r\n\t\t\tlet found = false\r\n\r\n\t\t\tlet possibly_last_input_character_index = -1\r\n\r\n\t\t\twhile (index < text.length && index < template.length)\r\n\t\t\t{\r\n\t\t\t\t// Character placeholder found\r\n\t\t\t\tif (text[index] !== template[index])\r\n\t\t\t\t{\r\n\t\t\t\t\tif (caret === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true\r\n\t\t\t\t\t\tcaret = index\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpossibly_last_input_character_index = index\r\n\r\n\t\t\t\t\tcaret--\r\n\t\t\t\t}\r\n\r\n\t\t\t\tindex++\r\n\t\t\t}\r\n\r\n\t\t\t// If the caret was positioned after last input character,\r\n\t\t\t// then the text caret index is just after the last input character.\r\n\t\t\tif (!found)\r\n\t\t\t{\r\n\t\t\t\tcaret = possibly_last_input_character_index + 1\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { text, caret }\r\n}","export function isReadOnly(element)\r\n{\r\n\treturn element.hasAttribute('readonly')\r\n}\r\n\r\n// Gets <input/> selection bounds\r\nexport function getSelection(element)\r\n{\r\n\t// If no selection, return nothing\r\n\tif (element.selectionStart === element.selectionEnd)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\treturn { start: element.selectionStart, end: element.selectionEnd }\r\n}\r\n\r\n// Key codes\r\nexport const Keys =\r\n{\r\n\tBackspace : 8,\r\n\tDelete    : 46\r\n}\r\n\r\n// Finds out the operation to be intercepted and performed\r\n// based on the key down event `keyCode`.\r\nexport function getOperation(event)\r\n{\r\n\tswitch (event.keyCode)\r\n\t{\r\n\t\tcase Keys.Backspace:\r\n\t\t\treturn 'Backspace'\r\n\r\n\t\tcase Keys.Delete:\r\n\t\t\treturn 'Delete'\r\n\t}\r\n}\r\n\r\n// Gets <input/> caret position\r\nexport function getCaretPosition(element)\r\n{\r\n\treturn element.selectionStart\r\n}\r\n\r\n// Sets <input/> caret position\r\nexport function setCaretPosition(element, caret_position)\r\n{\r\n\t// Sanity check\r\n\tif (caret_position === undefined)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Set caret position.\r\n\t// There has been an issue with caret positioning on Android devices.\r\n\t// https://github.com/catamphetamine/input-format/issues/2\r\n\t// I was revisiting this issue and looked for similar issues in other libraries.\r\n\t// For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\r\n\t// They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\r\n\t// The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\r\n\t// https://github.com/text-mask/text-mask/issues/300\r\n\t// They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\r\n\t// https://github.com/text-mask/text-mask/pull/400/files\r\n\t// I've implemented the same workaround here.\r\n\tif (isAndroid()) {\r\n      setTimeout(() => element.setSelectionRange(caret_position, caret_position), 0)\r\n\t} else {\r\n\t\telement.setSelectionRange(caret_position, caret_position)\r\n\t}\r\n}\r\n\r\nfunction isAndroid() {\r\n\t// `navigator` is not defined when running mocha tests.\r\n\tif (typeof navigator !== 'undefined') {\r\n\t\treturn ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent)\r\n\t}\r\n}\r\n\r\nconst ANDROID_USER_AGENT_REG_EXP = /Android/i","import edit   from './edit.js'\r\nimport parse  from './parse.js'\r\nimport format from './format.js'\r\n\r\nimport\r\n{\r\n\tisReadOnly,\r\n\tgetOperation,\r\n\tgetSelection,\r\n\tgetCaretPosition,\r\n\tsetCaretPosition\r\n}\r\nfrom './dom.js'\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onCut(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// The actual cut hasn't happened just yet hence the timeout.\r\n\tsetTimeout(() => formatInputText(input, _parse, _format, undefined, on_change), 0)\r\n}\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onPaste(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst selection = getSelection(input)\r\n\r\n\t// If selection is made,\r\n\t// just erase the selected text\r\n\t// prior to pasting\r\n\tif (selection)\r\n\t{\r\n\t\teraseSelection(input, selection)\r\n\t}\r\n\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\nexport function onChange(event, input, _parse, _format, on_change)\r\n{\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\n// \"Delete\" and \"Backspace\" keys are special\r\n// in a way that they're not handled by the regular `onChange()` handler\r\n// and instead are intercepted and re-applied manually.\r\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\r\n// results in erasing a character, but that character might be any character,\r\n// while it would be a better \"user experience\" if it erased not just any character\r\n// but the closest \"meaningful\" character.\r\n// For example, if a template is `(xxx) xxx-xxxx`,\r\n// and the `<input/>` value is `(111) 222-3333`,\r\n// then, if a user begins erasing the `3333` part via \"Backspace\"\r\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\r\n// Nothing wrong with that, but it would be a better \"user experience\"\r\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\r\n// character, which would be the rightmost `2`.\r\n// So, what this `onKeyDown()` handler does is it intercepts\r\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\r\n// following the logic described above.\r\nexport function onKeyDown(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst operation = getOperation(event)\r\n\tswitch (operation)\r\n\t{\r\n\t\tcase 'Delete':\r\n\t\tcase 'Backspace':\r\n\t\t\t// Intercept this operation and perform it manually.\r\n\t\t\tevent.preventDefault()\r\n\r\n\t\t\tconst selection = getSelection(input)\r\n\r\n\t\t\t// If a selection is made, just erase the selected text.\r\n\t\t\tif (selection)\r\n\t\t\t{\r\n\t\t\t\teraseSelection(input, selection)\r\n\t\t\t\treturn formatInputText(input, _parse, _format, undefined, on_change)\r\n\t\t\t}\r\n\r\n\t\t\t// Else, perform the (character erasing) operation manually.\r\n\t\t\treturn formatInputText(input, _parse, _format, operation, on_change)\r\n\r\n\t\tdefault:\r\n\t\t\t// Will be handled normally as part of the `onChange` handler.\r\n\t}\r\n}\r\n\r\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\r\nfunction eraseSelection(input, selection)\r\n{\r\n\tlet text = input.value\r\n\ttext = text.slice(0, selection.start) + text.slice(selection.end)\r\n\r\n\tinput.value = text\r\n\tsetCaretPosition(input, selection.start)\r\n}\r\n\r\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\r\nfunction formatInputText(input, _parse, _format, operation, on_change)\r\n{\r\n\t// Parse `<input/>` textual value.\r\n\t// Get the `value` and `caret` position.\r\n\tlet { value, caret } = parse(input.value, getCaretPosition(input), _parse)\r\n\r\n\t// If a user performed an operation (\"Backspace\", \"Delete\")\r\n\t// then apply that operation and get the new `value` and `caret` position.\r\n\tif (operation)\r\n\t{\r\n\t\tconst newValueAndCaret = edit(value, caret, operation)\r\n\r\n\t\tvalue = newValueAndCaret.value\r\n\t\tcaret = newValueAndCaret.caret\r\n\t}\r\n\r\n\t// Format the `value`.\r\n\t// (and reposition the caret accordingly)\r\n\tconst formatted = format(value, caret, _format)\r\n\r\n\tconst text = formatted.text\r\n\tcaret      = formatted.caret\r\n\r\n\t// Set `<input/>` textual value manually\r\n\t// to prevent React from resetting the caret position\r\n\t// later inside a subsequent `render()`.\r\n\t// Doesn't work for custom `inputComponent`s for some reason.\r\n\tinput.value = text\r\n\t// Position the caret properly.\r\n\tsetCaretPosition(input, caret)\r\n\r\n\t// If the `<input/>` textual value did change,\r\n\t// then the parsed `value` may have changed too.\r\n\ton_change(value)\r\n}","// This is just `./ReactInput.js` rewritten in Hooks.\r\n\r\nimport React, { useCallback, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n\tonChange as onInputChange,\r\n\tonKeyDown as onInputKeyDown\r\n} from '../inputControl.js'\r\n\r\n// Usage:\r\n//\r\n// <ReactInput\r\n// \tvalue={this.state.phone}\r\n// \tonChange={phone => this.setState({ phone })}\r\n// \tparse={character => character}\r\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\r\n//\r\nfunction Input({\r\n\tvalue,\r\n\tparse,\r\n\tformat,\r\n\tinputComponent: InputComponent,\r\n\tonChange,\r\n\tonKeyDown,\r\n\t...rest\r\n}, ref) {\r\n\tconst internalRef = useRef();\r\n\tconst setRef = useCallback((instance) => {\r\n\t\tinternalRef.current = instance;\r\n\t\tif (ref) {\r\n\t\t\tif (typeof ref === 'function') {\r\n\t\t\t\tref(instance)\r\n\t\t\t} else {\r\n\t\t\t\tref.current = instance\r\n\t\t\t}\r\n\t\t}\r\n\t}, [ref]);\r\n\tconst _onChange = useCallback((event) => {\r\n\t\treturn onInputChange(\r\n\t\t\tevent,\r\n\t\t\tinternalRef.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [internalRef, parse, format, onChange])\r\n\r\n\tconst _onKeyDown = useCallback((event) => {\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t\treturn onInputKeyDown(\r\n\t\t\tevent,\r\n\t\t\tinternalRef.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [internalRef, parse, format, onChange, onKeyDown])\r\n\r\n\treturn (\r\n\t\t<InputComponent\r\n\t\t\t{...rest}\r\n\t\t\tref={setRef}\r\n\t\t\tvalue={format(isEmptyValue(value) ? '' : value).text}\r\n\t\t\tonKeyDown={_onKeyDown}\r\n\t\t\tonChange={_onChange}/>\r\n\t)\r\n}\r\n\r\nInput = React.forwardRef(Input)\r\n\r\nInput.propTypes = {\r\n\t// Parses a single characher of `<input/>` text.\r\n\tparse: PropTypes.func.isRequired,\r\n\r\n\t// Formats `value` into `<input/>` text.\r\n\tformat: PropTypes.func.isRequired,\r\n\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: PropTypes.string.isRequired,\r\n\r\n\t// Is parsed from <input/> text.\r\n\tvalue: PropTypes.string,\r\n\r\n\t// This handler is called each time `<input/>` text is changed.\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// Passthrough\r\n\tonKeyDown: PropTypes.func,\r\n\tonCut: PropTypes.func,\r\n\tonPaste: PropTypes.func\r\n}\r\n\r\nInput.defaultProps = {\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: 'input',\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: 'text'\r\n}\r\n\r\nexport default Input\r\n\r\nfunction isEmptyValue(value) {\r\n\treturn value === undefined || value === null\r\n}","import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Input from 'input-format/react'\r\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js'\r\n\r\nexport function createInput(defaultMetadata)\r\n{\r\n\t/**\r\n\t * `InputSmart` is a \"smarter\" implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's and maintains the caret's position in the process.\r\n\t * The caret positioning is maintained using `input-format` library.\r\n\t * Relies on being run in a DOM environment for calling caret positioning functions.\r\n\t */\r\n\tfunction InputSmart({\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst format = useCallback((value) => {\r\n\t\t\t// \"As you type\" formatter.\r\n\t\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t\tconst prefix = getInputValuePrefix({\r\n\t\t\t\tcountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\twithCountryCallingCode,\r\n\t\t\t\tmetadata\r\n\t\t\t})\r\n\t\t\t// Format the number.\r\n\t\t\tlet text = formatter.input(prefix + value)\r\n\t\t\tlet template = formatter.getTemplate()\r\n\t\t\tif (prefix) {\r\n\t\t\t\ttext = removeInputValuePrefix(text, prefix)\r\n\t\t\t\t// `AsYouType.getTemplate()` can be `undefined`.\r\n\t\t\t\tif (template) {\r\n\t\t\t\t\ttemplate = removeInputValuePrefix(template, prefix)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ttext,\r\n\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}, [country, metadata])\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tparse={parsePhoneNumberCharacter}\r\n\t\t\t\tformat={format}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputSmart = React.forwardRef(InputSmart)\r\n\r\n\tInputSmart.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tInputSmart.defaultProps = {\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn InputSmart\r\n}\r\n\r\nexport default createInput()","import { useRef, useState, useCallback, useEffect } from 'react'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix.js'\r\n\r\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\r\nexport default function usePhoneDigits({\r\n\tvalue,\r\n\tonChange,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n}) {\r\n\tconst countryMismatchDetected = useRef()\r\n\tconst onCountryMismatch = (value, country, actualCountry) => {\r\n\t\tconsole.error(`[react-phone-number-input] Expected phone number ${value} to correspond to country ${country} but ${actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t'}.`)\r\n\t\tcountryMismatchDetected.current = true\r\n\t}\r\n\r\n\tconst getInitialPhoneDigits = (options) => {\r\n\t\treturn getPhoneDigitsForValue(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tdefaultCountry,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata,\r\n\t\t\t(...args) => {\r\n\t\t\t\tif (options && options.onCountryMismatch) {\r\n\t\t\t\t\toptions.onCountryMismatch()\r\n\t\t\t\t}\r\n\t\t\t\tonCountryMismatch.apply(this, args)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\t// This is only used to detect `country` property change.\r\n\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\t// This is only used to detect `defaultCountry` property change.\r\n\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\t// `phoneDigits` is the `value` passed to the `<input/>`.\r\n\tconst [phoneDigits, setPhoneDigits] = useState(getInitialPhoneDigits())\r\n\t// This is only used to detect `value` property changes.\r\n\tconst [valueForPhoneDigits, setValueForPhoneDigits] = useState(value)\r\n\r\n\t// Rerender hack.\r\n\tconst [rerenderTrigger, setRerenderTrigger] = useState()\r\n\tconst rerender = useCallback(() => setRerenderTrigger({}), [setRerenderTrigger])\r\n\r\n\tfunction getValueForPhoneDigits(phoneDigits) {\r\n\t\t// If the user hasn't input any digits then `value` is `undefined`.\r\n\t\tif (!phoneDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (country && international && !withCountryCallingCode) {\r\n\t\t\tphoneDigits = `+${getCountryCallingCode(country, metadata)}${phoneDigits}`\r\n\t\t}\r\n\t\t// Return the E.164 phone number value.\r\n\t\t//\r\n\t\t// Even if no \"national (significant) number\" digits have been input,\r\n\t\t// still return a non-`undefined` value.\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t\t//\r\n\t\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t\t// a \"weird\" behavior.\r\n\t\t//\r\n\t\t// The only case when there's any input and `getNumberValue()` still returns `undefined`\r\n\t\t// is when that input is `\"+\"`.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\tasYouType.input(phoneDigits)\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\r\n\t// If `value` property has been changed externally\r\n\t// then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (value !== valueForPhoneDigits) {\r\n\t\t\tsetValueForPhoneDigits(value)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [value])\r\n\r\n\t// If the `country` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (country !== prevCountry) {\r\n\t\t\tsetPrevCountry(country)\r\n\t\t\tlet countryMismatchDetected\r\n\t\t\tconst phoneDigits = getInitialPhoneDigits({\r\n\t\t\t\tonCountryMismatch() {\r\n\t\t\t\t\tcountryMismatchDetected = true\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetPhoneDigits(phoneDigits)\r\n\t\t\tif (countryMismatchDetected) {\r\n\t\t\t\tsetValueForPhoneDigits(getValueForPhoneDigits(phoneDigits))\r\n\t\t\t}\r\n\t\t}\r\n\t}, [country])\r\n\r\n\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [defaultCountry])\r\n\r\n\t// Update the `value` after `valueForPhoneDigits` has been updated.\r\n\tuseEffect(() => {\r\n\t\tif (valueForPhoneDigits !== value) {\r\n\t\t\tonChange(valueForPhoneDigits)\r\n\t\t}\r\n\t}, [valueForPhoneDigits])\r\n\r\n\tconst onSetPhoneDigits = useCallback((phoneDigits) => {\r\n\t\tlet value\r\n\t\tif (country) {\r\n\t\t\tif (international && withCountryCallingCode) {\r\n\t\t\t\t// The `<input/>` value must start with the country calling code.\r\n\t\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t\t\t// If a user tabs into a phone number input field\r\n\t\t\t\t\t// that is `international` and `withCountryCallingCode`,\r\n\t\t\t\t\t// and then starts inputting local phone number digits,\r\n\t\t\t\t\t// the first digit would get \"swallowed\" if the fix below wasn't implemented.\r\n\t\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// // Reset phone digits if they don't start with the correct prefix.\r\n\t\t\t\t\t\t// // Undo the `<input/>` value change if it doesn't.\r\n\t\t\t\t\t\tif (countryMismatchDetected.current) {\r\n\t\t\t\t\t\t\t// In case of a `country`/`value` mismatch,\r\n\t\t\t\t\t\t\t// if it performed an \"undo\" here, then\r\n\t\t\t\t\t\t\t// it wouldn't let a user edit their phone number at all,\r\n\t\t\t\t\t\t\t// so this special case at least allows phone number editing\r\n\t\t\t\t\t\t\t// when `value` already doesn't match the `country`.\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// If it simply did `phoneDigits = prefix` here,\r\n\t\t\t\t\t\t\t// then it could have no effect when erasing phone number\r\n\t\t\t\t\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t\t\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t\t\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t\t\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t\t\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t\t\t\t\t// forcefully rerendered here.\r\n\t\t\t\t\t\t\tsetPhoneDigits(prefix)\r\n\t\t\t\t\t\t\tsetValueForPhoneDigits(undefined)\r\n\t\t\t\t\t\t\t// Force a re-render of the `<input/>` with previous `phoneDigits` value.\r\n\t\t\t\t\t\t\treturn rerender()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Entering phone number either in \"national\" format\r\n\t\t\t\t// when `country` has been specified, or in \"international\" format\r\n\t\t\t\t// when `country` has been specified but `withCountryCallingCode` hasn't.\r\n\t\t\t\t// Therefore, `+` is not allowed.\r\n\t\t\t\tif (phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\t\t\t// Remove the `+`.\r\n\t\t\t\t\tphoneDigits = phoneDigits.slice(1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (!defaultCountry) {\r\n\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t// Prepend a `+`.\r\n\t\t\t\tphoneDigits = '+' + phoneDigits\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Convert `phoneDigits` to `value`.\r\n\t\tif (phoneDigits) {\r\n\t\t\tvalue = getValueForPhoneDigits(phoneDigits)\r\n\t\t}\r\n\t\tsetPhoneDigits(phoneDigits)\r\n\t\tsetValueForPhoneDigits(value)\r\n\t}, [\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tdefaultCountry,\r\n\t\tmetadata,\r\n\t\tsetPhoneDigits,\r\n\t\tsetValueForPhoneDigits,\r\n\t\trerender,\r\n\t\tcountryMismatchDetected\r\n\t])\r\n\r\n\treturn [\r\n\t\tphoneDigits,\r\n\t\tonSetPhoneDigits\r\n\t]\r\n}\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {boolean} [withCountryCallingCode]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getPhoneDigitsForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata,\r\n\tonCountryMismatch\r\n) {\r\n\tif (country && international && withCountryCallingCode) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\tif (value) {\r\n\t\t\tif (value.indexOf(prefix) !== 0) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t\treturn prefix\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tonCountryMismatch(value, country, phoneNumber.country)\r\n\t\t\t} else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\tif (international) {\r\n\t\t\t\treturn phoneNumber.nationalNumber\r\n\t\t\t}\r\n\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t} else {\r\n\t\t\t// `phoneNumber.countryCallingCode` is compared here  instead of\r\n\t\t\t// `phoneNumber.country`, because, for example, a person could have\r\n\t\t\t// previously input a phone number (in \"national\" format) that isn't\r\n\t\t\t// 100% valid for the `defaultCountry`, and if `phoneNumber.country`\r\n\t\t\t// was compared, then it wouldn't match, and such phone number\r\n\t\t\t// wouldn't be formatted as a \"national\" one, and instead would be\r\n\t\t\t// formatted as an \"international\" one, confusing the user.\r\n\t\t\t// Comparing `phoneNumber.countryCallingCode` works around such issues.\r\n\t\t\t//\r\n\t\t\t// Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\r\n\t\t\t// The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\r\n\t\t\t// The user then clicks \"Save\", the page is refreshed, and the user sees\r\n\t\t\t// that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\r\n\t\t\t// the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\r\n\t\t\t// was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\r\n\t\t\t// is not a valid national number for US, and `phoneNumber.country` is compared\r\n\t\t\t// instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\r\n\t\t\t// comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\r\n\t\t\t// is no longer the case.\r\n\t\t\t//\r\n\t\t\tif (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === getCountryCallingCode(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport usePhoneDigits from './usePhoneDigits.js'\r\n\r\nfunction PhoneInput({\r\n\tComponent,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tvalue,\r\n\tonChange,\r\n\tmetadata,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\t...rest\r\n}, ref) {\r\n\t// \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n\tconst [\r\n\t\tphoneDigits,\r\n\t\tsetPhoneDigits\r\n\t] = usePhoneDigits({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tmetadata\r\n\t})\r\n\treturn (\r\n\t\t<Component\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tmetadata={metadata}\r\n\t\t\tinternational={international}\r\n\t\t\twithCountryCallingCode={withCountryCallingCode}\r\n\t\t\tcountry={country || defaultCountry}\r\n\t\t\tvalue={phoneDigits}\r\n\t\t\tonChange={setPhoneDigits} />\r\n\t)\r\n}\r\n\r\nPhoneInput = React.forwardRef(PhoneInput)\r\n\r\nPhoneInput.propTypes = {\r\n\t/**\r\n\t * The phone number (in E.164 format).\r\n\t * Examples: `\"+12\"`, `\"+12133734253\"`.\r\n\t * An \"empty\" `value` could be represented by any \"falsy\" value like `undefined`, `null` or an empty string `\"\"`.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t * Updates the `value` property (to `undefined` in case it's empty).\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * as a national phone number (example: `(213) 373-4253`),\r\n\t * or as an international phone number without \"country calling code\"\r\n\t * if `international` property is passed (example: `213 373 4253`).\r\n\t * Example: \"US\".\r\n\t * If no `country` is passed then `value`\r\n\t * is formatted as an international phone number.\r\n\t * (example: `+1 213 373 4253`)\r\n\t */\r\n\tcountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t * The user can still input a phone number in international format.\r\n\t * Example: \"US\".\r\n\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t */\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If `country` property is passed along with `international={true}` property\r\n\t * then the phone number will be input in \"international\" format for that `country`\r\n\t * (without \"country calling code\").\r\n\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t * (without \"country calling code\" `+1`).\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If `country` and `international` properties are set,\r\n\t * then by default it won't include \"country calling code\" in the input field.\r\n\t * To change that, pass `withCountryCallingCode` property,\r\n\t * and it will include \"country calling code\" in the input field.\r\n\t */\r\n\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t/**\r\n\t * A component that renders the `<input/>` itself and also\r\n\t * parses and formats its `value` as the user inputs it.\r\n\t */\r\n\tComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t * then the `value` will be formatted as a national phone number by default.\r\n\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t */\r\n\tmetadata: PropTypes.object.isRequired\r\n}\r\n\r\nPhoneInput.defaultProps = {\r\n\t/**\r\n\t * Set to `true` to force international phone number format\r\n\t * (without \"country calling code\") when `country` is specified.\r\n\t */\r\n\t// international: false,\r\n\r\n\t/**\r\n\t * Prefer national format when formatting E.164 phone number `value`\r\n\t * corresponding to `defaultCountry`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: true\r\n}\r\n\r\nexport default PhoneInput","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport PhoneInput_ from './PhoneInput.js'\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\tsmartCaret,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\treturn (\r\n\t\t\t<PhoneInput_\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tComponent={smartCaret ? InputSmart : InputBasic} />\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tPhoneInput.defaultProps = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type=\"tel\"`.\r\n\t\t */\r\n\t\ttype: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t\t */\r\n\t\tsmartCaret: true,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()","import metadata from 'libphonenumber-js/min/metadata'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tisSupportedCountry as _isSupportedCountry\r\n} from '../core/index.js'\r\n\r\nimport { createInput } from '../modules/PhoneInputBrowser.js'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}","import Metadata from './metadata.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// This is just to support `isValidNumber({})`\r\n\t// for cases when `parseNumber()` returns `{}`.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes())\r\n\t{\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst national_number = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(national_number, metadata.nationalNumberPattern())\r\n}","import Metadata from '../metadata.js'\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport default function getIddPrefix(country, callingCode, metadata) {\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tif (countryMetadata.defaultIDDPrefix()) {\r\n\t\treturn countryMetadata.defaultIDDPrefix()\r\n\t}\r\n\tif (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n}\r\n","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\nimport Metadata, { getCountryCallingCode } from './metadata.js'\r\nimport getIddPrefix from './helpers/getIddPrefix.js'\r\nimport { formatRFC3966 } from './helpers/RFC3966.js'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// formatNumber('+78005553535', 'NATIONAL')\r\n// formatNumber('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...DEFAULT_OPTIONS, ...options }\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\t// For reference, here's Google's IDD formatter:\r\n\t\t// https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\r\n\t\t// Not saying that this IDD formatter replicates it 1:1, but it seems to work.\r\n\t\t// Who would even need to format phone numbers in IDD format anyway?\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst formattedNumber = formatIDD(\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tinput.carrierCode,\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\toptions.fromCountry,\r\n\t\t\t\tmetadata\r\n\t\t\t)\r\n\t\t\treturn addExtension(formattedNumber, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tuseInternationalFormat: formatAs === 'INTERNATIONAL',\r\n\t\t\twithNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && (options && options.nationalPrefix === false) ? false : true,\r\n\t\t\tcarrierCode,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n}\r\n\r\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\r\n\tfor (const format of availableFormats) {\r\n\t\t// Validate leading digits.\r\n\t\t// The test case for \"else path\" could be found by searching for\r\n\t\t// \"format.leadingDigitsPatterns().length === 0\".\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDD(\r\n\tnationalNumber,\r\n\tcarrierCode,\r\n\tcountryCallingCode,\r\n\tfromCountry,\r\n\tmetadata\r\n) {\r\n\tconst fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata)\r\n\t// When calling within the same country calling code.\r\n\tif (fromCountryCallingCode === countryCallingCode) {\r\n\t\tconst formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata)\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (countryCallingCode === '1') {\r\n\t\t\treturn countryCallingCode + ' ' + formattedNumber\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formattedNumber\r\n\t}\r\n\tconst iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata)\r\n\tif (iddPrefix) {\r\n\t\treturn `${iddPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata)}`\r\n\t}\r\n}","import Metadata from './metadata.js'\r\nimport isPossibleNumber from './isPossibleNumber_.js'\r\nimport isValidNumber from './validate_.js'\r\nimport isValidNumberForRegion from './isValidNumberForRegion_.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\nimport formatNumber from './format_.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`country` or `countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\tif (!metadata) {\r\n\t\t\tthrow new TypeError('`metadata` not passed')\r\n\t\t}\r\n\t\tconst _metadata = new Metadata(metadata)\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\t\tthis.country = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.metadata)\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// // Is just an alias for `this.isValid() && this.country === country`.\r\n\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n\t// isValidForRegion(country) {\r\n\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)","import createExtensionPattern from './createExtensionPattern.js'\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport default function extractExtension(number) {\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst numberWithoutExtension = number.slice(0, start)\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length) {\r\n\t\tif (matches[i]) {\r\n\t\t\treturn {\r\n\t\t\t\tnumber: numberWithoutExtension,\r\n\t\t\t\text: matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN\r\n} from './constants.js'\r\n\r\nimport ParseError from './ParseError.js'\r\nimport Metadata from './metadata.js'\r\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js'\r\nimport extractExtension from './helpers/extension/extractExtension.js'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js'\r\nimport getCountryCallingCode from './getCountryCallingCode.js'\r\nimport { isPossibleNumber } from './isPossibleNumber_.js'\r\nimport { parseRFC3966 } from './helpers/RFC3966.js'\r\nimport PhoneNumber from './PhoneNumber.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport extractNationalNumber from './helpers/extractNationalNumber.js'\r\nimport stripIddPrefix from './helpers/stripIddPrefix.js'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\r\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$')\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\n// Examples:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parse(text, options, metadata) {\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formattedPhoneNumber, ext, error } = parseInput(text, options.v2, options.extract)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formattedPhoneNumber) {\r\n\t\tif (options.v2) {\r\n\t\t\tif (error === 'TOO_SHORT') {\r\n\t\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t\t}\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tnationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode\r\n\t} = parsePhoneNumber(\r\n\t\tformattedPhoneNumber,\r\n\t\toptions.defaultCountry,\r\n\t\toptions.defaultCallingCode,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.hasSelectedNumberingPlan()) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2) {\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ?\r\n\t\tmatchesEntirely(nationalNumber, metadata.nationalNumberPattern()) :\r\n\t\tfalse\r\n\r\n\tif (!options.extended) {\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\t// isInternational: countryCallingCode !== undefined\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible: valid ? true : (\r\n\t\t\toptions.extended === true &&\r\n\t\t\tmetadata.possibleLengths() &&\r\n\t\t\tisPossibleNumber(nationalNumber, metadata) ? true : false\r\n\t\t),\r\n\t\tphone: nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\r\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\r\n\tif (!text) {\r\n\t\treturn\r\n\t}\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\r\n\t\tif (throwOnError) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\tif (extract === false) {\r\n\t\treturn text\r\n\t}\r\n\t// Attempt to extract a possible number from the string passed in\r\n\tconst startsAt = text.search(PHONE_NUMBER_START_PATTERN)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(startsAt)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parseInput(text, v2, extract) {\r\n\t// Parse RFC 3966 phone number URI.\r\n\tif (text && text.indexOf('tel:') === 0) {\r\n\t\treturn parseRFC3966(text)\r\n\t}\r\n\tlet number = extractFormattedPhoneNumber(text, extract, v2)\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\tif (isViablePhoneNumberStart(number)) {\r\n\t\t\treturn { error: 'TOO_SHORT' }\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst withExtensionStripped = extractExtension(number)\r\n\tif (withExtensionStripped.ext) {\r\n\t\treturn withExtensionStripped\r\n\t}\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, nationalNumber, ext) {\r\n\tconst result = {\r\n\t\tcountry,\r\n\t\tphone: nationalNumber\r\n\t}\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\r\nfunction parsePhoneNumber(\r\n\tformattedPhoneNumber,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\t// Extract calling code from phone number.\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\tparseIncompletePhoneNumber(formattedPhoneNumber),\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata.metadata\r\n\t)\r\n\r\n\t// Choose a country by `countryCallingCode`.\r\n\tlet country\r\n\tif (countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t}\r\n\t// If `formattedPhoneNumber` is in \"national\" format\r\n\t// then `number` is defined and `countryCallingCode` isn't.\r\n\telse if (number && (defaultCountry || defaultCallingCode)) {\r\n\t\tmetadata.selectNumberingPlan(defaultCountry, defaultCallingCode)\r\n\t\tif (defaultCountry) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tcountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcountryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tif (!number) {\r\n\t\treturn { countryCallingCode }\r\n\t}\r\n\r\n\tconst {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t} = extractNationalNumber(\r\n\t\tparseIncompletePhoneNumber(number),\r\n\t\tmetadata\r\n\t)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata)\r\n\tif (exactCountry) {\r\n\t\tcountry = exactCountry\r\n\t\t/* istanbul ignore if */\r\n\t\tif (exactCountry === '001') {\r\n\t\t\t// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\r\n\t\t\t// If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\r\n\t\t\t// then remove the \"istanbul ignore if\".\r\n\t\t} else {\r\n\t\t\tmetadata.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}","import parseNumber from './parse_.js'\r\n\r\nexport default function parsePhoneNumber(text, options, metadata) {\r\n\treturn parseNumber(text, { ...options, v2: true }, metadata)\r\n}","import AsYouType from './AsYouType.js'\r\n\r\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\r\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\r\n\tif (!metadata) {\r\n\t\tmetadata = country\r\n\t\tcountry = undefined\r\n\t}\r\n\treturn new AsYouType(country, metadata).input(value)\r\n}","import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\t/**\r\n\t * `InputBasic` is the most basic implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's input but doesn't control the caret in the process:\r\n\t * when erasing or inserting digits in the middle of a phone number\r\n\t * the caret usually jumps to the end (this is the expected behavior).\r\n\t * Why does `InputBasic` exist when there's `InputSmart`?\r\n\t * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n\t * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n\t */\r\n\tfunction InputBasic({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata,\r\n\t\tinputComponent: Input,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst prefix = getInputValuePrefix({\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst _onChange = useCallback((event) => {\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t// Working around this issue with this simple hack.\r\n\t\t\tif (newValue === value) {\r\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\r\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tonChange(newValue)\r\n\t\t}, [\r\n\t\t\tprefix,\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t])\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\r\n\t\t\t\tonChange={_onChange}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputBasic = React.forwardRef(InputBasic)\r\n\r\n\tInputBasic.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType.isRequired\r\n\t}\r\n\r\n\tInputBasic.defaultProps = {\r\n\t\tmetadata: defaultMetadata,\r\n\t\tinputComponent: 'input'\r\n\t}\r\n\r\n\treturn InputBasic\r\n}\r\n\r\nexport default createInput()\r\n\r\nfunction format(prefix, value, country, metadata) {\r\n\treturn removeInputValuePrefix(\r\n\t\tformatIncompletePhoneNumber(\r\n\t\t\tprefix + value,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t),\r\n\t\tprefix\r\n\t)\r\n}","import { parseDigit } from './helpers/parseDigits.js'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+') {\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (prevParsedCharacters) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}","export default class AsYouTypeState {\r\n\tconstructor({ onCountryChange, onCallingCodeChange }) {\r\n\t\tthis.onCountryChange = onCountryChange\r\n\t\tthis.onCallingCodeChange = onCallingCodeChange\r\n\t}\r\n\r\n\treset(defaultCountry, defaultCallingCode) {\r\n\t\tthis.international = false\r\n\t\tthis.IDDPrefix = undefined\r\n\t\tthis.missingPlus = undefined\r\n\t\tthis.callingCode = undefined\r\n\t\tthis.digits = ''\r\n\t\tthis.resetNationalSignificantNumber()\r\n\t\tthis.initCountryAndCallingCode(defaultCountry, defaultCallingCode)\r\n\t}\r\n\r\n\tresetNationalSignificantNumber() {\r\n\t\tthis.nationalSignificantNumber = this.getNationalDigits()\r\n\t\tthis.nationalSignificantNumberMatchesInput = true\r\n\t\tthis.nationalPrefix = undefined\r\n\t\tthis.carrierCode = undefined\r\n\t\tthis.complexPrefixBeforeNationalSignificantNumber = undefined\r\n\t}\r\n\r\n\tupdate(properties) {\r\n\t\tfor (const key of Object.keys(properties)) {\r\n\t\t\tthis[key] = properties[key]\r\n\t\t}\r\n\t}\r\n\r\n\tinitCountryAndCallingCode(country, callingCode) {\r\n\t\tthis.setCountry(country)\r\n\t\tthis.setCallingCode(callingCode)\r\n\t}\r\n\r\n\tsetCountry(country) {\r\n\t\tthis.country = country\r\n\t\tthis.onCountryChange(country)\r\n\t}\r\n\r\n\tsetCallingCode(callingCode) {\r\n\t\tthis.callingCode = callingCode\r\n\t\tthis.onCallingCodeChange(callingCode, this.country)\r\n\t}\r\n\r\n\tstartInternationalNumber(country, callingCode) {\r\n\t\t// Prepend the `+` to parsed input.\r\n\t\tthis.international = true\r\n\t\t// If a default country was set then reset it\r\n\t\t// because an explicitly international phone\r\n\t\t// number is being entered.\r\n\t\tthis.initCountryAndCallingCode(country, callingCode)\r\n\t}\r\n\r\n\tappendDigits(nextDigits) {\r\n\t\tthis.digits += nextDigits\r\n\t}\r\n\r\n\tappendNationalSignificantNumberDigits(nextDigits) {\r\n\t\tthis.nationalSignificantNumber += nextDigits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the part of `this.digits` that corresponds to the national number.\r\n\t * Basically, all digits that have been input by the user, except for the\r\n\t * international prefix and the country calling code part\r\n\t * (if the number is an international one).\r\n\t * @return {string}\r\n\t */\r\n\tgetNationalDigits() {\r\n\t\tif (this.international) {\r\n\t\t\treturn this.digits.slice(\r\n\t\t\t\t(this.IDDPrefix ? this.IDDPrefix.length : 0) +\r\n\t\t\t\t(this.callingCode ? this.callingCode.length : 0)\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n\r\n\tgetDigitsWithoutInternationalPrefix() {\r\n\t\tif (this.international) {\r\n\t\t\tif (this.IDDPrefix) {\r\n\t\t\t\treturn this.digits.slice(this.IDDPrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n}","// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function countOccurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times) {\r\n\tif (times < 1) {\r\n\t\treturn ''\r\n\t}\r\n\tlet result = ''\r\n\twhile (times > 1) {\r\n\t\tif (times & 1) {\r\n\t\t\tresult += string\r\n\t\t}\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\treturn result + string\r\n}\r\n\r\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\r\n\tif (string[cutBeforeIndex] === ')') {\r\n\t\tcutBeforeIndex++\r\n\t}\r\n\treturn stripNonPairedParens(string.slice(0, cutBeforeIndex))\r\n}\r\n\r\nexport function closeNonPairedParens(template, cut_before) {\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\tconst opening_braces = countOccurences('(', retained_template)\r\n\tconst closing_braces = countOccurences(')', retained_template)\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length) {\r\n\t\tif (template[cut_before] === ')') {\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\nexport function stripNonPairedParens(string) {\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length) {\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces) {\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\treturn cleared_string\r\n}\r\n\r\nexport function populateTemplateWithDigits(template, position, digits) {\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for `digits` it is safe.\r\n\t// for (const digit of digits)\r\n\tfor (const digit of digits.split('')) {\r\n\t\t// If there is room for more digits in current `template`,\r\n\t\t// then set the next digit in the `template`,\r\n\t\t// and return the formatted digits so far.\r\n\t\t// If more digits are entered than the current format could handle.\r\n\t\tif (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tposition = template.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\ttemplate = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t}\r\n\treturn [template, position]\r\n}","import checkNumberLength from './helpers/checkNumberLength.js'\r\nimport parseDigits from './helpers/parseDigits.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\n\r\nexport default function formatCompleteNumber(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\tif (matcher.test(state.nationalSignificantNumber)) {\r\n\t\treturn formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(\r\n\t\t\tstate,\r\n\t\t\tformat,\r\n\t\t\t{\r\n\t\t\t\tmetadata,\r\n\t\t\t\tshouldTryNationalPrefixFormattingRule,\r\n\t\t\t\tgetSeparatorAfterNationalPrefix\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\r\n\treturn checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE'\r\n}\r\n\r\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\t// `format` has already been checked for `nationalPrefix` requirement.\r\n\r\n\tconst {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode\r\n\t} = state\r\n\r\n\t// Format the number with using `national_prefix_formatting_rule`.\r\n\t// If the resulting formatted number is a valid formatted number, then return it.\r\n\t//\r\n\t// Google's AsYouType formatter is different in a way that it doesn't try\r\n\t// to format using the \"national prefix formatting rule\", and instead it\r\n\t// simply prepends a national prefix followed by a \" \" character.\r\n\t// This code does that too, but as a fallback.\r\n\t// The reason is that \"national prefix formatting rule\" may use parentheses,\r\n\t// which wouldn't be included has it used the simpler Google's way.\r\n\t//\r\n\tif (shouldTryNationalPrefixFormattingRule(format)) {\r\n\t\tconst formattedNumber = formatNationalNumber(state, format, {\r\n\t\t\tuseNationalPrefixFormattingRule: true,\r\n\t\t\tgetSeparatorAfterNationalPrefix,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\tif (formattedNumber) {\r\n\t\t\treturn formattedNumber\r\n\t\t}\r\n\t}\r\n\r\n\t// Format the number without using `national_prefix_formatting_rule`.\r\n\treturn formatNationalNumber(state, format, {\r\n\t\tuseNationalPrefixFormattingRule: false,\r\n\t\tgetSeparatorAfterNationalPrefix,\r\n\t\tmetadata\r\n\t})\r\n}\r\n\r\nfunction formatNationalNumber(state, format, {\r\n\tmetadata,\r\n\tuseNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tlet formattedNationalNumber = formatNationalNumberUsingFormat(\r\n\t\tstate.nationalSignificantNumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tcarrierCode: state.carrierCode,\r\n\t\t\tuseInternationalFormat: state.international,\r\n\t\t\twithNationalPrefix: useNationalPrefixFormattingRule,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n\tif (!useNationalPrefixFormattingRule) {\r\n\t\tif (state.nationalPrefix) {\r\n\t\t\t// If a national prefix was extracted, then just prepend it,\r\n\t\t\t// followed by a \" \" character.\r\n\t\t\tformattedNationalNumber = state.nationalPrefix +\r\n\t\t\t\tgetSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t} else if (state.complexPrefixBeforeNationalSignificantNumber) {\r\n\t\t\tformattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber +\r\n\t\t\t\t' ' +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t}\r\n\t}\r\n\tif (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n}\r\n\r\n// Check that the formatted phone number contains exactly\r\n// the same digits that have been input by the user.\r\n// For example, when \"0111523456789\" is input for `AR` country,\r\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\r\n// which means that the national part of `this.digits` isn't simply equal to\r\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\r\n//\r\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\r\n// being formatted via `metadata[country].national_prefix_transform_rule`.\r\n// For example, for `VI` country, it prepends `340` to the national number,\r\n// and if this check hasn't been implemented, then there would be a bug\r\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\r\n//\r\n// So, all these \"gotchas\" are filtered out.\r\n//\r\n// In the original Google's code, the comments say:\r\n// \"Check that we didn't remove nor add any extra digits when we matched\r\n// this formatting pattern. This usually happens after we entered the last\r\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\r\n// formatted but AYTF should retain all the number entered and not change\r\n// in order to match a format (of same leading digits and length) display\r\n// in that way.\"\r\n// \"If it's the same (i.e entered number and format is same), then it's\r\n// safe to return this in formatted number as nothing is lost / added.\"\r\n// Otherwise, don't use this format.\r\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\r\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\r\n//\r\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\r\n\treturn parseDigits(formattedNationalNumber) === state.getNationalDigits()\r\n}","export default class PatternParser {\r\n\tparse(pattern) {\r\n\t\tthis.context = [{\r\n\t\t\tor: true,\r\n\t\t\tinstructions: []\r\n\t\t}]\r\n\r\n\t\tthis.parsePattern(pattern)\r\n\r\n\t\tif (this.context.length !== 1) {\r\n\t\t\tthrow new Error('Non-finalized contexts left when pattern parse ended')\r\n\t\t}\r\n\r\n\t\tconst { branches, instructions } = this.context[0]\r\n\r\n\t\tif (branches) {\r\n\t\t\treturn {\r\n\t\t\t\top: '|',\r\n\t\t\t\targs: branches.concat([\r\n\t\t\t\t\texpandSingleElementArray(instructions)\r\n\t\t\t\t])\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* istanbul ignore if */\r\n\t\tif (instructions.length === 0) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\tif (instructions.length === 1) {\r\n\t\t\treturn instructions[0]\r\n\t\t}\r\n\r\n\t\treturn instructions\r\n\t}\r\n\r\n\tstartContext(context) {\r\n\t\tthis.context.push(context)\r\n\t}\r\n\r\n\tendContext() {\r\n\t\tthis.context.pop()\r\n\t}\r\n\r\n\tgetContext() {\r\n\t\treturn this.context[this.context.length - 1]\r\n\t}\r\n\r\n\tparsePattern(pattern) {\r\n\t\tif (!pattern) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\tconst match = pattern.match(OPERATOR)\r\n\t\tif (!match) {\r\n\t\t\tif (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\r\n\t\t\t\tthrow new Error(`Illegal characters found in a pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tthis.getContext().instructions = this.getContext().instructions.concat(\r\n\t\t\t\tpattern.split('')\r\n\t\t\t)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst operator = match[1]\r\n\t\tconst before = pattern.slice(0, match.index)\r\n\t\tconst rightPart = pattern.slice(match.index + operator.length)\r\n\r\n\t\tswitch (operator) {\r\n\t\t\tcase '(?:':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\tor: true,\r\n\t\t\t\t\tinstructions: [],\r\n\t\t\t\t\tbranches: []\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ')':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\")\" operator must be preceded by \"(?:\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tif (this.getContext().instructions.length === 0) {\r\n\t\t\t\t\tthrow new Error('No instructions found after \"|\" operator in an \"or\" group')\r\n\t\t\t\t}\r\n\t\t\t\tconst { branches } = this.getContext()\r\n\t\t\t\tbranches.push(\r\n\t\t\t\t\texpandSingleElementArray(\r\n\t\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '|',\r\n\t\t\t\t\targs: branches\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '|':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\"|\" operator can only be used inside \"or\" groups')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\t// The top-level is an implicit \"or\" group, if required.\r\n\t\t\t\tif (!this.getContext().branches) {\r\n\t\t\t\t\t// `branches` are not defined only for the root implicit \"or\" operator.\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif (this.context.length === 1) {\r\n\t\t\t\t\t\tthis.getContext().branches = []\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('\"branches\" not found in an \"or\" group context')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.getContext().branches.push(\r\n\t\t\t\t\texpandSingleElementArray(\r\n\t\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\tthis.getContext().instructions = []\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '[':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\toneOfSet: true\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ']':\r\n\t\t\t\tif (!this.getContext().oneOfSet) {\r\n\t\t\t\t\tthrow new Error('\"]\" operator must be preceded by \"[\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '[]',\r\n\t\t\t\t\targs: parseOneOfSet(before)\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown operator: ${operator}`)\r\n\t\t}\r\n\r\n\t\tif (rightPart) {\r\n\t\t\tthis.parsePattern(rightPart)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction parseOneOfSet(pattern) {\r\n\tconst values = []\r\n\tlet i = 0\r\n\twhile (i < pattern.length) {\r\n\t\tif (pattern[i] === '-') {\r\n\t\t\tif (i === 0 || i === pattern.length - 1) {\r\n\t\t\t\tthrow new Error(`Couldn't parse a one-of set pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tconst prevValue = pattern[i - 1].charCodeAt(0) + 1\r\n\t\t\tconst nextValue = pattern[i + 1].charCodeAt(0) - 1\r\n\t\t\tlet value = prevValue\r\n\t\t\twhile (value <= nextValue) {\r\n\t\t\t\tvalues.push(String.fromCharCode(value))\r\n\t\t\t\tvalue++\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalues.push(pattern[i])\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn values\r\n}\r\n\r\nconst ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/\r\n\r\nconst OPERATOR = new RegExp(\r\n\t// any of:\r\n\t'(' +\r\n\t\t// or operator\r\n\t\t'\\\\|' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group start\r\n\t\t'\\\\(\\\\?\\\\:' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group end\r\n\t\t'\\\\)' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set start\r\n\t\t'\\\\[' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set end\r\n\t\t'\\\\]' +\r\n\t')'\r\n)\r\n\r\nfunction expandSingleElementArray(array) {\r\n\tif (array.length === 1) {\r\n\t\treturn array[0]\r\n\t}\r\n\treturn array\r\n}","import PatternParser from './AsYouTypeFormatter.PatternParser.js'\r\n\r\nexport default class PatternMatcher {\r\n\tconstructor(pattern) {\r\n\t\tthis.matchTree = new PatternParser().parse(pattern)\r\n\t}\r\n\r\n\tmatch(string, { allowOverflow } = {}) {\r\n\t\tif (!string) {\r\n\t\t\tthrow new Error('String is required')\r\n\t\t}\r\n\t\tconst result = match(string.split(''), this.matchTree, true)\r\n\t\tif (result && result.match) {\r\n\t\t\tdelete result.matchedChars\r\n\t\t}\r\n\t\tif (result && result.overflow) {\r\n\t\t\tif (!allowOverflow) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n}\r\n\r\n/**\r\n * Matches `characters` against a pattern compiled into a `tree`.\r\n * @param  {string[]} characters\r\n * @param  {Tree} tree — A pattern compiled into a `tree`. See the `*.d.ts` file for the description of the `tree` structure.\r\n * @param  {boolean} last — Whether it's the last (rightmost) subtree on its level of the match tree.\r\n * @return {object} See the `*.d.ts` file for the description of the result object.\r\n */\r\nfunction match(characters, tree, last) {\r\n\t// If `tree` is a string, then `tree` is a single character.\r\n\t// That's because when a pattern is parsed, multi-character-string parts\r\n\t// of a pattern are compiled into arrays of single characters.\r\n\t// I still wrote this piece of code for a \"general\" hypothetical case\r\n\t// when `tree` could be a string of several characters, even though\r\n\t// such case is not possible with the current implementation.\r\n\tif (typeof tree === 'string') {\r\n\t\tconst characterString = characters.join('')\r\n\t\tif (tree.indexOf(characterString) === 0) {\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (characters.length === tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmatch: true,\r\n\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn {\r\n\t\t\t\tpartialMatch: true,\r\n\t\t\t\t// matchedChars: characters\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (characterString.indexOf(tree) === 0) {\r\n\t\t\tif (last) {\r\n\t\t\t\t// The `else` path is not possible because `tree` is always a single character.\r\n\t\t\t\t// The `else` case for `characters.length > tree.length` would be\r\n\t\t\t\t// `characters.length <= tree.length` which means `characters.length <= 1`.\r\n\t\t\t\t// `characters` array can't be empty, so that means `characters === [tree]`,\r\n\t\t\t\t// which would also mean `tree.indexOf(characterString) === 0` and that'd mean\r\n\t\t\t\t// that the `if (tree.indexOf(characterString) === 0)` condition before this\r\n\t\t\t\t// `if` condition would be entered, and returned from there, not reaching this code.\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (characters.length > tree.length) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tmatch: true,\r\n\t\t\t\tmatchedChars: characters.slice(0, tree.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\tif (Array.isArray(tree)) {\r\n\t\tlet restCharacters = characters.slice()\r\n\t\tlet i = 0\r\n\t\twhile (i < tree.length) {\r\n\t\t\tconst subtree = tree[i]\r\n\t\t\tconst result = match(restCharacters, subtree, last && (i === tree.length - 1))\r\n\t\t\tif (!result) {\r\n\t\t\t\treturn\r\n\t\t\t} else if (result.overflow) {\r\n\t\t\t\treturn result\r\n\t\t\t} else if (result.match) {\r\n\t\t\t\t// Continue with the next subtree with the rest of the characters.\r\n\t\t\t\trestCharacters = restCharacters.slice(result.matchedChars.length)\r\n\t\t\t\tif (restCharacters.length === 0) {\r\n\t\t\t\t\tif (i === tree.length - 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti++\r\n\t\t}\r\n\t\t// If `last` then overflow has already been checked\r\n\t\t// by the last element of the `tree` array.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (last) {\r\n\t\t\treturn {\r\n\t\t\t\toverflow: true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tmatch: true,\r\n\t\t\tmatchedChars: characters.slice(0, characters.length - restCharacters.length)\r\n\t\t}\r\n\t}\r\n\r\n\tswitch (tree.op) {\r\n\t\tcase '|':\r\n\t\t\tlet partialMatch\r\n\t\t\tfor (const branch of tree.args) {\r\n\t\t\t\tconst result = match(characters, branch, last)\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tif (result.overflow) {\r\n\t\t\t\t\t\treturn result\r\n\t\t\t\t\t} else if (result.match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: result.matchedChars\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\t\t\tpartialMatch = true\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (partialMatch) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t// matchedChars: ...\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Not even a partial match.\r\n\t\t\treturn\r\n\r\n\t\tcase '[]':\r\n\t\t\tfor (const char of tree.args) {\r\n\t\t\t\tif (characters[0] === char) {\r\n\t\t\t\t\tif (characters.length === 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\tmatchedChars: [char]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No character matches.\r\n\t\t\treturn\r\n\r\n\t\t/* istanbul ignore next */\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unsupported instruction tree: ${tree}`)\r\n\t}\r\n}","import {\r\n\tDIGIT_PLACEHOLDER,\r\n\tcountOccurences,\r\n\trepeat,\r\n\tcutAndStripNonPairedParens,\r\n\tcloseNonPairedParens,\r\n\tstripNonPairedParens,\r\n\tpopulateTemplateWithDigits\r\n} from './AsYouTypeFormatter.util.js'\r\n\r\nimport formatCompleteNumber, {\r\n\tcanFormatCompleteNumber\r\n} from './AsYouTypeFormatter.complete.js'\r\n\r\nimport PatternMatcher from './AsYouTypeFormatter.PatternMatcher.js'\r\n\r\nimport parseDigits from './helpers/parseDigits.js'\r\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util.js'\r\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat.js'\r\nimport { VALID_PUNCTUATION } from './constants.js'\r\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle.js'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// A set of characters that, if found in a national prefix formatting rules, are an indicator to\r\n// us that we should separate the national prefix from the number when formatting.\r\nconst NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/\r\n\r\n// Deprecated: Google has removed some formatting pattern related code from their repo.\r\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\r\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\r\n// Because this library supports generating custom metadata\r\n// some users may still be using old metadata so the relevant\r\n// code seems to stay until some next major version update.\r\nconst SUPPORT_LEGACY_FORMATTING_PATTERNS = true\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\[([^\\[\\]])*\\]/g)\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\d(?=[^,}][^,}])/g)\r\n\r\n// A regular expression that is used to determine if a `format` is\r\n// suitable to be used in the \"as you type formatter\".\r\n// A `format` is suitable when the resulting formatted number has\r\n// the same digits as the user has entered.\r\n//\r\n// In the simplest case, that would mean that the format\r\n// doesn't add any additional digits when formatting a number.\r\n// Google says that it also shouldn't add \"star\" (`*`) characters,\r\n// like it does in some Israeli formats.\r\n// Such basic format would only contain \"valid punctuation\"\r\n// and \"captured group\" identifiers ($1, $2, etc).\r\n//\r\n// An example of a format that adds additional digits:\r\n//\r\n// Country: `AR` (Argentina).\r\n// Format:\r\n// {\r\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n//    \"leading_digits_patterns\": [\"91\"],\r\n//    \"national_prefix_formatting_rule\": \"0$1\",\r\n//    \"format\": \"$2 15-$3-$4\",\r\n//    \"international_format\": \"$1 $2 $3-$4\"\r\n// }\r\n//\r\n// In the format above, the `format` adds `15` to the digits when formatting a number.\r\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\r\n// has previously removed `15` from a national number, so re-adding `15` in `format`\r\n// doesn't actually result in any extra digits added to user's input.\r\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\r\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\r\n//\r\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\r\n// `libphonenumber` code.\r\n//\r\nconst NON_ALTERING_FORMAT_REG_EXP = new RegExp(\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t// Google developers say:\r\n\t// \"We require that the first matching group is present in the\r\n\t//  output pattern to ensure no data is lost while formatting.\"\r\n\t'\\\\$1' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)*' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nexport default class AsYouTypeFormatter {\r\n\tconstructor({\r\n\t\tstate,\r\n\t\tmetadata\r\n\t}) {\r\n\t\tthis.metadata = metadata\r\n\t\tthis.resetFormat()\r\n\t}\r\n\r\n\tresetFormat() {\r\n\t\tthis.chosenFormat = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.nationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t}\r\n\r\n\treset(numberingPlan, state) {\r\n\t\tthis.resetFormat()\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.isNANP = numberingPlan.callingCode() === '1'\r\n\t\t\tthis.matchingFormats = numberingPlan.formats()\r\n\t\t\tif (state.nationalSignificantNumber) {\r\n\t\t\t\tthis.narrowDownMatchingFormats(state)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.isNANP = undefined\r\n\t\t\tthis.matchingFormats = []\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats an updated phone number.\r\n\t * @param  {string} nextDigits — Additional phone number digits.\r\n\t * @param  {object} state — `AsYouType` state.\r\n\t * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n\t */\r\n\tformat(nextDigits, state) {\r\n\t\t// See if the phone number digits can be formatted as a complete phone number.\r\n\t\t// If not, use the results from `formatNationalNumberWithNextDigits()`,\r\n\t\t// which formats based on the chosen formatting pattern.\r\n\t\t//\r\n\t\t// Attempting to format complete phone number first is how it's done\r\n\t\t// in Google's `libphonenumber`, so this library just follows it.\r\n\t\t// Google's `libphonenumber` code doesn't explain in detail why does it\r\n\t\t// attempt to format digits as a complete phone number\r\n\t\t// instead of just going with a previoulsy (or newly) chosen `format`:\r\n\t\t//\r\n\t\t// \"Checks to see if there is an exact pattern match for these digits.\r\n\t\t//  If so, we should use this instead of any other formatting template\r\n\t\t//  whose leadingDigitsPattern also matches the input.\"\r\n\t\t//\r\n\t\tif (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\r\n\t\t\tfor (const format of this.matchingFormats) {\r\n\t\t\t\tconst formattedCompleteNumber = formatCompleteNumber(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmetadata: this.metadata,\r\n\t\t\t\t\t\tshouldTryNationalPrefixFormattingRule: (format) => this.shouldTryNationalPrefixFormattingRule(format, {\r\n\t\t\t\t\t\t\tinternational: state.international,\r\n\t\t\t\t\t\t\tnationalPrefix: state.nationalPrefix\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tgetSeparatorAfterNationalPrefix: (format) => this.getSeparatorAfterNationalPrefix(format)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t\tif (formattedCompleteNumber) {\r\n\t\t\t\t\tthis.resetFormat()\r\n\t\t\t\t\tthis.chosenFormat = format\r\n\t\t\t\t\tthis.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state)\r\n\t\t\t\t\tthis.populatedNationalNumberTemplate = formattedCompleteNumber\r\n\t\t\t\t\t// With a new formatting template, the matched position\r\n\t\t\t\t\t// using the old template needs to be reset.\r\n\t\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER)\r\n\t\t\t\t\treturn formattedCompleteNumber\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Format the digits as a partial (incomplete) phone number\r\n\t\t// using the previously chosen formatting pattern (or a newly chosen one).\r\n\t\treturn this.formatNationalNumberWithNextDigits(nextDigits, state)\r\n\t}\r\n\r\n\t// Formats the next phone number digits.\r\n\tformatNationalNumberWithNextDigits(nextDigits, state) {\r\n\t\tconst previouslyChosenFormat = this.chosenFormat\r\n\r\n\t\t// Choose a format from the list of matching ones.\r\n\t\tconst newlyChosenFormat = this.chooseFormat(state)\r\n\r\n\t\tif (newlyChosenFormat) {\r\n\t\t\tif (newlyChosenFormat === previouslyChosenFormat) {\r\n\t\t\t\t// If it can format the next (current) digits\r\n\t\t\t\t// using the previously chosen phone number format\r\n\t\t\t\t// then return the updated formatted number.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(nextDigits)\r\n\t\t\t} else {\r\n\t\t\t\t// If a more appropriate phone number format\r\n\t\t\t\t// has been chosen for these \"leading digits\",\r\n\t\t\t\t// then re-format the national phone number part\r\n\t\t\t\t// using the newly selected format.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(state.getNationalDigits())\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tnarrowDownMatchingFormats({\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalPrefix,\r\n\t\tinternational\r\n\t}) {\r\n\t\tconst leadingDigits = nationalSignificantNumber\r\n\r\n\t\t// \"leading digits\" pattern list starts with a\r\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\r\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\r\n\t\t// this national (significant) number can already be formatted.\r\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\r\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\r\n\r\n\t\t// This implementation is different from Google's\r\n\t\t// in that it searches for a fitting format\r\n\t\t// even if the user has entered less than\r\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\r\n\t\t// Because some leading digit patterns already match for a single first digit.\r\n\t\tlet leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH\r\n\t\tif (leadingDigitsPatternIndex < 0) {\r\n\t\t\tleadingDigitsPatternIndex = 0\r\n\t\t}\r\n\r\n\t\tthis.matchingFormats = this.matchingFormats.filter(\r\n\t\t\tformat => this.formatSuits(format, international, nationalPrefix)\r\n\t\t\t\t&& this.formatMatches(format, leadingDigits, leadingDigitsPatternIndex)\r\n\t\t)\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t}\r\n\r\n\tformatSuits(format, international, nationalPrefix) {\r\n\t\t// When a prefix before a national (significant) number is\r\n\t\t// simply a national prefix, then it's parsed as `this.nationalPrefix`.\r\n\t\t// In more complex cases, a prefix before national (significant) number\r\n\t\t// could include a national prefix as well as some \"capturing groups\",\r\n\t\t// and in that case there's no info whether a national prefix has been parsed.\r\n\t\t// If national prefix is not used when formatting a phone number\r\n\t\t// using this format, but a national prefix has been entered by the user,\r\n\t\t// and was extracted, then discard such phone number format.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\r\n\t\tif (nationalPrefix &&\r\n\t\t\t!format.usesNationalPrefix() &&\r\n\t\t\t// !format.domesticCarrierCodeFormattingRule() &&\r\n\t\t\t!format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// If national prefix is mandatory for this phone number format\r\n\t\t// and there're no guarantees that a national prefix is present in user input\r\n\t\t// then discard this phone number format as not suitable.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\r\n\t\tif (!international &&\r\n\t\t\t!nationalPrefix &&\r\n\t\t\tformat.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tformatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\r\n\t\tconst leadingDigitsPatternsCount = format.leadingDigitsPatterns().length\r\n\r\n\t\t// If this format is not restricted to a certain\r\n\t\t// leading digits pattern then it fits.\r\n\t\t// The test case could be found by searching for \"leadingDigitsPatternsCount === 0\".\r\n\t\tif (leadingDigitsPatternsCount === 0) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// Start narrowing down the list of possible formats based on the leading digits.\r\n\t\t// (only previously matched formats take part in the narrowing down process)\r\n\r\n\t\t// `leading_digits_patterns` start with 3 digits min\r\n\t\t// and then go up from there one digit at a time.\r\n\t\tleadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1)\r\n\t\tconst leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]\r\n\r\n\t\t// Google imposes a requirement on the leading digits\r\n\t\t// to be minimum 3 digits long in order to be eligible\r\n\t\t// for checking those with a leading digits pattern.\r\n\t\t//\r\n\t\t// Since `leading_digits_patterns` start with 3 digits min,\r\n\t\t// Google's original `libphonenumber` library only starts\r\n\t\t// excluding any non-matching formats only when the\r\n\t\t// national number entered so far is at least 3 digits long,\r\n\t\t// otherwise format matching would give false negatives.\r\n\t\t//\r\n\t\t// For example, when the digits entered so far are `2`\r\n\t\t// and the leading digits pattern is `21` –\r\n\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t// but due to the absence of further digits it would give false negative.\r\n\t\t//\r\n\t\t// Also, `leading_digits_patterns` doesn't always correspond to a single\r\n\t\t// digits count. For example, `60|8` pattern would already match `8`\r\n\t\t// but the `60` part would require having at least two leading digits,\r\n\t\t// so the whole pattern would require inputting two digits first in order to\r\n\t\t// decide on whether it matches the input, even when the input is \"80\".\r\n\t\t//\r\n\t\t// This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\r\n\t\t// even when there's only 1 or 2 digits of the national (significant) number.\r\n\t\t// To do that, it uses a non-strict pattern matcher written specifically for that.\r\n\t\t//\r\n\t\tif (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\r\n\t\t\t// Before leading digits < 3 matching was implemented:\r\n\t\t\t// return true\r\n\t\t\t//\r\n\t\t\t// After leading digits < 3 matching was implemented:\r\n\t\t\ttry {\r\n\t\t\t\treturn new PatternMatcher(leadingDigitsPattern).match(leadingDigits, { allowOverflow: true }) !== undefined\r\n\t\t\t} catch (error) /* istanbul ignore next */ {\r\n\t\t\t\t// There's a slight possibility that there could be some undiscovered bug\r\n\t\t\t\t// in the pattern matcher code. Since the \"leading digits < 3 matching\"\r\n\t\t\t\t// feature is not \"essential\" for operation, it can fall back to the old way\r\n\t\t\t\t// in case of any issues rather than halting the application's execution.\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\r\n\t\t// available then use the usual regular expression matching.\r\n\t\t//\r\n\t\t// The whole pattern is wrapped in round brackets (`()`) because\r\n\t\t// the pattern can use \"or\" operator (`|`) at the top level of the pattern.\r\n\t\t//\r\n\t\treturn new RegExp(`^(${leadingDigitsPattern})`).test(leadingDigits)\r\n\t}\r\n\r\n\tgetFormatFormat(format, international) {\r\n\t\treturn international ? format.internationalFormat() : format.format()\r\n\t}\r\n\r\n\tchooseFormat(state) {\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\t//\r\n\t\t// For some weird reason, `istanbul` says \"else path not taken\"\r\n\t\t// for the `for of` line below. Supposedly that means that\r\n\t\t// the loop doesn't ever go over the last element in the list.\r\n\t\t// That's true because there always is `this.chosenFormat`\r\n\t\t// when `this.matchingFormats` is non-empty.\r\n\t\t// And, for some weird reason, it doesn't think that the case\r\n\t\t// with empty `this.matchingFormats` qualifies for a valid \"else\" path.\r\n\t\t// So simply muting this `istanbul` warning.\r\n\t\t// It doesn't skip the contents of the `for of` loop,\r\n\t\t// it just skips the `for of` line.\r\n\t\t//\r\n\t\t/* istanbul ignore next */\r\n\t\tfor (const format of this.matchingFormats.slice()) {\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still suitable, then stick to it.\r\n\t\t\tif (this.chosenFormat === format) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t// Sometimes, a formatting rule inserts additional digits in a phone number,\r\n\t\t\t// and \"as you type\" formatter can't do that: it should only use the digits\r\n\t\t\t// that the user has input.\r\n\t\t\t//\r\n\t\t\t// For example, in Argentina, there's a format for mobile phone numbers:\r\n\t\t\t//\r\n\t\t\t// {\r\n\t\t\t//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n\t\t\t//    \"leading_digits_patterns\": [\"91\"],\r\n\t\t\t//    \"national_prefix_formatting_rule\": \"0$1\",\r\n\t\t\t//    \"format\": \"$2 15-$3-$4\",\r\n\t\t\t//    \"international_format\": \"$1 $2 $3-$4\"\r\n\t\t\t// }\r\n\t\t\t//\r\n\t\t\t// In that format, `international_format` is used instead of `format`\r\n\t\t\t// because `format` inserts `15` in the formatted number,\r\n\t\t\t// and `AsYouType` formatter should only use the digits\r\n\t\t\t// the user has actually input, without adding any extra digits.\r\n\t\t\t// In this case, it wouldn't make a difference, because the `15`\r\n\t\t\t// is first stripped when applying `national_prefix_for_parsing`\r\n\t\t\t// and then re-added when using `format`, so in reality it doesn't\r\n\t\t\t// add any new digits to the number, but to detect that, the code\r\n\t\t\t// would have to be more complex: it would have to try formatting\r\n\t\t\t// the digits using the format and then see if any digits have\r\n\t\t\t// actually been added or removed, and then, every time a new digit\r\n\t\t\t// is input, it should re-check whether the chosen format doesn't\r\n\t\t\t// alter the digits.\r\n\t\t\t//\r\n\t\t\t// Google's code doesn't go that far, and so does this library:\r\n\t\t\t// it simply requires that a `format` doesn't add any additonal\r\n\t\t\t// digits to user's input.\r\n\t\t\t//\r\n\t\t\t// Also, people in general should move from inputting phone numbers\r\n\t\t\t// in national format (possibly with national prefixes)\r\n\t\t\t// and use international phone number format instead:\r\n\t\t\t// it's a logical thing in the modern age of mobile phones,\r\n\t\t\t// globalization and the internet.\r\n\t\t\t//\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (!NON_ALTERING_FORMAT_REG_EXP.test(this.getFormatFormat(format, state.international))) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tif (!this.createTemplateForFormat(format, state)) {\r\n\t\t\t\t// Remove the format if it can't generate a template.\r\n\t\t\t\tthis.matchingFormats = this.matchingFormats.filter(_ => _ !== format)\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tthis.chosenFormat = format\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tif (!this.chosenFormat) {\r\n\t\t\t// No format matches the national (significant) phone number.\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t\treturn this.chosenFormat\r\n\t}\r\n\r\n\tcreateTemplateForFormat(format, state) {\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Get formatting template for this phone number format\r\n\t\tconst template = this.getTemplateForFormat(format, state)\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (template) {\r\n\t\t\tthis.setNationalNumberTemplate(template, state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tgetSeparatorAfterNationalPrefix(format) {\r\n\t\t// `US` metadata doesn't have a `national_prefix_formatting_rule`,\r\n\t\t// so the `if` condition below doesn't apply to `US`,\r\n\t\t// but in reality there shoudl be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\t// So `US` national prefix separator is a \"special\" \"hardcoded\" case.\r\n\t\tif (this.isNANP) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// If a `format` has a `national_prefix_formatting_rule`\r\n\t\t// and that rule has a separator after a national prefix,\r\n\t\t// then it means that there should be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\tif (format &&\r\n\t\t\tformat.nationalPrefixFormattingRule() &&\r\n\t\t\tNATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// At this point, there seems to be no clear evidence that\r\n\t\t// there should be a separator between a national prefix\r\n\t\t// and a national (significant) number. So don't insert one.\r\n\t\treturn ''\r\n\t}\r\n\r\n\tgetInternationalPrefixBeforeCountryCallingCode({ IDDPrefix, missingPlus }, options) {\r\n\t\tif (IDDPrefix) {\r\n\t\t\treturn options && options.spacing === false ? IDDPrefix : IDDPrefix + ' '\r\n\t\t}\r\n\t\tif (missingPlus) {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\r\n\tgetTemplate(state) {\r\n\t\tif (!this.template) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// `this.template` holds the template for a \"complete\" phone number.\r\n\t\t// The currently entered phone number is most likely not \"complete\",\r\n\t\t// so trim all non-populated digits.\r\n\t\tlet index = -1\r\n\t\tlet i = 0\r\n\t\tconst internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, { spacing: false }) : ''\r\n\t\twhile (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\t\treturn cutAndStripNonPairedParens(this.template, index + 1)\r\n\t}\r\n\r\n\tsetNationalNumberTemplate(template, state) {\r\n\t\tthis.nationalNumberTemplate = template\r\n\t\tthis.populatedNationalNumberTemplate = template\r\n\t\t// With a new formatting template, the matched position\r\n\t\t// using the old template needs to be reset.\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (state.international) {\r\n\t\t\tthis.template =\r\n\t\t\t\tthis.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) +\r\n\t\t\t\trepeat(DIGIT_PLACEHOLDER, state.callingCode.length) +\r\n\t\t\t\t' ' +\r\n\t\t\t\ttemplate\r\n\t\t} else {\r\n\t\t\tthis.template = template\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates formatting template for a national phone number,\r\n\t * optionally containing a national prefix, for a format.\r\n\t * @param  {Format} format\r\n\t * @param  {string} nationalPrefix\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplateForFormat(format, {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tcomplexPrefixBeforeNationalSignificantNumber\r\n\t}) {\r\n\t\tlet pattern = format.pattern()\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\r\n\t\t\tpattern = pattern\r\n\t\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\r\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\r\n\t\t}\r\n\r\n\t\t// Generate a dummy national number (consisting of `9`s)\r\n\t\t// that fits this format's `pattern`.\r\n\t\t//\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\t//\r\n\t\tlet digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (nationalSignificantNumber.length > digits.length) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strictPattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strictPattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.nationalSignificantNumber : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// format : `$1 $2 $3`\r\n\t\t// digits : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then `this.nationalSignificantNumber`\r\n\t\t// is used instead of `digits`.\r\n\r\n\t\tconst strictPattern = new RegExp('^' + pattern + '$')\r\n\t\tconst nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then use it\r\n\t\t// instead of `digits`.\r\n\t\tif (strictPattern.test(nationalNumberDummyDigits)) {\r\n\t\t\tdigits = nationalNumberDummyDigits\r\n\t\t}\r\n\r\n\t\tlet numberFormat = this.getFormatFormat(format, international)\r\n\t\tlet nationalPrefixIncludedInTemplate\r\n\r\n\t\t// If a user did input a national prefix (and that's guaranteed),\r\n\t\t// and if a `format` does have a national prefix formatting rule,\r\n\t\t// then see if that national prefix formatting rule\r\n\t\t// prepends exactly the same national prefix the user has input.\r\n\t\t// If that's the case, then use the `format` with the national prefix formatting rule.\r\n\t\t// Otherwise, use  the `format` without the national prefix formatting rule,\r\n\t\t// and prepend a national prefix manually to it.\r\n\t\tif (this.shouldTryNationalPrefixFormattingRule(format, { international, nationalPrefix })) {\r\n\t\t\tconst numberFormatWithNationalPrefix = numberFormat.replace(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tformat.nationalPrefixFormattingRule()\r\n\t\t\t)\r\n\t\t\t// If `national_prefix_formatting_rule` of a `format` simply prepends\r\n\t\t\t// national prefix at the start of a national (significant) number,\r\n\t\t\t// then such formatting can be used with `AsYouType` formatter.\r\n\t\t\t// There seems to be no `else` case: everywhere in metadata,\r\n\t\t\t// national prefix formatting rule is national prefix + $1,\r\n\t\t\t// or `($1)`, in which case such format isn't even considered\r\n\t\t\t// when the user has input a national prefix.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\r\n\t\t\t\tnumberFormat = numberFormatWithNationalPrefix\r\n\t\t\t\tnationalPrefixIncludedInTemplate = true\r\n\t\t\t\t// Replace all digits of the national prefix in the formatting template\r\n\t\t\t\t// with `DIGIT_PLACEHOLDER`s.\r\n\t\t\t\tif (nationalPrefix) {\r\n\t\t\t\t\tlet i = nationalPrefix.length\r\n\t\t\t\t\twhile (i > 0) {\r\n\t\t\t\t\t\tnumberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER)\r\n\t\t\t\t\t\ti--\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format.\r\n\t\tlet template = digits\r\n\t\t\t// Format the dummy phone number according to the format.\r\n\t\t\t.replace(new RegExp(pattern), numberFormat)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER.\r\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\r\n\r\n\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t// as just a basic national prefix, then just prepend such prefix\r\n\t\t// before the national (significant) number, optionally spacing\r\n\t\t// the two with a whitespace.\r\n\t\tif (!nationalPrefixIncludedInTemplate) {\r\n\t\t\tif (complexPrefixBeforeNationalSignificantNumber) {\r\n\t\t\t\t// Prepend the prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) +\r\n\t\t\t\t\t' ' +\r\n\t\t\t\t\ttemplate\r\n\t\t\t} else if (nationalPrefix) {\r\n\t\t\t\t// Prepend national prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) +\r\n\t\t\t\t\tthis.getSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (international) {\r\n\t\t\ttemplate = applyInternationalSeparatorStyle(template)\r\n\t\t}\r\n\r\n\t\treturn template\r\n\t}\r\n\r\n\tformatNextNationalNumberDigits(digits) {\r\n\t\tconst result = populateTemplateWithDigits(\r\n\t\t\tthis.populatedNationalNumberTemplate,\r\n\t\t\tthis.populatedNationalNumberTemplatePosition,\r\n\t\t\tdigits\r\n\t\t)\r\n\r\n\t\tif (!result) {\r\n\t\t\t// Reset the format.\r\n\t\t\tthis.resetFormat()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.populatedNationalNumberTemplate = result[0]\r\n\t\tthis.populatedNationalNumberTemplatePosition = result[1]\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\t\t// \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\r\n\t}\r\n\r\n\tshouldTryNationalPrefixFormattingRule(format, { international, nationalPrefix }) {\r\n\t\tif (format.nationalPrefixFormattingRule()) {\r\n\t\t\t// In some countries, `national_prefix_formatting_rule` is `($1)`,\r\n\t\t\t// so it applies even if the user hasn't input a national prefix.\r\n\t\t\t// `format.usesNationalPrefix()` detects such cases.\r\n\t\t\tconst usesNationalPrefix = format.usesNationalPrefix()\r\n\t\t\tif ((usesNationalPrefix && nationalPrefix) ||\r\n\t\t\t\t(!usesNationalPrefix && !international)) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","import extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber.js'\r\nimport stripIddPrefix from './helpers/stripIddPrefix.js'\r\nimport parseDigits from './helpers/parseDigits.js'\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants.js'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART =\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i')\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_PART =\r\n\t'(?:' +\r\n\t\t'[' + PLUS_CHARS + ']' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']*' +\r\n\t\t'|' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']+' +\r\n\t')'\r\n\r\nconst AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp(\r\n\t'[^' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+' +\r\n\t'.*' +\r\n\t'$'\r\n)\r\n\r\n// Tests whether `national_prefix_for_parsing` could match\r\n// different national prefixes.\r\n// Matches anything that's not a digit or a square bracket.\r\nconst COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/\r\n\r\nexport default class AsYouTypeParser {\r\n\tconstructor({\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata,\r\n\t\tonNationalSignificantNumberChange\r\n\t}) {\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.metadata = metadata\r\n\t\tthis.onNationalSignificantNumberChange = onNationalSignificantNumberChange\r\n\t}\r\n\r\n\tinput(text, state) {\r\n\t\tconst [formattedDigits, hasPlus] = extractFormattedDigitsAndPlus(text)\r\n\t\tconst digits = parseDigits(formattedDigits)\r\n\t\t// Checks for a special case: just a leading `+` has been entered.\r\n\t\tlet justLeadingPlus\r\n\t\tif (hasPlus) {\r\n\t\t\tif (!state.digits) {\r\n\t\t\t\tstate.startInternationalNumber()\r\n\t\t\t\tif (!digits) {\r\n\t\t\t\t\tjustLeadingPlus = true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (digits) {\r\n\t\t\tthis.inputDigits(digits, state)\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number digits.\r\n\t * @param  {string} digits\r\n\t * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n\t */\r\n\tinputDigits(nextDigits, state) {\r\n\t\tconst { digits } = state\r\n\t\tconst hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3\r\n\r\n\t\t// Append phone number digits.\r\n\t\tstate.appendDigits(nextDigits)\r\n\r\n\t\t// Attempt to extract IDD prefix:\r\n\t\t// Some users input their phone number in international format,\r\n\t\t// but in an \"out-of-country\" dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers as soon as there're at least 3 digits.\r\n\t\t// Google's library attempts to extract IDD prefix at 3 digits,\r\n\t\t// so this library just copies that behavior.\r\n\t\t// I guess that's because the most commot IDD prefixes are\r\n\t\t// `00` (Europe) and `011` (US).\r\n\t\t// There exist really long IDD prefixes too:\r\n\t\t// for example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t// An IDD prefix is extracted here, and then every time when\r\n\t\t// there's a new digit and the number couldn't be formatted.\r\n\t\tif (hasReceivedThreeLeadingDigits) {\r\n\t\t\tthis.extractIddPrefix(state)\r\n\t\t}\r\n\r\n\t\tif (this.isWaitingForCountryCallingCode(state)) {\r\n\t\t\tif (!this.extractCountryCallingCode(state)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tstate.appendNationalSignificantNumberDigits(nextDigits)\r\n\t\t}\r\n\r\n\t\t// If a phone number is being input in international format,\r\n\t\t// then it's not valid for it to have a national prefix.\r\n\t\t// Still, some people incorrectly input such numbers with a national prefix.\r\n\t\t// In such cases, only attempt to strip a national prefix if the number becomes too long.\r\n\t\t// (but that is done later, not here)\r\n\t\tif (!state.international) {\r\n\t\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\t\tthis.extractNationalSignificantNumber(\r\n\t\t\t\t\tstate.getNationalDigits(),\r\n\t\t\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisWaitingForCountryCallingCode({ international, callingCode }) {\r\n\t\treturn international && !callingCode\r\n\t}\r\n\r\n\t// Extracts a country calling code from a number\r\n\t// being entered in internatonal format.\r\n\textractCountryCallingCode(state) {\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\t\t'+' + state.getDigitsWithoutInternationalPrefix(),\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (countryCallingCode) {\r\n\t\t\tstate.setCallingCode(countryCallingCode)\r\n\t\t\tstate.update({\r\n\t\t\t\tnationalSignificantNumber: number\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\treset(numberingPlan) {\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.hasSelectedNumberingPlan = true\r\n\t\t\tconst nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing()\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing)\r\n\t\t} else {\r\n\t\t\tthis.hasSelectedNumberingPlan = undefined\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts a national (significant) number from user input.\r\n\t * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n\t * and doesn't apply `national_prefix_transform_rule` after that.\r\n\t * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n\t * @return {boolean} [extracted]\r\n\t */\r\n\textractNationalSignificantNumber(nationalDigits, setState) {\r\n\t\tif (!this.hasSelectedNumberingPlan) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\tif (nationalNumber === nationalDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\t/**\r\n\t * In Google's code this function is called \"attempt to extract longer NDD\".\r\n\t * \"Some national prefixes are a substring of others\", they say.\r\n\t * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n\t */\r\n\textractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\r\n\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\treturn this.extractNationalSignificantNumber(nationalDigits, setState)\r\n\t\t}\r\n\t\tif (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\t// If a national prefix has been extracted previously,\r\n\t\t// then it's always extracted as additional digits are added.\r\n\t\t// That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\r\n\t\t// doesn't do anything different from what it currently does.\r\n\t\t// So, just in case, here's this check, though it doesn't occur.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (nationalNumber === prevNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\tonExtractedNationalNumber(\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalDigits,\r\n\t\tsetState\r\n\t) {\r\n\t\tlet complexPrefixBeforeNationalSignificantNumber\r\n\t\tlet nationalSignificantNumberMatchesInput\r\n\t\t// This check also works with empty `this.nationalSignificantNumber`.\r\n\t\tconst nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber)\r\n\t\t// If the extracted national (significant) number is the\r\n\t\t// last substring of the `digits`, then it means that it hasn't been altered:\r\n\t\t// no digits have been removed from the national (significant) number\r\n\t\t// while applying `national_prefix_transform_rule`.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\tif (nationalSignificantNumberIndex >= 0 &&\r\n\t\t\tnationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\r\n\t\t\tnationalSignificantNumberMatchesInput = true\r\n\t\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t\t// as just a basic national prefix, then such prefix is stored in\r\n\t\t\t// `this.complexPrefixBeforeNationalSignificantNumber` property and will be\r\n\t\t\t// prepended \"as is\" to the national (significant) number to produce\r\n\t\t\t// a formatted result.\r\n\t\t\tconst prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex)\r\n\t\t\t// `prefixBeforeNationalNumber` is always non-empty,\r\n\t\t\t// because `onExtractedNationalNumber()` isn't called\r\n\t\t\t// when a national (significant) number hasn't been actually \"extracted\":\r\n\t\t\t// when a national (significant) number is equal to the national part of `digits`,\r\n\t\t\t// then `onExtractedNationalNumber()` doesn't get called.\r\n\t\t\tif (prefixBeforeNationalNumber !== nationalPrefix) {\r\n\t\t\t\tcomplexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetState({\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tnationalSignificantNumberMatchesInput,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber\r\n\t\t})\r\n\t\t// `onExtractedNationalNumber()` is only called when\r\n\t\t// the national (significant) number actually did change.\r\n\t\tthis.hasExtractedNationalSignificantNumber = true\r\n\t\tthis.onNationalSignificantNumberChange()\r\n\t}\r\n\r\n\treExtractNationalSignificantNumber(state) {\r\n\t\t// Attempt to extract a national prefix.\r\n\t\t//\r\n\t\t// Some people incorrectly input national prefix\r\n\t\t// in an international phone number.\r\n\t\t// For example, some people write British phone numbers as `+44(0)...`.\r\n\t\t//\r\n\t\t// Also, in some rare cases, it is valid for a national prefix\r\n\t\t// to be a part of an international phone number.\r\n\t\t// For example, mobile phone numbers in Mexico are supposed to be\r\n\t\t// dialled internationally using a `1` national prefix,\r\n\t\t// so the national prefix will be part of an international number.\r\n\t\t//\r\n\t\t// Quote from:\r\n\t\t// https://www.mexperience.com/dialing-cell-phones-in-mexico/\r\n\t\t//\r\n\t\t// \"Dialing a Mexican cell phone from abroad\r\n\t\t// When you are calling a cell phone number in Mexico from outside Mexico,\r\n\t\t// it’s necessary to dial an additional “1” after Mexico’s country code\r\n\t\t// (which is “52”) and before the area code.\r\n\t\t// You also ignore the 045, and simply dial the area code and the\r\n\t\t// cell phone’s number.\r\n\t\t//\r\n\t\t// If you don’t add the “1”, you’ll receive a recorded announcement\r\n\t\t// asking you to redial using it.\r\n\t\t//\r\n\t\t// For example, if you are calling from the USA to a cell phone\r\n\t\t// in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\r\n\t\t// (Note that this is different to calling a land line in Mexico City\r\n\t\t// from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\r\n\t\t//\r\n\t\t// Google's demo output:\r\n\t\t// https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\r\n\t\t//\r\n\t\tif (this.extractAnotherNationalSignificantNumber(\r\n\t\t\tstate.getNationalDigits(),\r\n\t\t\tstate.nationalSignificantNumber,\r\n\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// If no format matches the phone number, then it could be\r\n\t\t// \"a really long IDD\" (quote from a comment in Google's library).\r\n\t\t// An IDD prefix is first extracted when the user has entered at least 3 digits,\r\n\t\t// and then here — every time when there's a new digit and the number\r\n\t\t// couldn't be formatted.\r\n\t\t// For example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t//\r\n\t\t// Could also check `!hasReceivedThreeLeadingDigits` here\r\n\t\t// to filter out the case when this check duplicates the one\r\n\t\t// already performed when there're 3 leading digits,\r\n\t\t// but it's not a big deal, and in most cases there\r\n\t\t// will be a suitable `format` when there're 3 leading digits.\r\n\t\t//\r\n\t\tif (this.extractIddPrefix(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// Google's AsYouType formatter supports sort of an \"autocorrection\" feature\r\n\t\t// when it \"autocorrects\" numbers that have been input for a country\r\n\t\t// with that country's calling code.\r\n\t\t// Such \"autocorrection\" feature looks weird, but different people have been requesting it:\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/375\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/316\r\n\t\tif (this.fixMissingPlus(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\textractIddPrefix(state) {\r\n\t\t// An IDD prefix can't be present in a number written with a `+`.\r\n\t\t// Also, don't re-extract an IDD prefix if has already been extracted.\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tIDDPrefix,\r\n\t\t\tdigits,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = state\r\n\t\tif (international || IDDPrefix) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Some users input their phone number in \"out-of-country\"\r\n\t\t// dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(\r\n\t\t\tdigits,\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\r\n\t\t\t// If an IDD prefix was stripped then convert the IDD-prefixed number\r\n\t\t\t// to international number for subsequent parsing.\r\n\t\t\tstate.update({\r\n\t\t\t\tIDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\r\n\t\t\t})\r\n\t\t\tthis.startInternationalNumber(state, {\r\n\t\t\t\tcountry: undefined,\r\n\t\t\t\tcallingCode: undefined\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tfixMissingPlus(state) {\r\n\t\tif (!state.international) {\r\n\t\t\tconst {\r\n\t\t\t\tcountryCallingCode: newCallingCode,\r\n\t\t\t\tnumber\r\n\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\tstate.digits,\r\n\t\t\t\tthis.defaultCountry,\r\n\t\t\t\tthis.defaultCallingCode,\r\n\t\t\t\tthis.metadata.metadata\r\n\t\t\t)\r\n\t\t\tif (newCallingCode) {\r\n\t\t\t\tstate.update({\r\n\t\t\t\t\tmissingPlus: true\r\n\t\t\t\t})\r\n\t\t\t\tthis.startInternationalNumber(state, {\r\n\t\t\t\t\tcountry: state.country,\r\n\t\t\t\t\tcallingCode: newCallingCode\r\n\t\t\t\t})\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstartInternationalNumber(state, { country, callingCode }) {\r\n\t\tstate.startInternationalNumber(country, callingCode)\r\n\t\t// If a national (significant) number has been extracted before, reset it.\r\n\t\tif (state.nationalSignificantNumber) {\r\n\t\t\tstate.resetNationalSignificantNumber()\r\n\t\t\tthis.onNationalSignificantNumberChange()\r\n\t\t\tthis.hasExtractedNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\textractCallingCodeAndNationalSignificantNumber(state) {\r\n\t\tif (this.extractCountryCallingCode(state)) {\r\n\t\t\t// `this.extractCallingCode()` is currently called when the number\r\n\t\t\t// couldn't be formatted during the standard procedure.\r\n\t\t\t// Normally, the national prefix would be re-extracted\r\n\t\t\t// for an international number if such number couldn't be formatted,\r\n\t\t\t// but since it's already not able to be formatted,\r\n\t\t\t// there won't be yet another retry, so also extract national prefix here.\r\n\t\t\tthis.extractNationalSignificantNumber(\r\n\t\t\t\tstate.getNationalDigits(),\r\n\t\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\r\nfunction extractFormattedPhoneNumber(text) {\r\n\t// Attempt to extract a possible number from the string passed in.\r\n\tconst startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\t// Trim everything to the left of the phone number.\r\n\ttext = text.slice(startsAt)\r\n\t// Trim the `+`.\r\n\tlet hasPlus\r\n\tif (text[0] === '+') {\r\n\t\thasPlus = true\r\n\t\ttext = text.slice('+'.length)\r\n\t}\r\n\t// Trim everything to the right of the phone number.\r\n\ttext = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, '')\r\n\t// Re-add the previously trimmed `+`.\r\n\tif (hasPlus) {\r\n\t\ttext = '+' + text\r\n\t}\r\n\treturn text\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nfunction _extractFormattedDigitsAndPlus(text) {\r\n\t// Extract a formatted phone number part from text.\r\n\tconst extractedNumber = extractFormattedPhoneNumber(text) || ''\r\n\t// Trim a `+`.\r\n\tif (extractedNumber[0] === '+') {\r\n\t\treturn [extractedNumber.slice('+'.length), true]\r\n\t}\r\n\treturn [extractedNumber]\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nexport function extractFormattedDigitsAndPlus(text) {\r\n\tlet [formattedDigits, hasPlus] = _extractFormattedDigitsAndPlus(text)\r\n\t// If the extracted phone number part\r\n\t// can possibly be a part of some valid phone number\r\n\t// then parse phone number characters from a formatted phone number.\r\n\tif (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\r\n\t\tformattedDigits = ''\r\n\t}\r\n\treturn [formattedDigits, hasPlus]\r\n}","import Metadata from './metadata.js'\r\nimport PhoneNumber from './PhoneNumber.js'\r\nimport AsYouTypeState from './AsYouTypeState.js'\r\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.js'\r\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser.js'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class AsYouType {\r\n\t/**\r\n\t * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(optionsOrDefaultCountry, metadata) {\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\t\tconst [defaultCountry, defaultCallingCode] = this.getCountryAndCallingCode(optionsOrDefaultCountry)\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tgetCountryAndCallingCode(optionsOrDefaultCountry) {\r\n\t\t// Set `defaultCountry` and `defaultCallingCode` options.\r\n\t\tlet defaultCountry\r\n\t\tlet defaultCallingCode\r\n\t\t// Turns out `null` also has type \"object\". Weird.\r\n\t\tif (optionsOrDefaultCountry) {\r\n\t\t\tif (typeof optionsOrDefaultCountry === 'object') {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry.defaultCountry\r\n\t\t\t\tdefaultCallingCode = optionsOrDefaultCountry.defaultCallingCode\r\n\t\t\t} else {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tdefaultCountry = undefined\r\n\t\t}\r\n\t\tif (defaultCallingCode) {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tdefaultCountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [defaultCountry, defaultCallingCode]\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number characters.\r\n\t * @param  {string} text\r\n\t * @return {string} Formatted phone number characters that have been input so far.\r\n\t */\r\n\tinput(text) {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t} = this.parser.input(text, this.state)\r\n\t\tif (justLeadingPlus) {\r\n\t\t\tthis.formattedOutput = '+'\r\n\t\t} else if (digits) {\r\n\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t// Match the available formats by the currently available leading digits.\r\n\t\t\tif (this.state.nationalSignificantNumber) {\r\n\t\t\t\tthis.formatter.narrowDownMatchingFormats(this.state)\r\n\t\t\t}\r\n\t\t\tlet formattedNationalNumber\r\n\t\t\tif (this.metadata.hasSelectedNumberingPlan()) {\r\n\t\t\t\tformattedNationalNumber = this.formatter.format(digits, this.state)\r\n\t\t\t}\r\n\t\t\tif (formattedNationalNumber === undefined) {\r\n\t\t\t\t// See if another national (significant) number could be re-extracted.\r\n\t\t\t\tif (this.parser.reExtractNationalSignificantNumber(this.state)) {\r\n\t\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\t\t// If it could, then re-try formatting the new national (significant) number.\r\n\t\t\t\t\tconst nationalDigits = this.state.getNationalDigits()\r\n\t\t\t\t\tif (nationalDigits) {\r\n\t\t\t\t\t\tformattedNationalNumber = this.formatter.format(nationalDigits, this.state)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.formattedOutput = formattedNationalNumber\r\n\t\t\t\t? this.getFullNumber(formattedNationalNumber)\r\n\t\t\t\t: this.getNonFormattedNumber()\r\n\t\t}\r\n\t\treturn this.formattedOutput\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.state = new AsYouTypeState({\r\n\t\t\tonCountryChange: (country) => {\r\n\t\t\t\t// Before version `1.6.0`, the official `AsYouType` formatter API\r\n\t\t\t\t// included the `.country` property of an `AsYouType` instance.\r\n\t\t\t\t// Since that property (along with the others) have been moved to\r\n\t\t\t\t// `this.state`, `this.country` property is emulated for compatibility\r\n\t\t\t\t// with the old versions.\r\n\t\t\t\tthis.country = country\r\n\t\t\t},\r\n\t\t\tonCallingCodeChange: (callingCode, country) => {\r\n\t\t\t\tthis.metadata.selectNumberingPlan(country, callingCode)\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t\tthis.parser.reset(this.metadata.numberingPlan)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.formatter = new AsYouTypeFormatter({\r\n\t\t\tstate: this.state,\r\n\t\t\tmetadata: this.metadata\r\n\t\t})\r\n\t\tthis.parser = new AsYouTypeParser({\r\n\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\tdefaultCallingCode: this.defaultCallingCode,\r\n\t\t\tmetadata: this.metadata,\r\n\t\t\tstate: this.state,\r\n\t\t\tonNationalSignificantNumberChange: () => {\r\n\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.state.reset(this.defaultCountry, this.defaultCallingCode)\r\n\t\tthis.formattedOutput = ''\r\n\t\treturn this\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is being input in international format.\r\n\t * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisInternational() {\r\n\t\treturn this.state.international\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the \"calling code\" part of the phone number when it's being input\r\n\t * in an international format.\r\n\t * If no valid calling code has been entered so far, returns `undefined`.\r\n\t * @return {string} [callingCode]\r\n\t */\r\n\tgetCallingCode() {\r\n\t\t // If the number is being input in national format and some \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then `this.state.callingCode`\r\n\t\t // is equal to that \"default calling code\".\r\n\t\t //\r\n\t\t // If the number is being input in national format and no \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then returns `undefined`,\r\n\t\t // even if a \"default country\" has been passed to `AsYouType` constructor.\r\n\t\t //\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn this.state.callingCode\r\n\t\t}\r\n\t}\r\n\r\n\t// A legacy alias.\r\n\tgetCountryCallingCode() {\r\n\t\treturn this.getCallingCode()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * Returns `undefined` if no phone number has been input yet.\r\n\t * @return {string} [country]\r\n\t */\r\n\tgetCountry() {\r\n\t\tconst { digits } = this.state\r\n\t\t// Return `undefined` if no digits have been input yet.\r\n\t\tif (digits) {\r\n\t\t\treturn this._getCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * @return {string} [country]\r\n\t */\r\n\t_getCountry() {\r\n\t\tconst { country } = this.state\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t// `AsYouType.getCountry()` returns `undefined`\r\n\t\t\t// for \"non-geographic\" phone numbering plans.\r\n\t\t\tif (country === '001') {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn country\r\n\t}\r\n\r\n\tdetermineTheCountryIfNeeded() {\r\n\t\t// Suppose a user enters a phone number in international format,\r\n\t\t// and there're several countries corresponding to that country calling code,\r\n\t\t// and a country has been derived from the number, and then\r\n\t\t// a user enters one more digit and the number is no longer\r\n\t\t// valid for the derived country, so the country should be re-derived\r\n\t\t// on every new digit in those cases.\r\n\t\t//\r\n\t\t// If the phone number is being input in national format,\r\n\t\t// then it could be a case when `defaultCountry` wasn't specified\r\n\t\t// when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\r\n\t\t// and that \"calling code\" could correspond to a \"non-geographic entity\",\r\n\t\t// or there could be several countries corresponding to that country calling code.\r\n\t\t// In those cases, `this.country` is `undefined` and should be derived\r\n\t\t// from the number. Again, if country calling code is ambiguous, then\r\n\t\t// `this.country` should be re-derived with each new digit.\r\n\t\t//\r\n\t\tif (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\r\n\t\t\tthis.determineTheCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode ` in case of an international phone number\r\n\tgetFullNumber(formattedNationalNumber) {\r\n\t\tif (this.isInternational()) {\r\n\t\t\tconst prefix = (text) => this.formatter.getInternationalPrefixBeforeCountryCallingCode(this.state, {\r\n\t\t\t\tspacing: text ? true : false\r\n\t\t\t}) + text\r\n\t\t\tconst { callingCode } = this.state\r\n\t\t\tif (!callingCode) {\r\n\t\t\t\treturn prefix(`${this.state.getDigitsWithoutInternationalPrefix()}`)\r\n\t\t\t}\r\n\t\t\tif (!formattedNationalNumber) {\r\n\t\t\t\treturn prefix(callingCode)\r\n\t\t\t}\r\n\t\t\treturn prefix(`${callingCode} ${formattedNationalNumber}`)\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\tgetNonFormattedNationalNumberWithPrefix() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber,\r\n\t\t\tnationalPrefix\r\n\t\t} = this.state\r\n\t\tlet number = nationalSignificantNumber\r\n\t\tconst prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix\r\n\t\tif (prefix) {\r\n\t\t\tnumber = prefix + number\r\n\t\t}\r\n\t\treturn number\r\n\t}\r\n\r\n\tgetNonFormattedNumber() {\r\n\t\tconst { nationalSignificantNumberMatchesInput } = this.state\r\n\t\treturn this.getFullNumber(\r\n\t\t\tnationalSignificantNumberMatchesInput\r\n\t\t\t\t? this.getNonFormattedNationalNumberWithPrefix()\r\n\t\t\t\t: this.state.getNationalDigits()\r\n\t\t)\r\n\t}\r\n\r\n\tgetNonFormattedTemplate() {\r\n\t\tconst number = this.getNonFormattedNumber()\r\n\t\tif (number) {\r\n\t\t\treturn number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\t}\r\n\r\n\tisCountryCallingCodeAmbiguous() {\r\n\t\tconst { callingCode } = this.state\r\n\t\tconst countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode)\r\n\t\treturn countryCodes && countryCodes.length > 1\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.state.setCountry(getCountryByCallingCode(\r\n\t\t\tthis.isInternational() ? this.state.callingCode : this.defaultCallingCode,\r\n\t\t\tthis.state.nationalSignificantNumber,\r\n\t\t\tthis.metadata\r\n\t\t))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a E.164 phone number value for the user's input.\r\n\t *\r\n\t * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n\t * it will return `\"+12223334444\"`.\r\n\t *\r\n\t * For international phone number input, it will also auto-correct\r\n\t * some minor errors such as using a national prefix when writing\r\n\t * an international phone number. For example, if the user inputs\r\n\t * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n\t * `\"+447400000000\"` phone number value.\r\n\t *\r\n\t * Will return `undefined` if no digits have been input,\r\n\t * or when inputting a phone number in national format and no\r\n\t * default country or default \"country calling code\" have been set.\r\n\t *\r\n\t * @return {string} [value]\r\n\t */\r\n\tgetNumberValue() {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tcallingCode,\r\n\t\t\tcountry,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = this.state\r\n\r\n\t \t// Will return `undefined` if no digits have been input.\r\n\t\tif (!digits) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (this.isInternational()) {\r\n\t\t\tif (callingCode) {\r\n\t\t\t\treturn '+' + callingCode + nationalSignificantNumber\r\n\t\t\t} else {\r\n\t\t\t\treturn '+' + digits\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst callingCode_ = country ? this.metadata.countryCallingCode() : callingCode\r\n\t\t\t\treturn '+' + callingCode_ + nationalSignificantNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcarrierCode,\r\n\t\t\tcallingCode\r\n\t\t} = this.state\r\n\r\n\t\t// `this._getCountry()` is basically same as `this.state.country`\r\n\t\t// with the only change that it return `undefined` in case of a\r\n\t\t// \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\r\n\t\tconst country = this._getCountry()\r\n\r\n\t\tif (!nationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (!country && !callingCode) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountry || callingCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"possible\".\r\n\t * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisPossible() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isPossible()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"valid\".\r\n\t * Is just a shortcut for `PhoneNumber.isValid()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisValid() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isValid()\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * This method is used in `react-phone-number-input/source/input-control.js`\r\n\t * in versions before `3.0.16`.\r\n\t */\r\n\tgetNationalNumber() {\r\n\t\treturn this.state.nationalSignificantNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the phone number characters entered by the user.\r\n\t * @return {string}\r\n\t */\r\n\tgetChars() {\r\n\t\treturn (this.state.international ? '+' : '') + this.state.digits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the template for the formatted phone number.\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplate() {\r\n\t\treturn this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || ''\r\n\t}\r\n}","import { normalizeArguments } from './parsePhoneNumber.js'\r\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_.js'\r\n\r\nexport default function parsePhoneNumberFromString() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumberFromString_(text, options, metadata)\r\n}\r\n","import parsePhoneNumber from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function formatPhoneNumber(value, format, metadata) {\r\n\tif (!metadata) {\r\n\t\tif (typeof format === 'object') {\r\n\t\t\tmetadata = format\r\n\t\t\tformat = 'NATIONAL'\r\n\t\t}\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\tif (!phoneNumber) {\r\n\t\treturn ''\r\n\t}\r\n\t// Deprecated.\r\n\t// Legacy `format`s.\r\n\tswitch (format) {\r\n\t\tcase 'National':\r\n\t\t\tformat = 'NATIONAL'\r\n\t\t\tbreak\r\n\t\tcase 'International':\r\n\t\t\tformat = 'INTERNATIONAL'\r\n\t\t\tbreak\r\n\t}\r\n\treturn phoneNumber.format(format)\r\n}\r\n\r\nexport function formatPhoneNumberIntl(value, metadata) {\r\n\treturn formatPhoneNumber(value, 'INTERNATIONAL', metadata)\r\n}","import { normalizeArguments } from './parsePhoneNumber.js'\r\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_.js'\r\n\r\nexport default function isValidPhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumberFromString(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isValid() || false\r\n}","import { normalizeArguments } from './parsePhoneNumber.js'\r\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_.js'\r\n\r\nexport default function isPossiblePhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumberFromString(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isPossible() || false\r\n}","import Metadata from './metadata.js'\r\n\r\nexport default function getCountries(metadata) {\r\n\treturn new Metadata(metadata).getCountries()\r\n}"]}}