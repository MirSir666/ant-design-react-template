{"code":"(this[\"webpackJsonplightence-admin\"]=this[\"webpackJsonplightence-admin\"]||[]).push([[0],{2342:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return l})),n.d(e,\"b\",(function(){return p})),n.d(e,\"c\",(function(){return b}));var r=function(t,e){t=t.split(\"-\"),e=e.split(\"-\");for(var n=t[0].split(\".\"),r=e[0].split(\".\"),a=0;a<3;a++){var d=Number(n[a]),i=Number(r[a]);if(d>i)return 1;if(i>d)return-1;if(!isNaN(d)&&isNaN(i))return 1;if(isNaN(d)&&!isNaN(i))return-1}return t[1]&&e[1]?t[1]>e[1]?1:t[1]<e[1]?-1:0:!t[1]&&e[1]?1:t[1]&&!e[1]?-1:0};function a(t){return a=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},a(t)}function d(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}var u=\" ext. \",$=/^\\d+$/,l=function(){function t(e){d(this,t),function(t){if(!t)throw new Error(\"[libphonenumber-js] `metadata` argument not passed. Check your arguments.\");if(!m(t)||!m(t.countries))throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(m(t)?\"an object of shape: { \"+Object.keys(t).join(\", \")+\" }\":\"a \"+y(t)+\": \"+t,\".\"))}(e),this.metadata=e,v.call(this,e)}return o(t,[{key:\"getCountries\",value:function(){return Object.keys(this.metadata.countries).filter((function(t){return\"001\"!==t}))}},{key:\"getCountryMetadata\",value:function(t){return this.metadata.countries[t]}},{key:\"nonGeographic\",value:function(){if(!(this.v1||this.v2||this.v3))return this.metadata.nonGeographic||this.metadata.nonGeographical}},{key:\"hasCountry\",value:function(t){return void 0!==this.getCountryMetadata(t)}},{key:\"hasCallingCode\",value:function(t){if(this.getCountryCodesForCallingCode(t))return!0;if(this.nonGeographic()){if(this.nonGeographic()[t])return!0}else{var e=this.countryCallingCodes()[t];if(e&&1===e.length&&\"001\"===e[0])return!0}}},{key:\"isNonGeographicCallingCode\",value:function(t){return this.nonGeographic()?!!this.nonGeographic()[t]:!this.getCountryCodesForCallingCode(t)}},{key:\"country\",value:function(t){return this.selectNumberingPlan(t)}},{key:\"selectNumberingPlan\",value:function(t,e){if(t&&$.test(t)&&(e=t,t=null),t&&\"001\"!==t){if(!this.hasCountry(t))throw new Error(\"Unknown country: \".concat(t));this.numberingPlan=new c(this.getCountryMetadata(t),this)}else if(e){if(!this.hasCallingCode(e))throw new Error(\"Unknown calling code: \".concat(e));this.numberingPlan=new c(this.getNumberingPlanMetadata(e),this)}else this.numberingPlan=void 0;return this}},{key:\"getCountryCodesForCallingCode\",value:function(t){var e=this.countryCallingCodes()[t];if(e){if(1===e.length&&3===e[0].length)return;return e}}},{key:\"getCountryCodeForCallingCode\",value:function(t){var e=this.getCountryCodesForCallingCode(t);if(e)return e[0]}},{key:\"getNumberingPlanMetadata\",value:function(t){var e=this.getCountryCodeForCallingCode(t);if(e)return this.getCountryMetadata(e);if(this.nonGeographic()){var n=this.nonGeographic()[t];if(n)return n}else{var r=this.countryCallingCodes()[t];if(r&&1===r.length&&\"001\"===r[0])return this.metadata.countries[\"001\"]}}},{key:\"countryCallingCode\",value:function(){return this.numberingPlan.callingCode()}},{key:\"IDDPrefix\",value:function(){return this.numberingPlan.IDDPrefix()}},{key:\"defaultIDDPrefix\",value:function(){return this.numberingPlan.defaultIDDPrefix()}},{key:\"nationalNumberPattern\",value:function(){return this.numberingPlan.nationalNumberPattern()}},{key:\"possibleLengths\",value:function(){return this.numberingPlan.possibleLengths()}},{key:\"formats\",value:function(){return this.numberingPlan.formats()}},{key:\"nationalPrefixForParsing\",value:function(){return this.numberingPlan.nationalPrefixForParsing()}},{key:\"nationalPrefixTransformRule\",value:function(){return this.numberingPlan.nationalPrefixTransformRule()}},{key:\"leadingDigits\",value:function(){return this.numberingPlan.leadingDigits()}},{key:\"hasTypes\",value:function(){return this.numberingPlan.hasTypes()}},{key:\"type\",value:function(t){return this.numberingPlan.type(t)}},{key:\"ext\",value:function(){return this.numberingPlan.ext()}},{key:\"countryCallingCodes\",value:function(){return this.v1?this.metadata.country_phone_code_to_countries:this.metadata.country_calling_codes}},{key:\"chooseCountryByCountryCallingCode\",value:function(t){return this.selectNumberingPlan(t)}},{key:\"hasSelectedNumberingPlan\",value:function(){return void 0!==this.numberingPlan}}]),t}(),c=function(){function t(e,n){d(this,t),this.globalMetadataObject=n,this.metadata=e,v.call(this,n.metadata)}return o(t,[{key:\"callingCode\",value:function(){return this.metadata[0]}},{key:\"getDefaultCountryMetadataForRegion\",value:function(){return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())}},{key:\"IDDPrefix\",value:function(){if(!this.v1&&!this.v2)return this.metadata[1]}},{key:\"defaultIDDPrefix\",value:function(){if(!this.v1&&!this.v2)return this.metadata[12]}},{key:\"nationalNumberPattern\",value:function(){return this.v1||this.v2?this.metadata[1]:this.metadata[2]}},{key:\"possibleLengths\",value:function(){if(!this.v1)return this.metadata[this.v2?2:3]}},{key:\"_getFormats\",value:function(t){return t[this.v1?2:this.v2?3:4]}},{key:\"formats\",value:function(){var t=this,e=this._getFormats(this.metadata)||this._getFormats(this.getDefaultCountryMetadataForRegion())||[];return e.map((function(e){return new s(e,t)}))}},{key:\"nationalPrefix\",value:function(){return this.metadata[this.v1?3:this.v2?4:5]}},{key:\"_getNationalPrefixFormattingRule\",value:function(t){return t[this.v1?4:this.v2?5:6]}},{key:\"nationalPrefixFormattingRule\",value:function(){return this._getNationalPrefixFormattingRule(this.metadata)||this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())}},{key:\"_nationalPrefixForParsing\",value:function(){return this.metadata[this.v1?5:this.v2?6:7]}},{key:\"nationalPrefixForParsing\",value:function(){return this._nationalPrefixForParsing()||this.nationalPrefix()}},{key:\"nationalPrefixTransformRule\",value:function(){return this.metadata[this.v1?6:this.v2?7:8]}},{key:\"_getNationalPrefixIsOptionalWhenFormatting\",value:function(){return!!this.metadata[this.v1?7:this.v2?8:9]}},{key:\"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",value:function(){return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata)||this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())}},{key:\"leadingDigits\",value:function(){return this.metadata[this.v1?8:this.v2?9:10]}},{key:\"types\",value:function(){return this.metadata[this.v1?9:this.v2?10:11]}},{key:\"hasTypes\",value:function(){return(!this.types()||0!==this.types().length)&&!!this.types()}},{key:\"type\",value:function(t){if(this.hasTypes()&&g(this.types(),t))return new h(g(this.types(),t),this)}},{key:\"ext\",value:function(){return this.v1||this.v2?u:this.metadata[13]||u}}]),t}(),s=function(){function t(e,n){d(this,t),this._format=e,this.metadata=n}return o(t,[{key:\"pattern\",value:function(){return this._format[0]}},{key:\"format\",value:function(){return this._format[1]}},{key:\"leadingDigitsPatterns\",value:function(){return this._format[2]||[]}},{key:\"nationalPrefixFormattingRule\",value:function(){return this._format[3]||this.metadata.nationalPrefixFormattingRule()}},{key:\"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",value:function(){return!!this._format[4]||this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()}},{key:\"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",value:function(){return this.usesNationalPrefix()&&!this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()}},{key:\"usesNationalPrefix\",value:function(){return!(!this.nationalPrefixFormattingRule()||f.test(this.nationalPrefixFormattingRule()))}},{key:\"internationalFormat\",value:function(){return this._format[5]||this.format()}}]),t}(),f=/^\\(?\\$1\\)?$/,h=function(){function t(e,n){d(this,t),this.type=e,this.metadata=n}return o(t,[{key:\"pattern\",value:function(){return this.metadata.v1?this.type:this.type[0]}},{key:\"possibleLengths\",value:function(){if(!this.metadata.v1)return this.type[1]||this.metadata.possibleLengths()}}]),t}();function g(t,e){switch(e){case\"FIXED_LINE\":return t[0];case\"MOBILE\":return t[1];case\"TOLL_FREE\":return t[2];case\"PREMIUM_RATE\":return t[3];case\"PERSONAL_NUMBER\":return t[4];case\"VOICEMAIL\":return t[5];case\"UAN\":return t[6];case\"PAGER\":return t[7];case\"VOIP\":return t[8];case\"SHARED_COST\":return t[9]}}var m=function(t){return\"object\"===a(t)},y=function(t){return a(t)};function p(t,e){if((e=new l(e)).hasCountry(t))return e.country(t).countryCallingCode();throw new Error(\"Unknown country: \".concat(t))}function b(t,e){return void 0!==e.countries[t]}function v(t){var e=t.version;\"number\"===typeof e?(this.v1=1===e,this.v2=2===e,this.v3=3===e,this.v4=4===e):e?-1===r(e,\"1.2.0\")?this.v2=!0:-1===r(e,\"1.7.35\")?this.v3=!0:this.v4=!0:this.v1=!0}},2347:function(t,e,n){\"use strict\";n.d(e,\"c\",(function(){return r})),n.d(e,\"b\",(function(){return a})),n.d(e,\"a\",(function(){return d})),n.d(e,\"e\",(function(){return i})),n.d(e,\"f\",(function(){return o})),n.d(e,\"d\",(function(){return u}));var r=2,a=17,d=3,i=\"0-9\\uff10-\\uff19\\u0660-\\u0669\\u06f0-\\u06f9\",o=\"\".concat(\"-\\u2010-\\u2015\\u2212\\u30fc\\uff0d\").concat(\"\\uff0f/\").concat(\"\\uff0e.\").concat(\" \\xa0\\xad\\u200b\\u2060\\u3000\").concat(\"()\\uff08\\uff09\\uff3b\\uff3d\\\\[\\\\]\").concat(\"~\\u2053\\u223c\\uff5e\"),u=\"+\\uff0b\"},2353:function(t,e,n){\"use strict\";function r(t,e){return t=t||\"\",new RegExp(\"^(?:\"+e+\")$\").test(t)}n.d(e,\"a\",(function(){return r}))},2361:function(t,e,n){\"use strict\";n.d(e,\"b\",(function(){return a})),n.d(e,\"a\",(function(){return d}));var r={0:\"0\",1:\"1\",2:\"2\",3:\"3\",4:\"4\",5:\"5\",6:\"6\",7:\"7\",8:\"8\",9:\"9\",\"\\uff10\":\"0\",\"\\uff11\":\"1\",\"\\uff12\":\"2\",\"\\uff13\":\"3\",\"\\uff14\":\"4\",\"\\uff15\":\"5\",\"\\uff16\":\"6\",\"\\uff17\":\"7\",\"\\uff18\":\"8\",\"\\uff19\":\"9\",\"\\u0660\":\"0\",\"\\u0661\":\"1\",\"\\u0662\":\"2\",\"\\u0663\":\"3\",\"\\u0664\":\"4\",\"\\u0665\":\"5\",\"\\u0666\":\"6\",\"\\u0667\":\"7\",\"\\u0668\":\"8\",\"\\u0669\":\"9\",\"\\u06f0\":\"0\",\"\\u06f1\":\"1\",\"\\u06f2\":\"2\",\"\\u06f3\":\"3\",\"\\u06f4\":\"4\",\"\\u06f5\":\"5\",\"\\u06f6\":\"6\",\"\\u06f7\":\"7\",\"\\u06f8\":\"8\",\"\\u06f9\":\"9\"};function a(t){return r[t]}function d(t){var e=\"\",n=t.split(\"\"),r=Array.isArray(n),d=0;for(n=r?n:n[Symbol.iterator]();;){var i;if(r){if(d>=n.length)break;i=n[d++]}else{if((d=n.next()).done)break;i=d.value}var o=a(i);o&&(e+=o)}return e}},2369:function(t,e,n){\"use strict\";function r(t,e){return a(t,void 0,e)}function a(t,e,n){var r=n.type(e),d=r&&r.possibleLengths()||n.possibleLengths();if(!d)return\"IS_POSSIBLE\";if(\"FIXED_LINE_OR_MOBILE\"===e){if(!n.type(\"FIXED_LINE\"))return a(t,\"MOBILE\",n);var i=n.type(\"MOBILE\");i&&(d=function(t,e){var n=t.slice(),r=e,a=Array.isArray(r),d=0;for(r=a?r:r[Symbol.iterator]();;){var i;if(a){if(d>=r.length)break;i=r[d++]}else{if((d=r.next()).done)break;i=d.value}var o=i;t.indexOf(o)<0&&n.push(o)}return n.sort((function(t,e){return t-e}))}(d,i.possibleLengths()))}else if(e&&!r)return\"INVALID_LENGTH\";var o=t.length,u=d[0];return u===o?\"IS_POSSIBLE\":u>o?\"TOO_SHORT\":d[d.length-1]<o?\"TOO_LONG\":d.indexOf(o,1)>=0?\"IS_POSSIBLE\":\"INVALID_LENGTH\"}n.d(e,\"a\",(function(){return r}))},2379:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return a})),n.d(e,\"b\",(function(){return d}));var r=n(2415),a=/(\\$\\d)/;function d(t,e,n){var d=n.useInternationalFormat,i=n.withNationalPrefix,o=(n.carrierCode,n.metadata,t.replace(new RegExp(e.pattern()),d?e.internationalFormat():i&&e.nationalPrefixFormattingRule()?e.format().replace(a,e.nationalPrefixFormattingRule()):e.format()));return d?Object(r.a)(o):o}},2380:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return i}));var r=n(2342),a=n(2347),d=new RegExp(\"([\"+a.e+\"])\");function i(t,e,n,a){if(e){var i=new r.a(a);i.selectNumberingPlan(e,n);var o=new RegExp(i.IDDPrefix());if(0===t.search(o)){var u=(t=t.slice(t.match(o)[0].length)).match(d);if(!(u&&null!=u[1]&&u[1].length>0&&\"0\"===u[1]))return t}}}},2381:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return o}));var r=n(2342),a=n(2353),d=n(2417),i=n(2369);function o(t,e,n,o){var u=e?Object(r.b)(e,o):n;if(0===t.indexOf(u)){(o=new r.a(o)).selectNumberingPlan(e,n);var $=t.slice(u.length),l=Object(d.a)($,o).nationalNumber,c=Object(d.a)(t,o).nationalNumber;if(!Object(a.a)(c,o.nationalNumberPattern())&&Object(a.a)(l,o.nationalNumberPattern())||\"TOO_LONG\"===Object(i.a)(c,o))return{countryCallingCode:u,number:$}}return{number:t}}},2382:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return i}));var r=n(2342),a=n(2353),d=[\"MOBILE\",\"PREMIUM_RATE\",\"TOLL_FREE\",\"SHARED_COST\",\"VOIP\",\"PERSONAL_NUMBER\",\"PAGER\",\"UAN\",\"VOICEMAIL\"];function i(t,e,n){if(e=e||{},t.country){(n=new r.a(n)).selectNumberingPlan(t.country,t.countryCallingCode);var i=e.v2?t.nationalNumber:t.phone;if(Object(a.a)(i,n.nationalNumberPattern())){if(o(i,\"FIXED_LINE\",n))return n.type(\"MOBILE\")&&\"\"===n.type(\"MOBILE\").pattern()?\"FIXED_LINE_OR_MOBILE\":n.type(\"MOBILE\")?o(i,\"MOBILE\",n)?\"FIXED_LINE_OR_MOBILE\":\"FIXED_LINE\":\"FIXED_LINE_OR_MOBILE\";for(var u=0,$=d;u<$.length;u++){var l=$[u];if(o(i,l,n))return l}}}}function o(t,e,n){return!(!(e=n.type(e))||!e.pattern())&&(!(e.possibleLengths()&&e.possibleLengths().indexOf(t.length)<0)&&Object(a.a)(t,e.pattern()))}},2383:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return i}));n(2434);function r(t){return r=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},r(t)}function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function d(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,a=!1,d=void 0;try{for(var i,o=t[Symbol.iterator]();!(r=(i=o.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(u){a=!0,d=u}finally{try{r||null==o.return||o.return()}finally{if(a)throw d}}return n}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}()}function i(t){var e,n,r,i=d(Array.prototype.slice.call(t),4),u=i[0],$=i[1],l=i[2],c=i[3];if(\"string\"!==typeof u)throw new TypeError(\"A text for parsing must be a string.\");if(e=u,$&&\"string\"!==typeof $){if(!o($))throw new Error(\"Invalid second argument: \".concat($));l?(n=$,r=l):r=$}else c?(n=l,r=c):(n=void 0,r=l),$&&(n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);\"function\"===typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){a(t,e,n[e])}))}return t}({defaultCountry:$},n));return{text:e,options:n,metadata:r}}var o=function(t){return\"object\"===r(t)}},2384:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return o}));var r=n(2434),a=n(2426),d=n(2342);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e,n){e&&e.defaultCountry&&!Object(d.c)(e.defaultCountry,n)&&(e=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);\"function\"===typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){i(t,e,n[e])}))}return t}({},e,{defaultCountry:void 0}));try{return Object(r.a)(t,e,n)}catch(o){if(!(o instanceof a.a))throw o}}},2414:function(t){t.exports=JSON.parse('{\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\\\\\d|[46])\\\\\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\\\\\d)\\\\\\\\d{7}|[135-9]\\\\\\\\d{5}\",[6,8,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\\\\\d|9[0-689])\\\\\\\\d{7}|800\\\\\\\\d{2,9}|[2-4679]\\\\\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\\\\\d{6})$\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\\\\\d{6})$\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{3}|8\\\\\\\\d{5,7}|(?:[2-5]|6\\\\\\\\d)\\\\\\\\d{7}\",[6,7,8,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\\\\\d|55|60|77)\\\\\\\\d{6}\",[8],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{8}|[2368]\\\\\\\\d{9}\",[10,11],[[\"(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\\\\\d\\\\\\\\d|684|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\\\\\d{6})$\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\\\\\d{3,12}|2\\\\\\\\d{6,12}|43(?:(?:0\\\\\\\\d|5[02-9])\\\\\\\\d{3,9}|2\\\\\\\\d{4,5}|[3467]\\\\\\\\d{4}|8\\\\\\\\d{4,6}|9\\\\\\\\d{4,7})|5\\\\\\\\d{4,12}|8\\\\\\\\d{7,12}|9\\\\\\\\d{8,12}|(?:[367]\\\\\\\\d|4[0-24-9])\\\\\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\\\\\d)(\\\\\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\\\\\d{7}(?:\\\\\\\\d(?:\\\\\\\\d{2})?)?|8[0-24-9]\\\\\\\\d{7})|[2-478]\\\\\\\\d{8}|1\\\\\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"(?:(?:2(?:[0-26-9]\\\\\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\\\\\d|2[0-8]))\\\\\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\\\\\d)\\\\\\\\d{3}|9(?:[02-9]\\\\\\\\d{3}|1(?:(?:[0-58]\\\\\\\\d|6[0135-9])\\\\\\\\d|7(?:0[0-24-9]|[1-9]\\\\\\\\d)|9(?:[0-46-9]\\\\\\\\d|5[0-79])))))\\\\\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\\\\\d{5}|4(?:[0-3]\\\\\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\\\\\d{6}\",[9]],[\"180(?:0\\\\\\\\d{3}|2)\\\\\\\\d{3}\",[7,10]],[\"190[0-26]\\\\\\\\d{6}\",[10]],0,0,0,[\"163\\\\\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\\\\\d)\\\\\\\\d{4}\",[9]],[\"13(?:00\\\\\\\\d{6}(?:\\\\\\\\d{2})?|45[0-4]\\\\\\\\d{3})|13\\\\\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{4}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\\\\\d{4,9}|35\\\\\\\\d{4,5}|(?:60\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{4,6}|7\\\\\\\\d{5,11}|(?:[14]\\\\\\\\d|3[0-46-9]|50)\\\\\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\\\\\d{6}|(?:[124579]\\\\\\\\d|60|88)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\\\\\d{8}|(?:[35689]\\\\\\\\d|49|70)\\\\\\\\d{6}\",[8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\\\\\d{6})$\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[1-469]\\\\\\\\d{9}|8[0-79]\\\\\\\\d{7,8}|[2-79]\\\\\\\\d{8}|[2-9]\\\\\\\\d{7}|[3-9]\\\\\\\\d{6}|[57-9]\\\\\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|22\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\\\\\d{8}|[1-9]\\\\\\\\d{7}\",[8,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"[025-7]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]]],\"BG\":[\"359\",\"00\",\"[2-7]\\\\\\\\d{6,7}|[89]\\\\\\\\d{6,8}|2\\\\\\\\d{5}\",[6,7,8,9],[[\"(\\\\\\\\d)(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\\\\\d|31)\\\\\\\\d{6}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"[25689]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[25689]\"]]]],\"BL\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\\\\\d|976)\\\\\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\\\\\d{4}\"],[\"69(?:0\\\\\\\\d\\\\\\\\d|1(?:2[2-9]|3[0-5]))\\\\\\\\d{4}\"],[\"80[0-5]\\\\\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\\\\\d{5}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\\\\\d{6})$\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\\\\\d{6}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\\\\\d)?\",\"(?:[2-467]\\\\\\\\d\\\\\\\\d|8001)\\\\\\\\d{5}\",[8,9],[[\"(\\\\\\\\d)(\\\\\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\\\\\d)\\\\\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\\\\\d\\\\\\\\d|5(?:[0-46-9]\\\\\\\\d|5[0-24679]))\\\\\\\\d{8}|[1-9]\\\\\\\\d{9}|[3589]\\\\\\\\d{8}|[34]\\\\\\\\d{7}\",[8,9,10,11],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{2,3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{5})(\\\\\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\\\\\d{6})$\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\\\\\d{7}|[2-8]\\\\\\\\d{6}\",[7,8],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\\\\\d)\\\\\\\\d{6}|(?:[2-6]\\\\\\\\d|90)\\\\\\\\d{5}\",[7,8,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-79]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\\\\\d|33|44|902)\\\\\\\\d{7}|8(?:0[0-79]\\\\\\\\d{5,7}|[1-7]\\\\\\\\d{9})|8(?:1[0-489]|[5-79]\\\\\\\\d)\\\\\\\\d{7}|8[1-79]\\\\\\\\d{6,7}|8[0-79]\\\\\\\\d{5}|8\\\\\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\\\\\d|[2-8])\\\\\\\\d{6}\",[7,11],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\\\\\d|90)\\\\\\\\d{8}\",[10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|6[578])|4(?:03|1[68]|3[178]|50|74)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\\\\\d{6}\"],[\"900[2-9]\\\\\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\\\\\d|5(?:[02-46-9]\\\\\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\\\\\d|5(?:[034]\\\\\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\\\\\d)|9(?:[05-9]\\\\\\\\d|2[0-5]|49)))\\\\\\\\d{4}|52[34][2-9]1[02-9]\\\\\\\\d{4}|(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\\\\\\\d{6}\"],0,0,0,[\"600[2-9]\\\\\\\\d{6}\"]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\\\\\d{8}(?:\\\\\\\\d{2})?|8[0-24-9]\\\\\\\\d{7})|[148]\\\\\\\\d{8}|1\\\\\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"0|([59]\\\\\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\\\\\d|70[23]|959))\\\\\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\\\\\d{5}|4(?:[0-3]\\\\\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\\\\\d{6}\",[9]],[\"180(?:0\\\\\\\\d{3}|2)\\\\\\\\d{3}\",[7,10]],[\"190[0-26]\\\\\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\\\\\d)\\\\\\\\d{4}\",[9]],[\"13(?:00\\\\\\\\d{6}(?:\\\\\\\\d{2})?|45[0-4]\\\\\\\\d{3})|13\\\\\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\\\\\d{8}|[1-68]\\\\\\\\d{6}\",[7,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\\\\\d{3}|8776)\\\\\\\\d{4}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\\\\\d{6}|(?:0\\\\\\\\d|80)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\\\\\d{11}|[2-9]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\\\\\d{9}\",[10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d)(\\\\\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\\\\\d{4}\",[5],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\\\\\d{6}|6\\\\\\\\d{9,10}|[2-9]\\\\\\\\d{8}\",[9,10,11],[[\"(\\\\\\\\d{5})(\\\\\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"2[1-3]\"],\"($1)\"],[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\\\\\d{8}|88\\\\\\\\d{6,7}\",[8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\\\\\d|79)\\\\\\\\d\\\\\\\\d00\",\"1[127]\\\\\\\\d{8,9}|2\\\\\\\\d{9}(?:\\\\\\\\d{2})?|[12]\\\\\\\\d{6,7}|86\\\\\\\\d{6}|(?:1[03-689]\\\\\\\\d|6)\\\\\\\\d{7,9}|(?:[3-579]\\\\\\\\d|8[0-57-9])\\\\\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\\\\\d{2})(\\\\\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\\\\\d|35|49|9[1-68])|4(?:[17]\\\\\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\\\\\d|35|49|9[1-68])|4(?:[17]\\\\\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\\\\\d|35|49|9[1-68])|4(?:[17]\\\\\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\\\\\d|79)\\\\\\\\d\\\\\\\\d)\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:(?:1\\\\\\\\d|[36])\\\\\\\\d{3}|9101)\\\\\\\\d{6}|[124-8]\\\\\\\\d{7}\",[8,10,11],[[\"(\\\\\\\\d)(\\\\\\\\d{7})\",\"$1 $2\",[\"[146][2-9]|[2578]\"],\"($1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{7})\",\"$1 $2\",[\"6\"],\"($1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{7})\",\"$1 $2\",[\"[39]\"]],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\\\\\d|90)\\\\\\\\d{8}|(?:[24-8]\\\\\\\\d{3}|3005)\\\\\\\\d{4}\",[8,10],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"[27]\\\\\\\\d{6,7}|[34]\\\\\\\\d{5,7}|(?:5|8\\\\\\\\d\\\\\\\\d)\\\\\\\\d{7}\",[6,7,8,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\\\\\d)(\\\\\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\\\\\d)(\\\\\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{4}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\\\\\d)\\\\\\\\d)\\\\\\\\d{5}\",[7,8],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\\\\\d{8}(?:\\\\\\\\d{2})?|8[0-24-9]\\\\\\\\d{7})|[148]\\\\\\\\d{8}|1\\\\\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"0|([59]\\\\\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\\\\\d|7(?:0[01]|1[0-2])|958))\\\\\\\\d{3}\",[9]],[\"4(?:83[0-38]|93[0-6])\\\\\\\\d{5}|4(?:[0-3]\\\\\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\\\\\d{6}\",[9]],[\"180(?:0\\\\\\\\d{3}|2)\\\\\\\\d{3}\",[7,10]],[\"190[0-26]\\\\\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\\\\\d)\\\\\\\\d{4}\",[9]],[\"13(?:00\\\\\\\\d{6}(?:\\\\\\\\d{2})?|45[0-4]\\\\\\\\d{3})|13\\\\\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\\\\\d|[58]0)\\\\\\\\d{6}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\\\\\d|60)\\\\\\\\d{7}|9\\\\\\\\d{8,11}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\\\\\d{5,14}|49(?:[34]0|69|8\\\\\\\\d)\\\\\\\\d\\\\\\\\d?|49(?:37|49|60|7[089]|9\\\\\\\\d)\\\\\\\\d{1,3}|49(?:1\\\\\\\\d|2[02-9]|3[2-689]|7[1-7])\\\\\\\\d{1,8}|(?:1|[368]\\\\\\\\d|4[0-8])\\\\\\\\d{3,13}|49(?:[05]\\\\\\\\d|[23]1|[46][1-8])\\\\\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\\\\\d{5})(\\\\\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\\\\\d{5})(\\\\\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\\\\\d{5})(\\\\\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\\\\\d|77)\\\\\\\\d{6}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\\\\\d\\\\\\\\d|767|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\\\\\d{6})$\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\\\\\d|80)\\\\\\\\d{7}\",[8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\\\\\d{9,10}|(?:[2-7]|9\\\\\\\\d)\\\\\\\\d{7}\",[8,9,10,11],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\\\\\d{9}|[4578]\\\\\\\\d{7}|(?:[3-8]\\\\\\\\d|90)\\\\\\\\d{5}\",[7,8,10],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\\\\\d{8,9}|[24-6]\\\\\\\\d{8}|[135]\\\\\\\\d{7}\",[8,9,10],[[\"(\\\\\\\\d)(\\\\\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\\\\\d{6}\",[7],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-59]\\\\\\\\d)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[1-59]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\\\\\d{4}|7\\\\\\\\d{10,11}|(?:[124-7]\\\\\\\\d|3[0-46-9])\\\\\\\\d{8}|[1-9]\\\\\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\\\\\d)(\\\\\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\\\\\d{5}|(?:0800\\\\\\\\d|[235-9])\\\\\\\\d{6}\",[7,11],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\\\\\d\\\\\\\\d|820)\\\\\\\\d{4}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\\\\\d{5}\",[6],[[\"(\\\\\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\\\\\d|11)\\\\\\\\d{6}|[2-7]\\\\\\\\d{6}\",[7,8],[[\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]]],0,0,\"0(11\\\\\\\\d{6}|60\\\\\\\\d{6}|61\\\\\\\\d{6}|6[256]\\\\\\\\d{6}|7[47]\\\\\\\\d{6}|76\\\\\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\\\\\d{9}|[18]\\\\\\\\d{8}|8\\\\\\\\d{6}\",[7,9,10],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\\\\\d{5})(\\\\\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\\\\\d\\\\\\\\d|73[0235])|4(?:[0-5]\\\\\\\\d\\\\\\\\d|69[7-9]|70[0359])|(?:5[0-26-9]|[78][0-49])\\\\\\\\d\\\\\\\\d|6(?:[0-4]\\\\\\\\d\\\\\\\\d|50[0-24-69]))|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\\\\\d)\\\\\\\\d\\\\\\\\d|1(?:[0-7]\\\\\\\\d\\\\\\\\d|8(?:[02]\\\\\\\\d|1[0-278])))|(?:3(?:0\\\\\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\\\\\d\\\\\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\\\\\d{3})\\\\\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\\\\\d)|76\\\\\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\\\\\d|7[4-79])|295[5-7]|35[34]\\\\\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\\\\\d{5}|7(?:[1-3]\\\\\\\\d\\\\\\\\d|4(?:[0-46-9]\\\\\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\\\\\d|[23][0-8])|9(?:[024-9]\\\\\\\\d|1[02-9]|3[0-689]))\\\\\\\\d{6}\",[10]],[\"80[08]\\\\\\\\d{7}|800\\\\\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\\\\\d|8[2-49]))\\\\\\\\d{7}|845464\\\\\\\\d\",[7,10]],[\"70\\\\\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\\\\\d{8}\",[10]],[\"76(?:464|652)\\\\\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\\\\\\\d{6}\",[10]],[\"56\\\\\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\\\\\d{6})$\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{6}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"(?:[56]94|80\\\\\\\\d|976)\\\\\\\\d{6}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\\\\\d{3})\\\\\\\\d{6}|8\\\\\\\\d{6}(?:\\\\\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\\\\\d|911[17])\\\\\\\\d{5}\",[10]],[\"80[08]\\\\\\\\d{7}|800\\\\\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\\\\\d|8[0-3]))\\\\\\\\d{7}|845464\\\\\\\\d\",[7,10]],[\"70\\\\\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\\\\\d{8}\",[10]],[\"76(?:464|652)\\\\\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\\\\\\\d{6}\",[10]],[\"56\\\\\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\\\\\d{3}|800)\\\\\\\\d{5}\",[8,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\\\\\d\\\\\\\\d|606)\\\\\\\\d{5}\",[8],[[\"(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\\\\\d|70)\\\\\\\\d{4}\",[6],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\\\\\d{6}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\\\\\d{6}|(?:3|6\\\\\\\\d)\\\\\\\\d{7}\",[8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\\\\\d|976)\\\\\\\\d{6}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|1[0-24]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\\\\\d)\\\\\\\\d{4}\"],[\"69(?:0\\\\\\\\d\\\\\\\\d|1(?:2[2-9]|3[0-5]))\\\\\\\\d{4}\"],[\"80[0-5]\\\\\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\\\\\d{5}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\\\\\d{6}|(?:3\\\\\\\\d|55|[89]0)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\\\\\d{3}|8\\\\\\\\d{9,11}|(?:[269]\\\\\\\\d|70)\\\\\\\\d{8}\",[10,11,12],[[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3,4})(\\\\\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\\\\\d{3}|[2-7])\\\\\\\\d{7}\",[8,11],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\\\\\d\\\\\\\\d|671|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\\\\\d{6})$\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\\\\\d{8}|4\\\\\\\\d{6}\",[7,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"9008\\\\\\\\d{3}|(?:[2-467]\\\\\\\\d\\\\\\\\d|862)\\\\\\\\d{4}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\\\\\d{6,7}|9\\\\\\\\d{4,7}|(?:[2-7]|9\\\\\\\\d{3})\\\\\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\\\\\d{10}|[237-9]\\\\\\\\d{7}\",[8,11],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\\\\\d|3[0-79])\\\\\\\\d{7}|80\\\\\\\\d{5,7}|[1-79]\\\\\\\\d{7}|6\\\\\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"[2-489]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\\\\\d{8}|[1-9]\\\\\\\\d{7}\",[8,9],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"(?:(?:00[1-9]|8\\\\\\\\d)\\\\\\\\d{4}|[1-36])\\\\\\\\d{6}|00\\\\\\\\d{10}|[1-9]\\\\\\\\d{8,10}|[2-9]\\\\\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3,4})(\\\\\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\\\\\d|[2569])\\\\\\\\d{6,8}|4\\\\\\\\d{6,9}|7\\\\\\\\d{8}|8\\\\\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\\\\\d)(\\\\\\\\d{3,4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\\\\\d{6}(?:\\\\\\\\d{3,5})?|[57]\\\\\\\\d{8}|[1-489]\\\\\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\\\\\d{4})(\\\\\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{1,2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\\\\\d{6}|(?:[3578]\\\\\\\\d|90)\\\\\\\\d{8}\",[10],0,\"0\",0,\"0|([25-8]\\\\\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{7}|1\\\\\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\\\\\d{4})(\\\\\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\\\\\d|7(?:1(?:[013-8]\\\\\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\\\\\d{5})(\\\\\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\\\\\d{4})(\\\\\\\\d{2,4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\\\\\d{6}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\\\\\d\\\\\\\\d)\\\\\\\\d{7}|[2-6]\\\\\\\\d{7,8}\",[8,9,10],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\\\\\d{9}|(?:[1-8]\\\\\\\\d\\\\\\\\d|9)\\\\\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\\\\\d|[4-9])\\\\\\\\d{6}\",[7,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\\\\\d{5,10}|1\\\\\\\\d{8,10}|3(?:[0-8]\\\\\\\\d{7,10}|9\\\\\\\\d{7,8})|55\\\\\\\\d{8}|8\\\\\\\\d{5}(?:\\\\\\\\d{2,4})?\",[6,7,8,9,10,11],[[\"(\\\\\\\\d{2})(\\\\\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[38]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\\\\\d{1,6}|0(?:1(?:[0159]\\\\\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\\\\\d\\\\\\\\d|3(?:[0159]\\\\\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\\\\\d|6[0-8])|7(?:[0159]\\\\\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\\\\\d{2,7}\"],[\"3[1-9]\\\\\\\\d{8}|3[2-9]\\\\\\\\d{7}\",[9,10]],[\"80(?:0\\\\\\\\d{3}|3)\\\\\\\\d{3}\",[6,9]],[\"(?:0878\\\\\\\\d{3}|89(?:2\\\\\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\\\\\d\\\\\\\\d)|5[0-4]))\\\\\\\\d\\\\\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\\\\\d|99)\\\\\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\\\\\d{8}\",[10]],[\"84(?:[08]\\\\\\\\d{3}|[17])\\\\\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\\\\\d{6}|(?:[3578]\\\\\\\\d|90)\\\\\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\\\\\d|7(?:00[378]|97[7-9]))\\\\\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\\\\\d{4}\"],[\"701511\\\\\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\\\\\d{4})\\\\\\\\d{4}\"],[\"76(?:464|652)\\\\\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\\\\\\\d{6}\"],[\"56\\\\\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\\\\\d\\\\\\\\d|658|900)\\\\\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\\\\\d)\\\\\\\\d|32|53)\\\\\\\\d{6}\",[8,9],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\\\\\d{6,14}|[257-9]\\\\\\\\d{9}|(?:00|[1-9]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d)(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{6}|(?:2|80)0\\\\\\\\d{6,7}|[4-6]\\\\\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\\\\\d{9}|(?:[235-8]\\\\\\\\d|99)\\\\\\\\d{7}\",[9,10],[[\"(\\\\\\\\d{4})(\\\\\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\\\\\d{9}|[1-9]\\\\\\\\d{7,8}\",[8,9,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\\\\\d|6[0-79])\\\\\\\\d{6}|(?:[2-48]\\\\\\\\d|50)\\\\\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\\\\\d{6}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\\\\\d{6})$\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\\\\\d{6}|(?:19\\\\\\\\d|[2-7])\\\\\\\\d{7}\",[8,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\\\\\d{8,11}|(?:[12]|5\\\\\\\\d{3})\\\\\\\\d{7}|[13-6]\\\\\\\\d{9}|(?:[1-6]\\\\\\\\d|80)\\\\\\\\d{7}|[3-6]\\\\\\\\d{4,5}|(?:00|7)0\\\\\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\\\\\d)(\\\\\\\\d{3,4})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{5})(\\\\\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\\\\\d\\\\\\\\d))?\"],\"KW\":[\"965\",\"00\",\"18\\\\\\\\d{5}|(?:[2569]\\\\\\\\d|41)\\\\\\\\d{6}\",[7,8],[[\"(\\\\\\\\d{4})(\\\\\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\\\\\d{6})$\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\\\\\d{8})\\\\\\\\d{5}|[78]\\\\\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\\\\\d{9}|3\\\\\\\\d{8}|(?:[235-8]\\\\\\\\d|41)\\\\\\\\d{6}\",[8,9,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"30[013-9]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[27-9]\\\\\\\\d{7}|[13-9]\\\\\\\\d{6}\",[7,8],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\\\\\d\\\\\\\\d|758|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\\\\\d{6})$\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"[68]\\\\\\\\d{8}|(?:[2378]\\\\\\\\d|90)\\\\\\\\d{5}\",[7,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(1001)\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:2|33|5\\\\\\\\d|77|88)\\\\\\\\d{7}|[4-6]\\\\\\\\d{6}\",[7,8,9],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[4-6]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{5}\",[8],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\\\\\d|52|[78]0)\\\\\\\\d{6}\",[8],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(8-$1)\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\\\\\d{2})(\\\\\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\\\\\d{4,8}|6\\\\\\\\d{8}|35\\\\\\\\d{2,4}|(?:[2457-9]\\\\\\\\d|3[0-46-9])\\\\\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\\\\\d|90)\\\\\\\\d{6}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d{5})(\\\\\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\",\"5(?:29|38)[89]0\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:29(?:[189][05]|2[29]|3[01])|38[89][05])\\\\\\\\d{4}|5(?:2(?:[0-25-7]\\\\\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\\\\\d|5[02-9]|6[02-8]|80|9[3-9])|(?:4[067]|5[03])\\\\\\\\d)\\\\\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\\\\\d|8[0-247-9])|7(?:[017]\\\\\\\\d|6[0-367]))\\\\\\\\d{6}\"],[\"80\\\\\\\\d{7}\"],[\"89\\\\\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\\\\\d)\\\\\\\\d{7}\",[8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\\\\\d|[89]0)\\\\\\\\d{6}\",[8],[[\"(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\\\\\d)\\\\\\\\d{6}|80\\\\\\\\d{6,7}\",[8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"(?:590|(?:69|80)\\\\\\\\d|976)\\\\\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\\\\\d{4}\"],[\"69(?:0\\\\\\\\d\\\\\\\\d|1(?:2[2-9]|3[0-5]))\\\\\\\\d{4}\"],[\"80[0-5]\\\\\\\\d{6}\"],0,0,0,0,0,[\"976[01]\\\\\\\\d{5}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\\\\\d{6})$\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\\\\\d{4}|(?:[256]\\\\\\\\d|45)\\\\\\\\d{5}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\\\\\d{5,7}|95\\\\\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\\\\\d{6,8}|(?:2|8\\\\\\\\d)\\\\\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{5})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\\\\\d{7,9}|[57-9]\\\\\\\\d{7}\",[8,9,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\\\\\d{5})(\\\\\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"0800\\\\\\\\d{3}|(?:28|[68]\\\\\\\\d)\\\\\\\\d{6}\",[7,8],[[\"(\\\\\\\\d{4})(\\\\\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\\\\\d{9}|(?:67|90)0\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\\\\\d{6})$\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"(?:69|80)\\\\\\\\d{7}|(?:59|97)6\\\\\\\\d{6}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{5}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\\\\\d\\\\\\\\d|664|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([34]\\\\\\\\d{6})$\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\\\\\d{4}|(?:[2579]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{5}\",[8],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:5|8\\\\\\\\d\\\\\\\\d)\\\\\\\\d{7}|[2-468]\\\\\\\\d{6}\",[7,8,10],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"5\"]],[\"(\\\\\\\\d{5})(\\\\\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\\\\\d)\\\\\\\\d{7}|[34679]\\\\\\\\d{6}\",[7,10],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2\",[\"[3467]|9[13-9]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"(?:[19]\\\\\\\\d|[23]1|77|88)\\\\\\\\d{7}|1\\\\\\\\d{6}\",[7,9],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"1(?:(?:44|99)[1-9]|65[0-689])\\\\\\\\d{7}|(?:1(?:[017]\\\\\\\\d|[235][1-9]|4[0-35-9]|6[0-46-9]|8[1-79]|9[1-8])|[2-9]\\\\\\\\d)\\\\\\\\d{8}\",[10,11],[[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\\\\\d{8,9}|(?:3\\\\\\\\d|[4-9])\\\\\\\\d{7}\",[8,9,10],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9])|8\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1-$2-$3-$4\",[\"1[36-8]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\\\\\d)\\\\\\\\d{7}\",[8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\\\\\d{7,8}\",[8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"[2-57-9]\\\\\\\\d{5}\",[6],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1.$2.$3\",[\"[2-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[04]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\\\\\d{5}\",[6],[[\"(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\\\\\d)(\\\\\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\\\\\d{3})\\\\\\\\d{6}|[1-9]\\\\\\\\d{7}|[78]\\\\\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{5})(\\\\\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\\\\\d{3})\\\\\\\\d{4}\",[8],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\\\\\d\\\\\\\\d|3(?:[02-9]\\\\\\\\d|1[0-8]))\\\\\\\\d{6}|[89]\\\\\\\\d{6,9}|1\\\\\\\\d{4,5}\",[5,6,7,8,9,10],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[1-57-9]\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\\\\\d{3})\\\\\\\\d{4}\",[5,8],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[489]|59\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\\\\\d|9)\\\\\\\\d{9}|[1-9]\\\\\\\\d{7}\",[8,10,11],[[\"(\\\\\\\\d)(\\\\\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-579]|6[2-6])\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:444|(?:55|8\\\\\\\\d)\\\\\\\\d|666)\\\\\\\\d{4}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[4-68]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\\\\\d)\\\\\\\\d{3}\",[4,7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[29]\\\\\\\\d{7,9}|50\\\\\\\\d{5}(?:\\\\\\\\d{2,3})?|6[0-35-9]\\\\\\\\d{6}|7\\\\\\\\d{7,8}|8\\\\\\\\d{4,9}|(?:11\\\\\\\\d|[34])\\\\\\\\d{7}\",[5,6,7,8,9,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3,8})\",\"$1 $2\",[\"8[1-579]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|[89]0\",\"50(?:[0367]|88)|[89]0\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\\\\\d{3}|500)\\\\\\\\d{4}|800\\\\\\\\d{5,6}\",[7,8,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\\\\\d{3})\\\\\\\\d{6}|[68]\\\\\\\\d{7}|[1-57-9]\\\\\\\\d{6}\",[7,8,10,11],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\\\\\d)\\\\\\\\d{7}\",[8,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\\\\\d)(\\\\\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,0,\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\\\\\d{5}(?:\\\\\\\\d{2})?|8\\\\\\\\d{7,8}\",[6,8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\\\\\d{3})\\\\\\\\d{4}|(?:[2-589]\\\\\\\\d|64)\\\\\\\\d{5}\",[7,8],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\\\\\d)\\\\\\\\d{8}|2\\\\\\\\d{5}|(?:1800|8)\\\\\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\\\\\d)(\\\\\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\\\\\d{5})(\\\\\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{1,2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\\\\\d{6}|[24-8]\\\\\\\\d{10,11}|9(?:[013-9]\\\\\\\\d{8,10}|2(?:[01]\\\\\\\\d\\\\\\\\d|2(?:[06-8]\\\\\\\\d|1[01]))\\\\\\\\d{7})|(?:[2-8]\\\\\\\\d{3}|92(?:[0-7]\\\\\\\\d|8[1-9]))\\\\\\\\d{6}|[24-9]\\\\\\\\d{8}|[89]\\\\\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\\\\\d{5})(\\\\\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"6\\\\\\\\d{5}(?:\\\\\\\\d{2})?|8\\\\\\\\d{9}|[1-9]\\\\\\\\d{6}(?:\\\\\\\\d{2})?\",[6,7,8,9,10],[[\"(\\\\\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2\",[\"11|64\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"(?:[45]|80\\\\\\\\d\\\\\\\\d)\\\\\\\\d{5}\",[6,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\\\\\d\\\\\\\\d|787)\\\\\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\\\\\d{6}|(?:1\\\\\\\\d|5)\\\\\\\\d{8}\",[8,9,10],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"1693\\\\\\\\d{5}|(?:[26-9]\\\\\\\\d|30)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\\\\\d\\\\\\\\d|345|900)\\\\\\\\d{4}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\\\\\d{4,6}|9\\\\\\\\d{5,10}|(?:[2-46-8]\\\\\\\\d|5[0-8])\\\\\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-6])\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"[2-7]\\\\\\\\d{7}|800\\\\\\\\d{4}(?:\\\\\\\\d{2})?|2\\\\\\\\d{6}\",[7,8,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]]]],\"RE\":[\"262\",\"00\",\"9769\\\\\\\\d{5}|(?:26|[68]\\\\\\\\d)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,\"26[23]|69|[89]\"],\"RO\":[\"40\",\"00\",\"(?:[2378]\\\\\\\\d|90)\\\\\\\\d{7}|[23]\\\\\\\\d{5}\",[6,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\\\\\d9\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\\\\\d{6,9}|6\\\\\\\\d{7,9}|90\\\\\\\\d{4,8}|38\\\\\\\\d{5,6}|(?:7\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{3,9}|(?:[12]\\\\\\\\d|3[0-79])\\\\\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"8\\\\\\\\d{13}|[347-9]\\\\\\\\d{9}\",[10,14],[[\"(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\\\\\d{5})(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,\"3[04-689]|[489]\",0,\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\\\\\d\\\\\\\\d|[89]00)\\\\\\\\d{6}\",[8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"2\"]]],\"0\"],\"SA\":[\"966\",\"00\",\"92\\\\\\\\d{7}|(?:[15]|8\\\\\\\\d)\\\\\\\\d{8}\",[9,10],[[\"(\\\\\\\\d{4})(\\\\\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{4}\",[5,7],[[\"(\\\\\\\\d{2})(\\\\\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"8000\\\\\\\\d{3}|(?:[249]\\\\\\\\d|64)\\\\\\\\d{5}\",[7],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\\\\\d\\\\\\\\d|9)\\\\\\\\d{9}|[1-9]\\\\\\\\d{8}|[1-689]\\\\\\\\d{7}|[1-4689]\\\\\\\\d{6}|2\\\\\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2,3})(\\\\\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\\\\\d)(\\\\\\\\d{2,3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2,3})(\\\\\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2,3})(\\\\\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{2,3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\\\\\d\",\"(?:(?:1\\\\\\\\d|8)\\\\\\\\d\\\\\\\\d|7000)\\\\\\\\d{7}|[3689]\\\\\\\\d{7}\",[8,10,11],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-5]|[1-9])\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\\\\\d|8)\\\\\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\\\\\d{7}|8\\\\\\\\d{4,7}|90\\\\\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\\\\\d{4}|(?:[489]\\\\\\\\d|[57]9)\\\\\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\\\\\d{8}|[2-59]\\\\\\\\d{6}|[2-5]\\\\\\\\d{5}\",[6,7,9],[[\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\\\\\d|66)\\\\\\\\d{6}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\\\\\d)\\\\\\\\d{6}\",[8,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\\\\\d|93)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\\\\\d{8}|[12679]\\\\\\\\d{7}|[1-5]\\\\\\\\d{6}|[1348]\\\\\\\\d{5}\",[6,7,8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\\\\\d)(\\\\\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\\\\\d)(\\\\\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[3478]|64|90\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{5,7})\",\"$1 $2\",[\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\\\\\d)\\\\\\\\d{5}\",[6,7],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\\\\\d)\\\\\\\\d{5}\",[7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\\\\\d{7}|[89]00\\\\\\\\d{4}(?:\\\\\\\\d{4})?\",[7,8,11],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\\\\\d{6}|(?:[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\\\\\d{6})$\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\\\\\d{8}|[1-5]\\\\\\\\d{7}\",[8,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\\\\\d{4}|(?:[237]\\\\\\\\d|900)\\\\\\\\d{6}\",[8,9],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\\\\\d{5})(\\\\\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\\\\\d\\\\\\\\d|649|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\\\\\d{6})$\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\\\\\d|77)\\\\\\\\d{6}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\\\\\d)\\\\\\\\d{7}|1\\\\\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"(?:00|[1-57-9]\\\\\\\\d)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d{6})(\\\\\\\\d)(\\\\\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d)(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"3[1-5]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\\\\\d{7}|(?:[2-47]\\\\\\\\d|[89]0)\\\\\\\\d{5}\",[7,8],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\\\\\d\\\\\\\\d|999)\\\\\\\\d)\\\\\\\\d{3}|[2-8]\\\\\\\\d{4}\",[5,7],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\\\\\d{6}|8\\\\\\\\d{11,12}|(?:[2-58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[7,10,12,13],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\\\\\d{6})$\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\\\\\d\\\\\\\\d|90)\\\\\\\\d{4}\",[5,6,7],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\\\\\d{8}|7\\\\\\\\d{9,10}|[2-8]\\\\\\\\d{7}|2\\\\\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\\\\\d{2})(\\\\\\\\d)(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3,4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[26-8]\\\\\\\\d|41|90)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\\\\\d{9}|[3-9]\\\\\\\\d{8}\",[9,10],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\",\"4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\\\\\d{6}|(?:[29]0|[347]\\\\\\\\d)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d{4})(\\\\\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\\\\\d{9}\",[10],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"5(?:05(?:[2-57-9]\\\\\\\\d\\\\\\\\d|6(?:[0-35-9]\\\\\\\\d|44))|82(?:2(?:0[0-3]|[268]2)|3(?:0[02]|33)|4(?:00|4[24]|65|82)|5(?:00|29|83)|6(?:00|66|82)|777|8(?:00|88)|9(?:00|9[89])))\\\\\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[39]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[0179]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-289]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01579]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\\\\\d{6}\"],[\"900[2-9]\\\\\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\\\\\d|5(?:[02-46-9]\\\\\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\\\\\d|5(?:[034]\\\\\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\\\\\d)|9(?:[05-9]\\\\\\\\d|2[0-5]|49)))\\\\\\\\d{4}|52[34][2-9]1[02-9]\\\\\\\\d{4}|5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\\\\\d)\",\"4\\\\\\\\d{9}|[1249]\\\\\\\\d{7}|(?:[49]\\\\\\\\d|80)\\\\\\\\d{5}\",[7,8,10],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"405|8|90\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"(?:33|55|[679]\\\\\\\\d|88)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[35-9]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\\\\\d{5,10}|3[0-8]\\\\\\\\d{7,10}|55\\\\\\\\d{8}|8\\\\\\\\d{5}(?:\\\\\\\\d{2,4})?|(?:1\\\\\\\\d|39)\\\\\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\\\\\d\\\\\\\\d|784|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\\\\\d{6})$\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\\\\\d{7}|(?:[24]\\\\\\\\d|[59]0)\\\\\\\\d{8}\",[10],[[\"(\\\\\\\\d{3})(\\\\\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\\\\\d{6})$\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\\\\\d{9}|(?:34|90)0\\\\\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\\\\\d{6})$\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\\\\\d{9}|[135-9]\\\\\\\\d{8}|[16]\\\\\\\\d{7}|[16-8]\\\\\\\\d{6}\",[7,8,9,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\\\\\d{4})(\\\\\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[57-9]\\\\\\\\d{6}|(?:[238]\\\\\\\\d|48)\\\\\\\\d{3}\",[5,7],[[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],\"WF\":[\"681\",\"00\",\"(?:40|72)\\\\\\\\d{4}|8\\\\\\\\d{5}(?:\\\\\\\\d{3})?\",[6,9],[[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3\",[\"[478]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\\\\\d{5})\\\\\\\\d{4}|[78]\\\\\\\\d{6}|[68]\\\\\\\\d{5}\",[5,6,7,10],[[\"(\\\\\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\\\\\d{7,8}|(?:4\\\\\\\\d\\\\\\\\d|[89]00)\\\\\\\\d{5}\",[8,9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\\\\\d)\\\\\\\\d{7}|[1-7]\\\\\\\\d{6}\",[7,8,9],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"80\\\\\\\\d{7}|(?:26|63)9\\\\\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\"],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\\\\\d{8}|8\\\\\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\\\\\d{6}|(?:21|63|[79]\\\\\\\\d)\\\\\\\\d{7}\",[9],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\\\\\d{6,8}|6[0-24-9]\\\\\\\\d{6,7})|[38]\\\\\\\\d{9}|[35-8]\\\\\\\\d{8}|[3-6]\\\\\\\\d{7}|[1-689]\\\\\\\\d{6}|[1-3569]\\\\\\\\d{5}|[1356]\\\\\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\\\\\d{4})(\\\\\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:005|[1-9]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{5}\",[8],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"\\\\\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:005|[1-9]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{5}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\\\\\d{7}\",[8],[[\"(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\\\\\d{11}|[35-7]\\\\\\\\d{8}\",[9,12],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\\\\\d{8}|7[6-8]\\\\\\\\d{7}\"]]],\"878\":[\"878\",0,\"10\\\\\\\\d{10}\",[12],[[\"(\\\\\\\\d{2})(\\\\\\\\d{5})(\\\\\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\\\\\d{10}\"]]],\"881\":[\"881\",0,\"[0-36-9]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2 $3\",[\"[0-36-9]\"]]],0,0,0,0,0,0,[0,[\"[0-36-9]\\\\\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\\\\\d{6}(?:\\\\\\\\d{2,5})?|285\\\\\\\\d{9}|(?:[19]\\\\\\\\d|49)\\\\\\\\d{6}\",[7,8,9,10,11,12],[[\"(\\\\\\\\d{2})(\\\\\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{6})\",\"$1 $2\",[\"4\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"34[57]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\\\\\d{2})(\\\\\\\\d{4,5})(\\\\\\\\d{5})\",\"$1 $2 $3\",[\"[1-3]\"]]],0,0,0,0,0,0,[0,[\"342\\\\\\\\d{4}|(?:337|49)\\\\\\\\d{6}|3(?:2|47|7\\\\\\\\d{3})\\\\\\\\d{7}\",[7,8,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\\\\\d{4}|6\\\\\\\\d{5,10})|(?:(?:285\\\\\\\\d\\\\\\\\d|3(?:45|[69]\\\\\\\\d{3}))\\\\\\\\d|9[89])\\\\\\\\d{6}\"]]],\"883\":[\"883\",0,\"(?:210|370\\\\\\\\d\\\\\\\\d)\\\\\\\\d{7}|51\\\\\\\\d{7}(?:\\\\\\\\d{3})?\",[9,10,12],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\\\\\d{4})(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\",\"$1 $2 $3 $4\",[\"[35]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:210|(?:370[1-9]|51[013]0)\\\\\\\\d)\\\\\\\\d{7}|5100\\\\\\\\d{5}\"]]],\"888\":[\"888\",0,\"\\\\\\\\d{11}\",[11],[[\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\\\\\d{8}\",[9],[[\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\\\\\d{8}\"]]]}}')},2415:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return a}));var r=n(2347);function a(t){return t.replace(new RegExp(\"[\".concat(r.f,\"]+\"),\"g\"),\" \").trim()}},2416:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return o}));var r=n(2380),a=n(2381),d=n(2342),i=n(2347);function o(t,e,n,o){if(!t)return{};if(\"+\"!==t[0]){var u=Object(r.a)(t,e,n,o);if(!u||u===t){if(e||n){var $=Object(a.a)(t,e,n,o),l=$.countryCallingCode,c=$.number;if(l)return{countryCallingCode:l,number:c}}return{number:t}}t=\"+\"+u}if(\"0\"===t[1])return{};o=new d.a(o);for(var s=2;s-1<=i.a&&s<=t.length;){var f=t.slice(1,s);if(o.hasCallingCode(f))return o.selectNumberingPlan(f),{countryCallingCode:f,number:t.slice(s)};s++}return{}}},2417:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return i}));var r=n(2418),a=n(2353),d=n(2369);function i(t,e){var n=Object(r.a)(t,e),i=n.nationalNumber,o=n.carrierCode;if(!function(t,e,n){if(Object(a.a)(t,n.nationalNumberPattern())&&!Object(a.a)(e,n.nationalNumberPattern()))return!1;return!0}(t,i,e))return{nationalNumber:t};if(t.length!==i.length+(o?o.length:0)&&e.possibleLengths())switch(Object(d.a)(i,e)){case\"TOO_SHORT\":case\"INVALID_LENGTH\":return{nationalNumber:t}}return{nationalNumber:i,carrierCode:o}}},2418:function(t,e,n){\"use strict\";function r(t,e){if(t&&e.numberingPlan.nationalPrefixForParsing()){var n=new RegExp(\"^(?:\"+e.numberingPlan.nationalPrefixForParsing()+\")\"),r=n.exec(t);if(r){var a,d,i,o=r.length-1,u=o>0&&r[o];if(e.nationalPrefixTransformRule()&&u)a=t.replace(n,e.nationalPrefixTransformRule()),o>1&&(d=r[1]);else{var $=r[0];a=t.slice($.length),u&&(d=r[1])}if(u){var l=t.indexOf(r[1]);t.slice(0,l)===e.numberingPlan.nationalPrefix()&&(i=e.numberingPlan.nationalPrefix())}else i=r[0];return{nationalNumber:a,nationalPrefix:i,carrierCode:d}}}return{nationalNumber:t}}n.d(e,\"a\",(function(){return r}))},2419:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return d}));var r=n(2342),a=n(2382);function d(t,e,n){var d=n.getCountryCodesForCallingCode(t);if(d)return 1===d.length?d[0]:function(t,e,n){n=new r.a(n);var d=t,i=Array.isArray(d),o=0;for(d=i?d:d[Symbol.iterator]();;){var u;if(i){if(o>=d.length)break;u=d[o++]}else{if((o=d.next()).done)break;u=o.value}var $=u;if(n.country($),n.leadingDigits()){if(e&&0===e.search(n.leadingDigits()))return $}else if(Object(a.a)({phone:e,country:$},void 0,n.metadata))return $}}(d,e,n.metadata)}},2420:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return d})),n.d(e,\"b\",(function(){return i}));var r=n(2342),a=n(2369);function d(t,e,n){if(void 0===e&&(e={}),n=new r.a(n),e.v2){if(!t.countryCallingCode)throw new Error(\"Invalid phone number object passed\");n.selectNumberingPlan(t.countryCallingCode)}else{if(!t.phone)return!1;if(t.country){if(!n.hasCountry(t.country))throw new Error(\"Unknown country: \".concat(t.country));n.country(t.country)}else{if(!t.countryCallingCode)throw new Error(\"Invalid phone number object passed\");n.selectNumberingPlan(t.countryCallingCode)}}if(n.possibleLengths())return i(t.phone||t.nationalNumber,n);if(t.countryCallingCode&&n.isNonGeographicCallingCode(t.countryCallingCode))return!0;throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.')}function i(t,e){return\"IS_POSSIBLE\"===Object(a.a)(t,e)}},2421:function(t,e,n){\"use strict\";n.d(e,\"b\",(function(){return d})),n.d(e,\"a\",(function(){return i}));var r=n(2422);function a(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,a=!1,d=void 0;try{for(var i,o=t[Symbol.iterator]();!(r=(i=o.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(u){a=!0,d=u}finally{try{r||null==o.return||o.return()}finally{if(a)throw d}}return n}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}()}function d(t){var e,n,d=(t=t.replace(/^tel:/,\"tel=\")).split(\";\"),i=Array.isArray(d),o=0;for(d=i?d:d[Symbol.iterator]();;){var u;if(i){if(o>=d.length)break;u=d[o++]}else{if((o=d.next()).done)break;u=o.value}var $=a(u.split(\"=\"),2),l=$[0],c=$[1];switch(l){case\"tel\":e=c;break;case\"ext\":n=c;break;case\"phone-context\":\"+\"===c[0]&&(e=c+e)}}if(!Object(r.a)(e))return{};var s={number:e};return n&&(s.ext=n),s}function i(t){var e=t.number,n=t.ext;if(!e)return\"\";if(\"+\"!==e[0])throw new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');return\"tel:\".concat(e).concat(n?\";ext=\"+n:\"\")}},2422:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return l})),n.d(e,\"b\",(function(){return c}));var r=n(2347),a=n(2423),d=\"[\"+r.e+\"]{\"+r.c+\"}\",i=\"[\"+r.d+\"]{0,1}(?:[\"+r.f+\"]*[\"+r.e+\"]){3,}[\"+r.f+r.e+\"]*\",o=new RegExp(\"^[\"+r.d+\"]{0,1}(?:[\"+r.f+\"]*[\"+r.e+\"]){1,2}$\",\"i\"),u=i+\"(?:\"+Object(a.a)()+\")?\",$=new RegExp(\"^\"+d+\"$|^\"+u+\"$\",\"i\");function l(t){return t.length>=r.c&&$.test(t)}function c(t){return o.test(t)}},2423:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return d}));var r=n(2347),a=function(t){return\"([\".concat(r.e,\"]{1,\").concat(t,\"})\")};function d(t){var e=\"#?\";return\";ext=\"+a(\"20\")+\"|\"+(\"[ \\xa0\\\\t,]*(?:e?xt(?:ensi(?:o\\u0301?|\\xf3))?n?|\\uff45?\\uff58\\uff54\\uff4e?|\\u0434\\u043e\\u0431|anexo)[:\\\\.\\uff0e]?[ \\xa0\\\\t,-]*\"+a(\"20\")+e)+\"|\"+(\"[ \\xa0\\\\t,]*(?:[x\\uff58#\\uff03~\\uff5e]|int|\\uff49\\uff4e\\uff54)[:\\\\.\\uff0e]?[ \\xa0\\\\t,-]*\"+a(\"9\")+e)+\"|\"+(\"[- ]+\"+a(\"6\")+\"#\")+\"|\"+(\"[ \\xa0\\\\t]*(?:,{2}|;)[:\\\\.\\uff0e]?[ \\xa0\\\\t,-]*\"+a(\"15\")+e)+\"|\"+(\"[ \\xa0\\\\t]*(?:,)+[:\\\\.\\uff0e]?[ \\xa0\\\\t,-]*\"+a(\"9\")+e)}},2424:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return d}));var r=n(2342),a=/^\\d+$/;function d(t,e){var n=\"+\"+Object(r.b)(t,e);return(e=new r.a(e)).selectNumberingPlan(t),e.numberingPlan.leadingDigits()&&a.test(e.numberingPlan.leadingDigits())&&(n+=e.numberingPlan.leadingDigits()),n}},2425:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return a})),n.d(e,\"b\",(function(){return d}));var r=n(2342);function a(t){var e=t.country,n=t.international,a=t.withCountryCallingCode,d=t.metadata;return e&&n&&!a?\"+\".concat(Object(r.b)(e,d)):\"\"}function d(t,e){return e&&\" \"===(t=t.slice(e.length))[0]&&(t=t.slice(1)),t}},2426:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return r}));var r=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.name=this.constructor.name,this.message=e,this.stack=new Error(e).stack};r.prototype=Object.create(Error.prototype),r.prototype.constructor=r},2430:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return gt}));var r=n(2414),a=n(2556),d=(n(2557),n(2558)),i=(n(2559),n(2560)),o=n(2342),u=n(0),$=n.n(u),l=n(2530),c=n(64),s=n.n(c),f=s.a.shape({country_calling_codes:s.a.object.isRequired,countries:s.a.object.isRequired}),h=s.a.objectOf(s.a.string),g=n(10),m=n.n(g),y=n(2431),p=n(2438);function b(t){return String.fromCodePoint(127397+t.toUpperCase().charCodeAt(0))}function v(){return v=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},v.apply(this,arguments)}function C(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},d=Object.keys(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function O(t){var e=t.value,n=t.onChange,r=t.options,a=C(t,[\"value\",\"onChange\",\"options\"]),d=Object(u.useCallback)((function(t){var e=t.target.value;n(\"ZZ\"===e?void 0:e)}),[n]);Object(u.useMemo)((function(){return S(r,e)}),[r,e]);return $.a.createElement(\"select\",v({},a,{value:e||\"ZZ\",onChange:d}),r.map((function(t){var e=t.value,n=t.label,r=t.divider;return $.a.createElement(\"option\",{key:r?\"|\":e||\"ZZ\",value:r?\"|\":e||\"ZZ\",disabled:!!r,style:r?N:void 0},n)})))}O.propTypes={value:s.a.string,onChange:s.a.func.isRequired,options:s.a.arrayOf(s.a.shape({value:s.a.string,label:s.a.string,divider:s.a.bool})).isRequired};var N={fontSize:\"1px\",backgroundColor:\"currentColor\",color:\"inherit\"};function P(t){var e,n=t.value,r=t.options,a=t.className,d=t.iconComponent,i=(t.getIconAspectRatio,t.arrowComponent),o=t.unicodeFlags,l=C(t,[\"value\",\"options\",\"className\",\"iconComponent\",\"getIconAspectRatio\",\"arrowComponent\",\"unicodeFlags\"]),c=Object(u.useMemo)((function(){return S(r,n)}),[r,n]);return $.a.createElement(\"div\",{className:\"PhoneInputCountry\"},$.a.createElement(O,v({},l,{value:n,options:r,className:m()(\"PhoneInputCountrySelect\",a)})),o&&n&&$.a.createElement(\"div\",{className:\"PhoneInputCountryIconUnicode\"},b((e=n)[0])+b(e[1])),!(o&&n)&&$.a.createElement(d,{country:n,label:c&&c.label,aspectRatio:o?1:void 0}),$.a.createElement(i,null))}function S(t,e){var n=t,r=Array.isArray(n),a=0;for(n=r?n:n[Symbol.iterator]();;){var d;if(r){if(a>=n.length)break;d=n[a++]}else{if((a=n.next()).done)break;d=a.value}var i=d;if(!i.divider&&i.value===e)return i}}function x(){return x=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},x.apply(this,arguments)}function w(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},d=Object.keys(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function I(t){var e=t.country,n=t.countryName,r=t.flags,a=t.flagUrl,d=w(t,[\"country\",\"countryName\",\"flags\",\"flagUrl\"]);return r&&r[e]?r[e]({title:n}):$.a.createElement(\"img\",x({},d,{alt:n,role:n?void 0:\"presentation\",src:a.replace(\"{XX}\",e).replace(\"{xx}\",e.toLowerCase())}))}function E(){return E=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},E.apply(this,arguments)}function j(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},d=Object.keys(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function k(t){var e=t.aspectRatio,n=j(t,[\"aspectRatio\"]);return 1===e?$.a.createElement(T,n):$.a.createElement(A,n)}function A(t){var e=t.title,n=j(t,[\"title\"]);return $.a.createElement(\"svg\",E({},n,{xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 75 50\"}),$.a.createElement(\"title\",null,e),$.a.createElement(\"g\",{className:\"PhoneInputInternationalIconGlobe\",stroke:\"currentColor\",fill:\"none\",strokeWidth:\"2\",strokeMiterlimit:\"10\"},$.a.createElement(\"path\",{strokeLinecap:\"round\",d:\"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"}),$.a.createElement(\"path\",{d:\"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"}),$.a.createElement(\"line\",{x1:\"26\",y1:\"25\",x2:\"74\",y2:\"25\"}),$.a.createElement(\"line\",{x1:\"50\",y1:\"1\",x2:\"50\",y2:\"49\"}),$.a.createElement(\"path\",{strokeLinecap:\"round\",d:\"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"}),$.a.createElement(\"path\",{strokeLinecap:\"round\",d:\"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"})),$.a.createElement(\"path\",{className:\"PhoneInputInternationalIconPhone\",stroke:\"none\",fill:\"currentColor\",d:\"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"}))}function T(t){var e=t.title,n=j(t,[\"title\"]);return $.a.createElement(\"svg\",E({},n,{xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 50 50\"}),$.a.createElement(\"title\",null,e),$.a.createElement(\"g\",{className:\"PhoneInputInternationalIconGlobe\",stroke:\"currentColor\",fill:\"none\",strokeWidth:\"2\",strokeLinecap:\"round\"},$.a.createElement(\"path\",{d:\"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"}),$.a.createElement(\"path\",{d:\"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"}),$.a.createElement(\"path\",{d:\"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"}),$.a.createElement(\"path\",{d:\"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"}),$.a.createElement(\"line\",{x1:\"27.8\",y1:\"0.85\",x2:\"27.8\",y2:\"34.61\"}),$.a.createElement(\"line\",{x1:\"15.2\",y1:\"22.23\",x2:\"49.15\",y2:\"22.23\"})),$.a.createElement(\"path\",{className:\"PhoneInputInternationalIconPhone\",stroke:\"transparent\",fill:\"currentColor\",d:\"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"}))}function R(t,e){return!!Object(o.c)(t,e)||(console.error(\"Country not found: \".concat(t)),!1)}function F(t,e){return t&&0===(t=t.filter((function(t){return R(t,e)}))).length&&(t=void 0),t}function M(t){var e=t.flags,n=t.flagUrl,r=t.flagComponent,a=t.internationalIcon;function d(t){var d=t.country,i=t.label,o=t.aspectRatio,u=a===k?o:void 0;return $.a.createElement(\"div\",{className:m()(\"PhoneInputCountryIcon\",{\"PhoneInputCountryIcon--square\":1===u,\"PhoneInputCountryIcon--border\":d})},d?$.a.createElement(r,{country:d,countryName:i,flags:e,flagUrl:n,className:\"PhoneInputCountryIconImg\"}):$.a.createElement(a,{title:i,aspectRatio:u,className:\"PhoneInputCountryIconImg\"}))}return d.propTypes={country:s.a.string,label:s.a.string.isRequired,aspectRatio:s.a.number},d}P.propTypes={iconComponent:s.a.elementType,arrowComponent:s.a.elementType.isRequired,unicodeFlags:s.a.bool},P.defaultProps={arrowComponent:function(){return $.a.createElement(\"div\",{className:\"PhoneInputCountrySelectArrow\"})}},I.propTypes={country:s.a.string.isRequired,countryName:s.a.string.isRequired,flags:s.a.objectOf(s.a.elementType),flagUrl:s.a.string.isRequired},k.propTypes={title:s.a.string.isRequired,aspectRatio:s.a.number},A.propTypes={title:s.a.string.isRequired},T.propTypes={title:s.a.string.isRequired};M({flagUrl:\"https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg\",flagComponent:I,internationalIcon:k});var D=n(2547),L=n(2424);function B(t,e){return Object(a.a)(t||\"\",e)}function G(t,e){var n=e.prevCountry,r=e.newCountry,a=e.metadata,d=e.useNationalFormat;if(n===r)return t;if(!t)return d?\"\":Object(L.a)(r,a);if(r){if(\"+\"===t[0]){if(d)return 0===t.indexOf(\"+\"+Object(o.b)(r,a))?function(t,e,n){if(e){var r=\"+\"+Object(o.b)(e,n);if(t.length<r.length){if(0===r.indexOf(t))return\"\"}else if(0===t.indexOf(r))return t.slice(r.length)}for(var a=0,d=Object.keys(n.country_calling_codes);a<d.length;a++){var i=d[a];if(t.indexOf(i)===\"+\".length)return t.slice(\"+\".length+i.length)}return\"\"}(t,r,a):\"\";if(n){var i=Object(L.a)(r,a);return 0===t.indexOf(i)?t:i}var u=Object(L.a)(r,a);return 0===t.indexOf(u)?t:u}}else if(\"+\"!==t[0])return _(t,n,a)||\"\";return t}function _(t,e,n){if(t){if(\"+\"===t[0]){if(\"+\"===t)return;var r=new D.a(e,n);return r.input(t),r.getNumberValue()}if(e){var a=H(t,e,n);return\"+\".concat(Object(o.b)(e,n)).concat(a||\"\")}}}function U(t,e,n){var r=H(t,e,n);if(r){var a=r.length-function(t,e){return(e=new o.a(e)).selectNumberingPlan(t),e.numberingPlan.possibleLengths()[e.numberingPlan.possibleLengths().length-1]}(e,n);if(a>0)return t.slice(0,t.length-a)}return t}function K(t,e){var n=e.country,r=e.countries,a=e.required,d=e.metadata;if(\"+\"===t)return n;var i=function(t,e){var n=new D.a(null,e);return n.input(t),n.getCountry()}(t,d);return i&&(!r||r.indexOf(i)>=0)?i:!n||a||q(t,n,d)?n:void 0}function V(t,e,n){if(0===t.indexOf(Object(L.a)(e,n))){var r=new D.a(e,n);r.input(t);var a=r.getNumber();return a?a.formatNational().replace(/\\D/g,\"\"):\"\"}return t.replace(/\\D/g,\"\")}function W(t,e,n){return String.prototype.localeCompare?t.localeCompare(e,n):t<e?-1:t>e?1:0}function H(t,e,n){var r=new D.a(e,n);r.input(t);var a=r.getNumber();return a&&a.nationalNumber}function q(t,e,n){for(var r=Object(L.a)(e,n),a=0;a<t.length&&a<r.length;){if(t[a]!==r[a])return!1;a++}return!0}function Z(t){var e=t.value,n=t.phoneNumber,r=t.defaultCountry,a=t.international,d=t.useNationalFormat,i=t.metadata;return(!1===a||d)&&n&&n.country?function(t){return t.formatNational().replace(/\\D/g,\"\")}(n):!e&&a&&r?Object(L.a)(r,i):e}function J(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Y(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?J(Object(n),!0).forEach((function(e){X(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):J(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function X(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function z(t){return z=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},z(t)}function Q(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function tt(){return tt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},tt.apply(this,arguments)}function et(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},d=Object.keys(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function nt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function rt(t){return rt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},rt(t)}function at(t){if(void 0===t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return t}function dt(t,e){return dt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},dt(t,e)}function it(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ot=function(t){function e(t){var n;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,e),n=function(t,e){return!e||\"object\"!==z(e)&&\"function\"!==typeof e?at(t):e}(this,rt(e).call(this,t)),it(at(n),\"inputRef\",$.a.createRef()),it(at(n),\"setInputRef\",(function(t){n.inputRef.current=t;var e=n.props.inputRef;e&&(\"function\"===typeof e?e(t):e.current=t)})),it(at(n),\"isCountrySupportedWithError\",(function(t){return R(t,n.props.metadata)})),it(at(n),\"onCountryChange\",(function(t){var e=n.props,r=e.international,a=e.metadata,d=e.onChange,i=e.focusInputOnCountrySelection,o=n.state,u=G(o.phoneDigits,{prevCountry:o.country,newCountry:t,metadata:a,useNationalFormat:!r}),$=_(u,t,a);i&&n.inputRef.current.focus(),n.setState({country:t,hasUserSelectedACountry:!0,phoneDigits:u,value:$},(function(){d($)}))})),it(at(n),\"onChange\",(function(t){var e=n.props,r=e.defaultCountry,a=e.onChange,d=e.addInternationalOption,i=e.international,o=e.limitMaxLength,u=e.countryCallingCodeEditable,$=e.metadata,l=n.state,c=l.countries,s=function(t,e){var n,r=e.prevPhoneDigits,a=e.country,d=e.defaultCountry,i=e.countryRequired,o=e.getAnyCountry,u=e.countries,$=e.international,l=e.limitMaxLength,c=e.countryCallingCodeEditable,s=e.metadata;if($&&!1===c){var f,h=Object(L.a)(a,s);if(0!==t.indexOf(h))return t&&\"+\"!==t[0]?f=_(t=h+t,a,s):t=h,{phoneDigits:t,value:f,country:a}}return!1===$&&a&&t&&\"+\"===t[0]&&(t=V(t,a,s)),t&&a&&l&&(t=U(t,a,s)),!t||\"+\"===t[0]||a&&!$||(t=\"+\"+t),!t&&r&&\"+\"===r[0]&&(a=$?void 0:d),\"+\"===t&&r&&\"+\"===r[0]&&r.length>\"+\".length&&(a=void 0),t&&(n=\"+\"===t[0]&&(\"+\"===t||a&&0===Object(L.a)(a,s).indexOf(t))?void 0:_(t,a,s)),n&&(a=K(n,{country:a,countries:u,metadata:s}),!1===$&&a&&t&&\"+\"===t[0]&&(n=_(t=V(t,a,s),a,s))),!a&&i&&(a=d||o()),{phoneDigits:t,country:a,value:n}}(t,{prevPhoneDigits:l.phoneDigits,country:l.country,countryRequired:!d,defaultCountry:r,getAnyCountry:function(){return n.getFirstSupportedCountry({countries:c})},countries:c,international:i,limitMaxLength:o,countryCallingCodeEditable:u,metadata:$}),f=s.phoneDigits,h=s.country,g=s.value,m={phoneDigits:f,value:g,country:h};!1===u&&(g||f!==n.state.phoneDigits||(m.forceRerender={})),n.setState(m,(function(){return a(g)}))})),it(at(n),\"_onFocus\",(function(){return n.setState({isFocused:!0})})),it(at(n),\"_onBlur\",(function(){return n.setState({isFocused:!1})})),it(at(n),\"onFocus\",(function(t){n._onFocus();var e=n.props.onFocus;e&&e(t)})),it(at(n),\"onBlur\",(function(t){var e=n.props.onBlur;n._onBlur(),e&&e(t)})),it(at(n),\"onCountryFocus\",(function(t){n._onFocus();var e=n.props.countrySelectProps;if(e){var r=e.onFocus;r&&r(t)}})),it(at(n),\"onCountryBlur\",(function(t){n._onBlur();var e=n.props.countrySelectProps;if(e){var r=e.onBlur;r&&r(t)}}));var r=n.props,a=r.value,d=(r.labels,r.international),o=r.addInternationalOption,u=r.displayInitialValueAsLocalNumber,l=r.initialValueFormat,c=r.metadata,s=n.props,f=s.defaultCountry,h=s.countries;f&&(n.isCountrySupportedWithError(f)||(f=void 0)),h=F(h,c);var g=B(a,c);n.CountryIcon=M(n.props);var m=function(t){var e,n=t.value,r=t.phoneNumber,a=t.defaultCountry,d=t.getAnyCountry,i=t.countries,o=t.required,u=t.metadata;return r&&r.country?e=r.country:a&&(n&&!q(n,a,u)||(e=a)),i&&i.indexOf(e)<0&&(e=void 0),!e&&o&&i&&i.length>0&&(e=d()),e}({value:a,phoneNumber:g,defaultCountry:f,required:!o,countries:h||Object(i.a)(c),getAnyCountry:function(){return n.getFirstSupportedCountry({countries:h})},metadata:c});return n.state={props:n.props,country:m,countries:h,phoneDigits:Z({value:a,phoneNumber:g,defaultCountry:f,international:d,useNationalFormat:u||\"national\"===l,metadata:c}),value:a},n}var n,r,a;return function(t,e){if(\"function\"!==typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&dt(t,e)}(e,t),n=e,a=[{key:\"getDerivedStateFromProps\",value:function(t,e){return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Q(Object(n),!0).forEach((function(e){it(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Q(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({props:t},function(t,e,n){var r=t.metadata,a=t.countries,d=t.defaultCountry,i=t.value,o=t.reset,u=t.international,$=t.displayInitialValueAsLocalNumber,l=t.initialValueFormat,c=e.defaultCountry,s=e.value,f=e.reset,h=(n.country,n.value),g=n.hasUserSelectedACountry,m=function(t){return Z(Y({},t,{international:u,useNationalFormat:$||\"national\"===l,metadata:r}))};if(o!==f)return{phoneDigits:m({value:void 0,defaultCountry:d}),value:void 0,country:d,hasUserSelectedACountry:void 0};if(d!==c){var y=!d||R(d,r),p=!h||u&&h===m({value:void 0,defaultCountry:c});if(!g&&y&&!i&&p)return{country:d,phoneDigits:m({value:void 0,defaultCountry:d}),value:void 0}}if(i!==s&&i!==h){var b,v,C;if(i){b=B(i,r);var O=F(a,r);b&&b.country?(!O||O.indexOf(b.country)>=0)&&(v=b.country):v=K(i,{country:void 0,countries:O,metadata:r})}return i||(C={hasUserSelectedACountry:void 0}),Y({},C,{phoneDigits:m({phoneNumber:b,value:i,defaultCountry:d}),value:i,country:i?v:d})}}(t,e.props,e))}}],(r=[{key:\"componentDidMount\",value:function(){var t=this.props.onCountryChange,e=this.props.defaultCountry,n=this.state.country;t&&(e&&(this.isCountrySupportedWithError(e)||(e=void 0)),n!==e&&t(n))}},{key:\"componentDidUpdate\",value:function(t,e){var n=this.props.onCountryChange,r=this.state.country;n&&r!==e.country&&n(r)}},{key:\"getCountrySelectOptions\",value:function(t){var e,n,r=t.countries,a=this.props,d=a.international,o=a.countryCallingCodeEditable,u=a.countryOptionsOrder,$=a.addInternationalOption,l=a.labels,c=a.locales,s=a.metadata;return e=function(){return function(t,e){if(!e)return t;var n=[],r=[],a=n,d=e,i=Array.isArray(d),o=0;for(d=i?d:d[Symbol.iterator]();;){var u;if(i){if(o>=d.length)break;u=d[o++]}else{if((o=d.next()).done)break;u=o.value}var $=u;\"|\"===$?a.push({divider:!0}):\"...\"===$||\"\\u2026\"===$?a=r:function(){var e=void 0;e=\"\\ud83c\\udf10\"===$?void 0:$;var n=t.indexOf(t.filter((function(t){return t.value===e}))[0]),r=t[n];t.splice(n,1),a.push(r)}()}return n.concat(t).concat(r)}(function(t){var e=t.countries,n=t.countryNames,r=t.addInternationalOption,a=t.compareStringsLocales,d=t.compareStrings;d||(d=W);var i=e.map((function(t){return{value:t,label:n[t]||t}}));return i.sort((function(t,e){return d(t.label,e.label,a)})),r&&i.unshift({label:n.ZZ}),i}({countries:r||Object(i.a)(s),countryNames:l,addInternationalOption:(!d||!1!==o)&&$,compareStringsLocales:c}),function(t,e){if(t&&(t=t.filter((function(t){switch(t){case\"\\ud83c\\udf10\":case\"|\":case\"...\":case\"\\u2026\":return!0;default:return R(t,e)}}))).length>0)return t}(u,s))},n=[r,u,$,l,s],lt&&function(t,e){if(t.length!==e.length)return!1;for(var n=0;n<t.length;){if(t[n]!==e[n])return!1;n++}return!0}(n,lt)||($t=e(),lt=n),$t}},{key:\"getFirstSupportedCountry\",value:function(t){var e=t.countries;return this.getCountrySelectOptions({countries:e})[0].value}},{key:\"render\",value:function(){var t=this.props,e=t.name,n=t.disabled,r=t.autoComplete,a=t.style,d=t.className,i=(t.inputRef,t.inputComponent),o=t.numberInputProps,u=t.smartCaret,l=t.countrySelectComponent,c=t.countrySelectProps,s=t.containerComponent,f=(t.defaultCountry,t.countries,t.countryOptionsOrder,t.labels),h=(t.flags,t.flagComponent,t.flagUrl,t.addInternationalOption,t.internationalIcon,t.displayInitialValueAsLocalNumber,t.initialValueFormat,t.onCountryChange,t.limitMaxLength,t.countryCallingCodeEditable,t.focusInputOnCountrySelection,t.reset,t.metadata),g=(t.international,t.locales,et(t,[\"name\",\"disabled\",\"autoComplete\",\"style\",\"className\",\"inputRef\",\"inputComponent\",\"numberInputProps\",\"smartCaret\",\"countrySelectComponent\",\"countrySelectProps\",\"containerComponent\",\"defaultCountry\",\"countries\",\"countryOptionsOrder\",\"labels\",\"flags\",\"flagComponent\",\"flagUrl\",\"addInternationalOption\",\"internationalIcon\",\"displayInitialValueAsLocalNumber\",\"initialValueFormat\",\"onCountryChange\",\"limitMaxLength\",\"countryCallingCodeEditable\",\"focusInputOnCountrySelection\",\"reset\",\"metadata\",\"international\",\"locales\"])),b=this.state,v=b.country,C=b.countries,O=b.phoneDigits,N=b.isFocused,P=u?y.a:p.a,S=this.getCountrySelectOptions({countries:C});return $.a.createElement(s,{style:a,className:m()(d,\"PhoneInput\",{\"PhoneInput--focus\":N})},$.a.createElement(l,tt({name:e?\"\".concat(e,\"Country\"):void 0,\"aria-label\":f.country},c,{value:v,options:S,onChange:this.onCountryChange,onFocus:this.onCountryFocus,onBlur:this.onCountryBlur,disabled:n||c&&c.disabled,iconComponent:this.CountryIcon})),$.a.createElement(P,tt({ref:this.setInputRef,type:\"tel\",autoComplete:r},o,g,{name:e,metadata:h,country:v,value:O||\"\",onChange:this.onChange,onFocus:this.onFocus,onBlur:this.onBlur,disabled:n,inputComponent:i,className:m()(\"PhoneInputInput\",o&&o.className,g.className)})))}}])&&nt(n.prototype,r),a&&nt(n,a),e}($.a.PureComponent),ut=$.a.forwardRef((function(t,e){return $.a.createElement(ot,tt({},t,{inputRef:e}))}));ut.propTypes={value:s.a.string,onChange:s.a.func.isRequired,onFocus:s.a.func,onBlur:s.a.func,disabled:s.a.bool,autoComplete:s.a.string.isRequired,initialValueFormat:s.a.oneOf([\"national\"]),displayInitialValueAsLocalNumber:s.a.bool,defaultCountry:s.a.string,countries:s.a.arrayOf(s.a.string),labels:h.isRequired,locales:s.a.oneOfType([s.a.string,s.a.arrayOf(s.a.string)]),flagUrl:s.a.string.isRequired,flags:s.a.objectOf(s.a.elementType),flagComponent:s.a.elementType.isRequired,addInternationalOption:s.a.bool.isRequired,internationalIcon:s.a.elementType.isRequired,countryOptionsOrder:s.a.arrayOf(s.a.string),style:s.a.object,className:s.a.string,countrySelectComponent:s.a.elementType.isRequired,countrySelectProps:s.a.object,inputComponent:s.a.elementType.isRequired,containerComponent:s.a.elementType.isRequired,numberInputProps:s.a.object,smartCaret:s.a.bool.isRequired,international:s.a.bool,limitMaxLength:s.a.bool.isRequired,countryCallingCodeEditable:s.a.bool.isRequired,metadata:f.isRequired,onCountryChange:s.a.func,focusInputOnCountrySelection:s.a.bool.isRequired},ut.defaultProps={autoComplete:\"tel\",countrySelectComponent:P,flagComponent:I,flagUrl:\"https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg\",internationalIcon:k,inputComponent:\"input\",containerComponent:\"div\",reset:s.a.any,smartCaret:!0,addInternationalOption:!0,limitMaxLength:!1,countryCallingCodeEditable:!0,focusInputOnCountrySelection:!0};var $t,lt,ct=ut;function st(){return st=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},st.apply(this,arguments)}function ft(t){var e=$.a.forwardRef((function(t,e){return $.a.createElement(ct,st({ref:e},t))}));return e.propTypes={metadata:f.isRequired,labels:h.isRequired},e.defaultProps={metadata:t,labels:l},e}ft();function ht(t,e){var n=Array.prototype.slice.call(e);return n.push(r),t.apply(this,n)}ft(r);function gt(){return ht(d.a,arguments)}},2431:function(t,e,n){\"use strict\";var r=n(0),a=n.n(r),d=n(64),i=n.n(d);function o(t,e){var n=0,r=e.split(\"\"),a=Array.isArray(r),d=0;for(r=a?r:r[Symbol.iterator]();;){var i;if(a){if(d>=r.length)break;i=r[d++]}else{if((d=r.next()).done)break;i=d.value}i===t&&n++}return n}function u(t,e){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"x\",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:\" \",a=t.length,d=o(\"(\",t),i=o(\")\",t),u=d-i;u>0&&a<e.length;)t+=e[a].replace(n,r),\")\"===e[a]&&u--,a++;return t}function $(t,e,n){\"string\"===typeof n&&(n=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"x\",n=arguments.length>2?arguments[2]:void 0;if(!t)return function(t){return{text:t}};var r=o(e,t);return function(a){if(!a)return{text:\"\",template:t};var d=0,i=\"\",o=t.split(\"\"),$=Array.isArray(o),l=0;for(o=$?o:o[Symbol.iterator]();;){var c;if($){if(l>=o.length)break;c=o[l++]}else{if((l=o.next()).done)break;c=l.value}var s=c;if(s===e){if(i+=a[d],++d===a.length&&a.length<r)break}else i+=s}return n&&(i=u(i,t)),{text:i,template:t}}}(n));var r=n(t)||{},a=r.text,d=r.template;if(void 0===a&&(a=t),d)if(void 0===e)e=a.length;else{for(var i=0,$=!1,l=-1;i<a.length&&i<d.length;){if(a[i]!==d[i]){if(0===e){$=!0,e=i;break}l=i,e--}i++}$||(e=l+1)}return{text:a,caret:e}}function l(t){return t.hasAttribute(\"readonly\")}function c(t){if(t.selectionStart!==t.selectionEnd)return{start:t.selectionStart,end:t.selectionEnd}}var s=8,f=46;function h(t,e){void 0!==e&&(!function(){if(\"undefined\"!==typeof navigator)return g.test(navigator.userAgent)}()?t.setSelectionRange(e,e):setTimeout((function(){return t.setSelectionRange(e,e)}),0))}var g=/Android/i;function m(t,e,n,r,a){if(!l(e)){var d=function(t){switch(t.keyCode){case s:return\"Backspace\";case f:return\"Delete\"}}(t);switch(d){case\"Delete\":case\"Backspace\":t.preventDefault();var i=c(e);return i?(y(e,i),p(e,n,r,void 0,a)):p(e,n,r,d,a)}}}function y(t,e){var n=t.value;n=n.slice(0,e.start)+n.slice(e.end),t.value=n,h(t,e.start)}function p(t,e,n,r,a){var d=function(t,e,n){for(var r=\"\",a=0,d=0;d<t.length;){var i=n(t[d],r);void 0!==i&&(r+=i,void 0!==e&&(e===d?a=r.length-1:e>d&&(a=r.length))),d++}return void 0===e&&(a=r.length),{value:r,caret:a}}(t.value,t.selectionStart,e),i=d.value,o=d.caret;if(r){var u=function(t,e,n){switch(n){case\"Backspace\":e>0&&(t=t.slice(0,e-1)+t.slice(e),e--);break;case\"Delete\":t=t.slice(0,e)+t.slice(e+1)}return{value:t,caret:e}}(i,o,r);i=u.value,o=u.caret}var l=$(i,o,n),c=l.text;o=l.caret,t.value=c,h(t,o),a(i)}function b(){return b=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},b.apply(this,arguments)}function v(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},d=Object.keys(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function C(t,e){var n=t.value,d=t.parse,i=t.format,o=t.inputComponent,u=t.onChange,$=t.onKeyDown,l=v(t,[\"value\",\"parse\",\"format\",\"inputComponent\",\"onChange\",\"onKeyDown\"]),c=Object(r.useRef)(),s=Object(r.useCallback)((function(t){c.current=t,e&&(\"function\"===typeof e?e(t):e.current=t)}),[e]),f=Object(r.useCallback)((function(t){p(c.current,d,i,void 0,u)}),[c,d,i,u]),h=Object(r.useCallback)((function(t){return $&&$(t),m(t,c.current,d,i,u)}),[c,d,i,u,$]);return a.a.createElement(o,b({},l,{ref:s,value:i(N(n)?\"\":n).text,onKeyDown:h,onChange:f}))}(C=a.a.forwardRef(C)).propTypes={parse:i.a.func.isRequired,format:i.a.func.isRequired,inputComponent:i.a.elementType.isRequired,type:i.a.string.isRequired,value:i.a.string,onChange:i.a.func.isRequired,onKeyDown:i.a.func,onCut:i.a.func,onPaste:i.a.func},C.defaultProps={inputComponent:\"input\",type:\"text\"};var O=C;function N(t){return void 0===t||null===t}var P=n(2547),S=n(2529),x=n(2425);function w(){return w=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},w.apply(this,arguments)}function I(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},d=Object.keys(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}e.a=function(t){function e(t,e){var n=t.country,d=t.international,i=t.withCountryCallingCode,o=t.metadata,u=I(t,[\"country\",\"international\",\"withCountryCallingCode\",\"metadata\"]),$=Object(r.useCallback)((function(t){var e=new P.a(n,o),r=Object(x.a)({country:n,international:d,withCountryCallingCode:i,metadata:o}),a=e.input(r+t),u=e.getTemplate();return r&&(a=Object(x.b)(a,r),u&&(u=Object(x.b)(u,r))),{text:a,template:u}}),[n,o]);return a.a.createElement(O,w({},u,{ref:e,parse:S.b,format:$}))}return(e=a.a.forwardRef(e)).propTypes={value:i.a.string.isRequired,onChange:i.a.func.isRequired,country:i.a.string,international:i.a.bool,withCountryCallingCode:i.a.bool,metadata:i.a.object.isRequired},e.defaultProps={metadata:t},e}()},2432:function(t,e,n){\"use strict\";var r=n(2414),a=(n(2556),n(2557),n(2558),n(2559),n(2560),n(2342)),d=n(0),i=n.n(d),o=n(64),u=n.n(o),$=n(2547),l=n(2361),c=n(2424);function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t))&&\"[object Arguments]\"!==Object.prototype.toString.call(t))return;var n=[],r=!0,a=!1,d=void 0;try{for(var i,o=t[Symbol.iterator]();!(r=(i=o.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(u){a=!0,d=u}finally{try{r||null==o.return||o.return()}finally{if(a)throw d}}return n}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}()}function f(t){var e=this,n=t.value,r=t.onChange,i=t.country,o=t.defaultCountry,u=t.international,f=t.withCountryCallingCode,h=t.useNationalFormatForDefaultCountryValue,g=t.metadata,m=Object(d.useRef)(),y=function(t,e,n){console.error(\"[react-phone-number-input] Expected phone number \".concat(t,\" to correspond to country \").concat(e,\" but \").concat(n?\"in reality it corresponds to country \"+n:\"it doesn't\",\".\")),m.current=!0},p=function(t){return function(t,e,n,r,d,i,o,u){if(e&&n&&r){var s=Object(c.a)(e,o);return t?(0!==t.indexOf(s)&&u(t,e),t):s}if(!t)return\"\";if(!e&&!d)return t;var f=new $.a(void 0,o);f.input(t);var h=f.getNumber();return h?e?(h.country&&h.country!==e?u(t,e,h.country):h.countryCallingCode!==Object(a.b)(e,o)&&u(t,e),n?h.nationalNumber:Object(l.a)(h.formatNational())):h.countryCallingCode&&h.countryCallingCode===Object(a.b)(d,o)&&i?Object(l.a)(h.formatNational()):t:\"\"}(n,i,u,f,o,h,g,(function(){t&&t.onCountryMismatch&&t.onCountryMismatch();for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];y.apply(e,r)}))},b=s(Object(d.useState)(i),2),v=b[0],C=b[1],O=s(Object(d.useState)(o),2),N=O[0],P=O[1],S=s(Object(d.useState)(p()),2),x=S[0],w=S[1],I=s(Object(d.useState)(n),2),E=I[0],j=I[1],k=s(Object(d.useState)(),2),A=(k[0],k[1]),T=Object(d.useCallback)((function(){return A({})}),[A]);function R(t){if(t){i&&u&&!f&&(t=\"+\".concat(Object(a.b)(i,g)).concat(t));var e=new $.a(i||o,g);return e.input(t),e.getNumberValue()}}Object(d.useEffect)((function(){n!==E&&(j(n),w(p()))}),[n]),Object(d.useEffect)((function(){if(i!==v){var t;C(i);var e=p({onCountryMismatch:function(){t=!0}});w(e),t&&j(R(e))}}),[i]),Object(d.useEffect)((function(){o!==N&&(P(o),w(p()))}),[o]),Object(d.useEffect)((function(){E!==n&&r(E)}),[E]);var F=Object(d.useCallback)((function(t){var e;if(i)if(u&&f){var n=Object(c.a)(i,g);if(0!==t.indexOf(n))if(t&&\"+\"!==t[0])t=n+t;else if(!m.current)return w(n),j(void 0),T()}else t&&\"+\"===t[0]&&(t=t.slice(1));else o||t&&\"+\"!==t[0]&&(t=\"+\"+t);t&&(e=R(t)),w(t),j(e)}),[i,u,f,o,g,w,j,T,m]);return[x,F]}function h(){return h=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},h.apply(this,arguments)}function g(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t))&&\"[object Arguments]\"!==Object.prototype.toString.call(t))return;var n=[],r=!0,a=!1,d=void 0;try{for(var i,o=t[Symbol.iterator]();!(r=(i=o.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(u){a=!0,d=u}finally{try{r||null==o.return||o.return()}finally{if(a)throw d}}return n}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}()}function m(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},d=Object.keys(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function y(t,e){var n=t.Component,r=t.country,a=t.defaultCountry,d=t.useNationalFormatForDefaultCountryValue,o=t.value,u=t.onChange,$=t.metadata,l=t.international,c=t.withCountryCallingCode,s=m(t,[\"Component\",\"country\",\"defaultCountry\",\"useNationalFormatForDefaultCountryValue\",\"value\",\"onChange\",\"metadata\",\"international\",\"withCountryCallingCode\"]),y=g(f({value:o,onChange:u,country:r,defaultCountry:a,international:l,withCountryCallingCode:c,useNationalFormatForDefaultCountryValue:d,metadata:$}),2),p=y[0],b=y[1];return i.a.createElement(n,h({},s,{ref:e,metadata:$,international:l,withCountryCallingCode:c,country:r||a,value:p,onChange:b}))}(y=i.a.forwardRef(y)).propTypes={value:u.a.string,onChange:u.a.func.isRequired,country:u.a.string,defaultCountry:u.a.string,international:u.a.bool,withCountryCallingCode:u.a.bool,Component:u.a.elementType.isRequired,useNationalFormatForDefaultCountryValue:u.a.bool.isRequired,metadata:u.a.object.isRequired},y.defaultProps={useNationalFormatForDefaultCountryValue:!0};var p=y,b=n(2431),v=n(2438);function C(){return C=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},C.apply(this,arguments)}function O(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},d=Object.keys(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function N(t){function e(t,e){var n=t.smartCaret,r=O(t,[\"smartCaret\"]);return i.a.createElement(p,C({},r,{ref:e,Component:n?b.a:v.a}))}return(e=i.a.forwardRef(e)).propTypes={type:u.a.string,autoComplete:u.a.string,smartCaret:u.a.bool.isRequired,metadata:u.a.object.isRequired},e.defaultProps={type:\"tel\",autoComplete:\"tel\",smartCaret:!0,metadata:t},e}N();e.a=N(r)},2433:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return y}));var r=n(2342),a=n(2420),d=n(2353),i=n(2382);var o=n(2379),u=/^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;var $=n(2421);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var c={formatExtension:function(t,e,n){return\"\".concat(t).concat(n.ext()).concat(e)}};function s(t,e,n,a){if(n=n?function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);\"function\"===typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){l(t,e,n[e])}))}return t}({},c,n):c,a=new r.a(a),t.country&&\"001\"!==t.country){if(!a.hasCountry(t.country))throw new Error(\"Unknown country: \".concat(t.country));a.country(t.country)}else{if(!t.countryCallingCode)return t.phone||\"\";a.selectNumberingPlan(t.countryCallingCode)}var d,i=a.countryCallingCode(),o=n.v2?t.nationalNumber:t.phone;switch(e){case\"NATIONAL\":return o?h(d=f(o,t.carrierCode,\"NATIONAL\",a,n),t.ext,a,n.formatExtension):\"\";case\"INTERNATIONAL\":return o?(d=f(o,null,\"INTERNATIONAL\",a,n),h(d=\"+\".concat(i,\" \").concat(d),t.ext,a,n.formatExtension)):\"+\".concat(i);case\"E.164\":return\"+\".concat(i).concat(o);case\"RFC3966\":return Object($.a)({number:\"+\".concat(i).concat(o),ext:t.ext});case\"IDD\":if(!n.fromCountry)return;var s=function(t,e,n,a,d){if(Object(r.b)(a,d.metadata)===n){var i=f(t,e,\"NATIONAL\",d);return\"1\"===n?n+\" \"+i:i}var o=function(t,e,n){var a=new r.a(n);return a.selectNumberingPlan(t,e),a.defaultIDDPrefix()?a.defaultIDDPrefix():u.test(a.IDDPrefix())?a.IDDPrefix():void 0}(a,void 0,d.metadata);if(o)return\"\".concat(o,\" \").concat(n,\" \").concat(f(t,null,\"INTERNATIONAL\",d))}(o,t.carrierCode,i,n.fromCountry,a);return h(s,t.ext,a,n.formatExtension);default:throw new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"'.concat(e,'\"'))}}function f(t,e,n,r,a){var i=function(t,e){var n=t,r=Array.isArray(n),a=0;for(n=r?n:n[Symbol.iterator]();;){var i;if(r){if(a>=n.length)break;i=n[a++]}else{if((a=n.next()).done)break;i=a.value}var o=i;if(o.leadingDigitsPatterns().length>0){var u=o.leadingDigitsPatterns()[o.leadingDigitsPatterns().length-1];if(0!==e.search(u))continue}if(Object(d.a)(e,o.pattern()))return o}}(r.formats(),t);return i?Object(o.b)(t,i,{useInternationalFormat:\"INTERNATIONAL\"===n,withNationalPrefix:!i.nationalPrefixIsOptionalWhenFormattingInNationalFormat()||!a||!1!==a.nationalPrefix,carrierCode:e,metadata:r}):t}function h(t,e,n,r){return e?r(t,e,n):t}function g(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function m(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var y=function(){function t(e,n,a){if(function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),!e)throw new TypeError(\"`country` or `countryCallingCode` not passed\");if(!n)throw new TypeError(\"`nationalNumber` not passed\");if(!a)throw new TypeError(\"`metadata` not passed\");var d=new r.a(a);p(e)&&(this.country=e,d.country(e),e=d.countryCallingCode()),this.countryCallingCode=e,this.nationalNumber=n,this.number=\"+\"+this.countryCallingCode+this.nationalNumber,this.metadata=a}var e,n,o;return e=t,n=[{key:\"setExt\",value:function(t){this.ext=t}},{key:\"isPossible\",value:function(){return Object(a.a)(this,{v2:!0},this.metadata)}},{key:\"isValid\",value:function(){return function(t,e,n){if(e=e||{},n=new r.a(n),!t.country)return!1;if(n.selectNumberingPlan(t.country,t.countryCallingCode),n.hasTypes())return void 0!==Object(i.a)(t,e,n.metadata);var a=e.v2?t.nationalNumber:t.phone;return Object(d.a)(a,n.nationalNumberPattern())}(this,{v2:!0},this.metadata)}},{key:\"isNonGeographic\",value:function(){return new r.a(this.metadata).isNonGeographicCallingCode(this.countryCallingCode)}},{key:\"isEqual\",value:function(t){return this.number===t.number&&this.ext===t.ext}},{key:\"getType\",value:function(){return Object(i.a)(this,{v2:!0},this.metadata)}},{key:\"format\",value:function(t,e){return s(this,t,e?function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);\"function\"===typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){g(t,e,n[e])}))}return t}({},e,{v2:!0}):{v2:!0},this.metadata)}},{key:\"formatNational\",value:function(t){return this.format(\"NATIONAL\",t)}},{key:\"formatInternational\",value:function(t){return this.format(\"INTERNATIONAL\",t)}},{key:\"getURI\",value:function(t){return this.format(\"RFC3966\",t)}}],n&&m(e.prototype,n),o&&m(e,o),t}(),p=function(t){return/^[A-Z]{2}$/.test(t)}},2434:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return C}));var r=n(2347),a=n(2426),d=n(2342),i=n(2422),o=n(2423),u=new RegExp(\"(?:\"+Object(o.a)()+\")$\",\"i\");var $=n(2529),l=n(2420),c=n(2421),s=n(2433),f=n(2353),h=n(2416),g=n(2417),m=n(2419),y=new RegExp(\"[\"+r.d+r.e+\"]\"),p=new RegExp(\"[^\"+r.e+\"#]+$\");function b(t,e,n){if(e=e||{},n=new d.a(n),e.defaultCountry&&!n.hasCountry(e.defaultCountry)){if(e.v2)throw new a.a(\"INVALID_COUNTRY\");throw new Error(\"Unknown country: \".concat(e.defaultCountry))}var o=function(t,e,n){if(t&&0===t.indexOf(\"tel:\"))return Object(c.b)(t);var r=function(t,e,n){if(!t)return;if(t.length>250){if(n)throw new a.a(\"TOO_LONG\");return}if(!1===e)return t;var r=t.search(y);if(r<0)return;return t.slice(r).replace(p,\"\")}(t,n,e);if(!r)return{};if(!Object(i.a)(r))return Object(i.b)(r)?{error:\"TOO_SHORT\"}:{};var d=function(t){var e=t.search(u);if(e<0)return{};for(var n=t.slice(0,e),r=t.match(u),a=1;a<r.length;){if(r[a])return{number:n,ext:r[a]};a++}}(r);if(d.ext)return d;return{number:r}}(t,e.v2,e.extract),b=o.number,v=o.ext,C=o.error;if(!b){if(e.v2){if(\"TOO_SHORT\"===C)throw new a.a(\"TOO_SHORT\");throw new a.a(\"NOT_A_NUMBER\")}return{}}var O=function(t,e,n,r){var a,i=Object(h.a)(Object($.a)(t),e,n,r.metadata),o=i.countryCallingCode,u=i.number;if(o)r.selectNumberingPlan(o);else{if(!u||!e&&!n)return{};r.selectNumberingPlan(e,n),e&&(a=e),o=n||Object(d.b)(e,r.metadata)}if(!u)return{countryCallingCode:o};var l=Object(g.a)(Object($.a)(u),r),c=l.nationalNumber,s=l.carrierCode,f=Object(m.a)(o,c,r);f&&(a=f,\"001\"===f||r.country(a));return{country:a,countryCallingCode:o,nationalNumber:c,carrierCode:s}}(b,e.defaultCountry,e.defaultCallingCode,n),N=O.country,P=O.nationalNumber,S=O.countryCallingCode,x=O.carrierCode;if(!n.hasSelectedNumberingPlan()){if(e.v2)throw new a.a(\"INVALID_COUNTRY\");return{}}if(!P||P.length<r.c){if(e.v2)throw new a.a(\"TOO_SHORT\");return{}}if(P.length>r.b){if(e.v2)throw new a.a(\"TOO_LONG\");return{}}if(e.v2){var w=new s.a(S,P,n.metadata);return N&&(w.country=N),x&&(w.carrierCode=x),v&&(w.ext=v),w}var I=!!(e.extended?n.hasSelectedNumberingPlan():N)&&Object(f.a)(P,n.nationalNumberPattern());return e.extended?{country:N,countryCallingCode:S,carrierCode:x,valid:I,possible:!!I||!(!0!==e.extended||!n.possibleLengths()||!Object(l.b)(P,n)),phone:P,ext:v}:I?function(t,e,n){var r={country:t,phone:e};n&&(r.ext=n);return r}(N,P,v):{}}function v(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function C(t,e,n){return b(t,function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);\"function\"===typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){v(t,e,n[e])}))}return t}({},e,{v2:!0}),n)}},2438:function(t,e,n){\"use strict\";var r=n(0),a=n.n(r),d=n(64),i=n.n(d),o=n(2529),u=n(2547);var $=n(2425);function l(){return l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},l.apply(this,arguments)}function c(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},d=Object.keys(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(r=0;r<d.length;r++)n=d[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}e.a=function(t){function e(t,e){var n=t.value,d=t.onChange,i=t.country,u=t.international,f=t.withCountryCallingCode,h=t.metadata,g=t.inputComponent,m=c(t,[\"value\",\"onChange\",\"country\",\"international\",\"withCountryCallingCode\",\"metadata\",\"inputComponent\"]),y=Object($.a)({country:i,international:u,withCountryCallingCode:f,metadata:h}),p=Object(r.useCallback)((function(t){var e=Object(o.a)(t.target.value);e===n&&(0===s(y,e,i,h).indexOf(t.target.value)&&(e=e.slice(0,-1)));d(e)}),[y,n,d,i,h]);return a.a.createElement(g,l({},m,{ref:e,value:s(y,n,i,h),onChange:p}))}return(e=a.a.forwardRef(e)).propTypes={value:i.a.string.isRequired,onChange:i.a.func.isRequired,country:i.a.string,international:i.a.bool,withCountryCallingCode:i.a.bool,metadata:i.a.object.isRequired,inputComponent:i.a.elementType.isRequired},e.defaultProps={metadata:t,inputComponent:\"input\"},e}();function s(t,e,n,r){return Object($.b)(function(t,e,n){return n||(n=e,e=void 0),new u.a(e,n).input(t)}(t+e,n,r),t)}},2529:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return a})),n.d(e,\"b\",(function(){return d}));var r=n(2361);function a(t){var e=\"\",n=t.split(\"\"),r=Array.isArray(n),a=0;for(n=r?n:n[Symbol.iterator]();;){var i;if(r){if(a>=n.length)break;i=n[a++]}else{if((a=n.next()).done)break;i=a.value}e+=d(i,e)||\"\"}return e}function d(t,e){if(\"+\"===t){if(e)return;return\"+\"}return Object(r.b)(t)}},2530:function(t){t.exports=JSON.parse('{\"ext\":\"ext.\",\"country\":\"Phone number country\",\"phone\":\"Phone\",\"AB\":\"Abkhazia\",\"AC\":\"Ascension Island\",\"AD\":\"Andorra\",\"AE\":\"United Arab Emirates\",\"AF\":\"Afghanistan\",\"AG\":\"Antigua and Barbuda\",\"AI\":\"Anguilla\",\"AL\":\"Albania\",\"AM\":\"Armenia\",\"AO\":\"Angola\",\"AQ\":\"Antarctica\",\"AR\":\"Argentina\",\"AS\":\"American Samoa\",\"AT\":\"Austria\",\"AU\":\"Australia\",\"AW\":\"Aruba\",\"AX\":\"\\xc5land Islands\",\"AZ\":\"Azerbaijan\",\"BA\":\"Bosnia and Herzegovina\",\"BB\":\"Barbados\",\"BD\":\"Bangladesh\",\"BE\":\"Belgium\",\"BF\":\"Burkina Faso\",\"BG\":\"Bulgaria\",\"BH\":\"Bahrain\",\"BI\":\"Burundi\",\"BJ\":\"Benin\",\"BL\":\"Saint Barth\\xe9lemy\",\"BM\":\"Bermuda\",\"BN\":\"Brunei Darussalam\",\"BO\":\"Bolivia\",\"BQ\":\"Bonaire, Sint Eustatius and Saba\",\"BR\":\"Brazil\",\"BS\":\"Bahamas\",\"BT\":\"Bhutan\",\"BV\":\"Bouvet Island\",\"BW\":\"Botswana\",\"BY\":\"Belarus\",\"BZ\":\"Belize\",\"CA\":\"Canada\",\"CC\":\"Cocos (Keeling) Islands\",\"CD\":\"Congo, Democratic Republic of the\",\"CF\":\"Central African Republic\",\"CG\":\"Congo\",\"CH\":\"Switzerland\",\"CI\":\"Cote d\\'Ivoire\",\"CK\":\"Cook Islands\",\"CL\":\"Chile\",\"CM\":\"Cameroon\",\"CN\":\"China\",\"CO\":\"Colombia\",\"CR\":\"Costa Rica\",\"CU\":\"Cuba\",\"CV\":\"Cape Verde\",\"CW\":\"Cura\\xe7ao\",\"CX\":\"Christmas Island\",\"CY\":\"Cyprus\",\"CZ\":\"Czech Republic\",\"DE\":\"Germany\",\"DJ\":\"Djibouti\",\"DK\":\"Denmark\",\"DM\":\"Dominica\",\"DO\":\"Dominican Republic\",\"DZ\":\"Algeria\",\"EC\":\"Ecuador\",\"EE\":\"Estonia\",\"EG\":\"Egypt\",\"EH\":\"Western Sahara\",\"ER\":\"Eritrea\",\"ES\":\"Spain\",\"ET\":\"Ethiopia\",\"FI\":\"Finland\",\"FJ\":\"Fiji\",\"FK\":\"Falkland Islands\",\"FM\":\"Federated States of Micronesia\",\"FO\":\"Faroe Islands\",\"FR\":\"France\",\"GA\":\"Gabon\",\"GB\":\"United Kingdom\",\"GD\":\"Grenada\",\"GE\":\"Georgia\",\"GF\":\"French Guiana\",\"GG\":\"Guernsey\",\"GH\":\"Ghana\",\"GI\":\"Gibraltar\",\"GL\":\"Greenland\",\"GM\":\"Gambia\",\"GN\":\"Guinea\",\"GP\":\"Guadeloupe\",\"GQ\":\"Equatorial Guinea\",\"GR\":\"Greece\",\"GS\":\"South Georgia and the South Sandwich Islands\",\"GT\":\"Guatemala\",\"GU\":\"Guam\",\"GW\":\"Guinea-Bissau\",\"GY\":\"Guyana\",\"HK\":\"Hong Kong\",\"HM\":\"Heard Island and McDonald Islands\",\"HN\":\"Honduras\",\"HR\":\"Croatia\",\"HT\":\"Haiti\",\"HU\":\"Hungary\",\"ID\":\"Indonesia\",\"IE\":\"Ireland\",\"IL\":\"Israel\",\"IM\":\"Isle of Man\",\"IN\":\"India\",\"IO\":\"British Indian Ocean Territory\",\"IQ\":\"Iraq\",\"IR\":\"Iran\",\"IS\":\"Iceland\",\"IT\":\"Italy\",\"JE\":\"Jersey\",\"JM\":\"Jamaica\",\"JO\":\"Jordan\",\"JP\":\"Japan\",\"KE\":\"Kenya\",\"KG\":\"Kyrgyzstan\",\"KH\":\"Cambodia\",\"KI\":\"Kiribati\",\"KM\":\"Comoros\",\"KN\":\"Saint Kitts and Nevis\",\"KP\":\"North Korea\",\"KR\":\"South Korea\",\"KW\":\"Kuwait\",\"KY\":\"Cayman Islands\",\"KZ\":\"Kazakhstan\",\"LA\":\"Laos\",\"LB\":\"Lebanon\",\"LC\":\"Saint Lucia\",\"LI\":\"Liechtenstein\",\"LK\":\"Sri Lanka\",\"LR\":\"Liberia\",\"LS\":\"Lesotho\",\"LT\":\"Lithuania\",\"LU\":\"Luxembourg\",\"LV\":\"Latvia\",\"LY\":\"Libya\",\"MA\":\"Morocco\",\"MC\":\"Monaco\",\"MD\":\"Moldova\",\"ME\":\"Montenegro\",\"MF\":\"Saint Martin (French Part)\",\"MG\":\"Madagascar\",\"MH\":\"Marshall Islands\",\"MK\":\"North Macedonia\",\"ML\":\"Mali\",\"MM\":\"Burma\",\"MN\":\"Mongolia\",\"MO\":\"Macao\",\"MP\":\"Northern Mariana Islands\",\"MQ\":\"Martinique\",\"MR\":\"Mauritania\",\"MS\":\"Montserrat\",\"MT\":\"Malta\",\"MU\":\"Mauritius\",\"MV\":\"Maldives\",\"MW\":\"Malawi\",\"MX\":\"Mexico\",\"MY\":\"Malaysia\",\"MZ\":\"Mozambique\",\"NA\":\"Namibia\",\"NC\":\"New Caledonia\",\"NE\":\"Niger\",\"NF\":\"Norfolk Island\",\"NG\":\"Nigeria\",\"NI\":\"Nicaragua\",\"NL\":\"Netherlands\",\"NO\":\"Norway\",\"NP\":\"Nepal\",\"NR\":\"Nauru\",\"NU\":\"Niue\",\"NZ\":\"New Zealand\",\"OM\":\"Oman\",\"OS\":\"South Ossetia\",\"PA\":\"Panama\",\"PE\":\"Peru\",\"PF\":\"French Polynesia\",\"PG\":\"Papua New Guinea\",\"PH\":\"Philippines\",\"PK\":\"Pakistan\",\"PL\":\"Poland\",\"PM\":\"Saint Pierre and Miquelon\",\"PN\":\"Pitcairn\",\"PR\":\"Puerto Rico\",\"PS\":\"Palestine\",\"PT\":\"Portugal\",\"PW\":\"Palau\",\"PY\":\"Paraguay\",\"QA\":\"Qatar\",\"RE\":\"Reunion\",\"RO\":\"Romania\",\"RS\":\"Serbia\",\"RU\":\"Russia\",\"RW\":\"Rwanda\",\"SA\":\"Saudi Arabia\",\"SB\":\"Solomon Islands\",\"SC\":\"Seychelles\",\"SD\":\"Sudan\",\"SE\":\"Sweden\",\"SG\":\"Singapore\",\"SH\":\"Saint Helena\",\"SI\":\"Slovenia\",\"SJ\":\"Svalbard and Jan Mayen\",\"SK\":\"Slovakia\",\"SL\":\"Sierra Leone\",\"SM\":\"San Marino\",\"SN\":\"Senegal\",\"SO\":\"Somalia\",\"SR\":\"Suriname\",\"SS\":\"South Sudan\",\"ST\":\"Sao Tome and Principe\",\"SV\":\"El Salvador\",\"SX\":\"Sint Maarten\",\"SY\":\"Syria\",\"SZ\":\"Swaziland\",\"TA\":\"Tristan da Cunha\",\"TC\":\"Turks and Caicos Islands\",\"TD\":\"Chad\",\"TF\":\"French Southern Territories\",\"TG\":\"Togo\",\"TH\":\"Thailand\",\"TJ\":\"Tajikistan\",\"TK\":\"Tokelau\",\"TL\":\"Timor-Leste\",\"TM\":\"Turkmenistan\",\"TN\":\"Tunisia\",\"TO\":\"Tonga\",\"TR\":\"Turkey\",\"TT\":\"Trinidad and Tobago\",\"TV\":\"Tuvalu\",\"TW\":\"Taiwan\",\"TZ\":\"Tanzania\",\"UA\":\"Ukraine\",\"UG\":\"Uganda\",\"UM\":\"United States Minor Outlying Islands\",\"US\":\"United States\",\"UY\":\"Uruguay\",\"UZ\":\"Uzbekistan\",\"VA\":\"Holy See (Vatican City State)\",\"VC\":\"Saint Vincent and the Grenadines\",\"VE\":\"Venezuela\",\"VG\":\"Virgin Islands, British\",\"VI\":\"Virgin Islands, U.S.\",\"VN\":\"Vietnam\",\"VU\":\"Vanuatu\",\"WF\":\"Wallis and Futuna\",\"WS\":\"Samoa\",\"XK\":\"Kosovo\",\"YE\":\"Yemen\",\"YT\":\"Mayotte\",\"ZA\":\"South Africa\",\"ZM\":\"Zambia\",\"ZW\":\"Zimbabwe\",\"ZZ\":\"International\"}')},2547:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return Y}));var r=n(2342),a=n(2433);function d(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i=function(){function t(e){var n,r,a,d=this,i=e.onCountryChange,o=e.onCallingCodeChange;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),a=function(t){for(var e=0,n=Object.keys(t);e<n.length;e++){var r=n[e];d[r]=t[r]}},(r=\"update\")in(n=this)?Object.defineProperty(n,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[r]=a,this.onCountryChange=i,this.onCallingCodeChange=o}var e,n,r;return e=t,(n=[{key:\"reset\",value:function(t,e){this.international=!1,this.IDDPrefix=void 0,this.missingPlus=void 0,this.callingCode=void 0,this.digits=\"\",this.resetNationalSignificantNumber(),this.initCountryAndCallingCode(t,e)}},{key:\"resetNationalSignificantNumber\",value:function(){this.nationalSignificantNumber=this.getNationalDigits(),this.nationalSignificantNumberMatchesInput=!0,this.nationalPrefix=void 0,this.carrierCode=void 0,this.complexPrefixBeforeNationalSignificantNumber=void 0}},{key:\"initCountryAndCallingCode\",value:function(t,e){this.setCountry(t),this.setCallingCode(e)}},{key:\"setCountry\",value:function(t){this.country=t,this.onCountryChange(t)}},{key:\"setCallingCode\",value:function(t){return this.callingCode=t,this.onCallingCodeChange(this.country,t)}},{key:\"startInternationalNumber\",value:function(){this.international=!0,this.initCountryAndCallingCode()}},{key:\"appendDigits\",value:function(t){this.digits+=t}},{key:\"appendNationalSignificantNumberDigits\",value:function(t){this.nationalSignificantNumber+=t}},{key:\"getNationalDigits\",value:function(){return this.international?this.digits.slice((this.IDDPrefix?this.IDDPrefix.length:0)+(this.callingCode?this.callingCode.length:0)):this.digits}},{key:\"getDigitsWithoutInternationalPrefix\",value:function(){return this.international&&this.IDDPrefix?this.digits.slice(this.IDDPrefix.length):this.digits}}])&&d(e.prototype,n),r&&d(e,r),t}(),o=\"x\",u=new RegExp(o);function $(t,e){if(e<1)return\"\";for(var n=\"\";e>1;)1&e&&(n+=t),e>>=1,t+=t;return n+t}function l(t,e){return\")\"===t[e]&&e++,function(t){var e=[],n=0;for(;n<t.length;)\"(\"===t[n]?e.push(n):\")\"===t[n]&&e.pop(),n++;var r=0,a=\"\";e.push(t.length);for(var d=0,i=e;d<i.length;d++){var o=i[d];a+=t.slice(r,o),r=o+1}return a}(t.slice(0,e))}var c=n(2369),s=n(2361),f=n(2379);function h(t,e,n){var r=n.metadata,a=n.shouldTryNationalPrefixFormattingRule,d=n.getSeparatorAfterNationalPrefix;if(new RegExp(\"^(?:\".concat(e.pattern(),\")$\")).test(t.nationalSignificantNumber))return function(t,e,n){var r=n.metadata,a=n.shouldTryNationalPrefixFormattingRule,d=n.getSeparatorAfterNationalPrefix;t.nationalSignificantNumber,t.international,t.nationalPrefix,t.carrierCode;if(a(e)){var i=g(t,e,{useNationalPrefixFormattingRule:!0,getSeparatorAfterNationalPrefix:d,metadata:r});if(i)return i}return g(t,e,{useNationalPrefixFormattingRule:!1,getSeparatorAfterNationalPrefix:d,metadata:r})}(t,e,{metadata:r,shouldTryNationalPrefixFormattingRule:a,getSeparatorAfterNationalPrefix:d})}function g(t,e,n){var r=n.metadata,a=n.useNationalPrefixFormattingRule,d=n.getSeparatorAfterNationalPrefix,i=Object(f.b)(t.nationalSignificantNumber,e,{carrierCode:t.carrierCode,useInternationalFormat:t.international,withNationalPrefix:a,metadata:r});if(a||(t.nationalPrefix?i=t.nationalPrefix+d(e)+i:t.complexPrefixBeforeNationalSignificantNumber&&(i=t.complexPrefixBeforeNationalSignificantNumber+\" \"+i)),function(t,e){return Object(s.a)(t)===e.getNationalDigits()}(i,t))return i}function m(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}function y(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function p(t,e,n){return e&&y(t.prototype,e),n&&y(t,n),t}var b=function(){function t(e){m(this,t),this.matchTree=(new O).parse(e)}return p(t,[{key:\"match\",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.allowOverflow;if(!t)throw new Error(\"String is required\");var r=v(t.split(\"\"),this.matchTree,!0);if(r&&r.match&&delete r.matchedChars,!r||!r.overflow||n)return r}}]),t}();function v(t,e,n){if(\"string\"===typeof e){if(n&&t.length>e.length)return{overflow:!0};var r=t.join(\"\");return 0===e.indexOf(r)?t.length===e.length?{match:!0,matchedChars:t}:{partialMatch:!0}:0===r.indexOf(e)?{match:!0,matchedChars:t.slice(0,e.length)}:void 0}if(Array.isArray(e)){for(var a=t.slice(),d=0;d<e.length;){var i=v(a,e[d],n&&d===e.length-1);if(!i||i.overflow)return i;if(!i.match){if(i.partialMatch)return{partialMatch:!0};throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(i,null,2)))}if(0===(a=a.slice(i.matchedChars.length)).length)return d===e.length-1?{match:!0,matchedChars:t}:{partialMatch:!0};d++}return n?{overflow:!0}:{match:!0,matchedChars:t.slice(0,t.length-a.length)}}switch(e.op){case\"|\":var o,u=e.args,$=Array.isArray(u),l=0;for(u=$?u:u[Symbol.iterator]();;){var c;if($){if(l>=u.length)break;c=u[l++]}else{if((l=u.next()).done)break;c=l.value}var s=v(t,c,n);if(s){if(s.overflow)return s;if(s.match)return{match:!0,matchedChars:s.matchedChars};s.partialMatch&&(o=!0)}}return o?{partialMatch:!0}:void 0;case\"[]\":var f=e.args,h=Array.isArray(f),g=0;for(f=h?f:f[Symbol.iterator]();;){var m;if(h){if(g>=f.length)break;m=f[g++]}else{if((g=f.next()).done)break;m=g.value}var y=m;if(t[0]===y)return 1===t.length?{match:!0,matchedChars:t}:n?{overflow:!0}:{match:!0,matchedChars:[y]}}return;default:throw new Error(\"Unsupported instruction tree: \".concat(e))}}var C=new RegExp(\"(\\\\||\\\\(\\\\?\\\\:|\\\\)|\\\\[|\\\\])\"),O=function(){function t(){m(this,t)}return p(t,[{key:\"parse\",value:function(t){if(this.context=[{or:!0,instructions:[]}],this.parsePattern(t),1!==this.context.length)throw new Error(\"Non-finalized contexts left when pattern parse ended\");var e=this.context[0],n=e.branches,r=e.instructions;if(n)return[{op:\"|\",args:n.concat([r])}];if(0===r.length)throw new Error(\"Pattern is required\");return r}},{key:\"startContext\",value:function(t){this.context.push(t)}},{key:\"endContext\",value:function(){this.context.pop()}},{key:\"getContext\",value:function(){return this.context[this.context.length-1]}},{key:\"parsePattern\",value:function(t){if(!t)throw new Error(\"Empty pattern passed\");var e=t.match(C);if(e){var n=e[1],r=t.slice(0,e.index),a=t.slice(e.index+n.length);switch(n){case\"(?:\":r&&this.parsePattern(r),this.startContext({or:!0,instructions:[],branches:[]});break;case\")\":if(!this.getContext().or)throw new Error('\")\" operator must be preceded by \"(?:\" operator');if(r&&this.parsePattern(r),0===this.getContext().instructions.length)throw new Error('No instructions found after \"|\" operator in an \"or\" group');var d=this.getContext().branches;d.push(this.getContext().instructions),this.endContext(),this.getContext().instructions.push({op:\"|\",args:d});break;case\"|\":if(!this.getContext().or)throw new Error('\"|\" operator can only be used inside \"or\" groups');if(r&&this.parsePattern(r),!this.getContext().branches){if(1!==this.context.length)throw new Error('\"branches\" not found in an \"or\" group context');this.getContext().branches=[]}this.getContext().branches.push(this.getContext().instructions),this.getContext().instructions=[];break;case\"[\":r&&this.parsePattern(r),this.startContext({oneOfSet:!0});break;case\"]\":if(!this.getContext().oneOfSet)throw new Error('\"]\" operator must be preceded by \"[\" operator');this.endContext(),this.getContext().instructions.push({op:\"[]\",args:N(r)});break;default:throw new Error(\"Unknown operator: \".concat(n))}a&&this.parsePattern(a)}else this.getContext().instructions=this.getContext().instructions.concat(t.split(\"\"))}}]),t}();function N(t){for(var e=[],n=0;n<t.length;){if(\"-\"===t[n]){if(0===n||n===t.length-1)throw new Error(\"Couldn't parse a one-of set pattern: \".concat(t));for(var r=t[n-1].charCodeAt(0)+1,a=t[n+1].charCodeAt(0)-1,d=r;d<=a;)e.push(String.fromCharCode(d)),d++}else e.push(t[n]);n++}return e}var P=n(2347),S=n(2415);function x(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function w(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var I=$(\"9\",15),E=/[- ]/,j=function(){return/\\[([^\\[\\]])*\\]/g},k=function(){return/\\d(?=[^,}][^,}])/g},A=new RegExp(\"^[\"+P.f+\"]*(\\\\$\\\\d[\"+P.f+\"]*)+$\"),T=function(){function t(e){var n=this,r=(e.state,e.metadata);!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),w(this,\"getSeparatorAfterNationalPrefix\",(function(t){return n.isNANP||t&&t.nationalPrefixFormattingRule()&&E.test(t.nationalPrefixFormattingRule())?\" \":\"\"})),w(this,\"shouldTryNationalPrefixFormattingRule\",(function(t,e){var n=e.international,r=e.nationalPrefix;if(t.nationalPrefixFormattingRule()){var a=t.usesNationalPrefix();if(a&&r||!a&&!n)return!0}})),this.metadata=r,this.resetFormat()}var e,n,r;return e=t,(n=[{key:\"resetFormat\",value:function(){this.chosenFormat=void 0,this.template=void 0,this.nationalNumberTemplate=void 0,this.populatedNationalNumberTemplate=void 0,this.populatedNationalNumberTemplatePosition=-1}},{key:\"reset\",value:function(t,e){this.resetFormat(),t?(this.isNANP=\"1\"===t.callingCode(),this.matchingFormats=t.formats(),e.nationalSignificantNumber&&this.narrowDownMatchingFormats(e)):(this.isNANP=void 0,this.matchingFormats=[])}},{key:\"format\",value:function(t,e){var n,r,a=this;if(n=e.nationalSignificantNumber,r=this.metadata,\"IS_POSSIBLE\"===Object(c.a)(n,r)){var d=this.matchingFormats,i=Array.isArray(d),u=0;for(d=i?d:d[Symbol.iterator]();;){var $;if(i){if(u>=d.length)break;$=d[u++]}else{if((u=d.next()).done)break;$=u.value}var l=$,s=h(e,l,{metadata:this.metadata,shouldTryNationalPrefixFormattingRule:function(t){return a.shouldTryNationalPrefixFormattingRule(t,{international:e.international,nationalPrefix:e.nationalPrefix})},getSeparatorAfterNationalPrefix:this.getSeparatorAfterNationalPrefix});if(s)return this.resetFormat(),this.chosenFormat=l,this.setNationalNumberTemplate(s.replace(/\\d/g,o),e),this.populatedNationalNumberTemplate=s,this.populatedNationalNumberTemplatePosition=this.template.lastIndexOf(o),s}}return this.formatNationalNumberWithNextDigits(t,e)}},{key:\"formatNationalNumberWithNextDigits\",value:function(t,e){var n=this.chosenFormat,r=this.chooseFormat(e);if(r)return r===n?this.formatNextNationalNumberDigits(t):this.formatNextNationalNumberDigits(e.getNationalDigits())}},{key:\"narrowDownMatchingFormats\",value:function(t){var e=this,n=t.nationalSignificantNumber,r=t.nationalPrefix,a=t.international,d=n,i=d.length-3;i<0&&(i=0),this.matchingFormats=this.matchingFormats.filter((function(t){return e.formatSuits(t,a,r)&&e.formatMatches(t,d,i)})),this.chosenFormat&&-1===this.matchingFormats.indexOf(this.chosenFormat)&&this.resetFormat()}},{key:\"formatSuits\",value:function(t,e,n){return!(n&&!t.usesNationalPrefix()&&!t.nationalPrefixIsOptionalWhenFormattingInNationalFormat())&&!(!e&&!n&&t.nationalPrefixIsMandatoryWhenFormattingInNationalFormat())}},{key:\"formatMatches\",value:function(t,e,n){var r=t.leadingDigitsPatterns().length;if(0===r)return!0;n=Math.min(n,r-1);var a=t.leadingDigitsPatterns()[n];if(e.length<3)try{return void 0!==new b(a).match(e,{allowOverflow:!0})}catch(d){return console.error(d),!0}return new RegExp(\"^(\".concat(a,\")\")).test(e)}},{key:\"getFormatFormat\",value:function(t,e){return e?t.internationalFormat():t.format()}},{key:\"chooseFormat\",value:function(t){var e=this,n=function(){if(a){if(d>=r.length)return\"break\";i=r[d++]}else{if((d=r.next()).done)return\"break\";i=d.value}var n=i;return e.chosenFormat===n?\"break\":A.test(e.getFormatFormat(n,t.international))?e.createTemplateForFormat(n,t)?(e.chosenFormat=n,\"break\"):(e.matchingFormats=e.matchingFormats.filter((function(t){return t!==n})),\"continue\"):\"continue\"},r=this.matchingFormats.slice(),a=Array.isArray(r),d=0;t:for(r=a?r:r[Symbol.iterator]();;){var i;switch(n()){case\"break\":break t;case\"continue\":continue}}return this.chosenFormat||this.resetFormat(),this.chosenFormat}},{key:\"createTemplateForFormat\",value:function(t,e){if(!(t.pattern().indexOf(\"|\")>=0)){var n=this.getTemplateForFormat(t,e);return n?(this.setNationalNumberTemplate(n,e),!0):void 0}}},{key:\"getInternationalPrefixBeforeCountryCallingCode\",value:function(t,e){var n=t.IDDPrefix,r=t.missingPlus;return n?e&&!1===e.spacing?n:n+\" \":r?\"\":\"+\"}},{key:\"getTemplate\",value:function(t){if(this.template){for(var e=-1,n=0,r=t.international?this.getInternationalPrefixBeforeCountryCallingCode(t,{spacing:!1}):\"\";n<r.length+t.getDigitsWithoutInternationalPrefix().length;)e=this.template.indexOf(o,e+1),n++;return l(this.template,e+1)}}},{key:\"setNationalNumberTemplate\",value:function(t,e){this.nationalNumberTemplate=t,this.populatedNationalNumberTemplate=t,this.populatedNationalNumberTemplatePosition=-1,e.international?this.template=this.getInternationalPrefixBeforeCountryCallingCode(e).replace(/[\\d\\+]/g,o)+$(o,e.callingCode.length)+\" \"+t:this.template=t}},{key:\"getTemplateForFormat\",value:function(t,e){var n=e.nationalSignificantNumber,r=e.international,a=e.nationalPrefix,d=e.complexPrefixBeforeNationalSignificantNumber,i=t.pattern();i=i.replace(j(),\"\\\\d\").replace(k(),\"\\\\d\");var u=I.match(i)[0];if(!(n.length>u.length)){var l=new RegExp(\"^\"+i+\"$\"),c=n.replace(/\\d/g,\"9\");l.test(c)&&(u=c);var h,g=this.getFormatFormat(t,r);if(this.shouldTryNationalPrefixFormattingRule(t,{international:r,nationalPrefix:a})){var m=g.replace(f.a,t.nationalPrefixFormattingRule());if(Object(s.a)(t.nationalPrefixFormattingRule())===(a||\"\")+Object(s.a)(\"$1\")&&(g=m,h=!0,a))for(var y=a.length;y>0;)g=g.replace(/\\d/,o),y--}var p=u.replace(new RegExp(i),g).replace(new RegExp(\"9\",\"g\"),o);return h||(d?p=$(o,d.length)+\" \"+p:a&&(p=$(o,a.length)+this.getSeparatorAfterNationalPrefix(t)+p)),r&&(p=Object(S.a)(p)),p}}},{key:\"formatNextNationalNumberDigits\",value:function(t){var e=function(t,e,n){var r=n.split(\"\"),a=Array.isArray(r),d=0;for(r=a?r:r[Symbol.iterator]();;){var i;if(a){if(d>=r.length)break;i=r[d++]}else{if((d=r.next()).done)break;i=d.value}var o=i;if(t.slice(e+1).search(u)<0)return;e=t.search(u),t=t.replace(u,o)}return[t,e]}(this.populatedNationalNumberTemplate,this.populatedNationalNumberTemplatePosition,t);if(e)return this.populatedNationalNumberTemplate=e[0],this.populatedNationalNumberTemplatePosition=e[1],l(this.populatedNationalNumberTemplate,this.populatedNationalNumberTemplatePosition+1);this.resetFormat()}}])&&x(e.prototype,n),r&&x(e,r),t}(),R=n(2416),F=n(2381),M=n(2418),D=n(2380);function L(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,a=!1,d=void 0;try{for(var i,o=t[Symbol.iterator]();!(r=(i=o.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(u){a=!0,d=u}finally{try{r||null==o.return||o.return()}finally{if(a)throw d}}return n}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}()}function B(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var G=\"[\"+P.f+P.e+\"]+\",_=new RegExp(\"^\"+G+\"$\",\"i\"),U=\"(?:[\"+P.d+\"][\"+P.f+P.e+\"]*|[\"+P.f+P.e+\"]+)\",K=new RegExp(\"[^\"+P.f+P.e+\"]+.*$\"),V=/[^\\d\\[\\]]/,W=function(){function t(e){var n=e.defaultCountry,r=e.defaultCallingCode,a=e.metadata,d=e.onNationalSignificantNumberChange;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.defaultCountry=n,this.defaultCallingCode=r,this.metadata=a,this.onNationalSignificantNumberChange=d}var e,n,r;return e=t,(n=[{key:\"input\",value:function(t,e){var n,r=function(t){var e=L(function(t){var e=function(t){var e,n=t.search(U);if(!(n<0))return\"+\"===(t=t.slice(n))[0]&&(e=!0,t=t.slice(\"+\".length)),t=t.replace(K,\"\"),e&&(t=\"+\"+t),t}(t)||\"\";return\"+\"===e[0]?[e.slice(\"+\".length),!0]:[e]}(t),2),n=e[0],r=e[1];return _.test(n)||(n=\"\"),[n,r]}(t),a=L(r,2),d=a[0],i=a[1],o=Object(s.a)(d);return i&&(e.digits||(e.startInternationalNumber(),o||(n=!0))),o&&this.inputDigits(o,e),{digits:o,justLeadingPlus:n}}},{key:\"inputDigits\",value:function(t,e){var n=e.digits,r=n.length<3&&n.length+t.length>=3;if(e.appendDigits(t),r&&this.extractIddPrefix(e),this.isWaitingForCountryCallingCode(e)){if(!this.extractCountryCallingCode(e))return}else e.appendNationalSignificantNumberDigits(t);e.international||this.hasExtractedNationalSignificantNumber||this.extractNationalSignificantNumber(e.getNationalDigits(),e.update)}},{key:\"isWaitingForCountryCallingCode\",value:function(t){var e=t.international,n=t.callingCode;return e&&!n}},{key:\"extractCountryCallingCode\",value:function(t){var e=Object(R.a)(\"+\"+t.getDigitsWithoutInternationalPrefix(),this.defaultCountry,this.defaultCallingCode,this.metadata.metadata),n=e.countryCallingCode,r=e.number;if(n)return t.setCallingCode(n),t.update({nationalSignificantNumber:r}),!0}},{key:\"reset\",value:function(t){if(t){this.hasSelectedNumberingPlan=!0;var e=t._nationalPrefixForParsing();this.couldPossiblyExtractAnotherNationalSignificantNumber=e&&V.test(e)}else this.hasSelectedNumberingPlan=void 0,this.couldPossiblyExtractAnotherNationalSignificantNumber=void 0}},{key:\"extractNationalSignificantNumber\",value:function(t,e){if(this.hasSelectedNumberingPlan){var n=Object(M.a)(t,this.metadata),r=n.nationalPrefix,a=n.nationalNumber,d=n.carrierCode;if(a!==t)return this.onExtractedNationalNumber(r,d,a,t,e),!0}}},{key:\"extractAnotherNationalSignificantNumber\",value:function(t,e,n){if(!this.hasExtractedNationalSignificantNumber)return this.extractNationalSignificantNumber(t,n);if(this.couldPossiblyExtractAnotherNationalSignificantNumber){var r=Object(M.a)(t,this.metadata),a=r.nationalPrefix,d=r.nationalNumber,i=r.carrierCode;if(d!==e)return this.onExtractedNationalNumber(a,i,d,t,n),!0}}},{key:\"onExtractedNationalNumber\",value:function(t,e,n,r,a){var d,i,o=r.lastIndexOf(n);if(o>=0&&o===r.length-n.length){i=!0;var u=r.slice(0,o);u!==t&&(d=u)}a({nationalPrefix:t,carrierCode:e,nationalSignificantNumber:n,nationalSignificantNumberMatchesInput:i,complexPrefixBeforeNationalSignificantNumber:d}),this.hasExtractedNationalSignificantNumber=!0,this.onNationalSignificantNumberChange()}},{key:\"reExtractNationalSignificantNumber\",value:function(t){return!!this.extractAnotherNationalSignificantNumber(t.getNationalDigits(),t.nationalSignificantNumber,t.update)||(this.extractIddPrefix(t)||this.fixMissingPlus(t)?(this.extractCallingCodeAndNationalSignificantNumber(t),!0):void 0)}},{key:\"extractIddPrefix\",value:function(t){var e=t.international,n=t.IDDPrefix,r=t.digits;if(t.nationalSignificantNumber,!e&&!n){var a=Object(D.a)(r,this.defaultCountry,this.defaultCallingCode,this.metadata.metadata);return void 0!==a&&a!==r?(t.update({IDDPrefix:r.slice(0,r.length-a.length)}),this.startInternationalNumber(t),!0):void 0}}},{key:\"fixMissingPlus\",value:function(t){if(!t.international){var e=Object(F.a)(t.digits,this.defaultCountry,this.defaultCallingCode,this.metadata.metadata),n=e.countryCallingCode;if(e.number,n)return t.update({missingPlus:!0}),this.startInternationalNumber(t),!0}}},{key:\"startInternationalNumber\",value:function(t){t.startInternationalNumber(),t.nationalSignificantNumber&&(t.resetNationalSignificantNumber(),this.onNationalSignificantNumberChange(),this.hasExtractedNationalSignificantNumber=void 0)}},{key:\"extractCallingCodeAndNationalSignificantNumber\",value:function(t){this.extractCountryCallingCode(t)&&this.extractNationalSignificantNumber(t.getNationalDigits(),t.update)}}])&&B(e.prototype,n),r&&B(e,r),t}();var H=n(2419);function q(t){return q=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},q(t)}function Z(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,a=!1,d=void 0;try{for(var i,o=t[Symbol.iterator]();!(r=(i=o.next()).done)&&(n.push(i.value),!e||n.length!==e);r=!0);}catch(u){a=!0,d=u}finally{try{r||null==o.return||o.return()}finally{if(a)throw d}}return n}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}()}function J(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Y=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.metadata=new r.a(n);var a=Z(this.getCountryAndCallingCode(e),2),d=a[0],i=a[1];this.defaultCountry=d,this.defaultCallingCode=i,this.reset()}var e,n,d;return e=t,(n=[{key:\"getCountryAndCallingCode\",value:function(t){var e,n;return t&&(\"object\"===q(t)?(e=t.defaultCountry,n=t.defaultCallingCode):e=t),e&&!this.metadata.hasCountry(e)&&(e=void 0),[e,n]}},{key:\"input\",value:function(t){var e=this.parser.input(t,this.state),n=e.digits;if(e.justLeadingPlus)this.formattedOutput=\"+\";else if(n){var r;if(this.determineTheCountryIfNeeded(),this.state.nationalSignificantNumber&&this.formatter.narrowDownMatchingFormats(this.state),this.metadata.hasSelectedNumberingPlan()&&(r=this.formatter.format(n,this.state)),void 0===r&&this.parser.reExtractNationalSignificantNumber(this.state)){this.determineTheCountryIfNeeded();var a=this.state.getNationalDigits();a&&(r=this.formatter.format(a,this.state))}this.formattedOutput=r?this.getFullNumber(r):this.getNonFormattedNumber()}return this.formattedOutput}},{key:\"reset\",value:function(){var t=this;return this.state=new i({onCountryChange:function(e){t.country=e},onCallingCodeChange:function(e,n){t.metadata.selectNumberingPlan(e,n),t.formatter.reset(t.metadata.numberingPlan,t.state),t.parser.reset(t.metadata.numberingPlan)}}),this.formatter=new T({state:this.state,metadata:this.metadata}),this.parser=new W({defaultCountry:this.defaultCountry,defaultCallingCode:this.defaultCallingCode,metadata:this.metadata,state:this.state,onNationalSignificantNumberChange:function(){t.determineTheCountryIfNeeded(),t.formatter.reset(t.metadata.numberingPlan,t.state)}}),this.state.reset(this.defaultCountry,this.defaultCallingCode),this.formattedOutput=\"\",this}},{key:\"isInternational\",value:function(){return this.state.international}},{key:\"getCallingCode\",value:function(){if(this.isInternational())return this.state.callingCode}},{key:\"getCountryCallingCode\",value:function(){return this.getCallingCode()}},{key:\"getCountry\",value:function(){if(this.state.digits)return this._getCountry()}},{key:\"_getCountry\",value:function(){var t=this.state.country;return t}},{key:\"determineTheCountryIfNeeded\",value:function(){this.state.country&&!this.isCountryCallingCodeAmbiguous()||this.determineTheCountry()}},{key:\"getFullNumber\",value:function(t){var e=this;if(this.isInternational()){var n=function(t){return e.formatter.getInternationalPrefixBeforeCountryCallingCode(e.state,{spacing:!!t})+t},r=this.state.callingCode;return n(r?t?\"\".concat(r,\" \").concat(t):r:\"\".concat(this.state.getDigitsWithoutInternationalPrefix()))}return t}},{key:\"getNonFormattedNationalNumberWithPrefix\",value:function(){var t=this.state,e=t.nationalSignificantNumber,n=t.complexPrefixBeforeNationalSignificantNumber,r=t.nationalPrefix,a=e,d=n||r;return d&&(a=d+a),a}},{key:\"getNonFormattedNumber\",value:function(){var t=this.state.nationalSignificantNumberMatchesInput;return this.getFullNumber(t?this.getNonFormattedNationalNumberWithPrefix():this.state.getNationalDigits())}},{key:\"getNonFormattedTemplate\",value:function(){var t=this.getNonFormattedNumber();if(t)return t.replace(/[\\+\\d]/g,o)}},{key:\"isCountryCallingCodeAmbiguous\",value:function(){var t=this.state.callingCode,e=this.metadata.getCountryCodesForCallingCode(t);return e&&e.length>1}},{key:\"determineTheCountry\",value:function(){this.state.setCountry(Object(H.a)(this.isInternational()?this.state.callingCode:this.defaultCallingCode,this.state.nationalSignificantNumber,this.metadata))}},{key:\"getNumberValue\",value:function(){var t=this.state,e=t.digits,n=t.callingCode,r=t.country,a=t.nationalSignificantNumber;if(e)return this.isInternational()?n?\"+\"+n+a:\"+\"+e:r||n?\"+\"+(r?this.metadata.countryCallingCode():n)+a:void 0}},{key:\"getNumber\",value:function(){var t=this.state,e=t.nationalSignificantNumber,n=t.carrierCode,r=t.callingCode,d=this._getCountry();if(e&&(d||r)){var i=new a.a(d||r,e,this.metadata.metadata);return n&&(i.carrierCode=n),i}}},{key:\"isPossible\",value:function(){var t=this.getNumber();return!!t&&t.isPossible()}},{key:\"isValid\",value:function(){var t=this.getNumber();return!!t&&t.isValid()}},{key:\"getNationalNumber\",value:function(){return this.state.nationalSignificantNumber}},{key:\"getChars\",value:function(){return(this.state.international?\"+\":\"\")+this.state.digits}},{key:\"getTemplate\",value:function(){return this.formatter.getTemplate(this.state)||this.getNonFormattedTemplate()||\"\"}}])&&J(e.prototype,n),d&&J(e,d),t}()},2556:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return d}));var r=n(2383),a=n(2384);function d(){var t=Object(r.a)(arguments),e=t.text,n=t.options,d=t.metadata;return Object(a.a)(e,n,d)}},2557:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return d})),n.d(e,\"b\",(function(){return i}));var r=n(2556);function a(t){return a=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"===typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},a(t)}function d(t,e,n){if(n||\"object\"===a(e)&&(n=e,e=\"NATIONAL\"),!t)return\"\";var d=Object(r.a)(t,n);if(!d)return\"\";switch(e){case\"National\":e=\"NATIONAL\";break;case\"International\":e=\"INTERNATIONAL\"}return d.format(e)}function i(t,e){return d(t,\"INTERNATIONAL\",e)}},2558:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return o}));var r=n(2383),a=n(2384);function d(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);\"function\"===typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){i(t,e,n[e])}))}return t}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(){var t=Object(r.a)(arguments),e=t.text,n=t.options,i=t.metadata;n=d({},n,{extract:!1});var o=Object(a.a)(e,n,i);return o&&o.isValid()||!1}},2559:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return o}));var r=n(2383),a=n(2384);function d(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);\"function\"===typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){i(t,e,n[e])}))}return t}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(){var t=Object(r.a)(arguments),e=t.text,n=t.options,i=t.metadata;n=d({},n,{extract:!1});var o=Object(a.a)(e,n,i);return o&&o.isPossible()||!1}},2560:function(t,e,n){\"use strict\";n.d(e,\"a\",(function(){return a}));var r=n(2342);function a(t){return new r.a(t).getCountries()}}}]);","name":"static/js/0.ef47f10c.chunk.js","map":{"version":3,"sources":["static/js/0.ef47f10c.chunk.js"],"names":["this","push","module","__webpack_exports__","__webpack_require__","d","Metadata","getCountryCallingCode","isSupportedCountry","semver_compare","a","b","split","pa","pb","i","na","Number","nb","isNaN","_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","metadata","Error","is_object","countries","concat","keys","join","type_of","validateMetadata","setVersion","call","value","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","undefined","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","test","hasCountry","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_this","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type2","getType","Type","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","countryCallingCode","version","v4","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","PLUS_CHARS","matchesEntirely","text","regular_expression","RegExp","parseDigit","parseDigits","DIGITS","character","string","result","_iterator","_isArray","Array","isArray","_i","_ref","next","done","digit","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","slice","element","indexOf","sort","mergeArrays","actual_length","minimum_length","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","_applyInternationalSeparatorStyle__WEBPACK_IMPORTED_MODULE_0__","number","useInternationalFormat","withNationalPrefix","formattedNumber","carrierCode","replace","pattern","internationalFormat","stripIddPrefix","_metadata__WEBPACK_IMPORTED_MODULE_0__","_constants__WEBPACK_IMPORTED_MODULE_1__","CAPTURING_DIGIT_PATTERN","countryMetadata","IDDPrefixPattern","search","matchedGroups","match","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","_matchesEntirely__WEBPACK_IMPORTED_MODULE_1__","_extractNationalNumber__WEBPACK_IMPORTED_MODULE_2__","_checkNumberLength__WEBPACK_IMPORTED_MODULE_3__","possibleShorterNumber","possibleShorterNationalNumber","getNumberType","NON_FIXED_LINE_PHONE_TYPES","input","options","phone","isNumberTypeEqualTo","_NON_FIXED_LINE_PHONE","normalizeArguments","_defineProperty","_slicedToArray","arr","_arrayWithHoles","_arr","_n","_d","_e","_s","err","_iterableToArrayLimit","_nonIterableRest","args","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","arguments","source","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","forEach","_objectSpread","defaultCountry","parsePhoneNumberFromString","_parsePhoneNumber___WEBPACK_IMPORTED_MODULE_0__","_ParseError__WEBPACK_IMPORTED_MODULE_1__","_metadata__WEBPACK_IMPORTED_MODULE_2__","error","exports","JSON","parse","applyInternationalSeparatorStyle","_constants__WEBPACK_IMPORTED_MODULE_0__","trim","extractCountryCallingCode","_stripIddPrefix__WEBPACK_IMPORTED_MODULE_0__","_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign__WEBPACK_IMPORTED_MODULE_1__","_constants__WEBPACK_IMPORTED_MODULE_3__","numberWithoutIDD","_extractCountryCallin","shorterNumber","_countryCallingCode","extractNationalNumber","_extractNationalNumberFromPossiblyIncompleteNumber__WEBPACK_IMPORTED_MODULE_0__","_checkNumberLength__WEBPACK_IMPORTED_MODULE_2__","_extractNationalNumbe","nationalSignificantNumber","shouldExtractNationalPrefix","extractNationalNumberFromPossiblyIncompleteNumber","prefixPattern","prefixMatch","exec","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","getCountryByCallingCode","_getNumberType__WEBPACK_IMPORTED_MODULE_1__","nationalPhoneNumber","possibleCountries","selectCountryFromList","isPossiblePhoneNumber","isPossibleNumber","_helpers_checkNumberLength__WEBPACK_IMPORTED_MODULE_1__","isNonGeographicCallingCode","parseRFC3966","formatRFC3966","_isViablePhoneNumber__WEBPACK_IMPORTED_MODULE_0__","_part$split2","name","_ref2","isViablePhoneNumber","isViablePhoneNumberStart","_extension_createExtensionPattern__WEBPACK_IMPORTED_MODULE_1__","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","createExtensionPattern","getExtensionDigitsPattern","maxLength","purpose","optionalExtnSuffix","possibleSeparatorsBetweenNumberAndExtLabel","possibleSeparatorsNumberExtLabelNoComma","getInternationalPhoneNumberPrefix","libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__","ONLY_DIGITS_REGEXP","prefix","getInputValuePrefix","removeInputValuePrefix","international","withCountryCallingCode","ParseError","code","message","stack","create","min_isValidPhoneNumber","metadata_min","isValidPhoneNumber","getCountries","es6_metadata","react","react_default","n","en","prop_types","prop_types_default","PropTypes_metadata","shape","object","isRequired","PropTypes_labels","objectOf","classnames","classnames_default","InputSmart","InputBasic","getRegionalIndicatorSymbol","letter","String","fromCodePoint","toUpperCase","charCodeAt","_extends","assign","hasOwnProperty","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","CountrySelect","onChange","rest","onChange_","event","getSelectedOption","createElement","label","divider","disabled","style","DIVIDER_STYLE","propTypes","func","arrayOf","bool","fontSize","backgroundColor","color","CountrySelectWithIcon","_ref3","className","Icon","iconComponent","Arrow","getIconAspectRatio","arrowComponent","unicodeFlags","selectedOption","aspectRatio","_ref4","option","Flag_extends","Flag_objectWithoutProperties","Flag_objectWithoutPropertiesLoose","Flag_FlagComponent","countryName","flags","flagUrl","title","alt","role","src","toLowerCase","InternationalIcon_extends","InternationalIcon_objectWithoutProperties","InternationalIcon_objectWithoutPropertiesLoose","InternationalIcon_InternationalIcon","InternationalIcon1x1","InternationalIcon3x2","xmlns","viewBox","stroke","fill","strokeWidth","strokeMiterlimit","strokeLinecap","x1","y1","x2","y2","isCountrySupportedWithError","console","getSupportedCountries","createCountryIconComponent","FlagComponent","flagComponent","InternationalIcon","internationalIcon","CountryIcon","_aspectRatio","elementType","defaultProps","AsYouType","parsePhoneNumber","getPhoneDigitsForNewCountry","phoneDigits","prevCountry","newCountry","useNationalFormat","countryCallingCodePrefix","_Object$keys","country_calling_code","stripCountryCallingCode","newCountryPrefix","defaultValue","e164","asYouType","getNumberValue","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","getCountryForPartialE164Number","partialE164Number","required","derived_country","formatter","getCountry","getCountryFromPossiblyIncompleteInternationalPhoneNumber","couldNumberBelongToCountry","convertInternationalPhoneDigitsToNational","phoneNumber","getNumber","formatNational","compareStrings","locales","localeCompare","intlPhoneNumberPrefix","getInitialPhoneDigits","_ref6","generateNationalNumberDigits","enumerableOnly","symbols","getOwnPropertyDescriptors","defineProperties","PhoneInputWithCountry_ownKeys","PhoneInputWithCountry_extends","PhoneInputWithCountry_objectWithoutProperties","PhoneInputWithCountry_objectWithoutPropertiesLoose","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","p","PhoneInputWithCountry_defineProperty","PhoneInputWithCountry_PhoneNumberInput_","_React$PureComponent","PhoneNumberInput_","_possibleConstructorReturn","createRef","inputRef","current","ref","_this$props","focusInputOnCountrySelection","_this$state","state","newPhoneDigits","newValue","focus","setState","hasUserSelectedACountry","_phoneDigits","_this$props2","addInternationalOption","limitMaxLength","countryCallingCodeEditable","_this$state2","_onPhoneDigitsChange","_ref5","prevPhoneDigits","countryRequired","getAnyCountry","_value","onPhoneDigitsChange","getFirstSupportedCountry","stateUpdate","forceRerender","isFocused","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","_this$props3","_international","labels","_addInternationalOption","displayInitialValueAsLocalNumber","initialValueFormat","_metadata","_this$props4","_defaultCountry","_countries","preSelectedCountry","getPreSelectedCountry","subClass","superClass","_inherits","PhoneInputWithCountry_objectSpread","prevProps","newDefaultCountry","newReset","reset","prevDefaultCountry","prevValue","prevReset","_getInitialPhoneDigits","parameters","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","parsedCountry","hasUserSelectedACountryUpdate","supportedCountries","getPhoneInputWithCountryStateUpdateFromNewProps","onCountryChange","selectedCountry","prevState","generator","dependencies","_this$props5","countryOptionsOrder","order","optionsOnTop","optionsOnBottom","appendTo","index","splice","sortCountryOptions","countryNames","compareStringsLocales","_compareStrings","countrySelectOptions","unshift","ZZ","phoneInputHelpers_getCountrySelectOptions","countryOptions","getSupportedCountryOptions","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","getCountrySelectOptions","_this$props6","autoComplete","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","_this$state3","InputComponent","onCountryFocus","onCountryBlur","setInputRef","PureComponent","PhoneNumberInput","forwardRef","oneOf","oneOfType","any","PhoneInputWithCountry","PhoneInputWithCountryDefault_extends","createPhoneInput","defaultMetadata","PhoneInputDefault","_arguments","count_occurences","symbol","count","closeBraces","retained_template","template","placeholder","empty_placeholder","cut_before","opening_braces","closing_braces","dangling_braces","format_format","caret","should_close_braces","characters_in_template","value_character_index","filled_in_template","templateFormatter","found","possibly_last_input_character_index","isReadOnly","hasAttribute","getSelection","selectionStart","selectionEnd","start","end","Keys","setCaretPosition","caret_position","navigator","ANDROID_USER_AGENT_REG_EXP","userAgent","isAndroid","setSelectionRange","setTimeout","inputControl_onKeyDown","_parse","on_change","operation","keyCode","getOperation","preventDefault","selection","eraseSelection","formatInputText","_parse2","parse_character","focused_input_character_index","parse_parse","newValueAndCaret","edit","formatted","Input","onKeyDown","internalRef","setRef","_onChange","_onKeyDown","isEmptyValue","onCut","onPaste","react_Input","parseIncompletePhoneNumber","inputValuePrefix","InputSmart_extends","InputSmart_objectWithoutProperties","InputSmart_objectWithoutPropertiesLoose","getTemplate","toString","usePhoneDigits","useNationalFormatForDefaultCountryValue","countryMismatchDetected","onCountryMismatch","actualCountry","getPhoneDigitsForValue","_len","_key","_useState2","setPrevCountry","_useState4","setPrevDefaultCountry","_useState6","setPhoneDigits","_useState8","valueForPhoneDigits","setValueForPhoneDigits","_useState10","setRerenderTrigger","rerender","getValueForPhoneDigits","_countryMismatchDetected","onSetPhoneDigits","PhoneInput_slicedToArray","PhoneInput_arrayWithHoles","PhoneInput_iterableToArrayLimit","PhoneInput_nonIterableRest","PhoneInput_PhoneInput","Component","_usePhoneDigits2","modules_PhoneInput","PhoneInputBrowser_extends","PhoneInputBrowser_objectWithoutProperties","PhoneInputBrowser_objectWithoutPropertiesLoose","createInput","PhoneInput","PhoneNumber_PhoneNumber","isPossibleNumber_","SINGLE_IDD_PREFIX_REG_EXP","RFC3966","DEFAULT_OPTIONS","formatExtension","extension","formatNumber","addExtension","formatNationalNumber","fromCountry","iddPrefix","getIddPrefix","formatIDD","formatAs","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","chooseFormatForNumber","PhoneNumber_defineProperty","PhoneNumber","isCountryCode","national_number","isValidNumber","PhoneNumber_objectSpread","parsePhoneNumber_parsePhoneNumber","constants","EXTN_PATTERN","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","_parseInput","extract","throwOnError","startsAt","extractFormattedPhoneNumber","withExtensionStripped","numberWithoutExtension","matches","extractExtension","parseInput","formattedPhoneNumber","_parsePhoneNumber","defaultCallingCode","exactCountry","hasSelectedNumberingPlan","valid","extended","possible","formatIncompletePhoneNumber","parsePhoneNumberCharacter","_helpers_parseDigits__WEBPACK_IMPORTED_MODULE_0__","prevParsedCharacters","AsYouType_AsYouType","AsYouTypeState","onCallingCodeChange","properties","missingPlus","digits","resetNationalSignificantNumber","initCountryAndCallingCode","getNationalDigits","nationalSignificantNumberMatchesInput","complexPrefixBeforeNationalSignificantNumber","setCountry","setCallingCode","nextDigits","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","repeat","times","cutAndStripNonPairedParens","cutBeforeIndex","pop","cleared_string","_i2","_dangling_braces","stripNonPairedParens","formatCompleteNumber","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","useNationalPrefixFormattingRule","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","formattedNationalNumber","isValidFormattedNationalNumber","AsYouTypeFormatter_PatternMatcher_classCallCheck","AsYouTypeFormatter_PatternMatcher_defineProperties","AsYouTypeFormatter_PatternMatcher_createClass","PatternMatcher","matchTree","PatternParser","allowOverflow","_match","matchedChars","overflow","characters","tree","last","characterString","partialMatch","restCharacters","stringify","op","_result","_iterator2","_isArray2","_char","OPERATOR","context","or","instructions","parsePattern","_this$context$","branches","operator","before","rightPart","startContext","getContext","endContext","oneOfSet","parseOneOfSet","values","nextValue","fromCharCode","AsYouTypeFormatter_defineProperties","AsYouTypeFormatter_defineProperty","LONGEST_DUMMY_PHONE_NUMBER","NATIONAL_PREFIX_SEPARATORS_PATTERN","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","NON_ALTERING_FORMAT_REG_EXP","AsYouTypeFormatter_AsYouTypeFormatter","AsYouTypeFormatter","AsYouTypeFormatter_classCallCheck","isNANP","resetFormat","chosenFormat","nationalNumberTemplate","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","matchingFormats","narrowDownMatchingFormats","_this2","formattedCompleteNumber","setNationalNumberTemplate","lastIndexOf","formatNationalNumberWithNextDigits","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","_this3","leadingDigitsPatternIndex","formatSuits","formatMatches","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","Math","min","leadingDigitsPattern","_this4","_loop2","getFormatFormat","createTemplateForFormat","_loop","getTemplateForFormat","spacing","internationalPrefix","getInternationalPrefixBeforeCountryCallingCode","getDigitsWithoutInternationalPrefix","_ref7","strictPattern","nationalNumberDummyDigits","nationalPrefixIncludedInTemplate","numberFormat","numberFormatWithNationalPrefix","position","_i3","populateTemplateWithDigits","helpers_extractCountryCallingCode","AsYouTypeParser_defineProperties","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser_AsYouTypeParser","AsYouTypeParser","onNationalSignificantNumberChange","AsYouTypeParser_classCallCheck","justLeadingPlus","_extractFormattedDigi","_extractFormattedDigi4","extractedNumber","hasPlus","_extractFormattedDigitsAndPlus","formattedDigits","extractFormattedDigitsAndPlus","_extractFormattedDigi2","startInternationalNumber","inputDigits","hasReceivedThreeLeadingDigits","appendDigits","extractIddPrefix","isWaitingForCountryCallingCode","appendNationalSignificantNumberDigits","hasExtractedNationalSignificantNumber","extractNationalSignificantNumber","update","couldPossiblyExtractAnotherNationalSignificantNumber","nationalDigits","onExtractedNationalNumber","prevNationalSignificantNumber","_extractNationalNumbe2","nationalSignificantNumberIndex","extractAnotherNationalSignificantNumber","fixMissingPlus","extractCallingCodeAndNationalSignificantNumber","_extractCountryCallin2","newCallingCode","AsYouType_slicedToArray","AsYouType_arrayWithHoles","AsYouType_iterableToArrayLimit","AsYouType_nonIterableRest","AsYouType_defineProperties","optionsOrDefaultCountry","AsYouType_classCallCheck","_this$getCountryAndCa2","getCountryAndCallingCode","_this$parser$input","parser","formattedOutput","determineTheCountryIfNeeded","reExtractNationalSignificantNumber","getFullNumber","getNonFormattedNumber","isInternational","getCallingCode","_getCountry","isCountryCallingCodeAmbiguous","determineTheCountry","getNonFormattedNationalNumberWithPrefix","isPossible","isValid","getNonFormattedTemplate","_parsePhoneNumber__WEBPACK_IMPORTED_MODULE_0__","_parsePhoneNumberFromString___WEBPACK_IMPORTED_MODULE_1__","_normalizeArguments","formatPhoneNumber","formatPhoneNumberIntl"],"mappings":"CAACA,KAAK,+BAAiCA,KAAK,gCAAkC,IAAIC,KAAK,CAAC,CAAC,GAAG,CAEtF,KACA,SAAUC,EAAQC,EAAqBC,GAE7C,aAGAA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAqBG,KAClFF,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAqBI,KAClFH,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAqBK,KAarD,IAAIC,EAAiB,SAAWC,EAAGC,GAC9DD,EAAIA,EAAEE,MAAM,KACZD,EAAIA,EAAEC,MAAM,KAIZ,IAHA,IAAIC,EAAKH,EAAE,GAAGE,MAAM,KAChBE,EAAKH,EAAE,GAAGC,MAAM,KAEXG,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAKC,OAAOJ,EAAGE,IACfG,EAAKD,OAAOH,EAAGC,IACnB,GAAIC,EAAKE,EAAI,OAAO,EACpB,GAAIA,EAAKF,EAAI,OAAQ,EACrB,IAAKG,MAAMH,IAAOG,MAAMD,GAAK,OAAO,EACpC,GAAIC,MAAMH,KAAQG,MAAMD,GAAK,OAAQ,EAGvC,OAAIR,EAAE,IAAMC,EAAE,GACLD,EAAE,GAAKC,EAAE,GAAK,EAAID,EAAE,GAAKC,EAAE,IAAM,EAAI,GAGtCD,EAAE,IAAMC,EAAE,GAAK,EAAID,EAAE,KAAOC,EAAE,IAAM,EAAI,GAGlD,SAASS,EAAQC,GAWf,OATED,EADoB,oBAAXE,QAAoD,kBAApBA,OAAOC,SACtC,SAAiBF,GACzB,cAAcA,GAGN,SAAiBA,GACzB,OAAOA,GAAyB,oBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,GAItHD,EAAQC,GAGjB,SAASK,EAAgBC,EAAUC,GACjC,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCAIxB,SAASC,EAAkBC,EAAQC,GACjC,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAMC,OAAQlB,IAAK,CACrC,IAAImB,EAAaF,EAAMjB,GACvBmB,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeR,EAAQG,EAAWM,IAAKN,IAIlD,SAASO,EAAab,EAAac,EAAYC,GAG7C,OAFID,GAAYZ,EAAkBF,EAAYH,UAAWiB,GACrDC,GAAab,EAAkBF,EAAae,GACzCf,EAMT,IAKIgB,EAAqB,SACrBC,EAAuB,QAKvBvC,EAAwB,WAC1B,SAASA,EAASwC,GAChBpB,EAAgB1B,KAAMM,GAyhB1B,SAA0BwC,GACxB,IAAKA,EACH,MAAM,IAAIC,MAAM,6EAKlB,IAAKC,EAAUF,KAAcE,EAAUF,EAASG,WAC9C,MAAM,IAAIF,MAAM,sJAAsJG,OAAOF,EAAUF,GAAY,yBAA2BR,OAAOa,KAAKL,GAAUM,KAAK,MAAQ,KAAO,KAAOC,EAAQP,GAAY,KAAOA,EAAU,MA/hBpTQ,CAAiBR,GACjB9C,KAAK8C,SAAWA,EAChBS,EAAWC,KAAKxD,KAAM8C,GA4OxB,OAzOAL,EAAanC,EAAU,CAAC,CACtBkC,IAAK,eACLiB,MAAO,WACL,OAAOnB,OAAOa,KAAKnD,KAAK8C,SAASG,WAAWS,QAAO,SAAUC,GAC3D,MAAa,QAANA,OAGV,CACDnB,IAAK,qBACLiB,MAAO,SAA4BG,GACjC,OAAO5D,KAAK8C,SAASG,UAAUW,KAEhC,CACDpB,IAAK,gBACLiB,MAAO,WACL,KAAIzD,KAAK6D,IAAM7D,KAAK8D,IAAM9D,KAAK+D,IAG/B,OAAO/D,KAAK8C,SAASkB,eAAiBhE,KAAK8C,SAASmB,kBAErD,CACDzB,IAAK,aACLiB,MAAO,SAAoBS,GACzB,YAA4CC,IAArCnE,KAAKoE,mBAAmBF,KAEhC,CACD1B,IAAK,iBACLiB,MAAO,SAAwBY,GAC7B,GAAIrE,KAAKsE,8BAA8BD,GACrC,OAAO,EAGT,GAAIrE,KAAKgE,iBACP,GAAIhE,KAAKgE,gBAAgBK,GACvB,OAAO,MAEJ,CAEL,IAAIE,EAAevE,KAAKwE,sBAAsBH,GAE9C,GAAIE,GAAwC,IAAxBA,EAAatC,QAAoC,QAApBsC,EAAa,GAC5D,OAAO,KAIZ,CACD/B,IAAK,6BACLiB,MAAO,SAAoCY,GACzC,OAAIrE,KAAKgE,kBACAhE,KAAKgE,gBAAgBK,IAErBrE,KAAKsE,8BAA8BD,KAI7C,CACD7B,IAAK,UACLiB,MAAO,SAAiBG,GACtB,OAAO5D,KAAKyE,oBAAoBb,KAEjC,CACDpB,IAAK,sBACLiB,MAAO,SAA6BG,EAAaS,GAO/C,GALIT,GAAef,EAAqB6B,KAAKd,KAC3CS,EAAcT,EACdA,EAAc,MAGZA,GAA+B,QAAhBA,EAAuB,CACxC,IAAK5D,KAAK2E,WAAWf,GACnB,MAAM,IAAIb,MAAM,oBAAoBG,OAAOU,IAG7C5D,KAAK4E,cAAgB,IAAIC,EAAc7E,KAAKoE,mBAAmBR,GAAc5D,WACxE,GAAIqE,EAAa,CACtB,IAAKrE,KAAK8E,eAAeT,GACvB,MAAM,IAAItB,MAAM,yBAAyBG,OAAOmB,IAGlDrE,KAAK4E,cAAgB,IAAIC,EAAc7E,KAAK+E,yBAAyBV,GAAcrE,WAEnFA,KAAK4E,mBAAgBT,EAGvB,OAAOnE,OAER,CACDwC,IAAK,gCACLiB,MAAO,SAAuCY,GAC5C,IAAIE,EAAevE,KAAKwE,sBAAsBH,GAE9C,GAAIE,EAAc,CAUhB,GAA4B,IAAxBA,EAAatC,QAA2C,IAA3BsC,EAAa,GAAGtC,OAC/C,OAGF,OAAOsC,KAGV,CACD/B,IAAK,+BACLiB,MAAO,SAAsCY,GAC3C,IAAIE,EAAevE,KAAKsE,8BAA8BD,GAEtD,GAAIE,EACF,OAAOA,EAAa,KAGvB,CACD/B,IAAK,2BACLiB,MAAO,SAAkCY,GACvC,IAAIT,EAAc5D,KAAKgF,6BAA6BX,GAEpD,GAAIT,EACF,OAAO5D,KAAKoE,mBAAmBR,GAGjC,GAAI5D,KAAKgE,gBAAiB,CACxB,IAAIlB,EAAW9C,KAAKgE,gBAAgBK,GAEpC,GAAIvB,EACF,OAAOA,MAEJ,CAEL,IAAIyB,EAAevE,KAAKwE,sBAAsBH,GAE9C,GAAIE,GAAwC,IAAxBA,EAAatC,QAAoC,QAApBsC,EAAa,GAC5D,OAAOvE,KAAK8C,SAASG,UAAU,UAKpC,CACDT,IAAK,qBACLiB,MAAO,WACL,OAAOzD,KAAK4E,cAAcP,gBAG3B,CACD7B,IAAK,YACLiB,MAAO,WACL,OAAOzD,KAAK4E,cAAcK,cAG3B,CACDzC,IAAK,mBACLiB,MAAO,WACL,OAAOzD,KAAK4E,cAAcM,qBAG3B,CACD1C,IAAK,wBACLiB,MAAO,WACL,OAAOzD,KAAK4E,cAAcO,0BAG3B,CACD3C,IAAK,kBACLiB,MAAO,WACL,OAAOzD,KAAK4E,cAAcQ,oBAG3B,CACD5C,IAAK,UACLiB,MAAO,WACL,OAAOzD,KAAK4E,cAAcS,YAG3B,CACD7C,IAAK,2BACLiB,MAAO,WACL,OAAOzD,KAAK4E,cAAcU,6BAG3B,CACD9C,IAAK,8BACLiB,MAAO,WACL,OAAOzD,KAAK4E,cAAcW,gCAG3B,CACD/C,IAAK,gBACLiB,MAAO,WACL,OAAOzD,KAAK4E,cAAcY,kBAG3B,CACDhD,IAAK,WACLiB,MAAO,WACL,OAAOzD,KAAK4E,cAAca,aAG3B,CACDjD,IAAK,OACLiB,MAAO,SAAciC,GACnB,OAAO1F,KAAK4E,cAAce,KAAKD,KAGhC,CACDlD,IAAK,MACLiB,MAAO,WACL,OAAOzD,KAAK4E,cAAcgB,QAE3B,CACDpD,IAAK,sBACLiB,MAAO,WACL,OAAIzD,KAAK6D,GAAW7D,KAAK8C,SAAS+C,gCAC3B7F,KAAK8C,SAASgD,wBAGtB,CACDtD,IAAK,oCACLiB,MAAO,SAA2CY,GAChD,OAAOrE,KAAKyE,oBAAoBJ,KAEjC,CACD7B,IAAK,2BACLiB,MAAO,WACL,YAA8BU,IAAvBnE,KAAK4E,kBAITtE,EAlPmB,GAuPxBuE,EAA6B,WAC/B,SAASA,EAAc/B,EAAUiD,GAC/BrE,EAAgB1B,KAAM6E,GAEtB7E,KAAK+F,qBAAuBA,EAC5B/F,KAAK8C,SAAWA,EAChBS,EAAWC,KAAKxD,KAAM+F,EAAqBjD,UAwJ7C,OArJAL,EAAaoC,EAAe,CAAC,CAC3BrC,IAAK,cACLiB,MAAO,WACL,OAAOzD,KAAK8C,SAAS,KAQtB,CACDN,IAAK,qCACLiB,MAAO,WACL,OAAOzD,KAAK+F,qBAAqBhB,yBAAyB/E,KAAKqE,iBAGhE,CACD7B,IAAK,YACLiB,MAAO,WACL,IAAIzD,KAAK6D,KAAM7D,KAAK8D,GACpB,OAAO9D,KAAK8C,SAAS,KAGtB,CACDN,IAAK,mBACLiB,MAAO,WACL,IAAIzD,KAAK6D,KAAM7D,KAAK8D,GACpB,OAAO9D,KAAK8C,SAAS,MAEtB,CACDN,IAAK,wBACLiB,MAAO,WACL,OAAIzD,KAAK6D,IAAM7D,KAAK8D,GAAW9D,KAAK8C,SAAS,GACtC9C,KAAK8C,SAAS,KAGtB,CACDN,IAAK,kBACLiB,MAAO,WACL,IAAIzD,KAAK6D,GACT,OAAO7D,KAAK8C,SAAS9C,KAAK8D,GAAK,EAAI,KAEpC,CACDtB,IAAK,cACLiB,MAAO,SAAqBX,GAC1B,OAAOA,EAAS9C,KAAK6D,GAAK,EAAI7D,KAAK8D,GAAK,EAAI,KAK7C,CACDtB,IAAK,UACLiB,MAAO,WACL,IAAIuC,EAAQhG,KAERqF,EAAUrF,KAAKiG,YAAYjG,KAAK8C,WAAa9C,KAAKiG,YAAYjG,KAAKkG,uCAAyC,GAChH,OAAOb,EAAQc,KAAI,SAAUxC,GAC3B,OAAO,IAAIyC,EAAOzC,EAAGqC,QAGxB,CACDxD,IAAK,iBACLiB,MAAO,WACL,OAAOzD,KAAK8C,SAAS9C,KAAK6D,GAAK,EAAI7D,KAAK8D,GAAK,EAAI,KAElD,CACDtB,IAAK,mCACLiB,MAAO,SAA0CX,GAC/C,OAAOA,EAAS9C,KAAK6D,GAAK,EAAI7D,KAAK8D,GAAK,EAAI,KAK7C,CACDtB,IAAK,+BACLiB,MAAO,WACL,OAAOzD,KAAKqG,iCAAiCrG,KAAK8C,WAAa9C,KAAKqG,iCAAiCrG,KAAKkG,wCAE3G,CACD1D,IAAK,4BACLiB,MAAO,WACL,OAAOzD,KAAK8C,SAAS9C,KAAK6D,GAAK,EAAI7D,KAAK8D,GAAK,EAAI,KAElD,CACDtB,IAAK,2BACLiB,MAAO,WAGL,OAAOzD,KAAKsG,6BAA+BtG,KAAKuG,mBAEjD,CACD/D,IAAK,8BACLiB,MAAO,WACL,OAAOzD,KAAK8C,SAAS9C,KAAK6D,GAAK,EAAI7D,KAAK8D,GAAK,EAAI,KAElD,CACDtB,IAAK,6CACLiB,MAAO,WACL,QAASzD,KAAK8C,SAAS9C,KAAK6D,GAAK,EAAI7D,KAAK8D,GAAK,EAAI,KAMpD,CACDtB,IAAK,yDACLiB,MAAO,WACL,OAAOzD,KAAKwG,2CAA2CxG,KAAK8C,WAAa9C,KAAKwG,2CAA2CxG,KAAKkG,wCAE/H,CACD1D,IAAK,gBACLiB,MAAO,WACL,OAAOzD,KAAK8C,SAAS9C,KAAK6D,GAAK,EAAI7D,KAAK8D,GAAK,EAAI,MAElD,CACDtB,IAAK,QACLiB,MAAO,WACL,OAAOzD,KAAK8C,SAAS9C,KAAK6D,GAAK,EAAI7D,KAAK8D,GAAK,GAAK,MAEnD,CACDtB,IAAK,WACLiB,MAAO,WAIL,QAAIzD,KAAKyG,SAAmC,IAAxBzG,KAAKyG,QAAQxE,WAMxBjC,KAAKyG,UAEf,CACDjE,IAAK,OACLiB,MAAO,SAAciD,GACnB,GAAI1G,KAAKyF,YAAckB,EAAQ3G,KAAKyG,QAASC,GAC3C,OAAO,IAAIE,EAAKD,EAAQ3G,KAAKyG,QAASC,GAAS1G,QAGlD,CACDwC,IAAK,MACLiB,MAAO,WACL,OAAIzD,KAAK6D,IAAM7D,KAAK8D,GAAWlB,EACxB5C,KAAK8C,SAAS,KAAOF,MAIzBiC,EA9JwB,GAiK7BuB,EAAsB,WACxB,SAASA,EAAOS,EAAQ/D,GACtBpB,EAAgB1B,KAAMoG,GAEtBpG,KAAK8G,QAAUD,EACf7G,KAAK8C,SAAWA,EAwDlB,OArDAL,EAAa2D,EAAQ,CAAC,CACpB5D,IAAK,UACLiB,MAAO,WACL,OAAOzD,KAAK8G,QAAQ,KAErB,CACDtE,IAAK,SACLiB,MAAO,WACL,OAAOzD,KAAK8G,QAAQ,KAErB,CACDtE,IAAK,wBACLiB,MAAO,WACL,OAAOzD,KAAK8G,QAAQ,IAAM,KAE3B,CACDtE,IAAK,+BACLiB,MAAO,WACL,OAAOzD,KAAK8G,QAAQ,IAAM9G,KAAK8C,SAASiE,iCAEzC,CACDvE,IAAK,yDACLiB,MAAO,WACL,QAASzD,KAAK8G,QAAQ,IAAM9G,KAAK8C,SAASkE,2DAE3C,CACDxE,IAAK,0DACLiB,MAAO,WAML,OAAOzD,KAAKiH,uBAAyBjH,KAAKgH,2DAG3C,CACDxE,IAAK,qBACLiB,MAAO,WACL,SAAOzD,KAAK+G,gCACXG,EAAgCxC,KAAK1E,KAAK+G,mCAM5C,CACDvE,IAAK,sBACLiB,MAAO,WACL,OAAOzD,KAAK8G,QAAQ,IAAM9G,KAAK6G,aAI5BT,EA7DiB,GAsEtBc,EAAkC,cAElCN,EAAoB,WACtB,SAASA,EAAKjB,EAAM7C,GAClBpB,EAAgB1B,KAAM4G,GAEtB5G,KAAK2F,KAAOA,EACZ3F,KAAK8C,SAAWA,EAiBlB,OAdAL,EAAamE,EAAM,CAAC,CAClBpE,IAAK,UACLiB,MAAO,WACL,OAAIzD,KAAK8C,SAASe,GAAW7D,KAAK2F,KAC3B3F,KAAK2F,KAAK,KAElB,CACDnD,IAAK,kBACLiB,MAAO,WACL,IAAIzD,KAAK8C,SAASe,GAClB,OAAO7D,KAAK2F,KAAK,IAAM3F,KAAK8C,SAASsC,sBAIlCwB,EAtBe,GAyBxB,SAASD,EAAQF,EAAOd,GACtB,OAAQA,GACN,IAAK,aACH,OAAOc,EAAM,GAEf,IAAK,SACH,OAAOA,EAAM,GAEf,IAAK,YACH,OAAOA,EAAM,GAEf,IAAK,eACH,OAAOA,EAAM,GAEf,IAAK,kBACH,OAAOA,EAAM,GAEf,IAAK,YACH,OAAOA,EAAM,GAEf,IAAK,MACH,OAAOA,EAAM,GAEf,IAAK,QACH,OAAOA,EAAM,GAEf,IAAK,OACH,OAAOA,EAAM,GAEf,IAAK,cACH,OAAOA,EAAM,IAmBnB,IAAIzD,EAAY,SAAmBW,GACjC,MAAsB,WAAfvC,EAAQuC,IAObN,EAAU,SAAiBM,GAC7B,OAAOvC,EAAQuC,IAiCjB,SAASpD,EAAsB2D,EAASpB,GAGtC,IAFAA,EAAW,IAAIxC,EAASwC,IAEX6B,WAAWT,GACtB,OAAOpB,EAASoB,QAAQA,GAASiD,qBAGnC,MAAM,IAAIpE,MAAM,oBAAoBG,OAAOgB,IAE7C,SAAS1D,EAAmB0D,EAASpB,GAGnC,YAAuCqB,IAAhCrB,EAASG,UAAUiB,GAG5B,SAASX,EAAWT,GAClB,IAAIsE,EAAUtE,EAASsE,QAEA,kBAAZA,GACTpH,KAAK6D,GAAiB,IAAZuD,EACVpH,KAAK8D,GAAiB,IAAZsD,EACVpH,KAAK+D,GAAiB,IAAZqD,EACVpH,KAAKqH,GAAiB,IAAZD,GAELA,GAEuC,IAAjC3G,EAAe2G,EAvnBrB,SAwnBHpH,KAAK8D,IAAK,GACgC,IAAjCrD,EAAe2G,EAvnBrB,UAwnBHpH,KAAK+D,IAAK,EAEV/D,KAAKqH,IAAK,EANVrH,KAAK6D,IAAK,IAgBV,KACA,SAAU3D,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOmH,KACpElH,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOoH,KACpEnH,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOqH,KACpEpH,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOsH,KAEpErH,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOuH,KACpEtH,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOwH,KAEnG,IAAIL,EAAqB,EAGrBC,EAAqB,GAErBC,EAA0B,EAG1BC,EAAe,6CAafC,EAAoB,GAAGxE,OAXd,oCAW6BA,OAV5B,WAU4CA,OAT/C,WAS4DA,OARtD,+BAQyEA,OAP3E,oCAO4FA,OAL9F,uBAMTyE,EAAa,WAIX,KACA,SAAUzH,EAAQC,EAAqBC,GAE7C,aAOA,SAASwH,EAAgBC,EAAMC,GAI7B,OADAD,EAAOA,GAAQ,GACR,IAAIE,OAAO,OAASD,EAAqB,MAAMpD,KAAKmD,GAV9BzH,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOyH,MAe7F,KACA,SAAU1H,EAAQC,EAAqBC,GAE7C,aAE+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO6H,KACpE5H,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO8H,KAOnG,IAAIC,EAAS,CACX,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,EAAK,IACL,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,IAEV,SAAU,KAGZ,SAASF,EAAWG,GAClB,OAAOD,EAAOC,GAgBhB,SAASF,EAAYG,GACnB,IAAIC,EAAS,GAOJC,EAAYF,EAAOxH,MAAM,IAAK2H,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAjF,IAAoFJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CACrJ,IAAIoH,EAEJ,GAAIJ,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5B0G,EAAOL,EAAUI,SACZ,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGjF,MAGZ,IACIqF,EAAQd,EADIW,GAGZG,IACFT,GAAUS,GAId,OAAOT,IAKH,KACA,SAAUnI,EAAQC,EAAqBC,GAE7C,aA+CA,SAAS2I,EAAkBC,EAAgBlG,GACzC,OAAOmG,EAAyBD,OAAgB7E,EAAWrB,GAI7D,SAASmG,EAAyBD,EAAgBrD,EAAM7C,GACtD,IAAIoG,EAAYpG,EAAS6C,KAAKA,GAQ1BwD,EAAmBD,GAAaA,EAAU9D,mBAAqBtC,EAASsC,kBAG5E,IAAK+D,EACH,MAAO,cAGT,GAAa,yBAATxD,EAAiC,CAInC,IAAK7C,EAAS6C,KAAK,cAGjB,OAAOsD,EAAyBD,EAAgB,SAAUlG,GAG5D,IAAIsG,EAActG,EAAS6C,KAAK,UAE5ByD,IAMFD,EAxEN,SAAqBzI,EAAGC,GACtB,IAAI0I,EAAS3I,EAAE4I,QAENhB,EAAY3H,EAAG4H,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAlE,IAAqEJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CACtI,IAAIoH,EAEJ,GAAIJ,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5B0G,EAAOL,EAAUI,SACZ,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGjF,MAGZ,IAAI8F,EAAUZ,EAEVjI,EAAE8I,QAAQD,GAAW,GACvBF,EAAOpJ,KAAKsJ,GAIhB,OAAOF,EAAOI,MAAK,SAAU/I,EAAGC,GAC9B,OAAOD,EAAIC,KAiDU+I,CAAYP,EAAkBC,EAAYhE,yBAU5D,GAAIO,IAASuD,EAChB,MAAO,iBAGT,IAAIS,EAAgBX,EAAe/G,OAQ/B2H,EAAiBT,EAAiB,GAEtC,OAAIS,IAAmBD,EACd,cAGLC,EAAiBD,EACZ,YAGLR,EAAiBA,EAAiBlH,OAAS,GAAK0H,EAC3C,WAIFR,EAAiBK,QAAQG,EAAe,IAAM,EAAI,cAAgB,iBAxH3EvJ,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAqB4I,MA6H5E,KACA,SAAU7I,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO0J,KACpEzJ,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO2J,KAC9E,IAAIC,EAAiE3J,EAAoB,MAM1GyJ,EAAsB,SAC1B,SAASC,EAAgCE,EAAQnD,EAAQ8B,GACvD,IAAIsB,EAAyBtB,EAAKsB,uBAC9BC,EAAqBvB,EAAKuB,mBAG1BC,GAFcxB,EAAKyB,YACRzB,EAAK7F,SACEkH,EAAOK,QAAQ,IAAItC,OAAOlB,EAAOyD,WAAYL,EAAyBpD,EAAO0D,sBAanGL,GAAsBrD,EAAOE,+BAAiCF,EAAOA,SAASwD,QAAQR,EAAqBhD,EAAOE,gCAAkCF,EAAOA,WAE3J,OAAIoD,EACK3H,OAAOyH,EAAgF,EAAvFzH,CAA0F6H,GAG5FA,IAKH,KACA,SAAUjK,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOqK,KAC9E,IAAIC,EAAyCrK,EAAoB,MAC7DsK,EAA0CtK,EAAoB,MAGnFuK,EAA0B,IAAI5C,OAAO,KAAO2C,EAA8D,EAAI,MAClH,SAASF,EAAeR,EAAQ9F,EAASG,EAAavB,GACpD,GAAKoB,EAAL,CAKA,IAAI0G,EAAkB,IAAIH,EAAwD,EAAE3H,GACpF8H,EAAgBnG,oBAAoBP,EAASG,GAC7C,IAAIwG,EAAmB,IAAI9C,OAAO6C,EAAgB3F,aAElD,GAAwC,IAApC+E,EAAOc,OAAOD,GAAlB,CAUA,IAAIE,GALJf,EAASA,EAAOV,MAAMU,EAAOgB,MAAMH,GAAkB,GAAG5I,SAK7B+I,MAAML,GAEjC,KAAII,GAAqC,MAApBA,EAAc,IAAcA,EAAc,GAAG9I,OAAS,GAChD,MAArB8I,EAAc,IAKpB,OAAOf,MAKH,KACA,SAAU9J,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO8K,KAC9E,IAAIR,EAAyCrK,EAAoB,MAC7D8K,EAAgD9K,EAAoB,MACpE+K,EAAsD/K,EAAoB,MAC1EgL,EAAkDhL,EAAoB,MAgB/F,SAAS6K,EAAgEjB,EAAQ9F,EAASG,EAAavB,GACrG,IAAIqE,EAAqBjD,EAAU5B,OAAOmI,EAAsE,EAA7EnI,CAAgF4B,EAASpB,GAAYuB,EAExI,GAA2C,IAAvC2F,EAAOR,QAAQrC,GAA2B,EAC5CrE,EAAW,IAAI2H,EAAwD,EAAE3H,IAChE2B,oBAAoBP,EAASG,GACtC,IAAIgH,EAAwBrB,EAAOV,MAAMnC,EAAmBlF,QAGxDqJ,EADwBhJ,OAAO6I,EAAqE,EAA5E7I,CAA+E+I,EAAuBvI,GACxEkG,eAGtDA,EADyB1G,OAAO6I,EAAqE,EAA5E7I,CAA+E0H,EAAQlH,GACxEkG,eAU5C,IAAK1G,OAAO4I,EAA+D,EAAtE5I,CAAyE0G,EAAgBlG,EAASqC,0BAA4B7C,OAAO4I,EAA+D,EAAtE5I,CAAyEgJ,EAA+BxI,EAASqC,0BAAqI,aAAzG7C,OAAO8I,EAAiE,EAAxE9I,CAA2E0G,EAAgBlG,GACzW,MAAO,CACLqE,mBAAoBA,EACpB6C,OAAQqB,GAKd,MAAO,CACLrB,OAAQA,KAMN,KACA,SAAU9J,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOoL,KAE9E,IAAId,EAAyCrK,EAAoB,MAC7D8K,EAAgD9K,EAAoB,MAGzFoL,EAA6B,CAAC,SAAU,eAAgB,YAAa,cAAe,OAAQ,kBAAmB,QAAS,MAAO,aAEnI,SAASD,EAAcE,EAAOC,EAAS5I,GAMrC,GAHA4I,EAAUA,GAAW,GAGhBD,EAAMvH,QAAX,EAIApB,EAAW,IAAI2H,EAAwD,EAAE3H,IAChE2B,oBAAoBgH,EAAMvH,QAASuH,EAAMtE,oBAClD,IAAI6B,EAAiB0C,EAAQ5H,GAAK2H,EAAMzC,eAAiByC,EAAME,MAI/D,GAAKrJ,OAAO4I,EAA+D,EAAtE5I,CAAyE0G,EAAgBlG,EAASqC,yBAAvG,CAKA,GAAIyG,EAAoB5C,EAAgB,aAAclG,GAKpD,OAAIA,EAAS6C,KAAK,WAAmD,KAAtC7C,EAAS6C,KAAK,UAAU2E,UAC9C,uBAMJxH,EAAS6C,KAAK,UAQfiG,EAAoB5C,EAAgB,SAAUlG,GACzC,uBAGF,aAXE,uBAcX,IAAK,IAAI4F,EAAK,EAAGmD,EAAwBL,EAA4B9C,EAAKmD,EAAsB5J,OAAQyG,IAAM,CAC5G,IAAI/C,EAAOkG,EAAsBnD,GAEjC,GAAIkD,EAAoB5C,EAAgBrD,EAAM7C,GAC5C,OAAO6C,KAIb,SAASiG,EAAoB5C,EAAgBrD,EAAM7C,GAGjD,UAFA6C,EAAO7C,EAAS6C,KAAKA,MAEPA,EAAK2E,eAUf3E,EAAKP,mBAAqBO,EAAKP,kBAAkBoE,QAAQR,EAAe/G,QAAU,IAI/EK,OAAO4I,EAA+D,EAAtE5I,CAAyE0G,EAAgBrD,EAAK2E,cAKjG,KACA,SAAUpK,EAAQC,EAAqBC,GAE7C,aAE+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO2L,KACxB1L,EAAoB,MAC/F,SAASgB,EAAQC,GAWf,OATED,EADoB,oBAAXE,QAAoD,kBAApBA,OAAOC,SACtC,SAAiBF,GACzB,cAAcA,GAGN,SAAiBA,GACzB,OAAOA,GAAyB,oBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,GAItHD,EAAQC,GAsBjB,SAAS0K,EAAgB1K,EAAKmB,EAAKiB,GAYjC,OAXIjB,KAAOnB,EACTiB,OAAOC,eAAelB,EAAKmB,EAAK,CAC9BiB,MAAOA,EACPtB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZhB,EAAImB,GAAOiB,EAGNpC,EAGT,SAAS2K,EAAeC,EAAKlL,GAC3B,OAiCF,SAAyBkL,GACvB,GAAIzD,MAAMC,QAAQwD,GAAM,OAAOA,EAlCxBC,CAAgBD,IAOzB,SAA+BA,EAAKlL,GAClC,IAAIoL,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKnI,EAET,IACE,IAAK,IAAiCoI,EAA7B7D,EAAKuD,EAAI3K,OAAOC,cAAmB6K,GAAMG,EAAK7D,EAAGE,QAAQC,QAChEsD,EAAKlM,KAAKsM,EAAG9I,QAET1C,GAAKoL,EAAKlK,SAAWlB,GAH8CqL,GAAK,IAK9E,MAAOI,GACPH,GAAK,EACLC,EAAKE,EACL,QACA,IACOJ,GAAsB,MAAhB1D,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAI2D,EAAI,MAAMC,GAIlB,OAAOH,EA9BwBM,CAAsBR,EAAKlL,IAG5D,WACE,MAAM,IAAIc,UAAU,wDAJ4C6K,GA8ClE,SAASZ,EAAmBa,GAC1B,IAOI9E,EACA6D,EACA5I,EARA8J,EAAyBZ,EADDxD,MAAM/G,UAAU6H,MAAM9F,KAAKmJ,GACY,GAC/DE,EAAQD,EAAuB,GAC/BE,EAAQF,EAAuB,GAC/BG,EAAQH,EAAuB,GAC/BI,EAAQJ,EAAuB,GAOnC,GAAqB,kBAAVC,EAEJ,MAAM,IAAIhL,UAAU,wCAI3B,GALEgG,EAAOgF,EAKJC,GAA0B,kBAAVA,EAgBhB,CAAA,IAAIG,EAASH,GAOX,MAAM,IAAI/J,MAAM,4BAA4BG,OAAO4J,IANpDC,GACFrB,EAAUoB,EACVhK,EAAWiK,GAEXjK,EAAWgK,OApBTE,GACFtB,EAAUqB,EACVjK,EAAWkK,IAEXtB,OAAUvH,EACVrB,EAAWiK,GAGTD,IACFpB,EA9GN,SAAuB3J,GACrB,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAAyB,MAAhBD,UAAUnM,GAAamM,UAAUnM,GAAK,GAC/CqM,EAAU9K,OAAOa,KAAKgK,GAEkB,oBAAjC7K,OAAO+K,wBAChBD,EAAUA,EAAQlK,OAAOZ,OAAO+K,sBAAsBF,GAAQzJ,QAAO,SAAU4J,GAC7E,OAAOhL,OAAOiL,yBAAyBJ,EAAQG,GAAKnL,gBAIxDiL,EAAQI,SAAQ,SAAUhL,GACxBuJ,EAAgBhK,EAAQS,EAAK2K,EAAO3K,OAIxC,OAAOT,EA8FO0L,CAAc,CACtBC,eAAgBZ,GACfpB,IAaP,MAAO,CACL7D,KAAMA,EACN6D,QAASA,EACT5I,SAAUA,GAMd,IAAImK,EAAW,SAAkBtJ,GAC/B,MAAsB,WAAfvC,EAAQuC,KAKX,KACA,SAAUzD,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOwN,KAC9E,IAAIC,EAAkDxN,EAAoB,MACtEyN,EAA2CzN,EAAoB,MAC/D0N,EAAyC1N,EAAoB,MAoBtF,SAAS2L,EAAgB1K,EAAKmB,EAAKiB,GAYjC,OAXIjB,KAAOnB,EACTiB,OAAOC,eAAelB,EAAKmB,EAAK,CAC9BiB,MAAOA,EACPtB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZhB,EAAImB,GAAOiB,EAGNpC,EAMT,SAASsM,EAA2B9F,EAAM6D,EAAS5I,GAE7C4I,GAAWA,EAAQgC,iBAAmBpL,OAAOwL,EAAmE,EAA1ExL,CAA6EoJ,EAAQgC,eAAgB5K,KAC7I4I,EAxCJ,SAAuB3J,GACrB,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAAyB,MAAhBD,UAAUnM,GAAamM,UAAUnM,GAAK,GAC/CqM,EAAU9K,OAAOa,KAAKgK,GAEkB,oBAAjC7K,OAAO+K,wBAChBD,EAAUA,EAAQlK,OAAOZ,OAAO+K,sBAAsBF,GAAQzJ,QAAO,SAAU4J,GAC7E,OAAOhL,OAAOiL,yBAAyBJ,EAAQG,GAAKnL,gBAIxDiL,EAAQI,SAAQ,SAAUhL,GACxBuJ,EAAgBhK,EAAQS,EAAK2K,EAAO3K,OAIxC,OAAOT,EAwBK0L,CAAc,GAAI/B,EAAS,CACnCgC,oBAAgBvJ,KAKpB,IACE,OAAO7B,OAAOsL,EAAiE,EAAxEtL,CAA2EuF,EAAM6D,EAAS5I,GACjG,MAAOiL,GAEP,KAAIA,aAAiBF,EAA0D,GAE7E,MAAME,KAON,KACA,SAAU7N,GAEhBA,EAAO8N,QAAUC,KAAKC,MAAM,wmrFAItB,KACA,SAAUhO,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOgO,KAC9E,IAAIC,EAA0ChO,EAAoB,MAgCvF,SAAS+N,EAAiChE,GACxC,OAAOA,EAAgBE,QAAQ,IAAItC,OAAO,IAAI7E,OAAOkL,EAAmE,EAAG,MAAO,KAAM,KAAKC,SAKzI,KACA,SAAUnO,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOmO,KAC9E,IAAIC,EAA+CnO,EAAoB,MACnEoO,EAAgGpO,EAAoB,MACpH0N,EAAyC1N,EAAoB,MAC7DqO,EAA0CrO,EAAoB,MAwBvF,SAASkO,EAA0BtE,EAAQ9F,EAASG,EAAavB,GAC/D,IAAKkH,EACH,MAAO,GAUT,GAAkB,MAAdA,EAAO,GAAY,CAGrB,IAAI0E,EAAmBpM,OAAOiM,EAA8D,EAArEjM,CAAwE0H,EAAQ9F,EAASG,EAAavB,GAI7H,IAAI4L,GAAoBA,IAAqB1E,EAEtC,CAKL,GAAI9F,GAAWG,EAAa,CAC1B,IAAIsK,EAAwBrM,OAAOkM,EAA+G,EAAtHlM,CAAyH0H,EAAQ9F,EAASG,EAAavB,GAC/KqE,EAAqBwH,EAAsBxH,mBAC3CyH,EAAgBD,EAAsB3E,OAE1C,GAAI7C,EACF,MAAO,CACLA,mBAAoBA,EACpB6C,OAAQ4E,GAKd,MAAO,CACL5E,OAAQA,GApBVA,EAAS,IAAM0E,EA0BnB,GAAkB,MAAd1E,EAAO,GACT,MAAO,GAGTlH,EAAW,IAAIgL,EAAwD,EAAEhL,GAYzE,IAFA,IAAI/B,EAAI,EAEDA,EAAI,GAAK0N,EAAyE,GAAK1N,GAAKiJ,EAAO/H,QAAQ,CAChH,IAAI4M,EAAsB7E,EAAOV,MAAM,EAAGvI,GAE1C,GAAI+B,EAASgC,eAAe+J,GAE1B,OADA/L,EAAS2B,oBAAoBoK,GACtB,CACL1H,mBAAoB0H,EACpB7E,OAAQA,EAAOV,MAAMvI,IAIzBA,IAGF,MAAO,KAKH,KACA,SAAUb,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO2O,KAC9E,IAAIC,EAAkF3O,EAAoB,MACtG8K,EAAgD9K,EAAoB,MACpE4O,EAAkD5O,EAAoB,MAc/F,SAAS0O,EAAsB9E,EAAQlH,GAUrC,IAAImM,EAAwB3M,OAAOyM,EAAiG,EAAxGzM,CAA2G0H,EAAQlH,GAC3IkG,EAAiBiG,EAAsBjG,eACvCoB,EAAc6E,EAAsB7E,YAExC,IAwDF,SAAqCJ,EAAQkF,EAA2BpM,GAGtE,GAAIR,OAAO4I,EAA+D,EAAtE5I,CAAyE0H,EAAQlH,EAASqC,2BAA6B7C,OAAO4I,EAA+D,EAAtE5I,CAAyE4M,EAA2BpM,EAASqC,yBACtO,OAAO,EAQT,OAAO,EApEFgK,CAA4BnF,EAAQhB,EAAgBlG,GAEvD,MAAO,CACLkG,eAAgBgB,GAapB,GAAIA,EAAO/H,SAAW+G,EAAe/G,QAAUmI,EAAcA,EAAYnI,OAAS,IAG5Ea,EAASsC,kBAMX,OAAQ9C,OAAO0M,EAAiE,EAAxE1M,CAA2E0G,EAAgBlG,IACjG,IAAK,YACL,IAAK,iBAGH,MAAO,CACLkG,eAAgBgB,GAM1B,MAAO,CACLhB,eAAgBA,EAChBoB,YAAaA,KAkCX,KACA,SAAUlK,EAAQC,EAAqBC,GAE7C,aAeA,SAASgP,EAAkDpF,EAAQlH,GACjE,GAAIkH,GAAUlH,EAAS8B,cAAcU,2BAA4B,CAI/D,IAAI+J,EAAgB,IAAItH,OAAO,OAASjF,EAAS8B,cAAcU,2BAA6B,KACxFgK,EAAcD,EAAcE,KAAKvF,GAErC,GAAIsF,EAAa,CACf,IAAItG,EACAoB,EAqDA7D,EApCAiJ,EAAsBF,EAAYrN,OAAS,EAC3CwN,EAAoBD,EAAsB,GAAKF,EAAYE,GAE/D,GAAI1M,EAASyC,+BAAiCkK,EAC5CzG,EAAiBgB,EAAOK,QAAQgF,EAAevM,EAASyC,+BAGpDiK,EAAsB,IACxBpF,EAAckF,EAAY,QAQzB,CAMH,IAAII,EAA6BJ,EAAY,GAC7CtG,EAAiBgB,EAAOV,MAAMoG,EAA2BzN,QAGrDwN,IACFrF,EAAckF,EAAY,IAW9B,GAAIG,EAAmB,CACrB,IAAIE,EAA0C3F,EAAOR,QAAQ8F,EAAY,IAC5CtF,EAAOV,MAAM,EAAGqG,KAOd7M,EAAS8B,cAAc2B,mBACpDA,EAAiBzD,EAAS8B,cAAc2B,uBAG1CA,EAAiB+I,EAAY,GAG/B,MAAO,CACLtG,eAAgBA,EAChBzC,eAAgBA,EAChB6D,YAAaA,IAKnB,MAAO,CACLpB,eAAgBgB,GAxGW5J,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOiP,MA8G7F,KACA,SAAUlP,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOyP,KAC9E,IAAInF,EAAyCrK,EAAoB,MAC7DyP,EAA8CzP,EAAoB,MAI3F,SAASwP,EAAwBvL,EAAayL,EAAqBhN,GASjE,IAAIiN,EAAoBjN,EAASwB,8BAA8BD,GAE/D,GAAK0L,EAML,OAAiC,IAA7BA,EAAkB9N,OACb8N,EAAkB,GAM7B,SAA+BA,EAAmBD,EAAqBhN,GAErEA,EAAW,IAAI2H,EAAwD,EAAE3H,GAEpE,IAAIwF,EAAYyH,EAAmBxH,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAlF,IAAqFJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CACtJ,IAAIoH,EAEJ,GAAIJ,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5B0G,EAAOL,EAAUI,SACZ,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGjF,MAGZ,IAAIS,EAAUyE,EAMd,GALA7F,EAASoB,QAAQA,GAKbpB,EAAS0C,iBACX,GAAIsK,GAAgF,IAAzDA,EAAoBhF,OAAOhI,EAAS0C,iBAC7D,OAAOtB,OAIN,GAAI5B,OAAOuN,EAA6D,EAApEvN,CAAuE,CAC9EqJ,MAAOmE,EACP5L,QAASA,QACRC,EAAWrB,EAASA,UACrB,OAAOoB,GAnCJ8L,CAAsBD,EAAmBD,EAAqBhN,EAASA,YA0C1E,KACA,SAAU5C,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO8P,KACpE7P,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO+P,KAC9E,IAAIzF,EAAyCrK,EAAoB,MAC7D+P,EAA0D/P,EAAoB,MAGvG,SAAS6P,EAAsBxE,EAAOC,EAAS5I,GAQ7C,QANgBqB,IAAZuH,IACFA,EAAU,IAGZ5I,EAAW,IAAI2H,EAAwD,EAAE3H,GAErE4I,EAAQ5H,GAAI,CACd,IAAK2H,EAAMtE,mBACT,MAAM,IAAIpE,MAAM,sCAGlBD,EAAS2B,oBAAoBgH,EAAMtE,wBAC9B,CACL,IAAKsE,EAAME,MACT,OAAO,EAGT,GAAIF,EAAMvH,QAAS,CACjB,IAAKpB,EAAS6B,WAAW8G,EAAMvH,SAC7B,MAAM,IAAInB,MAAM,oBAAoBG,OAAOuI,EAAMvH,UAGnDpB,EAASoB,QAAQuH,EAAMvH,aAClB,CACL,IAAKuH,EAAMtE,mBACT,MAAM,IAAIpE,MAAM,sCAGlBD,EAAS2B,oBAAoBgH,EAAMtE,qBAIvC,GAAIrE,EAASsC,kBACX,OAAO8K,EAAiBzE,EAAME,OAASF,EAAMzC,eAAgBlG,GAQ7D,GAAI2I,EAAMtE,oBAAsBrE,EAASsN,2BAA2B3E,EAAMtE,oBAGxE,OAAO,EAEP,MAAM,IAAIpE,MAAM,kGAItB,SAASmN,EAAiBlH,EAAgBlG,GAExC,MACO,gBADCR,OAAO6N,EAAyE,EAAhF7N,CAAmF0G,EAAgBlG,KAevG,KACA,SAAU5C,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOkQ,KACpEjQ,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOmQ,KAC9E,IAAIC,EAAoDnQ,EAAoB,MACjG,SAAS4L,EAAeC,EAAKlL,GAC3B,OAiCF,SAAyBkL,GACvB,GAAIzD,MAAMC,QAAQwD,GAAM,OAAOA,EAlCxBC,CAAgBD,IAOzB,SAA+BA,EAAKlL,GAClC,IAAIoL,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKnI,EAET,IACE,IAAK,IAAiCoI,EAA7B7D,EAAKuD,EAAI3K,OAAOC,cAAmB6K,GAAMG,EAAK7D,EAAGE,QAAQC,QAChEsD,EAAKlM,KAAKsM,EAAG9I,QAET1C,GAAKoL,EAAKlK,SAAWlB,GAH8CqL,GAAK,IAK9E,MAAOI,GACPH,GAAK,EACLC,EAAKE,EACL,QACA,IACOJ,GAAsB,MAAhB1D,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAI2D,EAAI,MAAMC,GAIlB,OAAOH,EA9BwBM,CAAsBR,EAAKlL,IAG5D,WACE,MAAM,IAAIc,UAAU,wDAJ4C6K,GA4ClE,SAAS2D,EAAaxI,GACpB,IAAImC,EACApE,EAIK0C,GAFTT,EAAOA,EAAKwC,QAAQ,QAAS,SAEHzJ,MAAM,KAAM2H,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAhF,IAAmFJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CACpJ,IAAIoH,EAEJ,GAAIJ,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5B0G,EAAOL,EAAUI,SACZ,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGjF,MAGZ,IAGI+M,EAAexE,EAHRrD,EAEY/H,MAAM,KACkB,GAC3C6P,EAAOD,EAAa,GACpB/M,EAAQ+M,EAAa,GAEzB,OAAQC,GACN,IAAK,MACHzG,EAASvG,EACT,MAEF,IAAK,MACHmC,EAAMnC,EACN,MAEF,IAAK,gBAGc,MAAbA,EAAM,KACRuG,EAASvG,EAAQuG,IAQzB,IAAK1H,OAAOiO,EAAmE,EAA1EjO,CAA6E0H,GAChF,MAAO,GAGT,IAAI3B,EAAS,CACX2B,OAAQA,GAOV,OAJIpE,IACFyC,EAAOzC,IAAMA,GAGRyC,EAOT,SAASiI,EAAcI,GACrB,IAAI1G,EAAS0G,EAAM1G,OACfpE,EAAM8K,EAAM9K,IAEhB,IAAKoE,EACH,MAAO,GAGT,GAAkB,MAAdA,EAAO,GACT,MAAM,IAAIjH,MAAM,6DAGlB,MAAO,OAAOG,OAAO8G,GAAQ9G,OAAO0C,EAAM,QAAUA,EAAM,MAKtD,KACA,SAAU1F,EAAQC,EAAqBC,GAE7C,aAG+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOwQ,KACpEvQ,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOyQ,KAC9E,IAAIxC,EAA0ChO,EAAoB,MAC9DyQ,EAAiEzQ,EAAoB,MA2B1G0Q,EAAkC,IAAM1C,EAA8D,EAAI,KAAOA,EAAoE,EAAI,IAKzL2C,EAAqB,IAAM3C,EAA4D,EAAlE,aAA+FA,EAAmE,EAAlK,MAAmLA,EAA8D,EAAjP,UAA2QA,EAAmE,EAAIA,EAA8D,EAAI,KAUza4C,EAAmC,IAAIjJ,OAAO,KAAYqG,EAA4D,EAAxE,aAAqGA,EAAmE,EAAxK,MAAyLA,EAA8D,EAAvP,WAAiR,KAC/T6C,EAAoCF,EACxC,MAAQzO,OAAOuO,EAAgF,EAAvFvO,GAA8F,KAGlG4O,EAA6B,IAAInJ,OACrC,IAAM+I,EAAN,MACMG,EAAoC,IAAK,KAQ/C,SAASN,EAAoB3G,GAC3B,OAAOA,EAAO/H,QAAUmM,EAAoE,GAAK8C,EAA2BxM,KAAKsF,GAQnI,SAAS4G,EAAyB5G,GAChC,OAAOgH,EAAiCtM,KAAKsF,KAKzC,KACA,SAAU9J,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOgR,KAC9E,IAAI/C,EAA0ChO,EAAoB,MAUnFgR,EAA4B,SAAmCC,GACjE,MAAO,KAAKnO,OAAOkL,EAA8D,EAAG,QAAQlL,OAAOmO,EAAW,OAWhH,SAASF,EAAuBG,GAQ9B,IAmBIC,EAAqB,KAyDzB,MAvGwB,QA2EYH,EAhDH,MA4EhB,KAzBEI,iIAA8FJ,EAnDhF,MAmDwIG,GAyBnI,KAtBlBC,2FAA+FJ,EAhDlF,KAgD0IG,GAsB/G,KA3CnC,QAwB8BH,EAhD7B,KAgD8E,KAmBR,KAhBzEK,kDAAuGL,EAzD/F,MAyDqJG,GAgB3D,KAbpGE,8CAAkFL,EAzDtE,KAyD8HG,KAkB3J,KACA,SAAUrR,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOuR,KAC9E,IAAIC,EAAsDvR,EAAoB,MAE/FwR,EAAqB,QACzB,SAASF,EAAkCxN,EAASpB,GAElD,IAAI+O,EAAS,IAAMvP,OAAOqP,EAAmF,EAA1FrP,CAA6F4B,EAASpB,GAUzH,OAPAA,EAAW,IAAI6O,EAAqE,EAAE7O,IAC7E2B,oBAAoBP,GAEzBpB,EAAS8B,cAAcY,iBAAmBoM,EAAmBlN,KAAK5B,EAAS8B,cAAcY,mBAC3FqM,GAAU/O,EAAS8B,cAAcY,iBAG5BqM,IAKH,KACA,SAAU3R,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO2R,KACpE1R,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO4R,KAC9E,IAAIJ,EAAsDvR,EAAoB,MAEnG,SAAS0R,EAAoBnJ,GAC3B,IAAIzE,EAAUyE,EAAKzE,QACf8N,EAAgBrJ,EAAKqJ,cACrBC,EAAyBtJ,EAAKsJ,uBAC9BnP,EAAW6F,EAAK7F,SACpB,OAAOoB,GAAW8N,IAAkBC,EAAyB,IAAI/O,OAAOZ,OAAOqP,EAAmF,EAA1FrP,CAA6F4B,EAASpB,IAAa,GAE7L,SAASiP,EAAuBtO,EAAOoO,GASrC,OARIA,GAGe,OAFjBpO,EAAQA,EAAM6F,MAAMuI,EAAO5P,SAEjB,KACRwB,EAAQA,EAAM6F,MAAM,IAIjB7F,IAKH,KACA,SAAUvD,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO+R,KAQnG,IAAIA,EAAa,SAASA,EAAWC,IAPrC,SAAyBxQ,EAAUC,GACjC,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCAMtBH,CAAgB1B,KAAMkS,GAEtBlS,KAAKyQ,KAAOzQ,KAAKwB,YAAYiP,KAC7BzQ,KAAKoS,QAAUD,EACfnS,KAAKqS,MAAQ,IAAItP,MAAMoP,GAAME,OAI/BH,EAAWzQ,UAAYa,OAAOgQ,OAAOvP,MAAMtB,WAC3CyQ,EAAWzQ,UAAUD,YAAc0Q,GAI7B,KACA,SAAUhS,EAAQC,EAAqBC,GAE7C,aAGAA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAqBoS,MAKlF,IAAIC,EAAepS,EAAoB,MAGnCuN,EAA6BvN,EAAoB,MAMjDqS,GAHoBrS,EAAoB,MAGnBA,EAAoB,OAMzCsS,GAHwBtS,EAAoB,MAG7BA,EAAoB,OAGnCuS,EAAevS,EAAoB,MAGnCwS,EAAQxS,EAAoB,GAC5ByS,EAA6BzS,EAAoB0S,EAAEF,GAGnDG,EAAK3S,EAAoB,MAGzB4S,EAAa5S,EAAoB,IACjC6S,EAAkC7S,EAAoB0S,EAAEE,GAIxDE,EAAqBD,EAAmBvS,EAAEyS,MAAM,CAClDrN,sBAAuBmN,EAAmBvS,EAAE0S,OAAOC,WACnDpQ,UAAWgQ,EAAmBvS,EAAE0S,OAAOC,aAErCC,EAAmBL,EAAmBvS,EAAE6S,SAASN,EAAmBvS,EAAE0H,QAEtEoL,EAAapT,EAAoB,IACjCqT,EAAkCrT,EAAoB0S,EAAEU,GAGxDE,EAAatT,EAAoB,MAGjCuT,EAAavT,EAAoB,MAkBrC,SAASwT,EAA2BC,GAClC,OAAOC,OAAOC,cAAc,OAAeF,EAAOG,cAAcC,WAAW,IAK7E,SAASC,IAeP,OAdAA,EAAW5R,OAAO6R,QAAU,SAAUpS,GACpC,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAASD,UAAUnM,GAEvB,IAAK,IAAIyB,KAAO2K,EACV7K,OAAOb,UAAU2S,eAAe5Q,KAAK2J,EAAQ3K,KAC/CT,EAAOS,GAAO2K,EAAO3K,IAK3B,OAAOT,GAGFmS,EAASG,MAAMrU,KAAMkN,WAG9B,SAASoH,EAAyBnH,EAAQoH,GACxC,GAAc,MAAVpH,EAAgB,MAAO,GAE3B,IAEI3K,EAAKzB,EAFLgB,EAkBN,SAAuCoL,EAAQoH,GAC7C,GAAc,MAAVpH,EAAgB,MAAO,GAC3B,IAEI3K,EAAKzB,EAFLgB,EAAS,GACTyS,EAAalS,OAAOa,KAAKgK,GAG7B,IAAKpM,EAAI,EAAGA,EAAIyT,EAAWvS,OAAQlB,IACjCyB,EAAMgS,EAAWzT,GACbwT,EAAS/K,QAAQhH,IAAQ,IAC7BT,EAAOS,GAAO2K,EAAO3K,IAGvB,OAAOT,EA9BM0S,CAA8BtH,EAAQoH,GAInD,GAAIjS,OAAO+K,sBAAuB,CAChC,IAAIqH,EAAmBpS,OAAO+K,sBAAsBF,GAEpD,IAAKpM,EAAI,EAAGA,EAAI2T,EAAiBzS,OAAQlB,IACvCyB,EAAMkS,EAAiB3T,GACnBwT,EAAS/K,QAAQhH,IAAQ,GACxBF,OAAOb,UAAUkT,qBAAqBnR,KAAK2J,EAAQ3K,KACxDT,EAAOS,GAAO2K,EAAO3K,IAIzB,OAAOT,EAsBT,SAAS6S,EAAcjM,GACrB,IAAIlF,EAAQkF,EAAKlF,MACboR,EAAWlM,EAAKkM,SAChBnJ,EAAU/C,EAAK+C,QACfoJ,EAAOR,EAAyB3L,EAAM,CAAC,QAAS,WAAY,YAE5DoM,EAAYzS,OAAOsQ,EAAmB,YAA1BtQ,EAA6B,SAAU0S,GACrD,IAAIvR,EAAQuR,EAAMjT,OAAO0B,MACzBoR,EAAmB,OAAVpR,OAAiBU,EAAYV,KACrC,CAACoR,IACiBvS,OAAOsQ,EAAe,QAAtBtQ,EAAyB,WAC5C,OAAO2S,EAAkBvJ,EAASjI,KACjC,CAACiI,EAASjI,IAGb,OAAOoP,EAAcnS,EAAEwU,cAAc,SAAUhB,EAAS,GAAIY,EAAM,CAChErR,MAAOA,GAAS,KAChBoR,SAAUE,IACRrJ,EAAQvF,KAAI,SAAUuK,GACxB,IAAIjN,EAAQiN,EAAMjN,MACd0R,EAAQzE,EAAMyE,MACdC,EAAU1E,EAAM0E,QACpB,OAAOvC,EAAcnS,EAAEwU,cAAc,SAAU,CAC7C1S,IAAK4S,EAAU,IAAM3R,GAAS,KAC9BA,MAAO2R,EAAU,IAAM3R,GAAS,KAChC4R,WAAUD,EACVE,MAAOF,EAAUG,OAAgBpR,GAChCgR,OAGPP,EAAcY,UAAY,CAKxB/R,MAAOwP,EAAmBvS,EAAE0H,OAM5ByM,SAAU5B,EAAmBvS,EAAE+U,KAAKpC,WAEpC3H,QAASuH,EAAmBvS,EAAEgV,QAAQzC,EAAmBvS,EAAEyS,MAAM,CAC/D1P,MAAOwP,EAAmBvS,EAAE0H,OAC5B+M,MAAOlC,EAAmBvS,EAAE0H,OAC5BgN,QAASnC,EAAmBvS,EAAEiV,QAC5BtC,YAEN,IAAIkC,EAAgB,CAClBK,SAAU,MACVC,gBAAiB,eACjBC,MAAO,WAET,SAASC,EAAsBC,GAC7B,IAhIsB9R,EAgIlBT,EAAQuS,EAAMvS,MACdiI,EAAUsK,EAAMtK,QAChBuK,EAAYD,EAAMC,UAClBC,EAAOF,EAAMG,cAEbC,GADqBJ,EAAMK,mBACnBL,EAAMM,gBACdC,EAAeP,EAAMO,aACrBzB,EAAOR,EAAyB0B,EAAO,CAAC,QAAS,UAAW,YAAa,gBAAiB,qBAAsB,iBAAkB,iBAElIQ,EAAiBlU,OAAOsQ,EAAe,QAAtBtQ,EAAyB,WAC5C,OAAO2S,EAAkBvJ,EAASjI,KACjC,CAACiI,EAASjI,IACb,OAAOoP,EAAcnS,EAAEwU,cAAc,MAAO,CAC1Ce,UAAW,qBACVpD,EAAcnS,EAAEwU,cAAcN,EAAeV,EAAS,GAAIY,EAAM,CACjErR,MAAOA,EACPiI,QAASA,EACTuK,UAAWxC,GAAAA,CAAqB,0BAA2BwC,MACxDM,GAAgB9S,GAASoP,EAAcnS,EAAEwU,cAAc,MAAO,CACjEe,UAAW,gCAlJNrC,GADe1P,EAoJJT,GAnJwB,IAAMmQ,EAA2B1P,EAAQ,OAmJtDqS,GAAgB9S,IAAUoP,EAAcnS,EAAEwU,cAAcgB,EAAM,CACzFhS,QAAST,EACT0R,MAAOqB,GAAkBA,EAAerB,MACxCsB,YAAaF,EAAe,OAAIpS,IAC9B0O,EAAcnS,EAAEwU,cAAckB,EAAO,OAkB3C,SAASnB,EAAkBvJ,EAASjI,GAC7B,IAAI6E,EAAYoD,EAASnD,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAxE,IAA2EJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CAC5I,IAAImV,EAEJ,GAAInO,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5ByU,EAAQpO,EAAUI,SACb,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACb6N,EAAQhO,EAAGjF,MAGb,IAAIkT,EAASD,EAEb,IAAKC,EAAOvB,SAAWuB,EAAOlT,QAAUA,EACtC,OAAOkT,GAKb,SAASC,IAeP,OAdAA,EAAetU,OAAO6R,QAAU,SAAUpS,GACxC,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAASD,UAAUnM,GAEvB,IAAK,IAAIyB,KAAO2K,EACV7K,OAAOb,UAAU2S,eAAe5Q,KAAK2J,EAAQ3K,KAC/CT,EAAOS,GAAO2K,EAAO3K,IAK3B,OAAOT,GAGF6U,EAAavC,MAAMrU,KAAMkN,WAGlC,SAAS2J,EAA6B1J,EAAQoH,GAC5C,GAAc,MAAVpH,EAAgB,MAAO,GAE3B,IAEI3K,EAAKzB,EAFLgB,EAkBN,SAA2CoL,EAAQoH,GACjD,GAAc,MAAVpH,EAAgB,MAAO,GAC3B,IAEI3K,EAAKzB,EAFLgB,EAAS,GACTyS,EAAalS,OAAOa,KAAKgK,GAG7B,IAAKpM,EAAI,EAAGA,EAAIyT,EAAWvS,OAAQlB,IACjCyB,EAAMgS,EAAWzT,GACbwT,EAAS/K,QAAQhH,IAAQ,IAC7BT,EAAOS,GAAO2K,EAAO3K,IAGvB,OAAOT,EA9BM+U,CAAkC3J,EAAQoH,GAIvD,GAAIjS,OAAO+K,sBAAuB,CAChC,IAAIqH,EAAmBpS,OAAO+K,sBAAsBF,GAEpD,IAAKpM,EAAI,EAAGA,EAAI2T,EAAiBzS,OAAQlB,IACvCyB,EAAMkS,EAAiB3T,GACnBwT,EAAS/K,QAAQhH,IAAQ,GACxBF,OAAOb,UAAUkT,qBAAqBnR,KAAK2J,EAAQ3K,KACxDT,EAAOS,GAAO2K,EAAO3K,IAIzB,OAAOT,EAwBT,SAASgV,EAAmBpO,GAC1B,IAAIzE,EAAUyE,EAAKzE,QACf8S,EAAcrO,EAAKqO,YACnBC,EAAQtO,EAAKsO,MACbC,EAAUvO,EAAKuO,QACfpC,EAAO+B,EAA6BlO,EAAM,CAAC,UAAW,cAAe,QAAS,YAElF,OAAIsO,GAASA,EAAM/S,GACV+S,EAAM/S,GAAS,CACpBiT,MAAOH,IAIJnE,EAAcnS,EAAEwU,cAAc,MAAO0B,EAAa,GAAI9B,EAAM,CACjEsC,IAAKJ,EACLK,KAAML,OAAc7S,EAAY,eAChCmT,IAAKJ,EAAQ7M,QAAQ,OAAQnG,GAASmG,QAAQ,OAAQnG,EAAQqT,kBAsBlE,SAASC,IAeP,OAdAA,EAA4BlV,OAAO6R,QAAU,SAAUpS,GACrD,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAASD,UAAUnM,GAEvB,IAAK,IAAIyB,KAAO2K,EACV7K,OAAOb,UAAU2S,eAAe5Q,KAAK2J,EAAQ3K,KAC/CT,EAAOS,GAAO2K,EAAO3K,IAK3B,OAAOT,GAGFyV,EAA0BnD,MAAMrU,KAAMkN,WAG/C,SAASuK,EAA0CtK,EAAQoH,GACzD,GAAc,MAAVpH,EAAgB,MAAO,GAE3B,IAEI3K,EAAKzB,EAFLgB,EAkBN,SAAwDoL,EAAQoH,GAC9D,GAAc,MAAVpH,EAAgB,MAAO,GAC3B,IAEI3K,EAAKzB,EAFLgB,EAAS,GACTyS,EAAalS,OAAOa,KAAKgK,GAG7B,IAAKpM,EAAI,EAAGA,EAAIyT,EAAWvS,OAAQlB,IACjCyB,EAAMgS,EAAWzT,GACbwT,EAAS/K,QAAQhH,IAAQ,IAC7BT,EAAOS,GAAO2K,EAAO3K,IAGvB,OAAOT,EA9BM2V,CAA+CvK,EAAQoH,GAIpE,GAAIjS,OAAO+K,sBAAuB,CAChC,IAAIqH,EAAmBpS,OAAO+K,sBAAsBF,GAEpD,IAAKpM,EAAI,EAAGA,EAAI2T,EAAiBzS,OAAQlB,IACvCyB,EAAMkS,EAAiB3T,GACnBwT,EAAS/K,QAAQhH,IAAQ,GACxBF,OAAOb,UAAUkT,qBAAqBnR,KAAK2J,EAAQ3K,KACxDT,EAAOS,GAAO2K,EAAO3K,IAIzB,OAAOT,EAoBT,SAAS4V,EAAoChP,GAC3C,IAAI8N,EAAc9N,EAAK8N,YACnB3B,EAAO2C,EAA0C9O,EAAM,CAAC,gBAE5D,OAAoB,IAAhB8N,EACK5D,EAAcnS,EAAEwU,cAAc0C,EAAsB9C,GAEpDjC,EAAcnS,EAAEwU,cAAc2C,EAAsB/C,GAU/D,SAAS+C,EAAqBnH,GAC5B,IAAIyG,EAAQzG,EAAMyG,MACdrC,EAAO2C,EAA0C/G,EAAO,CAAC,UAE7D,OAAOmC,EAAcnS,EAAEwU,cAAc,MAAOsC,EAA0B,GAAI1C,EAAM,CAC9EgD,MAAO,6BACPC,QAAS,cACPlF,EAAcnS,EAAEwU,cAAc,QAAS,KAAMiC,GAAQtE,EAAcnS,EAAEwU,cAAc,IAAK,CAC1Fe,UAAW,mCACX+B,OAAQ,eACRC,KAAM,OACNC,YAAa,IACbC,iBAAkB,MACjBtF,EAAcnS,EAAEwU,cAAc,OAAQ,CACvCkD,cAAe,QACf/X,EAAG,yDACDwS,EAAcnS,EAAEwU,cAAc,OAAQ,CACxC7U,EAAG,6DACDwS,EAAcnS,EAAEwU,cAAc,OAAQ,CACxCmD,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,OACF3F,EAAcnS,EAAEwU,cAAc,OAAQ,CACxCmD,GAAI,KACJC,GAAI,IACJC,GAAI,KACJC,GAAI,OACF3F,EAAcnS,EAAEwU,cAAc,OAAQ,CACxCkD,cAAe,QACf/X,EAAG,0GACDwS,EAAcnS,EAAEwU,cAAc,OAAQ,CACxCkD,cAAe,QACf/X,EAAG,0HACAwS,EAAcnS,EAAEwU,cAAc,OAAQ,CACzCe,UAAW,mCACX+B,OAAQ,OACRC,KAAM,eACN5X,EAAG,8LAUP,SAASuX,EAAqB5B,GAC5B,IAAImB,EAAQnB,EAAMmB,MACdrC,EAAO2C,EAA0CzB,EAAO,CAAC,UAE7D,OAAOnD,EAAcnS,EAAEwU,cAAc,MAAOsC,EAA0B,GAAI1C,EAAM,CAC9EgD,MAAO,6BACPC,QAAS,cACPlF,EAAcnS,EAAEwU,cAAc,QAAS,KAAMiC,GAAQtE,EAAcnS,EAAEwU,cAAc,IAAK,CAC1Fe,UAAW,mCACX+B,OAAQ,eACRC,KAAM,OACNC,YAAa,IACbE,cAAe,SACdvF,EAAcnS,EAAEwU,cAAc,OAAQ,CACvC7U,EAAG,2CACDwS,EAAcnS,EAAEwU,cAAc,OAAQ,CACxC7U,EAAG,6HACDwS,EAAcnS,EAAEwU,cAAc,OAAQ,CACxC7U,EAAG,mEACDwS,EAAcnS,EAAEwU,cAAc,OAAQ,CACxC7U,EAAG,sEACDwS,EAAcnS,EAAEwU,cAAc,OAAQ,CACxCmD,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,UACF3F,EAAcnS,EAAEwU,cAAc,OAAQ,CACxCmD,GAAI,OACJC,GAAI,QACJC,GAAI,QACJC,GAAI,WACD3F,EAAcnS,EAAEwU,cAAc,OAAQ,CACzCe,UAAW,mCACX+B,OAAQ,cACRC,KAAM,eACN5X,EAAG,gNA8FP,SAASoY,EAA4BvU,EAASpB,GAC5C,QAAIR,OAAOqQ,EAAyC,EAAhDrQ,CAAmD4B,EAASpB,KAG9D4V,QAAQ3K,MAAM,sBAAsB7K,OAAOgB,KACpC,GAGX,SAASyU,EAAsB1V,EAAWH,GAWxC,OAVIG,GAKuB,KAJzBA,EAAYA,EAAUS,QAAO,SAAUQ,GACrC,OAAOuU,EAA4BvU,EAASpB,OAGhCb,SACZgB,OAAYkB,GAITlB,EAQT,SAAS2V,EAA2BjQ,GAClC,IAAIsO,EAAQtO,EAAKsO,MACbC,EAAUvO,EAAKuO,QACf2B,EAAgBlQ,EAAKmQ,cACrBC,EAAoBpQ,EAAKqQ,kBAE7B,SAASC,EAAYvI,GACnB,IAAIxM,EAAUwM,EAAMxM,QAChBiR,EAAQzE,EAAMyE,MACdsB,EAAc/F,EAAM+F,YAIpByC,EAAeH,IAAsBpB,EAAsClB,OAActS,EAE7F,OAAO0O,EAAcnS,EAAEwU,cAAc,MAAO,CAC1Ce,UAAWxC,GAAAA,CAAqB,wBAAyB,CACvD,gCAAkD,IAAjByF,EACjC,gCAAiChV,KAElCA,EAAU2O,EAAcnS,EAAEwU,cAAc2D,EAAe,CACxD3U,QAASA,EACT8S,YAAa7B,EACb8B,MAAOA,EACPC,QAASA,EACTjB,UAAW,6BACRpD,EAAcnS,EAAEwU,cAAc6D,EAAmB,CACpD5B,MAAOhC,EACPsB,YAAayC,EACbjD,UAAW,8BASf,OALAgD,EAAYzD,UAAY,CACtBtR,QAAS+O,EAAmBvS,EAAE0H,OAC9B+M,MAAOlC,EAAmBvS,EAAE0H,OAAOiL,WACnCoD,YAAaxD,EAAmBvS,EAAEsJ,QAE7BiP,EAlcTlD,EAAsBP,UAAY,CAEhCW,cAAelD,EAAmBvS,EAAEyY,YAEpC7C,eAAgBrD,EAAmBvS,EAAEyY,YAAY9F,WAEjDkD,aAActD,EAAmBvS,EAAEiV,MAErCI,EAAsBqD,aAAe,CACnC9C,eAAgB,WACd,OAAOzD,EAAcnS,EAAEwU,cAAc,MAAO,CAC1Ce,UAAW,mCAyGjBc,EAAmBvB,UAAY,CAG7BtR,QAAS+O,EAAmBvS,EAAE0H,OAAOiL,WAErC2D,YAAa/D,EAAmBvS,EAAE0H,OAAOiL,WAQzC4D,MAAOhE,EAAmBvS,EAAE6S,SAASN,EAAmBvS,EAAEyY,aAG1DjC,QAASjE,EAAmBvS,EAAE0H,OAAOiL,YAqEvCsE,EAAoCnC,UAAY,CAC9C2B,MAAOlE,EAAmBvS,EAAE0H,OAAOiL,WACnCoD,YAAaxD,EAAmBvS,EAAEsJ,QA+CpC6N,EAAqBrC,UAAY,CAC/B2B,MAAOlE,EAAmBvS,EAAE0H,OAAOiL,YA4CrCuE,EAAqBpC,UAAY,CAC/B2B,MAAOlE,EAAmBvS,EAAE0H,OAAOiL,YA4JmBuF,EAA2B,CAEjF1B,QAAS,uEACT4B,cAAe/B,EACfiC,kBAAmBrB,IAJQ,IAOzB0B,EAAYjZ,EAAoB,MAGhCsR,EAAoCtR,EAAoB,MAwG5D,SAASkZ,EAAiB7V,EAAOX,GAC/B,OAAOR,OAAOqL,EAA4C,EAAnDrL,CAAsDmB,GAAS,GAAIX,GA2B5E,SAASyW,EAA4BC,EAAaxD,GAChD,IAAIyD,EAAczD,EAAMyD,YACpBC,EAAa1D,EAAM0D,WACnB5W,EAAWkT,EAAMlT,SACjB6W,EAAoB3D,EAAM2D,kBAE9B,GAAIF,IAAgBC,EAClB,OAAOF,EAKT,IAAKA,EACH,OAAIG,EACK,GAIArX,OAAOoP,EAAmD,EAA1DpP,CAA6DoX,EAAY5W,GAQpF,GAAI4W,GAMF,GAAuB,MAAnBF,EAAY,GAAY,CAG1B,GAAIG,EAcF,OAA+G,IAA3GH,EAAYhQ,QAAQ,IAAMlH,OAAOqQ,EAA4C,EAAnDrQ,CAAsDoX,EAAY5W,IAwcxG,SAAiCkH,EAAQ9F,EAASpB,GAGhD,GAAIoB,EAAS,CACX,IAAI0V,EAA2B,IAAMtX,OAAOqQ,EAA4C,EAAnDrQ,CAAsD4B,EAASpB,GAEpG,GAAIkH,EAAO/H,OAAS2X,EAAyB3X,QAC3C,GAAiD,IAA7C2X,EAAyBpQ,QAAQQ,GACnC,MAAO,QAGT,GAAiD,IAA7CA,EAAOR,QAAQoQ,GACjB,OAAO5P,EAAOV,MAAMsQ,EAAyB3X,QAOnD,IAAK,IAAIyG,EAAK,EAAGmR,EAAevX,OAAOa,KAAKL,EAASgD,uBAAwB4C,EAAKmR,EAAa5X,OAAQyG,IAAM,CAC3G,IAAIoR,EAAuBD,EAAanR,GAExC,GAAIsB,EAAOR,QAAQsQ,KAA0B,IAAI7X,OAC/C,OAAO+H,EAAOV,MAAM,IAAIrH,OAAS6X,EAAqB7X,QAI1D,MAAO,GAleQ8X,CAAwBP,EAAaE,EAAY5W,GAQnD,GAMT,GAAI2W,EAAa,CACf,IAAIO,EAAmB1X,OAAOoP,EAAmD,EAA1DpP,CAA6DoX,EAAY5W,GAEhG,OAA8C,IAA1C0W,EAAYhQ,QAAQwQ,GACfR,EAEAQ,EAGT,IAAIC,EAAe3X,OAAOoP,EAAmD,EAA1DpP,CAA6DoX,EAAY5W,GAG5F,OAA0C,IAAtC0W,EAAYhQ,QAAQyQ,GACfT,EAMFS,QAgBX,GAAuB,MAAnBT,EAAY,GAkBd,OAAOU,EAAKV,EAAaC,EAAa3W,IAAa,GAIvD,OAAO0W,EAUT,SAASU,EAAKlQ,EAAQ9F,EAASpB,GAC7B,GAAKkH,EAAL,CAKA,GAAkB,MAAdA,EAAO,GAAY,CAErB,GAAe,MAAXA,EACF,OAWF,IAAImQ,EAAY,IAAId,EAA2B,EAAEnV,EAASpB,GAI1D,OAHAqX,EAAU1O,MAAMzB,GAGTmQ,EAAUC,iBAQnB,GAAKlW,EAAL,CAIA,IAAImW,EAAsCC,EAAmCtQ,EAAQ9F,EAASpB,GAc9F,MAAO,IAAII,OAAOZ,OAAOqQ,EAA4C,EAAnDrQ,CAAsD4B,EAASpB,IAAWI,OAAOmX,GAAuC,MAW5I,SAASE,EAAWvQ,EAAQ9F,EAASpB,GACnC,IAAI0X,EAAgCF,EAAmCtQ,EAAQ9F,EAASpB,GAExF,GAAI0X,EAA+B,CACjC,IAAIC,EAAsBD,EAA8BvY,OAU5D,SAA4BiC,EAASpB,GAKnC,OAHAA,EAAW,IAAI6P,EAA8B,EAAE7P,IACtC2B,oBAAoBP,GAEtBpB,EAAS8B,cAAcQ,kBAAkBtC,EAAS8B,cAAcQ,kBAAkBnD,OAAS,GAf/ByY,CAAmBxW,EAASpB,GAE7F,GAAI2X,EAAsB,EACxB,OAAOzQ,EAAOV,MAAM,EAAGU,EAAO/H,OAASwY,GAI3C,OAAOzQ,EAsBT,SAAS2Q,EAA+BC,EAAmBlE,GACzD,IAAIxS,EAAUwS,EAAMxS,QAChBjB,EAAYyT,EAAMzT,UAClB4X,EAAWnE,EAAMmE,SACjB/X,EAAW4T,EAAM5T,SAErB,GAA0B,MAAtB8X,EAEF,OAAO1W,EAGT,IAAI4W,EAoON,SAAkE9Q,EAAQlH,GACxE,IAAIiY,EAAY,IAAI1B,EAA2B,EAAE,KAAMvW,GAOvD,OANAiY,EAAUtP,MAAMzB,GAMT+Q,EAAUC,aA5OKC,CAAyDL,EAAmB9X,GAIlG,OAAIgY,KAAqB7X,GAAaA,EAAUuG,QAAQsR,IAAoB,GACnEA,GAIA5W,GAAY2W,GAAaK,EAA2BN,EAAmB1W,EAASpB,GAKlFoB,OALF,EA4LP,SAASiX,EAA0C1P,EAAOvH,EAASpB,GAGjE,GAAuG,IAAnG2I,EAAMjC,QAAQlH,OAAOoP,EAAmD,EAA1DpP,CAA6D4B,EAASpB,IAAkB,CAExG,IAAIiY,EAAY,IAAI1B,EAA2B,EAAEnV,EAASpB,GAE1DiY,EAAUtP,MAAMA,GAEhB,IAAI2P,EAAcL,EAAUM,YAE5B,OAAID,EAGKA,EAAYE,iBAAiBjR,QAAQ,MAAO,IAE5C,GAIT,OAAOoB,EAAMpB,QAAQ,MAAO,IA6BhC,SAASkR,EAAe7a,EAAGC,EAAG6a,GAO5B,OAAI1H,OAAOrS,UAAUga,cACZ/a,EAAE+a,cAAc9a,EAAG6a,GAKrB9a,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,EAkDlC,SAAS2Z,EAAmCtQ,EAAQ9F,EAASpB,GAE3D,IAAIiY,EAAY,IAAI1B,EAA2B,EAAEnV,EAASpB,GAE1DiY,EAAUtP,MAAMzB,GAEhB,IAAIoR,EAAcL,EAAUM,YAC5B,OAAOD,GAAeA,EAAYpS,eASpC,SAASkS,EAA2BlR,EAAQ9F,EAASpB,GAInD,IAHA,IAAI4Y,EAAwBpZ,OAAOoP,EAAmD,EAA1DpP,CAA6D4B,EAASpB,GAC9F/B,EAAI,EAEDA,EAAIiJ,EAAO/H,QAAUlB,EAAI2a,EAAsBzZ,QAAQ,CAC5D,GAAI+H,EAAOjJ,KAAO2a,EAAsB3a,GACtC,OAAO,EAGTA,IAGF,OAAO,EAOT,SAAS4a,EAAsBC,GAC7B,IAAInY,EAAQmY,EAAMnY,MACd2X,EAAcQ,EAAMR,YACpB1N,EAAiBkO,EAAMlO,eACvBsE,EAAgB4J,EAAM5J,cACtB2H,EAAoBiC,EAAMjC,kBAC1B7W,EAAW8Y,EAAM9Y,SAOrB,QAAuB,IAAlBkP,GAA2B2H,IAAsByB,GAAeA,EAAYlX,QA9lBnF,SAAsCkX,GACpC,OAAOA,EAAYE,iBAAiBjR,QAAQ,MAAO,IA8lB1CwR,CAA6BT,IAMjC3X,GAASuO,GAAiBtE,EACtBpL,OAAOoP,EAAmD,EAA1DpP,CAA6DoL,EAAgB5K,GAG/EW,EAGT,SAAS2J,EAAQgG,EAAQ0I,GACvB,IAAI3Y,EAAOb,OAAOa,KAAKiQ,GAEvB,GAAI9Q,OAAO+K,sBAAuB,CAChC,IAAI0O,EAAUzZ,OAAO+K,sBAAsB+F,GACvC0I,IAAgBC,EAAUA,EAAQrY,QAAO,SAAU4J,GACrD,OAAOhL,OAAOiL,yBAAyB6F,EAAQ9F,GAAKnL,eAEtDgB,EAAKlD,KAAKoU,MAAMlR,EAAM4Y,GAGxB,OAAO5Y,EAGT,SAASsK,EAAc1L,GACrB,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAAyB,MAAhBD,UAAUnM,GAAamM,UAAUnM,GAAK,GAE/CA,EAAI,EACNqM,EAAQ9K,OAAO6K,IAAS,GAAMK,SAAQ,SAAUhL,GAC9CuJ,EAAgBhK,EAAQS,EAAK2K,EAAO3K,OAE7BF,OAAO0Z,0BAChB1Z,OAAO2Z,iBAAiBla,EAAQO,OAAO0Z,0BAA0B7O,IAEjEC,EAAQ9K,OAAO6K,IAASK,SAAQ,SAAUhL,GACxCF,OAAOC,eAAeR,EAAQS,EAAKF,OAAOiL,yBAAyBJ,EAAQ3K,OAKjF,OAAOT,EAGT,SAASgK,EAAgB1K,EAAKmB,EAAKiB,GAYjC,OAXIjB,KAAOnB,EACTiB,OAAOC,eAAelB,EAAKmB,EAAK,CAC9BiB,MAAOA,EACPtB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZhB,EAAImB,GAAOiB,EAGNpC,EA+JT,SAASD,EAAQC,GAWf,OATED,EADoB,oBAAXE,QAAoD,kBAApBA,OAAOC,SACtC,SAAiBF,GACzB,cAAcA,GAGN,SAAiBA,GACzB,OAAOA,GAAyB,oBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,GAItHD,EAAQC,GAGjB,SAAS6a,EAA8B9I,EAAQ0I,GAC7C,IAAI3Y,EAAOb,OAAOa,KAAKiQ,GAEvB,GAAI9Q,OAAO+K,sBAAuB,CAChC,IAAI0O,EAAUzZ,OAAO+K,sBAAsB+F,GACvC0I,IAAgBC,EAAUA,EAAQrY,QAAO,SAAU4J,GACrD,OAAOhL,OAAOiL,yBAAyB6F,EAAQ9F,GAAKnL,eAEtDgB,EAAKlD,KAAKoU,MAAMlR,EAAM4Y,GAGxB,OAAO5Y,EAuBT,SAASgZ,KAeP,OAdAA,GAAgC7Z,OAAO6R,QAAU,SAAUpS,GACzD,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAASD,UAAUnM,GAEvB,IAAK,IAAIyB,KAAO2K,EACV7K,OAAOb,UAAU2S,eAAe5Q,KAAK2J,EAAQ3K,KAC/CT,EAAOS,GAAO2K,EAAO3K,IAK3B,OAAOT,GAGFoa,GAA8B9H,MAAMrU,KAAMkN,WAGnD,SAASkP,GAA8CjP,EAAQoH,GAC7D,GAAc,MAAVpH,EAAgB,MAAO,GAE3B,IAEI3K,EAAKzB,EAFLgB,EAkBN,SAA4DoL,EAAQoH,GAClE,GAAc,MAAVpH,EAAgB,MAAO,GAC3B,IAEI3K,EAAKzB,EAFLgB,EAAS,GACTyS,EAAalS,OAAOa,KAAKgK,GAG7B,IAAKpM,EAAI,EAAGA,EAAIyT,EAAWvS,OAAQlB,IACjCyB,EAAMgS,EAAWzT,GACbwT,EAAS/K,QAAQhH,IAAQ,IAC7BT,EAAOS,GAAO2K,EAAO3K,IAGvB,OAAOT,EA9BMsa,CAAmDlP,EAAQoH,GAIxE,GAAIjS,OAAO+K,sBAAuB,CAChC,IAAIqH,EAAmBpS,OAAO+K,sBAAsBF,GAEpD,IAAKpM,EAAI,EAAGA,EAAI2T,EAAiBzS,OAAQlB,IACvCyB,EAAMkS,EAAiB3T,GACnBwT,EAAS/K,QAAQhH,IAAQ,GACxBF,OAAOb,UAAUkT,qBAAqBnR,KAAK2J,EAAQ3K,KACxDT,EAAOS,GAAO2K,EAAO3K,IAIzB,OAAOT,EAwBT,SAASD,GAAkBC,EAAQC,GACjC,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAMC,OAAQlB,IAAK,CACrC,IAAImB,EAAaF,EAAMjB,GACvBmB,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeR,EAAQG,EAAWM,IAAKN,IAkBlD,SAASoa,GAAgBC,GAIvB,OAHAD,GAAkBha,OAAOka,eAAiBla,OAAOma,eAAiB,SAAyBF,GACzF,OAAOA,EAAEG,WAAapa,OAAOma,eAAeF,IAEvCD,GAAgBC,GAGzB,SAASI,GAAuBC,GAC9B,QAAa,IAATA,EACF,MAAM,IAAIC,eAAe,6DAG3B,OAAOD,EAkBT,SAASE,GAAgBP,EAAGQ,GAM1B,OALAD,GAAkBxa,OAAOka,gBAAkB,SAAyBD,EAAGQ,GAErE,OADAR,EAAEG,UAAYK,EACPR,GAGFO,GAAgBP,EAAGQ,GAG5B,SAASC,GAAqC3b,EAAKmB,EAAKiB,GAYtD,OAXIjB,KAAOnB,EACTiB,OAAOC,eAAelB,EAAKmB,EAAK,CAC9BiB,MAAOA,EACPtB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZhB,EAAImB,GAAOiB,EAGNpC,EAiBT,IAAI4b,GAAuD,SAAUC,GAGnE,SAASC,EAAkBnb,GACzB,IAAIgE,GAtGR,SAAyBrE,EAAUC,GACjC,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCAsGpBH,CAAgB1B,KAAMmd,GAEtBnX,EApFJ,SAAoC4W,EAAMpZ,GACxC,OAAIA,GAA2B,WAAlBpC,EAAQoC,IAAsC,oBAATA,EAI3CmZ,GAAuBC,GAHrBpZ,EAkFC4Z,CAA2Bpd,KAAMsc,GAAgBa,GAAmB3Z,KAAKxD,KAAMgC,IAEvFgb,GAAqCL,GAAuB3W,GAAQ,WAAY6M,EAAcnS,EAAE2c,aAEhGL,GAAqCL,GAAuB3W,GAAQ,eAAe,SAAUrE,GAC3FqE,EAAMsX,SAASC,QAAU5b,EACzB,IAAI6b,EAAMxX,EAAMhE,MAAMsb,SAElBE,IACiB,oBAARA,EACTA,EAAI7b,GAEJ6b,EAAID,QAAU5b,MAKpBqb,GAAqCL,GAAuB3W,GAAQ,+BAA+B,SAAU9B,GAE3G,OAAOuU,EAA4BvU,EADpB8B,EAAMhE,MAAMc,aAI7Bka,GAAqCL,GAAuB3W,GAAQ,mBAAmB,SAAU0T,GAC/F,IAAI+D,EAAczX,EAAMhE,MACpBgQ,EAAgByL,EAAYzL,cAC5BlP,EAAW2a,EAAY3a,SACvB+R,EAAW4I,EAAY5I,SACvB6I,EAA+BD,EAAYC,6BAC3CC,EAAc3X,EAAM4X,MAMpBC,EAAiBtE,EALCoE,EAAYnE,YAKgC,CAChEC,YALgBkE,EAAYzZ,QAM5BwV,WAAYA,EACZ5W,SAAUA,EAGV6W,mBAAoB3H,IAElB8L,EAAW5D,EAAK2D,EAAgBnE,EAAY5W,GAE5C4a,GACF1X,EAAMsX,SAASC,QAAQQ,QAOzB/X,EAAMgY,SAAS,CACb9Z,QAASwV,EACTuE,yBAAyB,EACzBzE,YAAaqE,EACbpa,MAAOqa,IACN,WAKDjJ,EAASiJ,SAIbd,GAAqCL,GAAuB3W,GAAQ,YAAY,SAAUkY,GACxF,IAAIC,EAAenY,EAAMhE,MACrB0L,EAAiByQ,EAAazQ,eAC9BmH,EAAWsJ,EAAatJ,SACxBuJ,EAAyBD,EAAaC,uBACtCpM,EAAgBmM,EAAanM,cAC7BqM,EAAiBF,EAAaE,eAC9BC,EAA6BH,EAAaG,2BAC1Cxb,EAAWqb,EAAarb,SACxByb,EAAevY,EAAM4X,MACrB3a,EAAYsb,EAAatb,UAIzBub,EAl0BV,SAA6BhF,EAAaiF,GACxC,IAuGIhb,EAvGAib,EAAkBD,EAAMC,gBACxBxa,EAAUua,EAAMva,QAChBwJ,EAAiB+Q,EAAM/Q,eACvBiR,EAAkBF,EAAME,gBACxBC,EAAgBH,EAAMG,cACtB3b,EAAYwb,EAAMxb,UAClB+O,EAAgByM,EAAMzM,cACtBqM,EAAiBI,EAAMJ,eACvBC,EAA6BG,EAAMH,2BACnCxb,EAAW2b,EAAM3b,SAErB,GAAIkP,IAAgD,IAA/BsM,EAAsC,CACzD,IAGMO,EAHFhN,EAASvP,OAAOoP,EAAmD,EAA1DpP,CAA6D4B,EAASpB,GAEnF,GAAoC,IAAhC0W,EAAYhQ,QAAQqI,GAuBtB,OAPI2H,GAAkC,MAAnBA,EAAY,GAE7BqF,EAAS3E,EADTV,EAAc3H,EAAS2H,EACItV,EAASpB,GAEpC0W,EAAc3H,EAGT,CACL2H,YAAaA,EACb/V,MAAOob,EACP3a,QAASA,GAuHf,OA7GsB,IAAlB8N,GAA2B9N,GAAWsV,GAAkC,MAAnBA,EAAY,KACnEA,EAAc2B,EAA0C3B,EAAatV,EAASpB,IAI5E0W,GAAetV,GAAWma,IAC5B7E,EAAce,EAAWf,EAAatV,EAASpB,KAS7C0W,GAAkC,MAAnBA,EAAY,IAAgBtV,IAAW8N,IACxDwH,EAAc,IAAMA,IAqBjBA,GAAekF,GAA0C,MAAvBA,EAAgB,KAEnDxa,EADE8N,OACQ7N,EAEAuJ,GAOM,MAAhB8L,GAAuBkF,GAA0C,MAAvBA,EAAgB,IAAcA,EAAgBzc,OAAS,IAAIA,SACvGiC,OAAUC,GAMRqV,IAGE/V,EAFmB,MAAnB+V,EAAY,KACM,MAAhBA,GAEOtV,GAAoH,IAAzG5B,OAAOoP,EAAmD,EAA1DpP,CAA6D4B,EAASpB,GAAU0G,QAAQgQ,SADpGrV,EAsBF+V,EAAKV,EAAatV,EAASpB,IAOnCW,IACFS,EAAUyW,EAA+BlX,EAAO,CAC9CS,QAASA,EACTjB,UAAWA,EACXH,SAAUA,KAOU,IAAlBkP,GAA2B9N,GAAWsV,GAAkC,MAAnBA,EAAY,KAGnE/V,EAAQyW,EAFRV,EAAc2B,EAA0C3B,EAAatV,EAASpB,GAEpDoB,EAASpB,MAIlCoB,GAAWya,IACdza,EAAUwJ,GAAkBkR,KAGvB,CACLpF,YAAaA,EACbtV,QAASA,EACTT,MAAOA,GA+pBsBqb,CAAoBZ,EAAc,CAC3DQ,gBAJoBH,EAAa/E,YAKjCtV,QAJ6Bqa,EAAara,QAK1Cya,iBAAkBP,EAClB1Q,eAAgBA,EAChBkR,cAAe,WACb,OAAO5Y,EAAM+Y,yBAAyB,CACpC9b,UAAWA,KAGfA,UAAWA,EACX+O,cAAeA,EACfqM,eAAgBA,EAChBC,2BAA4BA,EAC5Bxb,SAAUA,IAER0W,EAAcgF,EAAqBhF,YACnCtV,EAAUsa,EAAqBta,QAC/BT,EAAQ+a,EAAqB/a,MAE7Bub,EAAc,CAChBxF,YAAaA,EACb/V,MAAOA,EACPS,QAASA,IAGwB,IAA/Boa,IAUG7a,GAAS+V,IAAgBxT,EAAM4X,MAAMpE,cAExCwF,EAAYC,cAAgB,KAIhCjZ,EAAMgY,SAASgB,GAIf,WACE,OAAOnK,EAASpR,SAIpBuZ,GAAqCL,GAAuB3W,GAAQ,YAAY,WAC9E,OAAOA,EAAMgY,SAAS,CACpBkB,WAAW,OAIflC,GAAqCL,GAAuB3W,GAAQ,WAAW,WAC7E,OAAOA,EAAMgY,SAAS,CACpBkB,WAAW,OAIflC,GAAqCL,GAAuB3W,GAAQ,WAAW,SAAUgP,GACvFhP,EAAMmZ,WAEN,IAAIC,EAAUpZ,EAAMhE,MAAMod,QAEtBA,GACFA,EAAQpK,MAIZgI,GAAqCL,GAAuB3W,GAAQ,UAAU,SAAUgP,GACtF,IAAIqK,EAASrZ,EAAMhE,MAAMqd,OAEzBrZ,EAAMsZ,UAEFD,GACFA,EAAOrK,MAIXgI,GAAqCL,GAAuB3W,GAAQ,kBAAkB,SAAUgP,GAC9FhP,EAAMmZ,WAGN,IAAII,EAAqBvZ,EAAMhE,MAAMud,mBAErC,GAAIA,EAAoB,CACtB,IAAIH,EAAUG,EAAmBH,QAE7BA,GACFA,EAAQpK,OAKdgI,GAAqCL,GAAuB3W,GAAQ,iBAAiB,SAAUgP,GAC7FhP,EAAMsZ,UAGN,IAAIC,EAAqBvZ,EAAMhE,MAAMud,mBAErC,GAAIA,EAAoB,CACtB,IAAIF,EAASE,EAAmBF,OAE5BA,GACFA,EAAOrK,OAKb,IAAIwK,EAAexZ,EAAMhE,MACrB6c,EAASW,EAAa/b,MAEtBgc,GADSD,EAAaE,OACLF,EAAaxN,eAC9B2N,EAA0BH,EAAapB,uBACvCwB,EAAmCJ,EAAaI,iCAChDC,EAAqBL,EAAaK,mBAClCC,EAAYN,EAAa1c,SACzBid,EAAe/Z,EAAMhE,MACrBge,EAAkBD,EAAarS,eAC/BuS,EAAaF,EAAa9c,UAE1B+c,IACGha,EAAMyS,4BAA4BuH,KACrCA,OAAkB7b,IAKtB8b,EAAatH,EAAsBsH,EAAYH,GAC/C,IAAI1E,EAAc9B,EAAiBuF,EAAQiB,GAC3C9Z,EAAMiT,YAAcL,EAA2B5S,EAAMhE,OACrD,IAAIke,EAx0CR,SAA+BvX,GAC7B,IAOIzE,EAPAT,EAAQkF,EAAKlF,MACb2X,EAAczS,EAAKyS,YACnB1N,EAAiB/E,EAAK+E,eACtBkR,EAAgBjW,EAAKiW,cACrB3b,EAAY0F,EAAK1F,UACjB4X,EAAWlS,EAAKkS,SAChB/X,EAAW6F,EAAK7F,SA0BpB,OAtBIsY,GAAeA,EAAYlX,QAE7BA,EAAUkX,EAAYlX,QACbwJ,IACJjK,IAASyX,EAA2BzX,EAAOiK,EAAgB5K,KAC9DoB,EAAUwJ,IAKVzK,GAAaA,EAAUuG,QAAQtF,GAAW,IAC5CA,OAAUC,IAOPD,GAAW2W,GAAY5X,GAAaA,EAAUhB,OAAS,IAC1DiC,EAAU0a,KAGL1a,EAuyCoBic,CAAsB,CAC7C1c,MAAOob,EACPzD,YAAaA,EACb1N,eAAgBsS,EAChBnF,UAAW8E,EACX1c,UAAWgd,GAAc3d,OAAOoQ,EAA8B,EAArCpQ,CAAwCwd,GACjElB,cAAe,WACb,OAAO5Y,EAAM+Y,yBAAyB,CACpC9b,UAAWgd,KAGfnd,SAAUgd,IAyCZ,OAvCA9Z,EAAM4X,MAAQ,CAEZ5b,MAAOgE,EAAMhE,MAEbkC,QAASgc,EAOTjd,UAAWgd,EAWXzG,YAAamC,EAAsB,CACjClY,MAAOob,EACPzD,YAAaA,EACb1N,eAAgBsS,EAChBhO,cAAeyN,EACf9F,kBAAmBiG,GAA2D,aAAvBC,EACvD/c,SAAUgd,IASZrc,MAAOob,GAEF7Y,EArWX,IAAsBpE,EAAac,EAAYC,EAmgB7C,OAteF,SAAmByd,EAAUC,GAC3B,GAA0B,oBAAfA,GAA4C,OAAfA,EACtC,MAAM,IAAIxe,UAAU,sDAGtBue,EAAS3e,UAAYa,OAAOgQ,OAAO+N,GAAcA,EAAW5e,UAAW,CACrED,YAAa,CACXiC,MAAO2c,EACP/d,UAAU,EACVD,cAAc,KAGdie,GAAYvD,GAAgBsD,EAAUC,GA0C1CC,CAAUnD,EAAmBD,GAnFTtb,EAwWPub,EAxWgCxa,EAofzC,CAAC,CACHH,IAAK,2BAMLiB,MAAO,SAAkCzB,EAAO4b,GAC9C,OAtlBN,SAA4C7b,GAC1C,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAAyB,MAAhBD,UAAUnM,GAAamM,UAAUnM,GAAK,GAE/CA,EAAI,EACNmb,EAA8B5Z,OAAO6K,IAAS,GAAMK,SAAQ,SAAUhL,GACpEwa,GAAqCjb,EAAQS,EAAK2K,EAAO3K,OAElDF,OAAO0Z,0BAChB1Z,OAAO2Z,iBAAiBla,EAAQO,OAAO0Z,0BAA0B7O,IAEjE+O,EAA8B5Z,OAAO6K,IAASK,SAAQ,SAAUhL,GAC9DF,OAAOC,eAAeR,EAAQS,EAAKF,OAAOiL,yBAAyBJ,EAAQ3K,OAKjF,OAAOT,EAqkBIwe,CAAmC,CAExCve,MAAOA,GA9wBf,SAAyDA,EAAOwe,EAAW5C,GACzE,IAAI9a,EAAWd,EAAMc,SACjBG,EAAYjB,EAAMiB,UAClBwd,EAAoBze,EAAM0L,eAC1BoQ,EAAW9b,EAAMyB,MACjBid,EAAW1e,EAAM2e,MACjB3O,EAAgBhQ,EAAMgQ,cACtB4N,EAAmC5d,EAAM4d,iCACzCC,EAAqB7d,EAAM6d,mBAC3Be,EAAqBJ,EAAU9S,eAC/BmT,EAAYL,EAAU/c,MACtBqd,EAAYN,EAAUG,MAEtBld,GADUma,EAAM1Z,QACR0Z,EAAMna,OACdwa,EAA0BL,EAAMK,wBAEhC8C,EAAyB,SAAgCC,GAC3D,OAAOrF,EAAsBlO,EAAc,GAAIuT,EAAY,CACzDhP,cAAeA,EACf2H,kBAAmBiG,GAA2D,aAAvBC,EACvD/c,SAAUA,MAed,GAAI4d,IAAaI,EACf,MAAO,CACLtH,YAAauH,EAAuB,CAClCtd,WAAOU,EACPuJ,eAAgB+S,IAElBhd,WAAOU,EACPD,QAASuc,EACTxC,6BAAyB9Z,GAe7B,GAAIsc,IAAsBG,EAAoB,CAC5C,IAAIK,GAAgCR,GAAqBhI,EAA4BgI,EAAmB3d,GAEpGoe,GACHzd,GAIDuO,GAAiBvO,IAAUsd,EAAuB,CAChDtd,WAAOU,EACPuJ,eAAgBkT,IAOlB,IAAK3C,GAA2BgD,IAFHnD,GAAYoD,EAGvC,MAAO,CACLhd,QAASuc,EAMTjH,YAAauH,EAAuB,CAClCtd,WAAOU,EACPuJ,eAAgB+S,IAGlBhd,WAAOU,GAgBb,GAAI2Z,IAAa+C,GAAa/C,IAAara,EAAO,CAChD,IAAI2X,EACA+F,EAsBAC,EApBJ,GAAItD,EAAU,CACZ1C,EAAc9B,EAAiBwE,EAAUhb,GACzC,IAAIue,EAAqB1I,EAAsB1V,EAAWH,GAEtDsY,GAAeA,EAAYlX,UAIxBmd,GAAsBA,EAAmB7X,QAAQ4R,EAAYlX,UAAY,KAC5Eid,EAAgB/F,EAAYlX,SAG9Bid,EAAgBxG,EAA+BmD,EAAU,CACvD5Z,aAASC,EACTlB,UAAWoe,EACXve,SAAUA,IAchB,OAPKgb,IAEHsD,EAAgC,CAC9BnD,6BAAyB9Z,IAItBsJ,EAAc,GAAI2T,EAA+B,CACtD5H,YAAauH,EAAuB,CAClC3F,YAAaA,EACb3X,MAAOqa,EACPpQ,eAAgB+S,IAElBhd,MAAOqa,EACP5Z,QAAS4Z,EAAWqD,EAAgBV,KA+nBjCa,CAAgDtf,EAAO4b,EAAM5b,MAAO4b,QA/f1Clb,EAwWD,CAAC,CAC/BF,IAAK,oBACLiB,MAAO,WACL,IAAI8d,EAAkBvhB,KAAKgC,MAAMuf,gBAC7B7T,EAAiB1N,KAAKgC,MAAM0L,eAC5B8T,EAAkBxhB,KAAK4d,MAAM1Z,QAE7Bqd,IACE7T,IACG1N,KAAKyY,4BAA4B/K,KACpCA,OAAiBvJ,IAIjBqd,IAAoB9T,GACtB6T,EAAgBC,MAIrB,CACDhf,IAAK,qBACLiB,MAAO,SAA4B+c,EAAWiB,GAC5C,IAAIF,EAAkBvhB,KAAKgC,MAAMuf,gBAC7Brd,EAAUlE,KAAK4d,MAAM1Z,QAErBqd,GAAmBrd,IAAYud,EAAUvd,SAC3Cqd,EAAgBrd,KAGnB,CACD1B,IAAK,0BACLiB,MAAO,SAAiCkF,GACtC,IAikB+B+Y,EAAWC,EAjkBtC1e,EAAY0F,EAAK1F,UACjB2e,EAAe5hB,KAAKgC,MACpBgQ,EAAgB4P,EAAa5P,cAC7BsM,EAA6BsD,EAAatD,2BAC1CuD,EAAsBD,EAAaC,oBACnCzD,EAAyBwD,EAAaxD,uBACtCsB,EAASkC,EAAalC,OACtBlE,EAAUoG,EAAapG,QACvB1Y,EAAW8e,EAAa9e,SAC5B,OAwjB+B4e,EAxjBI,WACjC,OAhlDR,SAA4BhW,EAASoW,GACnC,IAAKA,EACH,OAAOpW,EAGT,IAAIqW,EAAe,GACfC,EAAkB,GAClBC,EAAWF,EAENzZ,EAAYwZ,EAAOvZ,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAtE,IAAyEJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CAC1I,IAAIoH,EAEJ,GAAIJ,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5B0G,EAAOL,EAAUI,SACZ,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGjF,MAGZ,IAAI8F,EAAUZ,EAEE,MAAZY,EACF0Y,EAAShiB,KAAK,CACZmV,SAAS,IAEU,QAAZ7L,GAAiC,WAAZA,EAC9B0Y,EAAWD,EAEX,WACE,IAAIpe,OAAc,EAGhBA,EADc,iBAAZ2F,OACYpF,EAEAoF,EAIhB,IAAI2Y,EAAQxW,EAAQlC,QAAQkC,EAAQhI,QAAO,SAAUiT,GACnD,OAAOA,EAAOlT,QAAUG,KACvB,IAEC+S,EAASjL,EAAQwW,GAErBxW,EAAQyW,OAAOD,EAAO,GAEtBD,EAAShiB,KAAK0W,GAlBhB,GAuBJ,OAAOoL,EAAa7e,OAAOwI,GAASxI,OAAO8e,GA2hD9BI,CA93Cf,SAAmD1R,GACjD,IAAIzN,EAAYyN,EAAMzN,UAClBof,EAAe3R,EAAM2R,aACrBjE,EAAyB1N,EAAM0N,uBAC/BkE,EAAwB5R,EAAM4R,sBAC9BC,EAAkB7R,EAAM6K,eAEvBgH,IACHA,EAAkBhH,GAIpB,IAAIiH,EAAuBvf,EAAUkD,KAAI,SAAUjC,GACjD,MAAO,CACLT,MAAOS,EAOPiR,MAAOkN,EAAane,IAAYA,MAcpC,OAVAse,EAAqB/Y,MAAK,SAAU/I,EAAGC,GACrC,OAAO4hB,EAAgB7hB,EAAEyU,MAAOxU,EAAEwU,MAAOmN,MAGvClE,GACFoE,EAAqBC,QAAQ,CAC3BtN,MAAOkN,EAAaK,KAIjBF,EA21CyBG,CAA0C,CAClE1f,UAAWA,GAAaX,OAAOoQ,EAA8B,EAArCpQ,CAAwCQ,GAChEuf,aAAc3C,EACdtB,yBAAwBpM,IAAgD,IAA/BsM,IAA+CF,EACxFkE,sBAAuB9G,IA7hDjC,SAAoCoH,EAAgB9f,GAClD,GAAI8f,IACFA,EAAiBA,EAAelf,QAAO,SAAUiT,GAC/C,OAAQA,GACN,IAAK,eACL,IAAK,IACL,IAAK,MACL,IAAK,SACH,OAAO,EAET,QACE,OAAO8B,EAA4B9B,EAAQ7T,QAI9Bb,OAAS,EAC1B,OAAO2gB,EA+gDDC,CAA2BhB,EAAqB/e,KAijBZ6e,EAhjBvC,CAAC1e,EAAW4e,EAAqBzD,EAAwBsB,EAAQ5c,GAijBnEggB,IAQP,SAAwBpiB,EAAGC,GACzB,GAAID,EAAEuB,SAAWtB,EAAEsB,OACjB,OAAO,EAKT,IAFA,IAAIlB,EAAI,EAEDA,EAAIL,EAAEuB,QAAQ,CACnB,GAAIvB,EAAEK,KAAOJ,EAAEI,GACb,OAAO,EAGTA,IAGF,OAAO,EAvBuCgiB,CAAepB,EAAcmB,MACzEE,GAA2BtB,IAC3BoB,GAAuCnB,GAGlCqB,KApjBJ,CACDxgB,IAAK,2BACLiB,MAAO,SAAkCiN,GACvC,IAAIzN,EAAYyN,EAAMzN,UAItB,OAHqBjD,KAAKijB,wBAAwB,CAChDhgB,UAAWA,IAES,GAAGQ,QAG1B,CACDjB,IAAK,SACLiB,MAAO,WACL,IAAIyf,EAAeljB,KAAKgC,MACpByO,EAAOyS,EAAazS,KACpB4E,EAAW6N,EAAa7N,SACxB8N,EAAeD,EAAaC,aAC5B7N,EAAQ4N,EAAa5N,MACrBW,EAAYiN,EAAajN,UAEzBmN,GADWF,EAAa5F,SACP4F,EAAaE,gBAC9BC,EAAmBH,EAAaG,iBAChCC,EAAaJ,EAAaI,WAC1BC,EAAyBL,EAAaM,uBACtCjE,EAAqB2D,EAAa3D,mBAClCkE,EAAqBP,EAAaQ,mBAIlChE,GAHiBwD,EAAaxV,eACVwV,EAAajgB,UACXigB,EAAarB,oBAC1BqB,EAAaxD,QAatB5c,GAZQogB,EAAajM,MACLiM,EAAapK,cACnBoK,EAAahM,QACEgM,EAAa9E,uBAClB8E,EAAalK,kBACEkK,EAAatD,iCAC3BsD,EAAarD,mBAChBqD,EAAa3B,gBACd2B,EAAa7E,eACD6E,EAAa5E,2BACX4E,EAAaxF,6BACpCwF,EAAavC,MACVuC,EAAapgB,UAGxBgS,GAFgBoO,EAAalR,cACnBkR,EAAa1H,QAChBY,GAA8C8G,EAAc,CAAC,OAAQ,WAAY,eAAgB,QAAS,YAAa,WAAY,iBAAkB,mBAAoB,aAAc,yBAA0B,qBAAsB,qBAAsB,iBAAkB,YAAa,sBAAuB,SAAU,QAAS,gBAAiB,UAAW,yBAA0B,oBAAqB,mCAAoC,qBAAsB,kBAAmB,iBAAkB,6BAA8B,+BAAgC,QAAS,WAAY,gBAAiB,aAE3lBS,EAAe3jB,KAAK4d,MACpB1Z,EAAUyf,EAAazf,QACvBjB,EAAY0gB,EAAa1gB,UACzBuW,EAAcmK,EAAanK,YAC3B0F,EAAYyE,EAAazE,UACzB0E,EAAiBN,EAAa5P,EAA4B,EAAIC,EAA4B,EAC1F6O,EAAuBxiB,KAAKijB,wBAAwB,CACtDhgB,UAAWA,IAEb,OAAO4P,EAAcnS,EAAEwU,cAAcuO,EAAoB,CACvDnO,MAAOA,EACPW,UAAWxC,GAAAA,CAAqBwC,EAAW,aAAc,CACvD,oBAAqBiJ,KAEtBrM,EAAcnS,EAAEwU,cAAcqO,EAAwBpH,GAA8B,CACrF1L,KAAMA,EAAO,GAAGvN,OAAOuN,EAAM,gBAAatM,EAC1C,aAAcub,EAAOxb,SACpBqb,EAAoB,CACrB9b,MAAOS,EACPwH,QAAS8W,EACT3N,SAAU7U,KAAKuhB,gBACfnC,QAASpf,KAAK6jB,eACdxE,OAAQrf,KAAK8jB,cACbzO,SAAUA,GAAYkK,GAAsBA,EAAmBlK,SAC/Dc,cAAenW,KAAKiZ,eACjBpG,EAAcnS,EAAEwU,cAAc0O,EAAgBzH,GAA8B,CAC/EqB,IAAKxd,KAAK+jB,YACVpe,KAAM,MACNwd,aAAcA,GACbE,EAAkBvO,EAAM,CACzBrE,KAAMA,EACN3N,SAAUA,EACVoB,QAASA,EACTT,MAAO+V,GAAe,GACtB3E,SAAU7U,KAAK6U,SACfuK,QAASpf,KAAKof,QACdC,OAAQrf,KAAKqf,OACbhK,SAAUA,EACV+N,eAAgBA,EAChBnN,UAAWxC,GAAAA,CAAqB,kBAAmB4P,GAAoBA,EAAiBpN,UAAWnB,EAAKmB,oBAhf9FnU,GAAkBF,EAAYH,UAAWiB,GACrDC,GAAab,GAAkBF,EAAae,GAigBzCwa,EAjbkD,CAkbzDtK,EAAcnS,EAAEsjB,eAGdC,GAAmBpR,EAAcnS,EAAEwjB,YAAW,SAAUliB,EAAOwb,GACjE,OAAO3K,EAAcnS,EAAEwU,cAAc+H,GAAyCd,GAA8B,GAAIna,EAAO,CACrHsb,SAAUE,QAGdyG,GAAiBzO,UAAY,CAQ3B/R,MAAOwP,EAAmBvS,EAAE0H,OAO5ByM,SAAU5B,EAAmBvS,EAAE+U,KAAKpC,WAMpC+L,QAASnM,EAAmBvS,EAAE+U,KAM9B4J,OAAQpM,EAAmBvS,EAAE+U,KAM7BJ,SAAUpC,EAAmBvS,EAAEiV,KAuB/BwN,aAAclQ,EAAmBvS,EAAE0H,OAAOiL,WAsB1CwM,mBAAoB5M,EAAmBvS,EAAEyjB,MAAM,CAAC,aAGhDvE,iCAAkC3M,EAAmBvS,EAAEiV,KASvDjI,eAAgBuF,EAAmBvS,EAAE0H,OASrCnF,UAAWgQ,EAAmBvS,EAAEgV,QAAQzC,EAAmBvS,EAAE0H,QAY7DsX,OAAQpM,EAAiBD,WAezBmI,QAASvI,EAAmBvS,EAAE0jB,UAAU,CAACnR,EAAmBvS,EAAE0H,OAAQ6K,EAAmBvS,EAAEgV,QAAQzC,EAAmBvS,EAAE0H,UAyBxH8O,QAASjE,EAAmBvS,EAAE0H,OAAOiL,WAwBrC4D,MAAOhE,EAAmBvS,EAAE6S,SAASN,EAAmBvS,EAAEyY,aAY1DL,cAAe7F,EAAmBvS,EAAEyY,YAAY9F,WAKhD+K,uBAAwBnL,EAAmBvS,EAAEiV,KAAKtC,WAUlD2F,kBAAmB/F,EAAmBvS,EAAEyY,YAAY9F,WAcpDwO,oBAAqB5O,EAAmBvS,EAAEgV,QAAQzC,EAAmBvS,EAAE0H,QAKvEkN,MAAOrC,EAAmBvS,EAAE0S,OAK5B6C,UAAWhD,EAAmBvS,EAAE0H,OAkBhCob,uBAAwBvQ,EAAmBvS,EAAEyY,YAAY9F,WAOzDkM,mBAAoBtM,EAAmBvS,EAAE0S,OAezCgQ,eAAgBnQ,EAAmBvS,EAAEyY,YAAY9F,WAUjDqQ,mBAAoBzQ,EAAmBvS,EAAEyY,YAAY9F,WAKrDgQ,iBAAkBpQ,EAAmBvS,EAAE0S,OAcvCkQ,WAAYrQ,EAAmBvS,EAAEiV,KAAKtC,WAOtCrB,cAAeiB,EAAmBvS,EAAEiV,KAMpC0I,eAAgBpL,EAAmBvS,EAAEiV,KAAKtC,WAO1CiL,2BAA4BrL,EAAmBvS,EAAEiV,KAAKtC,WAQtDvQ,SAAUoQ,EAAmBG,WAc7BkO,gBAAiBtO,EAAmBvS,EAAE+U,KAWtCiI,6BAA8BzK,EAAmBvS,EAAEiV,KAAKtC,YAE1D4Q,GAAiB7K,aAAe,CAI9B+J,aAAc,MAKdK,uBAAwBzN,EAKxB+C,cAAe/B,EAMfG,QAAS,uEAKT8B,kBAAmBrB,EAKnByL,eAAgB,QAKhBM,mBAAoB,MAepB/C,MAAO1N,EAAmBvS,EAAE2jB,IAS5Bf,YAAY,EAMZlF,wBAAwB,EAMxBC,gBAAgB,EAOhBC,4BAA4B,EAW5BZ,8BAA8B,GAEH,IACzBsF,GACAF,GAF6BwB,GAAwB,GA+BzD,SAASC,KAeP,OAdAA,GAAuCjiB,OAAO6R,QAAU,SAAUpS,GAChE,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAASD,UAAUnM,GAEvB,IAAK,IAAIyB,KAAO2K,EACV7K,OAAOb,UAAU2S,eAAe5Q,KAAK2J,EAAQ3K,KAC/CT,EAAOS,GAAO2K,EAAO3K,IAK3B,OAAOT,GAGFwiB,GAAqClQ,MAAMrU,KAAMkN,WAQ1D,SAASsX,GAAiBC,GACxB,IAAIC,EAAoB7R,EAAcnS,EAAEwjB,YAAW,SAAUliB,EAAOwb,GAClE,OAAO3K,EAAcnS,EAAEwU,cAAcoP,GAAuBC,GAAqC,CAC/F/G,IAAKA,GACJxb,OAUL,OARA0iB,EAAkBlP,UAAY,CAC5B1S,SAAUoQ,EAAmBG,WAC7BqM,OAAQpM,EAAiBD,YAE3BqR,EAAkBtL,aAAe,CAC/BtW,SAAU2hB,EACV/E,OAAQ3M,GAEH2R,EAEwDF,KAMjE,SAAShhB,GAAKiS,EAAMkP,GAClB,IAAIhY,EAAOnE,MAAM/G,UAAU6H,MAAM9F,KAAKmhB,GAEtC,OADAhY,EAAK1M,KAAKuS,GACHiD,EAAKpB,MAAMrU,KAAM2M,GAGc6X,GAAiBhS,GAUzD,SAASD,KACP,OAAO/O,GAAKiP,EAAoC,EAAGvF,aAiB/C,KACA,SAAUhN,EAAQC,EAAqBC,GAE7C,aAKA,IAAIwS,EAAQxS,EAAoB,GAC5ByS,EAA6BzS,EAAoB0S,EAAEF,GAGnDI,EAAa5S,EAAoB,IACjC6S,EAAkC7S,EAAoB0S,EAAEE,GAqG5D,SAAS4R,EAAiBC,EAAQzc,GAChC,IAAI0c,EAAQ,EAQHxc,EAAYF,EAAOxH,MAAM,IAAK2H,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAjF,IAAoFJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CACrJ,IAAIoH,EAEJ,GAAIJ,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5B0G,EAAOL,EAAUI,SACZ,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGjF,MAGIkF,IAEEkc,GAChBC,IAIJ,OAAOA,EAIT,SAASC,EAAYC,EAAmBC,GAQtC,IAPA,IAAIC,EAAchY,UAAUjL,OAAS,QAAsBkC,IAAjB+I,UAAU,GAAmBA,UAAU,GAAK,IAClFiY,EAAoBjY,UAAUjL,OAAS,QAAsBkC,IAAjB+I,UAAU,GAAmBA,UAAU,GAAK,IACxFkY,EAAaJ,EAAkB/iB,OAC/BojB,EAAiBT,EAAiB,IAAKI,GACvCM,EAAiBV,EAAiB,IAAKI,GACvCO,EAAkBF,EAAiBC,EAEhCC,EAAkB,GAAKH,EAAaH,EAAShjB,QAClD+iB,GAAqBC,EAASG,GAAY/a,QAAQ6a,EAAaC,GAElC,MAAzBF,EAASG,IACXG,IAGFH,IAGF,OAAOJ,EA6HT,SAASQ,EAAc/hB,EAAOgiB,EAAO1K,GACV,kBAAdA,IACTA,EA9GiD,SAAWkK,GAC9D,IAAIC,EAAchY,UAAUjL,OAAS,QAAsBkC,IAAjB+I,UAAU,GAAmBA,UAAU,GAAK,IAClFwY,EAAsBxY,UAAUjL,OAAS,EAAIiL,UAAU,QAAK/I,EAEhE,IAAK8gB,EACH,OAAO,SAAUxhB,GACf,MAAO,CACLoE,KAAMpE,IAKZ,IAAIkiB,EAAyBf,EAAiBM,EAAaD,GAC3D,OAAO,SAAUxhB,GACf,IAAKA,EACH,MAAO,CACLoE,KAAM,GACNod,SAAUA,GAId,IAAIW,EAAwB,EACxBC,EAAqB,GAOhBvd,EAAY2c,EAASrkB,MAAM,IAAK2H,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAnF,IAAsFJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CACvJ,IAAIoH,EAEJ,GAAIJ,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5B0G,EAAOL,EAAUI,SACZ,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGjF,MAGZ,IAAI0E,EAAYQ,EAEhB,GAAIR,IAAc+c,GAWlB,GANAW,GAAsBpiB,EAAMmiB,KAC5BA,IAK8BniB,EAAMxB,QAI9BwB,EAAMxB,OAAS0jB,EACjB,WAfFE,GAAsB1d,EAwB1B,OAJIud,IACFG,EAAqBd,EAAYc,EAAoBZ,IAGhD,CACLpd,KAAMge,EACNZ,SAAUA,IAwCAa,CAAkB/K,IAGhC,IAAIpS,EAAOoS,EAAUtX,IAAU,GAC3BoE,EAAOc,EAAKd,KACZod,EAAWtc,EAAKsc,SAMpB,QAJa9gB,IAAT0D,IACFA,EAAOpE,GAGLwhB,EACF,QAAc9gB,IAAVshB,EACFA,EAAQ5d,EAAK5F,WACR,CAKL,IAJA,IAAIigB,EAAQ,EACR6D,GAAQ,EACRC,GAAuC,EAEpC9D,EAAQra,EAAK5F,QAAUigB,EAAQ+C,EAAShjB,QAAQ,CAErD,GAAI4F,EAAKqa,KAAW+C,EAAS/C,GAAQ,CACnC,GAAc,IAAVuD,EAAa,CACfM,GAAQ,EACRN,EAAQvD,EACR,MAGF8D,EAAsC9D,EACtCuD,IAGFvD,IAKG6D,IACHN,EAAQO,EAAsC,GAKpD,MAAO,CACLne,KAAMA,EACN4d,MAAOA,GAIX,SAASQ,EAAW1c,GAClB,OAAOA,EAAQ2c,aAAa,YAG9B,SAASC,EAAa5c,GAEpB,GAAIA,EAAQ6c,iBAAmB7c,EAAQ8c,aAIvC,MAAO,CACLC,MAAO/c,EAAQ6c,eACfG,IAAKhd,EAAQ8c,cAIjB,IAAIG,EACS,EADTA,EAEM,GAkBV,SAASC,EAAiBld,EAASmd,QAEVviB,IAAnBuiB,KAwBN,WAEE,GAAyB,qBAAdC,UACT,OAAOC,EAA2BliB,KAAKiiB,UAAUE,WAZ/CC,GAKFvd,EAAQwd,kBAAkBL,EAAgBA,GAJ1CM,YAAW,WACT,OAAOzd,EAAQwd,kBAAkBL,EAAgBA,KAChD,IAaP,IAAIE,EAA6B,WAuDjC,SAASK,EAAuBjS,EAAOvJ,EAAOyb,EAAQpgB,EAASqgB,GAC7D,IAAIlB,EAAWxa,GAAf,CAIA,IAAI2b,EA3GN,SAAsBpS,GACpB,OAAQA,EAAMqS,SACZ,KAAKb,EACH,MAAO,YAET,KAAKA,EACH,MAAO,UAqGKc,CAAatS,GAE7B,OAAQoS,GACN,IAAK,SACL,IAAK,YAEHpS,EAAMuS,iBACN,IAAIC,EAAYrB,EAAa1a,GAE7B,OAAI+b,GACFC,EAAehc,EAAO+b,GACfE,EAAgBjc,EAAOyb,EAAQpgB,OAAS3C,EAAWgjB,IAIrDO,EAAgBjc,EAAOyb,EAAQpgB,EAASsgB,EAAWD,KAYhE,SAASM,EAAehc,EAAO+b,GAC7B,IAAI3f,EAAO4D,EAAMhI,MACjBoE,EAAOA,EAAKyB,MAAM,EAAGke,EAAUlB,OAASze,EAAKyB,MAAMke,EAAUjB,KAC7D9a,EAAMhI,MAAQoE,EACd4e,EAAiBhb,EAAO+b,EAAUlB,OAgBpC,SAASoB,EAAgBjc,EAAOyb,EAAQpgB,EAASsgB,EAAWD,GAG1D,IAAIQ,EA1bN,SAAqB9f,EAAM6e,EAAgBkB,GAKzC,IAJA,IAAInkB,EAAQ,GACRokB,EAAgC,EAChC3F,EAAQ,EAELA,EAAQra,EAAK5F,QAAQ,CAC1B,IAAIkG,EAAYyf,EAAgB/f,EAAKqa,GAAQze,QAE3BU,IAAdgE,IACF1E,GAAS0E,OAEchE,IAAnBuiB,IACEA,IAAmBxE,EACrB2F,EAAgCpkB,EAAMxB,OAAS,EACtCykB,EAAiBxE,IAC1B2F,EAAgCpkB,EAAMxB,UAK5CigB,IAaF,YATuB/d,IAAnBuiB,IAEFmB,EAAgCpkB,EAAMxB,QAG3B,CACXwB,MAAOA,EACPgiB,MAAOoC,GA2ZKC,CAAYrc,EAAMhI,MAAwBgI,EAlJzC2a,eAkJiDc,GAC5DzjB,EAAQkkB,EAAQlkB,MAChBgiB,EAAQkC,EAAQlC,MAIpB,GAAI2B,EAAW,CACb,IAAIW,EA9eR,SAActkB,EAAOgiB,EAAO2B,GAC1B,OAAQA,GACN,IAAK,YAGC3B,EAAQ,IAEVhiB,EAAQA,EAAM6F,MAAM,EAAGmc,EAAQ,GAAKhiB,EAAM6F,MAAMmc,GAEhDA,KAGF,MAEF,IAAK,SAEHhiB,EAAQA,EAAM6F,MAAM,EAAGmc,GAAShiB,EAAM6F,MAAMmc,EAAQ,GAIxD,MAAO,CACLhiB,MAAOA,EACPgiB,MAAOA,GAwdgBuC,CAAKvkB,EAAOgiB,EAAO2B,GAC1C3jB,EAAQskB,EAAiBtkB,MACzBgiB,EAAQsC,EAAiBtC,MAK3B,IAAIwC,EAAYzC,EAAc/hB,EAAOgiB,EAAO3e,GACxCe,EAAOogB,EAAUpgB,KACrB4d,EAAQwC,EAAUxC,MAKlBha,EAAMhI,MAAQoE,EAEd4e,EAAiBhb,EAAOga,GAGxB0B,EAAU1jB,GAGZ,SAASyQ,IAeP,OAdAA,EAAW5R,OAAO6R,QAAU,SAAUpS,GACpC,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAASD,UAAUnM,GAEvB,IAAK,IAAIyB,KAAO2K,EACV7K,OAAOb,UAAU2S,eAAe5Q,KAAK2J,EAAQ3K,KAC/CT,EAAOS,GAAO2K,EAAO3K,IAK3B,OAAOT,GAGFmS,EAASG,MAAMrU,KAAMkN,WAG9B,SAASoH,EAAyBnH,EAAQoH,GACxC,GAAc,MAAVpH,EAAgB,MAAO,GAE3B,IAEI3K,EAAKzB,EAFLgB,EAkBN,SAAuCoL,EAAQoH,GAC7C,GAAc,MAAVpH,EAAgB,MAAO,GAC3B,IAEI3K,EAAKzB,EAFLgB,EAAS,GACTyS,EAAalS,OAAOa,KAAKgK,GAG7B,IAAKpM,EAAI,EAAGA,EAAIyT,EAAWvS,OAAQlB,IACjCyB,EAAMgS,EAAWzT,GACbwT,EAAS/K,QAAQhH,IAAQ,IAC7BT,EAAOS,GAAO2K,EAAO3K,IAGvB,OAAOT,EA9BM0S,CAA8BtH,EAAQoH,GAInD,GAAIjS,OAAO+K,sBAAuB,CAChC,IAAIqH,EAAmBpS,OAAO+K,sBAAsBF,GAEpD,IAAKpM,EAAI,EAAGA,EAAI2T,EAAiBzS,OAAQlB,IACvCyB,EAAMkS,EAAiB3T,GACnBwT,EAAS/K,QAAQhH,IAAQ,GACxBF,OAAOb,UAAUkT,qBAAqBnR,KAAK2J,EAAQ3K,KACxDT,EAAOS,GAAO2K,EAAO3K,IAIzB,OAAOT,EA8BT,SAASmmB,EAAMvf,EAAM6U,GACnB,IAAI/Z,EAAQkF,EAAKlF,MACbyK,EAAQvF,EAAKuF,MACbrH,EAAS8B,EAAK9B,OACd+c,EAAiBjb,EAAKya,eACtBvO,EAAWlM,EAAKkM,SAChBsT,EAAYxf,EAAKwf,UACjBrT,EAAOR,EAAyB3L,EAAM,CAAC,QAAS,QAAS,SAAU,iBAAkB,WAAY,cAEjGyf,EAAc9lB,OAAOsQ,EAAc,OAArBtQ,GACd+lB,EAAS/lB,OAAOsQ,EAAmB,YAA1BtQ,EAA6B,SAAUX,GAClDymB,EAAY7K,QAAU5b,EAElB6b,IACiB,oBAARA,EACTA,EAAI7b,GAEJ6b,EAAID,QAAU5b,KAGjB,CAAC6b,IAEA8K,EAAYhmB,OAAOsQ,EAAmB,YAA1BtQ,EAA6B,SAAU0S,GA/LvD0S,EAgMsCU,EAAY7K,QAASrP,EAAOrH,OAhM1B1C,EAgMkC0Q,KACvE,CAACuT,EAAala,EAAOrH,EAAQgO,IAE5B0T,EAAajmB,OAAOsQ,EAAmB,YAA1BtQ,EAA6B,SAAU0S,GAKtD,OAJImT,GACFA,EAAUnT,GAGLiS,EAAuBjS,EAAOoT,EAAY7K,QAASrP,EAAOrH,EAAQgO,KACxE,CAACuT,EAAala,EAAOrH,EAAQgO,EAAUsT,IAE1C,OAAOtV,EAAcnS,EAAEwU,cAAc0O,EAAgB1P,EAAS,GAAIY,EAAM,CACtE0I,IAAK6K,EACL5kB,MAAOoD,EAAO2hB,EAAa/kB,GAAS,GAAKA,GAAOoE,KAChDsgB,UAAWI,EACX1T,SAAUyT,MAIdJ,EAAQrV,EAAcnS,EAAEwjB,WAAWgE,IAC7B1S,UAAY,CAEhBtH,MAAO+E,EAAmBvS,EAAE+U,KAAKpC,WAEjCxM,OAAQoM,EAAmBvS,EAAE+U,KAAKpC,WAElC+P,eAAgBnQ,EAAmBvS,EAAEyY,YAAY9F,WAEjD1N,KAAMsN,EAAmBvS,EAAE0H,OAAOiL,WAElC5P,MAAOwP,EAAmBvS,EAAE0H,OAE5ByM,SAAU5B,EAAmBvS,EAAE+U,KAAKpC,WAEpC8U,UAAWlV,EAAmBvS,EAAE+U,KAChCgT,MAAOxV,EAAmBvS,EAAE+U,KAC5BiT,QAASzV,EAAmBvS,EAAE+U,MAEhCyS,EAAM9O,aAAe,CAEnBgK,eAAgB,QAEhBzd,KAAM,QAEqB,IAAIgjB,EAAc,EAE/C,SAASH,EAAa/kB,GACpB,YAAiBU,IAAVV,GAAiC,OAAVA,EAGhC,IAAI4V,EAAYjZ,EAAoB,MAGhCwoB,EAA6BxoB,EAAoB,MAGjDyoB,EAAmBzoB,EAAoB,MAG3C,SAAS0oB,IAeP,OAdAA,EAAqBxmB,OAAO6R,QAAU,SAAUpS,GAC9C,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAASD,UAAUnM,GAEvB,IAAK,IAAIyB,KAAO2K,EACV7K,OAAOb,UAAU2S,eAAe5Q,KAAK2J,EAAQ3K,KAC/CT,EAAOS,GAAO2K,EAAO3K,IAK3B,OAAOT,GAGF+mB,EAAmBzU,MAAMrU,KAAMkN,WAGxC,SAAS6b,EAAmC5b,EAAQoH,GAClD,GAAc,MAAVpH,EAAgB,MAAO,GAE3B,IAEI3K,EAAKzB,EAFLgB,EAkBN,SAAiDoL,EAAQoH,GACvD,GAAc,MAAVpH,EAAgB,MAAO,GAC3B,IAEI3K,EAAKzB,EAFLgB,EAAS,GACTyS,EAAalS,OAAOa,KAAKgK,GAG7B,IAAKpM,EAAI,EAAGA,EAAIyT,EAAWvS,OAAQlB,IACjCyB,EAAMgS,EAAWzT,GACbwT,EAAS/K,QAAQhH,IAAQ,IAC7BT,EAAOS,GAAO2K,EAAO3K,IAGvB,OAAOT,EA9BMinB,CAAwC7b,EAAQoH,GAI7D,GAAIjS,OAAO+K,sBAAuB,CAChC,IAAIqH,EAAmBpS,OAAO+K,sBAAsBF,GAEpD,IAAKpM,EAAI,EAAGA,EAAI2T,EAAiBzS,OAAQlB,IACvCyB,EAAMkS,EAAiB3T,GACnBwT,EAAS/K,QAAQhH,IAAQ,GACxBF,OAAOb,UAAUkT,qBAAqBnR,KAAK2J,EAAQ3K,KACxDT,EAAOS,GAAO2K,EAAO3K,IAIzB,OAAOT,EAkI6C5B,EAAuB,EA3G7E,SAAqBskB,GAQnB,SAAS/Q,EAAW/K,EAAM6U,GACxB,IAAItZ,EAAUyE,EAAKzE,QACf8N,EAAgBrJ,EAAKqJ,cACrBC,EAAyBtJ,EAAKsJ,uBAC9BnP,EAAW6F,EAAK7F,SAChBgS,EAAOiU,EAAmCpgB,EAAM,CAAC,UAAW,gBAAiB,yBAA0B,aAEvG9B,EAASvE,OAAOsQ,EAAmB,YAA1BtQ,EAA6B,SAAUmB,GAElD,IAAIsX,EAAY,IAAI1B,EAA2B,EAAEnV,EAASpB,GACtD+O,EAASvP,OAAOumB,EAA8C,EAArDvmB,CAAwD,CACnE4B,QAASA,EACT8N,cAAeA,EACfC,uBAAwBA,EACxBnP,SAAUA,IAGR+E,EAAOkT,EAAUtP,MAAMoG,EAASpO,GAChCwhB,EAAWlK,EAAUkO,cAUzB,OARIpX,IACFhK,EAAOvF,OAAOumB,EAAiD,EAAxDvmB,CAA2DuF,EAAMgK,GAEpEoT,IACFA,EAAW3iB,OAAOumB,EAAiD,EAAxDvmB,CAA2D2iB,EAAUpT,KAI7E,CACLhK,KAAMA,EACNod,SAAUA,KAEX,CAAC/gB,EAASpB,IACb,OAAO+P,EAAcnS,EAAEwU,cAAcyT,EAAaG,EAAmB,GAAIhU,EAAM,CAC7E0I,IAAKA,EACLtP,MAAO0a,EAA8D,EACrE/hB,OAAQA,KA6DZ,OAzDA6M,EAAab,EAAcnS,EAAEwjB,WAAWxQ,IAC7B8B,UAAY,CAQrB/R,MAAOwP,EAAmBvS,EAAE0H,OAAOiL,WAMnCwB,SAAU5B,EAAmBvS,EAAE+U,KAAKpC,WAYpCnP,QAAS+O,EAAmBvS,EAAE0H,OAY9B4J,cAAeiB,EAAmBvS,EAAEiV,KAQpC1D,uBAAwBgB,EAAmBvS,EAAEiV,KAK7C7S,SAAUmQ,EAAmBvS,EAAE0S,OAAOC,YAExCK,EAAW0F,aAAe,CACxBtW,SAAU2hB,GAEL/Q,EAEwE,IAI3E,KACA,SAAUxT,EAAQC,EAAqBC,GAE7C,aAKA,IAAIoS,EAAepS,EAAoB,MAkBnCuS,GAf6BvS,EAAoB,MAG7BA,EAAoB,MAGnBA,EAAoB,MAGjBA,EAAoB,MAG7BA,EAAoB,MAGpBA,EAAoB,OAGnCwS,EAAQxS,EAAoB,GAC5ByS,EAA6BzS,EAAoB0S,EAAEF,GAGnDI,EAAa5S,EAAoB,IACjC6S,EAAkC7S,EAAoB0S,EAAEE,GAGxDqG,EAAYjZ,EAAoB,MAGhC6H,EAAc7H,EAAoB,MAGlCsR,EAAoCtR,EAAoB,MAG5D,SAAS4L,EAAeC,EAAKlL,GAC3B,OAqCF,SAAyBkL,GACvB,GAAIzD,MAAMC,QAAQwD,GAAM,OAAOA,EAtCxBC,CAAgBD,IAOzB,SAA+BA,EAAKlL,GAClC,KAAMO,OAAOC,YAAYe,OAAO2J,KAAgD,uBAAxC3J,OAAOb,UAAUynB,SAAS1lB,KAAKyI,GACrE,OAGF,IAAIE,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKnI,EAET,IACE,IAAK,IAAiCoI,EAA7B7D,EAAKuD,EAAI3K,OAAOC,cAAmB6K,GAAMG,EAAK7D,EAAGE,QAAQC,QAChEsD,EAAKlM,KAAKsM,EAAG9I,QAET1C,GAAKoL,EAAKlK,SAAWlB,GAH8CqL,GAAK,IAK9E,MAAOI,GACPH,GAAK,EACLC,EAAKE,EACL,QACA,IACOJ,GAAsB,MAAhB1D,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAI2D,EAAI,MAAMC,GAIlB,OAAOH,EAlCwBM,CAAsBR,EAAKlL,IAG5D,WACE,MAAM,IAAIc,UAAU,wDAJ4C6K,GAiDlE,SAASyc,EAAexgB,GACtB,IAAI3C,EAAQhG,KAERyD,EAAQkF,EAAKlF,MACboR,EAAWlM,EAAKkM,SAChB3Q,EAAUyE,EAAKzE,QACfwJ,EAAiB/E,EAAK+E,eACtBsE,EAAgBrJ,EAAKqJ,cACrBC,EAAyBtJ,EAAKsJ,uBAC9BmX,EAA0CzgB,EAAKygB,wCAC/CtmB,EAAW6F,EAAK7F,SAChBumB,EAA0B/mB,OAAOsQ,EAAc,OAArBtQ,GAE1BgnB,EAAoB,SAA2B7lB,EAAOS,EAASqlB,GACjE7Q,QAAQ3K,MAAM,oDAAoD7K,OAAOO,EAAO,8BAA8BP,OAAOgB,EAAS,SAAShB,OAAOqmB,EAAgB,wCAA0CA,EAAgB,aAAe,MACvOF,EAAwB9L,SAAU,GAGhC5B,EAAwB,SAA+BjQ,GACzD,OAwMJ,SAAgCjI,EAAOS,EAAS8N,EAAeC,EAAwBvE,EAAgB0b,EAAyCtmB,EAAUwmB,GACxJ,GAAIplB,GAAW8N,GAAiBC,EAAwB,CACtD,IAAIJ,EAASvP,OAAOoP,EAAmD,EAA1DpP,CAA6D4B,EAASpB,GAEnF,OAAIW,GAC4B,IAA1BA,EAAM+F,QAAQqI,IAChByX,EAAkB7lB,EAAOS,GAGpBT,GAGFoO,EAGT,IAAKpO,EACH,MAAO,GAGT,IAAKS,IAAYwJ,EACf,OAAOjK,EAGT,IAAI0W,EAAY,IAAId,EAA2B,OAAElV,EAAWrB,GAC5DqX,EAAU1O,MAAMhI,GAChB,IAAI2X,EAAcjB,EAAUkB,YAE5B,OAAID,EACElX,GACEkX,EAAYlX,SAAWkX,EAAYlX,UAAYA,EACjDolB,EAAkB7lB,EAAOS,EAASkX,EAAYlX,SACrCkX,EAAYjU,qBAAuB7E,OAAOqQ,EAA4C,EAAnDrQ,CAAsD4B,EAASpB,IAC3GwmB,EAAkB7lB,EAAOS,GAGvB8N,EACKoJ,EAAYpS,eAGd1G,OAAO2F,EAA6B,EAApC3F,CAAuC8Y,EAAYE,mBAsBtDF,EAAYjU,oBAAsBiU,EAAYjU,qBAAuB7E,OAAOqQ,EAA4C,EAAnDrQ,CAAsDoL,EAAgB5K,IAAasmB,EACnJ9mB,OAAO2F,EAA6B,EAApC3F,CAAuC8Y,EAAYE,kBAGrD7X,EAGF,GA5QA+lB,CAAuB/lB,EAAOS,EAAS8N,EAAeC,EAAwBvE,EAAgB0b,EAAyCtmB,GAAU,WAClJ4I,GAAWA,EAAQ4d,mBACrB5d,EAAQ4d,oBAGV,IAAK,IAAIG,EAAOvc,UAAUjL,OAAQ0K,EAAO,IAAInE,MAAMihB,GAAOC,EAAO,EAAGA,EAAOD,EAAMC,IAC/E/c,EAAK+c,GAAQxc,UAAUwc,GAGzBJ,EAAkBjV,MAAMrO,EAAO2G,OAM/Bgd,EAAa3d,EADD1J,OAAOsQ,EAAgB,SAAvBtQ,CAA0B4B,GACC,GACvCuV,EAAckQ,EAAW,GACzBC,EAAiBD,EAAW,GAI5BE,EAAa7d,EADA1J,OAAOsQ,EAAgB,SAAvBtQ,CAA0BoL,GACC,GACxCkT,EAAqBiJ,EAAW,GAChCC,EAAwBD,EAAW,GAInCE,EAAa/d,EADA1J,OAAOsQ,EAAgB,SAAvBtQ,CAA0BqZ,KACC,GACxCnC,EAAcuQ,EAAW,GACzBC,EAAiBD,EAAW,GAI5BE,EAAaje,EADA1J,OAAOsQ,EAAgB,SAAvBtQ,CAA0BmB,GACC,GACxCymB,EAAsBD,EAAW,GACjCE,EAAyBF,EAAW,GAIpCG,EAAcpe,EADD1J,OAAOsQ,EAAgB,SAAvBtQ,GAC4B,GAEzC+nB,GADkBD,EAAY,GACTA,EAAY,IAEjCE,EAAWhoB,OAAOsQ,EAAmB,YAA1BtQ,EAA6B,WAC1C,OAAO+nB,EAAmB,MACzB,CAACA,IAEJ,SAASE,EAAuB/Q,GAE9B,GAAKA,EAAL,CAIItV,GAAW8N,IAAkBC,IAC/BuH,EAAc,IAAItW,OAAOZ,OAAOqQ,EAA4C,EAAnDrQ,CAAsD4B,EAASpB,IAAWI,OAAOsW,IAmB5G,IAAIW,EAAY,IAAId,EAA2B,EAAEnV,GAAWwJ,EAAgB5K,GAE5E,OADAqX,EAAU1O,MAAM+N,GACTW,EAAUC,kBAKnB9X,OAAOsQ,EAAiB,UAAxBtQ,EAA2B,WACrBmB,IAAUymB,IACZC,EAAuB1mB,GACvBumB,EAAerO,QAEhB,CAAClY,IAEJnB,OAAOsQ,EAAiB,UAAxBtQ,EAA2B,WACzB,GAAI4B,IAAYuV,EAAa,CAG3B,IAAI+Q,EAFJZ,EAAe1lB,GAIf,IAAIga,EAAevC,EAAsB,CACvC2N,kBAAmB,WACjBkB,GAA2B,KAI/BR,EAAe9L,GAEXsM,GACFL,EAAuBI,EAAuBrM,OAGjD,CAACha,IAEJ5B,OAAOsQ,EAAiB,UAAxBtQ,EAA2B,WACrBoL,IAAmBkT,IACrBkJ,EAAsBpc,GACtBsc,EAAerO,QAEhB,CAACjO,IAEJpL,OAAOsQ,EAAiB,UAAxBtQ,EAA2B,WACrB4nB,IAAwBzmB,GAC1BoR,EAASqV,KAEV,CAACA,IACJ,IAAIO,EAAmBnoB,OAAOsQ,EAAmB,YAA1BtQ,EAA6B,SAAUkX,GAC5D,IAAI/V,EAEJ,GAAIS,EACF,GAAI8N,GAAiBC,EAAwB,CAE3C,IAAIJ,EAASvP,OAAOoP,EAAmD,EAA1DpP,CAA6D4B,EAASpB,GAEnF,GAAoC,IAAhC0W,EAAYhQ,QAAQqI,GAMtB,GAAI2H,GAAkC,MAAnBA,EAAY,GAC7BA,EAAc3H,EAAS2H,OAIvB,IAAI6P,EAAwB9L,QAiB1B,OAHAyM,EAAenY,GACfsY,OAAuBhmB,GAEhBmmB,SAST9Q,GAAkC,MAAnBA,EAAY,KAE7BA,EAAcA,EAAYlQ,MAAM,SAG1BoE,GAGN8L,GAAkC,MAAnBA,EAAY,KAE7BA,EAAc,IAAMA,GAKpBA,IACF/V,EAAQ8mB,EAAuB/Q,IAGjCwQ,EAAexQ,GACf2Q,EAAuB1mB,KACtB,CAACS,EAAS8N,EAAeC,EAAwBvE,EAAgB5K,EAAUknB,EAAgBG,EAAwBG,EAAUjB,IAChI,MAAO,CAAC7P,EAAaiR,GAsFvB,SAASvW,IAeP,OAdAA,EAAW5R,OAAO6R,QAAU,SAAUpS,GACpC,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAASD,UAAUnM,GAEvB,IAAK,IAAIyB,KAAO2K,EACV7K,OAAOb,UAAU2S,eAAe5Q,KAAK2J,EAAQ3K,KAC/CT,EAAOS,GAAO2K,EAAO3K,IAK3B,OAAOT,GAGFmS,EAASG,MAAMrU,KAAMkN,WAG9B,SAASwd,EAAyBze,EAAKlL,GACrC,OAqCF,SAAmCkL,GACjC,GAAIzD,MAAMC,QAAQwD,GAAM,OAAOA,EAtCxB0e,CAA0B1e,IAOnC,SAAyCA,EAAKlL,GAC5C,KAAMO,OAAOC,YAAYe,OAAO2J,KAAgD,uBAAxC3J,OAAOb,UAAUynB,SAAS1lB,KAAKyI,GACrE,OAGF,IAAIE,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKnI,EAET,IACE,IAAK,IAAiCoI,EAA7B7D,EAAKuD,EAAI3K,OAAOC,cAAmB6K,GAAMG,EAAK7D,EAAGE,QAAQC,QAChEsD,EAAKlM,KAAKsM,EAAG9I,QAET1C,GAAKoL,EAAKlK,SAAWlB,GAH8CqL,GAAK,IAK9E,MAAOI,GACPH,GAAK,EACLC,EAAKE,EACL,QACA,IACOJ,GAAsB,MAAhB1D,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAI2D,EAAI,MAAMC,GAIlB,OAAOH,EAlCkCye,CAAgC3e,EAAKlL,IAGhF,WACE,MAAM,IAAIc,UAAU,wDAJgEgpB,GAyCtF,SAASvW,EAAyBnH,EAAQoH,GACxC,GAAc,MAAVpH,EAAgB,MAAO,GAE3B,IAEI3K,EAAKzB,EAFLgB,EAkBN,SAAuCoL,EAAQoH,GAC7C,GAAc,MAAVpH,EAAgB,MAAO,GAC3B,IAEI3K,EAAKzB,EAFLgB,EAAS,GACTyS,EAAalS,OAAOa,KAAKgK,GAG7B,IAAKpM,EAAI,EAAGA,EAAIyT,EAAWvS,OAAQlB,IACjCyB,EAAMgS,EAAWzT,GACbwT,EAAS/K,QAAQhH,IAAQ,IAC7BT,EAAOS,GAAO2K,EAAO3K,IAGvB,OAAOT,EA9BM0S,CAA8BtH,EAAQoH,GAInD,GAAIjS,OAAO+K,sBAAuB,CAChC,IAAIqH,EAAmBpS,OAAO+K,sBAAsBF,GAEpD,IAAKpM,EAAI,EAAGA,EAAI2T,EAAiBzS,OAAQlB,IACvCyB,EAAMkS,EAAiB3T,GACnBwT,EAAS/K,QAAQhH,IAAQ,GACxBF,OAAOb,UAAUkT,qBAAqBnR,KAAK2J,EAAQ3K,KACxDT,EAAOS,GAAO2K,EAAO3K,IAIzB,OAAOT,EAsBT,SAAS+oB,EAAsBniB,EAAM6U,GACnC,IAAIuN,EAAYpiB,EAAKoiB,UACjB7mB,EAAUyE,EAAKzE,QACfwJ,EAAiB/E,EAAK+E,eACtB0b,EAA0CzgB,EAAKygB,wCAC/C3lB,EAAQkF,EAAKlF,MACboR,EAAWlM,EAAKkM,SAChB/R,EAAW6F,EAAK7F,SAChBkP,EAAgBrJ,EAAKqJ,cACrBC,EAAyBtJ,EAAKsJ,uBAC9B6C,EAAOR,EAAyB3L,EAAM,CAAC,YAAa,UAAW,iBAAkB,0CAA2C,QAAS,WAAY,WAAY,gBAAiB,2BAa9KqiB,EAAmBN,EAVDvB,EAAe,CACnC1lB,MAAOA,EACPoR,SAAUA,EACV3Q,QAASA,EACTwJ,eAAgBA,EAChBsE,cAAeA,EACfC,uBAAwBA,EACxBmX,wCAAyCA,EACzCtmB,SAAUA,IAEqD,GAC7D0W,EAAcwR,EAAiB,GAC/BhB,EAAiBgB,EAAiB,GAEtC,OAAOnY,EAAcnS,EAAEwU,cAAc6V,EAAW7W,EAAS,GAAIY,EAAM,CACjE0I,IAAKA,EACL1a,SAAUA,EACVkP,cAAeA,EACfC,uBAAwBA,EACxB/N,QAASA,GAAWwJ,EACpBjK,MAAO+V,EACP3E,SAAUmV,MAIdc,EAAwBjY,EAAcnS,EAAEwjB,WAAW4G,IAC7BtV,UAAY,CAKhC/R,MAAOwP,EAAmBvS,EAAE0H,OAM5ByM,SAAU5B,EAAmBvS,EAAE+U,KAAKpC,WAYpCnP,QAAS+O,EAAmBvS,EAAE0H,OAS9BsF,eAAgBuF,EAAmBvS,EAAE0H,OAYrC4J,cAAeiB,EAAmBvS,EAAEiV,KAQpC1D,uBAAwBgB,EAAmBvS,EAAEiV,KAM7CoV,UAAW9X,EAAmBvS,EAAEyY,YAAY9F,WAQ5C+V,wCAAyCnW,EAAmBvS,EAAEiV,KAAKtC,WAKnEvQ,SAAUmQ,EAAmBvS,EAAE0S,OAAOC,YAExCyX,EAAsB1R,aAAe,CAWnCgQ,yCAAyC,GAEd,IAAI6B,EAAqB,EAElDvX,EAAatT,EAAoB,MAGjCuT,EAAavT,EAAoB,MAGrC,SAAS8qB,IAeP,OAdAA,EAA4B5oB,OAAO6R,QAAU,SAAUpS,GACrD,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAASD,UAAUnM,GAEvB,IAAK,IAAIyB,KAAO2K,EACV7K,OAAOb,UAAU2S,eAAe5Q,KAAK2J,EAAQ3K,KAC/CT,EAAOS,GAAO2K,EAAO3K,IAK3B,OAAOT,GAGFmpB,EAA0B7W,MAAMrU,KAAMkN,WAG/C,SAASie,EAA0Che,EAAQoH,GACzD,GAAc,MAAVpH,EAAgB,MAAO,GAE3B,IAEI3K,EAAKzB,EAFLgB,EAkBN,SAAwDoL,EAAQoH,GAC9D,GAAc,MAAVpH,EAAgB,MAAO,GAC3B,IAEI3K,EAAKzB,EAFLgB,EAAS,GACTyS,EAAalS,OAAOa,KAAKgK,GAG7B,IAAKpM,EAAI,EAAGA,EAAIyT,EAAWvS,OAAQlB,IACjCyB,EAAMgS,EAAWzT,GACbwT,EAAS/K,QAAQhH,IAAQ,IAC7BT,EAAOS,GAAO2K,EAAO3K,IAGvB,OAAOT,EA9BMqpB,CAA+Cje,EAAQoH,GAIpE,GAAIjS,OAAO+K,sBAAuB,CAChC,IAAIqH,EAAmBpS,OAAO+K,sBAAsBF,GAEpD,IAAKpM,EAAI,EAAGA,EAAI2T,EAAiBzS,OAAQlB,IACvCyB,EAAMkS,EAAiB3T,GACnBwT,EAAS/K,QAAQhH,IAAQ,GACxBF,OAAOb,UAAUkT,qBAAqBnR,KAAK2J,EAAQ3K,KACxDT,EAAOS,GAAO2K,EAAO3K,IAIzB,OAAOT,EAuBT,SAASspB,EAAY5G,GACnB,SAAS6G,EAAW3iB,EAAM6U,GACxB,IAAI8F,EAAa3a,EAAK2a,WAClBxO,EAAOqW,EAA0CxiB,EAAM,CAAC,eAE5D,OAAOkK,EAAcnS,EAAEwU,cAAc+V,EAAoBC,EAA0B,GAAIpW,EAAM,CAC3F0I,IAAKA,EACLuN,UAAWzH,EAAa5P,EAA4B,EAAIC,EAA4B,KAoDxF,OAhDA2X,EAAazY,EAAcnS,EAAEwjB,WAAWoH,IAC7B9V,UAAY,CAIrB7P,KAAMsN,EAAmBvS,EAAE0H,OAK3B+a,aAAclQ,EAAmBvS,EAAE0H,OAUnCkb,WAAYrQ,EAAmBvS,EAAEiV,KAAKtC,WAKtCvQ,SAAUmQ,EAAmBvS,EAAE0S,OAAOC,YAExCiY,EAAWlS,aAAe,CAIxBzT,KAAM,MAKNwd,aAAc,MAKdG,YAAY,EAKZxgB,SAAU2hB,GAEL6G,EAE6CD,IAYblrB,EAAuB,EAAKkrB,EAAY7Y,IA4B3E,KACA,SAAUtS,EAAQC,EAAqBC,GAE7C,aAGAA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAqBorB,KAGlF,IAAI5Y,EAAevS,EAAoB,MAGnCorB,EAAoBprB,EAAoB,MAGxCwH,EAAkBxH,EAAoB,MAGtCmL,EAAgBnL,EAAoB,MA4DxC,IAAI0J,EAAkC1J,EAAoB,MActDqrB,EAA4B,yCAgBhC,IAAIC,EAAUtrB,EAAoB,MAsBlC,SAAS2L,EAAgB1K,EAAKmB,EAAKiB,GAYjC,OAXIjB,KAAOnB,EACTiB,OAAOC,eAAelB,EAAKmB,EAAK,CAC9BiB,MAAOA,EACPtB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZhB,EAAImB,GAAOiB,EAGNpC,EAYT,IAAIsqB,EAAkB,CACpBC,gBAAiB,SAAyBzhB,EAAiB0hB,EAAW/oB,GACpE,MAAO,GAAGI,OAAOiH,GAAiBjH,OAAOJ,EAAS8C,OAAO1C,OAAO2oB,KAgBpE,SAASC,EAAargB,EAAO5E,EAAQ6E,EAAS5I,GAU5C,GAPE4I,EADEA,EA/DN,SAAuB3J,GACrB,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAAyB,MAAhBD,UAAUnM,GAAamM,UAAUnM,GAAK,GAC/CqM,EAAU9K,OAAOa,KAAKgK,GAEkB,oBAAjC7K,OAAO+K,wBAChBD,EAAUA,EAAQlK,OAAOZ,OAAO+K,sBAAsBF,GAAQzJ,QAAO,SAAU4J,GAC7E,OAAOhL,OAAOiL,yBAAyBJ,EAAQG,GAAKnL,gBAIxDiL,EAAQI,SAAQ,SAAUhL,GACxBuJ,EAAgBhK,EAAQS,EAAK2K,EAAO3K,OAIxC,OAAOT,EAgDK0L,CAAc,GAAIke,EAAiBjgB,GAEnCigB,EAGZ7oB,EAAW,IAAI6P,EAA8B,EAAE7P,GAE3C2I,EAAMvH,SAA6B,QAAlBuH,EAAMvH,QAAmB,CAE5C,IAAKpB,EAAS6B,WAAW8G,EAAMvH,SAC7B,MAAM,IAAInB,MAAM,oBAAoBG,OAAOuI,EAAMvH,UAGnDpB,EAASoB,QAAQuH,EAAMvH,aAClB,CAAA,IAAIuH,EAAMtE,mBAEV,OAAOsE,EAAME,OAAS,GAD3B7I,EAAS2B,oBAAoBgH,EAAMtE,oBAGrC,IAII6C,EAJA7C,EAAqBrE,EAASqE,qBAC9B6B,EAAiB0C,EAAQ5H,GAAK2H,EAAMzC,eAAiByC,EAAME,MAK/D,OAAQ9E,GACN,IAAK,WAGH,OAAKmC,EAKE+iB,EADP/hB,EAASgiB,EAAqBhjB,EAAgByC,EAAMrB,YAAa,WAAYtH,EAAU4I,GAC3DD,EAAM7F,IAAK9C,EAAU4I,EAAQkgB,iBAJhD,GAMX,IAAK,gBAGH,OAAK5iB,GAILgB,EAASgiB,EAAqBhjB,EAAgB,KAAM,gBAAiBlG,EAAU4I,GAExEqgB,EADP/hB,EAAS,IAAI9G,OAAOiE,EAAoB,KAAKjE,OAAO8G,GACxByB,EAAM7F,IAAK9C,EAAU4I,EAAQkgB,kBALhD,IAAI1oB,OAAOiE,GAOtB,IAAK,QAEH,MAAO,IAAIjE,OAAOiE,GAAoBjE,OAAO8F,GAE/C,IAAK,UACH,OAAO1G,OAAOopB,EAA+B,EAAtCppB,CAAyC,CAC9C0H,OAAQ,IAAI9G,OAAOiE,GAAoBjE,OAAO8F,GAC9CpD,IAAK6F,EAAM7F,MAOf,IAAK,MACH,IAAK8F,EAAQugB,YACX,OAGF,IAAI9hB,EA0DV,SAAmBnB,EAAgBoB,EAAajD,EAAoB8kB,EAAanpB,GAG/E,GAF6BR,OAAOqQ,EAA4C,EAAnDrQ,CAAsD2pB,EAAanpB,EAASA,YAE1EqE,EAAoB,CACjD,IAAIgD,EAAkB6hB,EAAqBhjB,EAAgBoB,EAAa,WAAYtH,GAGpF,MAA2B,MAAvBqE,EACKA,EAAqB,IAAMgD,EAY7BA,EAGT,IAAI+hB,EAlON,SAAsBhoB,EAASG,EAAavB,GAC1C,IAAI8H,EAAkB,IAAI+H,EAA8B,EAAE7P,GAG1D,OAFA8H,EAAgBnG,oBAAoBP,EAASG,GAEzCuG,EAAgB1F,mBACX0F,EAAgB1F,mBAGrBumB,EAA0B/mB,KAAKkG,EAAgB3F,aAC1C2F,EAAgB3F,iBADzB,EA0NgBknB,CAAaF,OAAa9nB,EAAWrB,EAASA,UAE9D,GAAIopB,EACF,MAAO,GAAGhpB,OAAOgpB,EAAW,KAAKhpB,OAAOiE,EAAoB,KAAKjE,OAAO8oB,EAAqBhjB,EAAgB,KAAM,gBAAiBlG,IApF5GspB,CAAUpjB,EAAgByC,EAAMrB,YAAajD,EAAoBuE,EAAQugB,YAAanpB,GAC5G,OAAOipB,EAAa5hB,EAAiBsB,EAAM7F,IAAK9C,EAAU4I,EAAQkgB,iBAEpE,QACE,MAAM,IAAI7oB,MAAM,0DAA+DG,OAAO2D,EAAQ,OAIpG,SAASmlB,EAAqBhiB,EAAQI,EAAaiiB,EAAUvpB,EAAU4I,GACrE,IAAI7E,EAcN,SAA+BylB,EAAkBC,GAC1C,IAAIjkB,EAAYgkB,EAAkB/jB,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAjF,IAAoFJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CACrJ,IAAIoH,EAEJ,GAAIJ,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5B0G,EAAOL,EAAUI,SACZ,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGjF,MAGZ,IAAIoD,EAAS8B,EAEb,GAAI9B,EAAO2lB,wBAAwBvqB,OAAS,EAAG,CAE7C,IAAIwqB,EAA2B5lB,EAAO2lB,wBAAwB3lB,EAAO2lB,wBAAwBvqB,OAAS,GAEtG,GAAyD,IAArDsqB,EAAgBzhB,OAAO2hB,GACzB,SAKJ,GAAInqB,OAAOsF,EAAiC,EAAxCtF,CAA2CiqB,EAAiB1lB,EAAOyD,WACrE,OAAOzD,GAxCE6lB,CAAsB5pB,EAASuC,UAAW2E,GAEvD,OAAKnD,EAIEvE,OAAOwH,EAAiD,EAAxDxH,CAA2D0H,EAAQnD,EAAQ,CAChFoD,uBAAqC,kBAAboiB,EACxBniB,oBAAoBrD,EAAOG,2DAA4D0E,IAAsC,IAA3BA,EAAQnF,eAC1G6D,YAAaA,EACbtH,SAAUA,IAPHkH,EA0CX,SAAS+hB,EAAa5hB,EAAiBvE,EAAK9C,EAAU8oB,GACpD,OAAOhmB,EAAMgmB,EAAgBzhB,EAAiBvE,EAAK9C,GAAYqH,EAoDjE,SAASwiB,EAA2BtrB,EAAKmB,EAAKiB,GAY5C,OAXIjB,KAAOnB,EACTiB,OAAOC,eAAelB,EAAKmB,EAAK,CAC9BiB,MAAOA,EACPtB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZhB,EAAImB,GAAOiB,EAGNpC,EAST,SAASS,EAAkBC,EAAQC,GACjC,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAMC,OAAQlB,IAAK,CACrC,IAAImB,EAAaF,EAAMjB,GACvBmB,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeR,EAAQG,EAAWM,IAAKN,IAgBlD,IAEIqpB,EAAuC,WACzC,SAASqB,EAAYzlB,EAAoB6B,EAAgBlG,GAGvD,GAlCJ,SAAyBnB,EAAUC,GACjC,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCA8BpBH,CAAgB1B,KAAM4sB,IAEjBzlB,EACH,MAAM,IAAItF,UAAU,gDAGtB,IAAKmH,EACH,MAAM,IAAInH,UAAU,+BAGtB,IAAKiB,EACH,MAAM,IAAIjB,UAAU,yBAGtB,IAAIie,EAAY,IAAInN,EAA8B,EAAE7P,GAIhD+pB,EAAc1lB,KAChBnH,KAAKkE,QAAUiD,EAEf2Y,EAAU5b,QAAQiD,GAElBA,EAAqB2Y,EAAU3Y,sBAUjCnH,KAAKmH,mBAAqBA,EAC1BnH,KAAKgJ,eAAiBA,EACtBhJ,KAAKgK,OAAS,IAAMhK,KAAKmH,mBAAqBnH,KAAKgJ,eACnDhJ,KAAK8C,SAAWA,EApDpB,IAAsBlB,EAAac,EAAYC,EA2H7C,OA3HoBf,EAuDPgrB,EAvDoBlqB,EAuDP,CAAC,CACzBF,IAAK,SACLiB,MAAO,SAAgBmC,GACrB5F,KAAK4F,IAAMA,IAEZ,CACDpD,IAAK,aACLiB,MAAO,WACL,OAAOnB,OAAOkpB,EAAmC,EAA1ClpB,CAA6CtC,KAAM,CACxD8D,IAAI,GACH9D,KAAK8C,YAET,CACDN,IAAK,UACLiB,MAAO,WACL,OA1YN,SAAuBgI,EAAOC,EAAS5I,GAOrC,GAJA4I,EAAUA,GAAW,GACrB5I,EAAW,IAAI6P,EAA8B,EAAE7P,IAG1C2I,EAAMvH,QACT,OAAO,EAMT,GAHApB,EAAS2B,oBAAoBgH,EAAMvH,QAASuH,EAAMtE,oBAG9CrE,EAAS2C,WACX,YAAuFtB,IAAhF7B,OAAOiJ,EAA+B,EAAtCjJ,CAAyCmJ,EAAOC,EAAS5I,EAASA,UAK3E,IAAIgqB,EAAkBphB,EAAQ5H,GAAK2H,EAAMzC,eAAiByC,EAAME,MAChE,OAAOrJ,OAAOsF,EAAiC,EAAxCtF,CAA2CwqB,EAAiBhqB,EAASqC,yBAqXjE4nB,CAAc/sB,KAAM,CACzB8D,IAAI,GACH9D,KAAK8C,YAET,CACDN,IAAK,kBACLiB,MAAO,WAEL,OADe,IAAIkP,EAA8B,EAAE3S,KAAK8C,UACxCsN,2BAA2BpQ,KAAKmH,sBAEjD,CACD3E,IAAK,UACLiB,MAAO,SAAiB2X,GACtB,OAAOpb,KAAKgK,SAAWoR,EAAYpR,QAAUhK,KAAK4F,MAAQwV,EAAYxV,MAOvE,CACDpD,IAAK,UACLiB,MAAO,WACL,OAAOnB,OAAOiJ,EAA+B,EAAtCjJ,CAAyCtC,KAAM,CACpD8D,IAAI,GACH9D,KAAK8C,YAET,CACDN,IAAK,SACLiB,MAAO,SAAgBqD,EAAS4E,GAC9B,OAAOogB,EAAa9rB,KAAM8G,EAAS4E,EAtJzC,SAAkC3J,GAChC,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAAyB,MAAhBD,UAAUnM,GAAamM,UAAUnM,GAAK,GAC/CqM,EAAU9K,OAAOa,KAAKgK,GAEkB,oBAAjC7K,OAAO+K,wBAChBD,EAAUA,EAAQlK,OAAOZ,OAAO+K,sBAAsBF,GAAQzJ,QAAO,SAAU4J,GAC7E,OAAOhL,OAAOiL,yBAAyBJ,EAAQG,GAAKnL,gBAIxDiL,EAAQI,SAAQ,SAAUhL,GACxBmqB,EAA2B5qB,EAAQS,EAAK2K,EAAO3K,OAInD,OAAOT,EAsI0CirB,CAAyB,GAAIthB,EAAS,CACjF5H,IAAI,IACD,CACHA,IAAI,GACH9D,KAAK8C,YAET,CACDN,IAAK,iBACLiB,MAAO,SAAwBiI,GAC7B,OAAO1L,KAAK6G,OAAO,WAAY6E,KAEhC,CACDlJ,IAAK,sBACLiB,MAAO,SAA6BiI,GAClC,OAAO1L,KAAK6G,OAAO,gBAAiB6E,KAErC,CACDlJ,IAAK,SACLiB,MAAO,SAAgBiI,GACrB,OAAO1L,KAAK6G,OAAO,UAAW6E,MAtH9BhJ,GAAYZ,EAAkBF,EAAYH,UAAWiB,GACrDC,GAAab,EAAkBF,EAAae,GAyHzCiqB,EA7GkC,GAkHvCC,EAAgB,SAAuBppB,GACzC,MAAO,aAAaiB,KAAKjB,KAKrB,KACA,SAAUvD,EAAQC,EAAqBC,GAE7C,aAGAA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAqB8sB,KAGlF,IAAIC,EAAY9sB,EAAoB,MAGhC8R,EAAa9R,EAAoB,MAGjCuS,EAAevS,EAAoB,MAGnCuQ,EAAsBvQ,EAAoB,MAG1C+Q,EAAyB/Q,EAAoB,MAM7C+sB,EAAe,IAAIplB,OAAO,MAAQzF,OAAO6O,EAAwC,EAA/C7O,GAAsD,KAAM,KA6BlG,IAAIsmB,EAA6BxoB,EAAoB,MAGjDorB,EAAoBprB,EAAoB,MAGxCsrB,EAAUtrB,EAAoB,MAG9BwsB,EAAcxsB,EAAoB,MAGlCwH,EAAkBxH,EAAoB,MAGtCkO,EAA4BlO,EAAoB,MAGhD0O,EAAwB1O,EAAoB,MAG5CwP,EAA0BxP,EAAoB,MA2B9CgtB,EAA6B,IAAIrlB,OAAO,IAAMmlB,EAA8B,EAAIA,EAAgC,EAAI,KAIpHG,EAAiC,IAAItlB,OAAO,KAAOmlB,EAAgC,EAAvC,QAahD,SAAShf,EAAMrG,EAAM6D,EAAS5I,GAM5B,GAHA4I,EAAUA,GAAW,GACrB5I,EAAW,IAAI6P,EAA8B,EAAE7P,GAE3C4I,EAAQgC,iBAAmB5K,EAAS6B,WAAW+G,EAAQgC,gBAAiB,CAC1E,GAAIhC,EAAQ5H,GACV,MAAM,IAAIoO,EAA4B,EAAE,mBAG1C,MAAM,IAAInP,MAAM,oBAAoBG,OAAOwI,EAAQgC,iBAIrD,IAAI4f,EAsJN,SAAoBzlB,EAAM/D,EAAIypB,GAE5B,GAAI1lB,GAAiC,IAAzBA,EAAK2B,QAAQ,QACvB,OAAOlH,OAAOopB,EAA8B,EAArCppB,CAAwCuF,GAGjD,IAAImC,EA1CN,SAAqCnC,EAAM0lB,EAASC,GAClD,IAAK3lB,EACH,OAGF,GAAIA,EAAK5F,OAzJmB,IAyJe,CACzC,GAAIurB,EACF,MAAM,IAAItb,EAA4B,EAAE,YAG1C,OAGF,IAAgB,IAAZqb,EACF,OAAO1lB,EAIT,IAAI4lB,EAAW5lB,EAAKiD,OAAOsiB,GAE3B,GAAIK,EAAW,EACb,OAGF,OAAO5lB,EACNyB,MAAMmkB,GACNpjB,QAAQgjB,EAAgC,IAgB5BK,CAA4B7lB,EAAM0lB,EAASzpB,GAExD,IAAKkG,EACH,MAAO,GAGT,IAAK1H,OAAOqO,EAAqC,EAA5CrO,CAA+C0H,GAClD,OAAI1H,OAAOqO,EAAsD,EAA7DrO,CAAgE0H,GAC3D,CACL+D,MAAO,aAIJ,GAKT,IAAI4f,EAvRN,SAA0B3jB,GACxB,IAAIsc,EAAQtc,EAAOc,OAAOqiB,GAE1B,GAAI7G,EAAQ,EACV,MAAO,GAST,IAJA,IAAIsH,EAAyB5jB,EAAOV,MAAM,EAAGgd,GACzCuH,EAAU7jB,EAAOgB,MAAMmiB,GACvBpsB,EAAI,EAEDA,EAAI8sB,EAAQ5rB,QAAQ,CACzB,GAAI4rB,EAAQ9sB,GACV,MAAO,CACLiJ,OAAQ4jB,EACRhoB,IAAKioB,EAAQ9sB,IAIjBA,KAkQ0B+sB,CAAiB9jB,GAE7C,GAAI2jB,EAAsB/nB,IACxB,OAAO+nB,EAGT,MAAO,CACL3jB,OAAQA,GArLQ+jB,CAAWlmB,EAAM6D,EAAQ5H,GAAI4H,EAAQ6hB,SACnDS,EAAuBV,EAAYtjB,OACnCpE,EAAM0nB,EAAY1nB,IAClBmI,EAAQuf,EAAYvf,MAGxB,IAAKigB,EAAsB,CACzB,GAAItiB,EAAQ5H,GAAI,CACd,GAAc,cAAViK,EACF,MAAM,IAAImE,EAA4B,EAAE,aAG1C,MAAM,IAAIA,EAA4B,EAAE,gBAG1C,MAAO,GAGT,IAAI+b,EAiMN,SAA0BD,EAAsBtgB,EAAgBwgB,EAAoBprB,GAElF,IAKIoB,EALAyK,EAAwBrM,OAAOgM,EAA2C,EAAlDhM,CAAqDA,OAAOsmB,EAA4C,EAAnDtmB,CAAsD0rB,GAAuBtgB,EAAgBwgB,EAAoBprB,EAASA,UACvMqE,EAAqBwH,EAAsBxH,mBAC3C6C,EAAS2E,EAAsB3E,OAKnC,GAAI7C,EACFrE,EAAS2B,oBAAoB0C,OAG1B,CAAA,IAAI6C,IAAW0D,IAAkBwgB,EAe/B,MAAO,GAdZprB,EAAS2B,oBAAoBiJ,EAAgBwgB,GAEzCxgB,IACFxJ,EAAUwJ,GAUZvG,EAAqB+mB,GAAsB5rB,OAAOqQ,EAA4C,EAAnDrQ,CAAsDoL,EAAgB5K,EAASA,UAG5H,IAAKkH,EACH,MAAO,CACL7C,mBAAoBA,GAIxB,IAAI8H,EAAwB3M,OAAOwM,EAAuC,EAA9CxM,CAAiDA,OAAOsmB,EAA4C,EAAnDtmB,CAAsD0H,GAASlH,GACxIkG,EAAiBiG,EAAsBjG,eACvCoB,EAAc6E,EAAsB7E,YAYpC+jB,EAAe7rB,OAAOsN,EAAyC,EAAhDtN,CAAmD6E,EAAoB6B,EAAgBlG,GAEtGqrB,IACFjqB,EAAUiqB,EAGW,QAAjBA,GAIFrrB,EAASoB,QAAQA,IAIrB,MAAO,CACLA,QAASA,EACTiD,mBAAoBA,EACpB6B,eAAgBA,EAChBoB,YAAaA,GArQSkP,CAAiB0U,EAAsBtiB,EAAQgC,eAAgBhC,EAAQwiB,mBAAoBprB,GAC/GoB,EAAU+pB,EAAkB/pB,QAC5B8E,EAAiBilB,EAAkBjlB,eACnC7B,EAAqB8mB,EAAkB9mB,mBACvCiD,EAAc6jB,EAAkB7jB,YAEpC,IAAKtH,EAASsrB,2BAA4B,CACxC,GAAI1iB,EAAQ5H,GACV,MAAM,IAAIoO,EAA4B,EAAE,mBAG1C,MAAO,GAIT,IAAKlJ,GAAkBA,EAAe/G,OAASirB,EAAsC,EAAG,CAItF,GAAIxhB,EAAQ5H,GACV,MAAM,IAAIoO,EAA4B,EAAE,aAI1C,MAAO,GAYT,GAAIlJ,EAAe/G,OAASirB,EAAsC,EAAG,CACnE,GAAIxhB,EAAQ5H,GACV,MAAM,IAAIoO,EAA4B,EAAE,YAI1C,MAAO,GAGT,GAAIxG,EAAQ5H,GAAI,CACd,IAAIsX,EAAc,IAAIwR,EAA6B,EAAEzlB,EAAoB6B,EAAgBlG,EAASA,UAclG,OAZIoB,IACFkX,EAAYlX,QAAUA,GAGpBkG,IACFgR,EAAYhR,YAAcA,GAGxBxE,IACFwV,EAAYxV,IAAMA,GAGbwV,EAMT,IAAIiT,KAAS3iB,EAAQ4iB,SAAWxrB,EAASsrB,2BAA6BlqB,IAAW5B,OAAOsF,EAAiC,EAAxCtF,CAA2C0G,EAAgBlG,EAASqC,yBAErJ,OAAKuG,EAAQ4iB,SAKN,CACLpqB,QAASA,EACTiD,mBAAoBA,EACpBiD,YAAaA,EACbikB,MAAOA,EACPE,WAAUF,MAAoC,IAArB3iB,EAAQ4iB,WAAqBxrB,EAASsC,oBAAqB9C,OAAOkpB,EAA4C,EAAnDlpB,CAAsD0G,EAAgBlG,IAC1J6I,MAAO3C,EACPpD,IAAKA,GAXEyoB,EAsGX,SAAgBnqB,EAAS8E,EAAgBpD,GACvC,IAAIyC,EAAS,CACXnE,QAASA,EACTyH,MAAO3C,GAGLpD,IACFyC,EAAOzC,IAAMA,GAGf,OAAOyC,EAhHUA,CAAOnE,EAAS8E,EAAgBpD,GAAO,GAuN1D,SAASmG,EAAgB1K,EAAKmB,EAAKiB,GAYjC,OAXIjB,KAAOnB,EACTiB,OAAOC,eAAelB,EAAKmB,EAAK,CAC9BiB,MAAOA,EACPtB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZhB,EAAImB,GAAOiB,EAGNpC,EAIT,SAAS4rB,EAAkCplB,EAAM6D,EAAS5I,GACxD,OAAOoL,EAAMrG,EApCf,SAAuB9F,GACrB,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAAyB,MAAhBD,UAAUnM,GAAamM,UAAUnM,GAAK,GAC/CqM,EAAU9K,OAAOa,KAAKgK,GAEkB,oBAAjC7K,OAAO+K,wBAChBD,EAAUA,EAAQlK,OAAOZ,OAAO+K,sBAAsBF,GAAQzJ,QAAO,SAAU4J,GAC7E,OAAOhL,OAAOiL,yBAAyBJ,EAAQG,GAAKnL,gBAIxDiL,EAAQI,SAAQ,SAAUhL,GACxBuJ,EAAgBhK,EAAQS,EAAK2K,EAAO3K,OAIxC,OAAOT,EAoBY0L,CAAc,GAAI/B,EAAS,CAC5C5H,IAAI,IACFhB,KAKA,KACA,SAAU5C,EAAQC,EAAqBC,GAE7C,aAKA,IAAIwS,EAAQxS,EAAoB,GAC5ByS,EAA6BzS,EAAoB0S,EAAEF,GAGnDI,EAAa5S,EAAoB,IACjC6S,EAAkC7S,EAAoB0S,EAAEE,GAGxD4V,EAA6BxoB,EAAoB,MAGjDiZ,EAAYjZ,EAAoB,MAsBpC,IAAIyoB,EAAmBzoB,EAAoB,MAG3C,SAAS8T,IAeP,OAdAA,EAAW5R,OAAO6R,QAAU,SAAUpS,GACpC,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAASD,UAAUnM,GAEvB,IAAK,IAAIyB,KAAO2K,EACV7K,OAAOb,UAAU2S,eAAe5Q,KAAK2J,EAAQ3K,KAC/CT,EAAOS,GAAO2K,EAAO3K,IAK3B,OAAOT,GAGFmS,EAASG,MAAMrU,KAAMkN,WAG9B,SAASoH,EAAyBnH,EAAQoH,GACxC,GAAc,MAAVpH,EAAgB,MAAO,GAE3B,IAEI3K,EAAKzB,EAFLgB,EAkBN,SAAuCoL,EAAQoH,GAC7C,GAAc,MAAVpH,EAAgB,MAAO,GAC3B,IAEI3K,EAAKzB,EAFLgB,EAAS,GACTyS,EAAalS,OAAOa,KAAKgK,GAG7B,IAAKpM,EAAI,EAAGA,EAAIyT,EAAWvS,OAAQlB,IACjCyB,EAAMgS,EAAWzT,GACbwT,EAAS/K,QAAQhH,IAAQ,IAC7BT,EAAOS,GAAO2K,EAAO3K,IAGvB,OAAOT,EA9BM0S,CAA8BtH,EAAQoH,GAInD,GAAIjS,OAAO+K,sBAAuB,CAChC,IAAIqH,EAAmBpS,OAAO+K,sBAAsBF,GAEpD,IAAKpM,EAAI,EAAGA,EAAI2T,EAAiBzS,OAAQlB,IACvCyB,EAAMkS,EAAiB3T,GACnBwT,EAAS/K,QAAQhH,IAAQ,GACxBF,OAAOb,UAAUkT,qBAAqBnR,KAAK2J,EAAQ3K,KACxDT,EAAOS,GAAO2K,EAAO3K,IAIzB,OAAOT,EAgJ6C5B,EAAuB,EA1H7E,SAAqBskB,GAYnB,SAAS9Q,EAAWhL,EAAM6U,GACxB,IAAI/Z,EAAQkF,EAAKlF,MACboR,EAAWlM,EAAKkM,SAChB3Q,EAAUyE,EAAKzE,QACf8N,EAAgBrJ,EAAKqJ,cACrBC,EAAyBtJ,EAAKsJ,uBAC9BnP,EAAW6F,EAAK7F,SAChBolB,EAAQvf,EAAKya,eACbtO,EAAOR,EAAyB3L,EAAM,CAAC,QAAS,WAAY,UAAW,gBAAiB,yBAA0B,WAAY,mBAE9HkJ,EAASvP,OAAOumB,EAA8C,EAArDvmB,CAAwD,CACnE4B,QAASA,EACT8N,cAAeA,EACfC,uBAAwBA,EACxBnP,SAAUA,IAGRwlB,EAAYhmB,OAAOsQ,EAAmB,YAA1BtQ,EAA6B,SAAU0S,GACrD,IAAI8I,EAAWxb,OAAOsmB,EAA4C,EAAnDtmB,CAAsD0S,EAAMjT,OAAO0B,OAQ9Eqa,IAAara,IAGuC,IAF9BoD,EAAOgL,EAAQiM,EAAU5Z,EAASpB,GAEpC0G,QAAQwL,EAAMjT,OAAO0B,SAEzCqa,EAAWA,EAASxU,MAAM,GAAI,KAIlCuL,EAASiJ,KACR,CAACjM,EAAQpO,EAAOoR,EAAU3Q,EAASpB,IAEtC,OAAO+P,EAAcnS,EAAEwU,cAAcgT,EAAOhU,EAAS,GAAIY,EAAM,CAC7D0I,IAAKA,EACL/Z,MAAOoD,EAAOgL,EAAQpO,EAAOS,EAASpB,GACtC+R,SAAUyT,KAmEd,OA/DA3U,EAAad,EAAcnS,EAAEwjB,WAAWvQ,IAC7B6B,UAAY,CAQrB/R,MAAOwP,EAAmBvS,EAAE0H,OAAOiL,WAMnCwB,SAAU5B,EAAmBvS,EAAE+U,KAAKpC,WAYpCnP,QAAS+O,EAAmBvS,EAAE0H,OAY9B4J,cAAeiB,EAAmBvS,EAAEiV,KAQpC1D,uBAAwBgB,EAAmBvS,EAAEiV,KAK7C7S,SAAUmQ,EAAmBvS,EAAE0S,OAAOC,WAKtC+P,eAAgBnQ,EAAmBvS,EAAEyY,YAAY9F,YAEnDM,EAAWyF,aAAe,CACxBtW,SAAU2hB,EACVrB,eAAgB,SAEXzP,EAEwE,GAEjF,SAAS9M,EAAOgL,EAAQpO,EAAOS,EAASpB,GACtC,OAAOR,OAAOumB,EAAiD,EAAxDvmB,CAnMT,SAAqCmB,EAAOS,EAASpB,GAMnD,OALKA,IACHA,EAAWoB,EACXA,OAAUC,GAGL,IAAIkV,EAA2B,EAAEnV,EAASpB,GAAU2I,MAAMhI,GA6LC+qB,CAA4B3c,EAASpO,EAAOS,EAASpB,GAAW+O,KAK9H,KACA,SAAU3R,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOyoB,KACpExoB,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOsuB,KAC9E,IAAIC,EAAoDtuB,EAAoB,MAkBjG,SAASwoB,EAA2BxgB,GAClC,IAAIC,EAAS,GAOJC,EAAYF,EAAOxH,MAAM,IAAK2H,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAAjF,IAAoFJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CACrJ,IAAIoH,EAEJ,GAAIJ,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5B0G,EAAOL,EAAUI,SACZ,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbF,EAAOD,EAAGjF,MAIZ4E,GAAUomB,EADM9lB,EAC+BN,IAAW,GAG5D,OAAOA,EAcT,SAASomB,EAA0BtmB,EAAWwmB,GAE5C,GAAkB,MAAdxmB,EAAmB,CAGrB,GAAIwmB,EACF,OAGF,MAAO,IAIT,OAAOrsB,OAAOosB,EAAsE,EAA7EpsB,CAAgF6F,KAKnF,KACA,SAAUjI,GAEhBA,EAAO8N,QAAUC,KAAKC,MAAM,kmJAItB,KACA,SAAUhO,EAAQC,EAAqBC,GAE7C,aAGAA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAqByuB,KAGlF,IAAIjc,EAAevS,EAAoB,MAGnCwsB,EAAcxsB,EAAoB,MAStC,SAAS0B,EAAkBC,EAAQC,GACjC,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAMC,OAAQlB,IAAK,CACrC,IAAImB,EAAaF,EAAMjB,GACvBmB,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeR,EAAQG,EAAWM,IAAKN,IAyBlD,IAAI2sB,EAA8B,WAChC,SAASA,EAAelmB,GACtB,IAjBqBtH,EAAKmB,EAAKiB,EAiB3BuC,EAAQhG,KAERuhB,EAAkB5Y,EAAK4Y,gBACvBuN,EAAsBnmB,EAAKmmB,qBA1CnC,SAAyBntB,EAAUC,GACjC,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCA0CpBH,CAAgB1B,KAAM6uB,GAtBSprB,EAwBC,SAAUsrB,GACxC,IAAK,IAAIrmB,EAAK,EAAGmR,EAAevX,OAAOa,KAAK4rB,GAAarmB,EAAKmR,EAAa5X,OAAQyG,IAAM,CACvF,IAAIlG,EAAMqX,EAAanR,GACvB1C,EAAMxD,GAAOusB,EAAWvsB,MA3BFA,EAwBJ,YAxBDnB,EAwBLrB,MAtBhBsC,OAAOC,eAAelB,EAAKmB,EAAK,CAC9BiB,MAAOA,EACPtB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZhB,EAAImB,GAAOiB,EAsBXzD,KAAKuhB,gBAAkBA,EACvBvhB,KAAK8uB,oBAAsBA,EAtC/B,IAAsBltB,EAAac,EAAYC,EAiI7C,OAjIoBf,EAyCPitB,GAzCoBnsB,EAyCJ,CAAC,CAC5BF,IAAK,QACLiB,MAAO,SAAeiK,EAAgBwgB,GACpCluB,KAAKgS,eAAgB,EACrBhS,KAAKiF,eAAYd,EACjBnE,KAAKgvB,iBAAc7qB,EACnBnE,KAAKqE,iBAAcF,EACnBnE,KAAKivB,OAAS,GACdjvB,KAAKkvB,iCACLlvB,KAAKmvB,0BAA0BzhB,EAAgBwgB,KAEhD,CACD1rB,IAAK,iCACLiB,MAAO,WACLzD,KAAKkP,0BAA4BlP,KAAKovB,oBACtCpvB,KAAKqvB,uCAAwC,EAC7CrvB,KAAKuG,oBAAiBpC,EACtBnE,KAAKoK,iBAAcjG,EACnBnE,KAAKsvB,kDAA+CnrB,IAErD,CACD3B,IAAK,4BACLiB,MAAO,SAAmCS,EAASG,GACjDrE,KAAKuvB,WAAWrrB,GAChBlE,KAAKwvB,eAAenrB,KAErB,CACD7B,IAAK,aACLiB,MAAO,SAAoBS,GACzBlE,KAAKkE,QAAUA,EACflE,KAAKuhB,gBAAgBrd,KAEtB,CACD1B,IAAK,iBACLiB,MAAO,SAAwBY,GAE7B,OADArE,KAAKqE,YAAcA,EACZrE,KAAK8uB,oBAAoB9uB,KAAKkE,QAASG,KAE/C,CACD7B,IAAK,2BACLiB,MAAO,WAELzD,KAAKgS,eAAgB,EAIrBhS,KAAKmvB,8BAEN,CACD3sB,IAAK,eACLiB,MAAO,SAAsBgsB,GAC3BzvB,KAAKivB,QAAUQ,IAEhB,CACDjtB,IAAK,wCACLiB,MAAO,SAA+CgsB,GACpDzvB,KAAKkP,2BAA6BugB,IAUnC,CACDjtB,IAAK,oBACLiB,MAAO,WACL,OAAIzD,KAAKgS,cACAhS,KAAKivB,OAAO3lB,OAAOtJ,KAAKiF,UAAYjF,KAAKiF,UAAUhD,OAAS,IAAMjC,KAAKqE,YAAcrE,KAAKqE,YAAYpC,OAAS,IAGjHjC,KAAKivB,SAEb,CACDzsB,IAAK,sCACLiB,MAAO,WACL,OAAIzD,KAAKgS,eACHhS,KAAKiF,UACAjF,KAAKivB,OAAO3lB,MAAMtJ,KAAKiF,UAAUhD,QAIrCjC,KAAKivB,YA5HAntB,EAAkBF,EAAYH,UAAWiB,GACrDC,GAAab,EAAkBF,EAAae,GA+HzCksB,EA5GyB,GAkH9Ba,EAAoB,IAEpBC,EAA4B,IAAI5nB,OAAO2nB,GAiC3C,SAASE,EAAOxnB,EAAQynB,GACtB,GAAIA,EAAQ,EACV,MAAO,GAKT,IAFA,IAAIxnB,EAAS,GAENwnB,EAAQ,GACD,EAARA,IACFxnB,GAAUD,GAGZynB,IAAU,EACVznB,GAAUA,EAGZ,OAAOC,EAASD,EAElB,SAAS0nB,EAA2B1nB,EAAQ2nB,GAK1C,MAJ+B,MAA3B3nB,EAAO2nB,IACTA,IAqBJ,SAA8B3nB,GAC5B,IAAImd,EAAkB,GAClBxkB,EAAI,EAER,KAAOA,EAAIqH,EAAOnG,QACE,MAAdmG,EAAOrH,GACTwkB,EAAgBtlB,KAAKc,GACE,MAAdqH,EAAOrH,IAChBwkB,EAAgByK,MAGlBjvB,IAGF,IAAIulB,EAAQ,EACR2J,EAAiB,GACrB1K,EAAgBtlB,KAAKmI,EAAOnG,QAE5B,IAAK,IAAIiuB,EAAM,EAAGC,EAAmB5K,EAAiB2K,EAAMC,EAAiBluB,OAAQiuB,IAAO,CAC1F,IAAIhO,EAAQiO,EAAiBD,GAC7BD,GAAkB7nB,EAAOkB,MAAMgd,EAAOpE,GACtCoE,EAAQpE,EAAQ,EAGlB,OAAO+N,EA1CAG,CAAqBhoB,EAAOkB,MAAM,EAAGymB,IA8E9C,IAAIhnB,EAAoB3I,EAAoB,MAGxC6H,EAAc7H,EAAoB,MAGlC0J,EAAkC1J,EAAoB,MAM1D,SAASiwB,EAAqBzS,EAAO/W,EAAQ8B,GAC3C,IAAI7F,EAAW6F,EAAK7F,SAChBwtB,EAAwC3nB,EAAK2nB,sCAC7CC,EAAkC5nB,EAAK4nB,gCAG3C,GAFc,IAAIxoB,OAAO,OAAO7E,OAAO2D,EAAOyD,UAAW,OAE7C5F,KAAKkZ,EAAM1O,2BACrB,OAWJ,SAAwE0O,EAAO/W,EAAQ6J,GACrF,IAAI5N,EAAW4N,EAAM5N,SACjBwtB,EAAwC5f,EAAM4f,sCAC9CC,EAAkC7f,EAAM6f,gCAEZ3S,EAAM1O,0BAClB0O,EAAM5L,cACL4L,EAAMrX,eACTqX,EAAMxT,YAWxB,GAAIkmB,EAAsCzpB,GAAS,CACjD,IAAIsD,EAAkB6hB,EAAqBpO,EAAO/W,EAAQ,CACxD2pB,iCAAiC,EACjCD,gCAAiCA,EACjCztB,SAAUA,IAGZ,GAAIqH,EACF,OAAOA,EAKX,OAAO6hB,EAAqBpO,EAAO/W,EAAQ,CACzC2pB,iCAAiC,EACjCD,gCAAiCA,EACjCztB,SAAUA,IA9CH2tB,CAA+D7S,EAAO/W,EAAQ,CACnF/D,SAAUA,EACVwtB,sCAAuCA,EACvCC,gCAAiCA,IA+CvC,SAASvE,EAAqBpO,EAAO/W,EAAQmP,GAC3C,IAAIlT,EAAWkT,EAAMlT,SACjB0tB,EAAkCxa,EAAMwa,gCACxCD,EAAkCva,EAAMua,gCACxCG,EAA0BpuB,OAAOwH,EAAiD,EAAxDxH,CAA2Dsb,EAAM1O,0BAA2BrI,EAAQ,CAChIuD,YAAawT,EAAMxT,YACnBH,uBAAwB2T,EAAM5L,cAC9B9H,mBAAoBsmB,EACpB1tB,SAAUA,IAaZ,GAVK0tB,IACC5S,EAAMrX,eAGRmqB,EAA0B9S,EAAMrX,eAAiBgqB,EAAgC1pB,GAAU6pB,EAClF9S,EAAM0R,+CACfoB,EAA0B9S,EAAM0R,6CAA+C,IAAMoB,IAsC3F,SAAwCA,EAAyB9S,GAC/D,OAAOtb,OAAO2F,EAA6B,EAApC3F,CAAuCouB,KAA6B9S,EAAMwR,oBAnC7EuB,CAA+BD,EAAyB9S,GAC1D,OAAO8S,EAqCX,SAASE,EAAiDjvB,EAAUC,GAClE,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCAIxB,SAASgvB,EAAmD9uB,EAAQC,GAClE,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAMC,OAAQlB,IAAK,CACrC,IAAImB,EAAaF,EAAMjB,GACvBmB,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeR,EAAQG,EAAWM,IAAKN,IAIlD,SAAS4uB,EAA8ClvB,EAAac,EAAYC,GAG9E,OAFID,GAAYmuB,EAAmDjvB,EAAYH,UAAWiB,GACtFC,GAAakuB,EAAmDjvB,EAAae,GAC1Ef,EAGT,IAAImvB,EAA8B,WAChC,SAASA,EAAezmB,GACtBsmB,EAAiD5wB,KAAM+wB,GAEvD/wB,KAAKgxB,WAAY,IAAIC,GAAgB/iB,MAAM5D,GA6B7C,OA1BAwmB,EAA8CC,EAAgB,CAAC,CAC7DvuB,IAAK,QACLiB,MAAO,SAAe2E,GACpB,IAAIO,EAAOuE,UAAUjL,OAAS,QAAsBkC,IAAjB+I,UAAU,GAAmBA,UAAU,GAAK,GAC3EgkB,EAAgBvoB,EAAKuoB,cAEzB,IAAK9oB,EACH,MAAM,IAAIrF,MAAM,sBAGlB,IAAIsF,EAAS8oB,EAAO/oB,EAAOxH,MAAM,IAAKZ,KAAKgxB,WAAW,GAMtD,GAJI3oB,GAAUA,EAAO2C,cACZ3C,EAAO+oB,cAGZ/oB,IAAUA,EAAOgpB,UACdH,EAKP,OAAO7oB,MAIJ0oB,EAjCyB,GAsClC,SAASI,EAAOG,EAAYC,EAAMC,GAChC,GAAoB,kBAATD,EAAmB,CAC5B,GAAIC,GACEF,EAAWrvB,OAASsvB,EAAKtvB,OAC3B,MAAO,CACLovB,UAAU,GAKhB,IAAII,EAAkBH,EAAWluB,KAAK,IAEtC,OAAsC,IAAlCmuB,EAAK/nB,QAAQioB,GACXH,EAAWrvB,SAAWsvB,EAAKtvB,OACtB,CACL+I,OAAO,EACPomB,aAAcE,GAIX,CACLI,cAAc,GAKoB,IAAlCD,EAAgBjoB,QAAQ+nB,GACnB,CACLvmB,OAAO,EACPomB,aAAcE,EAAWhoB,MAAM,EAAGioB,EAAKtvB,cAI3C,EAGF,GAAIuG,MAAMC,QAAQ8oB,GAAO,CAIvB,IAHA,IAAII,EAAiBL,EAAWhoB,QAC5BvI,EAAI,EAEDA,EAAIwwB,EAAKtvB,QAAQ,CACtB,IAEIoG,EAAS8oB,EAAOQ,EAFNJ,EAAKxwB,GAE0BywB,GAAQzwB,IAAMwwB,EAAKtvB,OAAS,GAEzE,IAAKoG,GAAUA,EAAOgpB,SACpB,OAAOhpB,EAGT,IAAIA,EAAO2C,MAiBJ,CAAA,GAAI3C,EAAOqpB,aAChB,MAAO,CACLA,cAAc,GAIhB,MAAM,IAAI3uB,MAAM,8BAA8BG,OAAO+K,KAAK2jB,UAAUvpB,EAAQ,KAAM,KAnBlF,GAA8B,KAF9BspB,EAAiBA,EAAeroB,MAAMjB,EAAO+oB,aAAanvB,SAEvCA,OACjB,OAAIlB,IAAMwwB,EAAKtvB,OAAS,EACf,CACL+I,OAAO,EACPomB,aAAcE,GAGT,CACLI,cAAc,GActB3wB,IAGF,OAAIywB,EACK,CACLH,UAAU,GAIP,CACLrmB,OAAO,EACPomB,aAAcE,EAAWhoB,MAAM,EAAGgoB,EAAWrvB,OAAS0vB,EAAe1vB,SAIzE,OAAQsvB,EAAKM,IACX,IAAK,IACH,IAAIH,EAEKppB,EAAYipB,EAAK5kB,KAAMpE,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAA1E,IAA6EJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CAC9I,IAAImP,EAEJ,GAAInI,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5ByO,EAAQpI,EAAUI,SACb,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACb6H,EAAQhI,EAAGjF,MAGb,IAEIquB,EAAUX,EAAOG,EAFR5gB,EAE4B8gB,GAEzC,GAAIM,EAAS,CACX,GAAIA,EAAQT,SACV,OAAOS,EACF,GAAIA,EAAQ9mB,MACjB,MAAO,CACLA,OAAO,EACPomB,aAAcU,EAAQV,cAEfU,EAAQJ,eACjBA,GAAe,IAKrB,OAAIA,EACK,CACLA,cAAc,QAMlB,EAEF,IAAK,KACE,IAAIK,EAAaR,EAAK5kB,KAAMqlB,EAAYxpB,MAAMC,QAAQspB,GAAa7B,EAAM,EAA9E,IAAiF6B,EAAaC,EAAYD,EAAaA,EAAWzwB,OAAOC,cAAe,CACtJ,IAAIyU,EAEJ,GAAIgc,EAAW,CACb,GAAI9B,GAAO6B,EAAW9vB,OAAQ,MAC9B+T,EAAQ+b,EAAW7B,SACd,CAEL,IADAA,EAAM6B,EAAWnpB,QACTC,KAAM,MACdmN,EAAQka,EAAIzsB,MAGd,IAAIwuB,EAAQjc,EAEZ,GAAIsb,EAAW,KAAOW,EACpB,OAA0B,IAAtBX,EAAWrvB,OACN,CACL+I,OAAO,EACPomB,aAAcE,GAIdE,EACK,CACLH,UAAU,GAIP,CACLrmB,OAAO,EACPomB,aAAc,CAACa,IAMrB,OAEF,QACE,MAAM,IAAIlvB,MAAM,iCAAiCG,OAAOquB,KAI9D,IAAIW,EAAW,IAAInqB,OACnB,+BAWIkpB,EAA6B,WAC/B,SAASA,IACPL,EAAiD5wB,KAAMixB,GA6JzD,OA1JAH,EAA8CG,EAAe,CAAC,CAC5DzuB,IAAK,QACLiB,MAAO,SAAe6G,GAOpB,GANAtK,KAAKmyB,QAAU,CAAC,CACdC,IAAI,EACJC,aAAc,KAEhBryB,KAAKsyB,aAAahoB,GAEU,IAAxBtK,KAAKmyB,QAAQlwB,OACf,MAAM,IAAIc,MAAM,wDAGlB,IAAIwvB,EAAiBvyB,KAAKmyB,QAAQ,GAC9BK,EAAWD,EAAeC,SAC1BH,EAAeE,EAAeF,aAElC,GAAIG,EACF,MAAO,CAAC,CACNX,GAAI,IACJllB,KAAM6lB,EAAStvB,OAAO,CAACmvB,MAI3B,GAA4B,IAAxBA,EAAapwB,OACf,MAAM,IAAIc,MAAM,uBAGlB,OAAOsvB,IAER,CACD7vB,IAAK,eACLiB,MAAO,SAAsB0uB,GAC3BnyB,KAAKmyB,QAAQlyB,KAAKkyB,KAEnB,CACD3vB,IAAK,aACLiB,MAAO,WACLzD,KAAKmyB,QAAQnC,QAEd,CACDxtB,IAAK,aACLiB,MAAO,WACL,OAAOzD,KAAKmyB,QAAQnyB,KAAKmyB,QAAQlwB,OAAS,KAE3C,CACDO,IAAK,eACLiB,MAAO,SAAsB6G,GAC3B,IAAKA,EACH,MAAM,IAAIvH,MAAM,wBAGlB,IAAIiI,EAAQV,EAAQU,MAAMknB,GAE1B,GAAKlnB,EAAL,CAKA,IAAIynB,EAAWznB,EAAM,GACjB0nB,EAASpoB,EAAQhB,MAAM,EAAG0B,EAAMkX,OAChCyQ,EAAYroB,EAAQhB,MAAM0B,EAAMkX,MAAQuQ,EAASxwB,QAErD,OAAQwwB,GACN,IAAK,MACCC,GACF1yB,KAAKsyB,aAAaI,GAGpB1yB,KAAK4yB,aAAa,CAChBR,IAAI,EACJC,aAAc,GACdG,SAAU,KAEZ,MAEF,IAAK,IACH,IAAKxyB,KAAK6yB,aAAaT,GACrB,MAAM,IAAIrvB,MAAM,mDAOlB,GAJI2vB,GACF1yB,KAAKsyB,aAAaI,GAG0B,IAA1C1yB,KAAK6yB,aAAaR,aAAapwB,OACjC,MAAM,IAAIc,MAAM,6DAGlB,IACIyvB,EADmBxyB,KAAK6yB,aACIL,SAEhCA,EAASvyB,KAAKD,KAAK6yB,aAAaR,cAChCryB,KAAK8yB,aACL9yB,KAAK6yB,aAAaR,aAAapyB,KAAK,CAClC4xB,GAAI,IACJllB,KAAM6lB,IAER,MAEF,IAAK,IACH,IAAKxyB,KAAK6yB,aAAaT,GACrB,MAAM,IAAIrvB,MAAM,oDAQlB,GALI2vB,GACF1yB,KAAKsyB,aAAaI,IAIf1yB,KAAK6yB,aAAaL,SAAU,CAC/B,GAA4B,IAAxBxyB,KAAKmyB,QAAQlwB,OAGf,MAAM,IAAIc,MAAM,iDAFhB/C,KAAK6yB,aAAaL,SAAW,GAMjCxyB,KAAK6yB,aAAaL,SAASvyB,KAAKD,KAAK6yB,aAAaR,cAClDryB,KAAK6yB,aAAaR,aAAe,GACjC,MAEF,IAAK,IACCK,GACF1yB,KAAKsyB,aAAaI,GAGpB1yB,KAAK4yB,aAAa,CAChBG,UAAU,IAEZ,MAEF,IAAK,IACH,IAAK/yB,KAAK6yB,aAAaE,SACrB,MAAM,IAAIhwB,MAAM,iDAGlB/C,KAAK8yB,aACL9yB,KAAK6yB,aAAaR,aAAapyB,KAAK,CAClC4xB,GAAI,KACJllB,KAAMqmB,EAAcN,KAEtB,MAEF,QACE,MAAM,IAAI3vB,MAAM,qBAAqBG,OAAOuvB,IAG5CE,GACF3yB,KAAKsyB,aAAaK,QA9FlB3yB,KAAK6yB,aAAaR,aAAeryB,KAAK6yB,aAAaR,aAAanvB,OAAOoH,EAAQ1J,MAAM,SAmGpFqwB,EA/JwB,GAkKjC,SAAS+B,EAAc1oB,GAIrB,IAHA,IAAI2oB,EAAS,GACTlyB,EAAI,EAEDA,EAAIuJ,EAAQrI,QAAQ,CACzB,GAAmB,MAAfqI,EAAQvJ,GAAY,CACtB,GAAU,IAANA,GAAWA,IAAMuJ,EAAQrI,OAAS,EACpC,MAAM,IAAIc,MAAM,wCAAwCG,OAAOoH,IAOjE,IAJA,IAAIuW,EAAYvW,EAAQvJ,EAAI,GAAGkT,WAAW,GAAK,EAC3Cif,EAAY5oB,EAAQvJ,EAAI,GAAGkT,WAAW,GAAK,EAC3CxQ,EAAQod,EAELpd,GAASyvB,GACdD,EAAOhzB,KAAK6T,OAAOqf,aAAa1vB,IAChCA,SAGFwvB,EAAOhzB,KAAKqK,EAAQvJ,IAGtBA,IAGF,OAAOkyB,EAGT,IAAI/F,EAAY9sB,EAAoB,MAGhC+N,EAAmC/N,EAAoB,MAS3D,SAASgzB,EAAoCrxB,EAAQC,GACnD,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAMC,OAAQlB,IAAK,CACrC,IAAImB,EAAaF,EAAMjB,GACvBmB,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeR,EAAQG,EAAWM,IAAKN,IAUlD,SAASmxB,EAAkChyB,EAAKmB,EAAKiB,GAYnD,OAXIjB,KAAOnB,EACTiB,OAAOC,eAAelB,EAAKmB,EAAK,CAC9BiB,MAAOA,EACPtB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZhB,EAAImB,GAAOiB,EAGNpC,EAaT,IAKIiyB,EAA6B1D,EALf,IAEyB,IAMvC2D,EAAqC,OAUrCC,EAAuE,WACzE,MAAO,mBAQLC,EAAwE,WAC1E,MAAO,qBAqCLC,EAA8B,IAAI3rB,OAAO,KAAYmlB,EAAqC,EAAjD,aAAyEA,EAAqC,EAA9G,SAMzCyG,EAAqD,WACvD,SAASC,EAAmBjrB,GAC1B,IAAI3C,EAAQhG,KAGR8C,GADQ6F,EAAKiV,MACFjV,EAAK7F,WA3HxB,SAA2CnB,EAAUC,GACnD,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCA2HpBgyB,CAAkC7zB,KAAM4zB,GAExCP,EAAkCrzB,KAAM,mCAAmC,SAAU6G,GAMnF,OAAIb,EAAM8tB,QAQNjtB,GAAUA,EAAOE,gCAAkCwsB,EAAmC7uB,KAAKmC,EAAOE,gCAP7F,IAcF,MAGTssB,EAAkCrzB,KAAM,yCAAyC,SAAU6G,EAAQ6J,GACjG,IAAIsB,EAAgBtB,EAAMsB,cACtBzL,EAAiBmK,EAAMnK,eAE3B,GAAIM,EAAOE,+BAAgC,CAIzC,IAAIE,EAAqBJ,EAAOI,qBAEhC,GAAIA,GAAsBV,IAAmBU,IAAuB+K,EAClE,OAAO,MAKbhS,KAAK8C,SAAWA,EAChB9C,KAAK+zB,cAxJT,IAAwCnyB,EAAac,EAAYC,EAmvB/D,OAnvBsCf,EA2JPgyB,GA3JoBlxB,EA2JA,CAAC,CAClDF,IAAK,cACLiB,MAAO,WACLzD,KAAKg0B,kBAAe7vB,EACpBnE,KAAKilB,cAAW9gB,EAChBnE,KAAKi0B,4BAAyB9vB,EAC9BnE,KAAKk0B,qCAAkC/vB,EACvCnE,KAAKm0B,yCAA2C,IAEjD,CACD3xB,IAAK,QACLiB,MAAO,SAAemB,EAAegZ,GACnC5d,KAAK+zB,cAEDnvB,GACF5E,KAAK8zB,OAAyC,MAAhClvB,EAAcP,cAC5BrE,KAAKo0B,gBAAkBxvB,EAAcS,UAEjCuY,EAAM1O,2BACRlP,KAAKq0B,0BAA0BzW,KAGjC5d,KAAK8zB,YAAS3vB,EACdnE,KAAKo0B,gBAAkB,MAU1B,CACD5xB,IAAK,SACLiB,MAAO,SAAgBgsB,EAAY7R,GACjC,IAnvB2B1O,EAA2BpM,EAmvBlDwxB,EAASt0B,KAgBb,GAnwB2BkP,EAmwBC0O,EAAM1O,0BAnwBoBpM,EAmwBO9C,KAAK8C,SAlwBuB,gBAAtFR,OAAOyG,EAAmC,EAA1CzG,CAA6C4M,EAA2BpM,GAmwBpE,CAAA,IAAIwF,EAAYtI,KAAKo0B,gBAAiB7rB,EAAWC,MAAMC,QAAQH,GAAYI,EAAK,EAArF,IAAwFJ,EAAYC,EAAWD,EAAYA,EAAUhH,OAAOC,cAAe,CACzJ,IAAIyU,EAEJ,GAAIzN,EAAU,CACZ,GAAIG,GAAMJ,EAAUrG,OAAQ,MAC5B+T,EAAQ1N,EAAUI,SACb,CAEL,IADAA,EAAKJ,EAAUM,QACRC,KAAM,MACbmN,EAAQtN,EAAGjF,MAGb,IAAIoD,EAASmP,EACTue,EAA0BlE,EAAqBzS,EAAO/W,EAAQ,CAChE/D,SAAU9C,KAAK8C,SACfwtB,sCAAuC,SAA+CzpB,GACpF,OAAOytB,EAAOhE,sCAAsCzpB,EAAQ,CAC1DmL,cAAe4L,EAAM5L,cACrBzL,eAAgBqX,EAAMrX,kBAG1BgqB,gCAAiCvwB,KAAKuwB,kCAGxC,GAAIgE,EAQF,OAPAv0B,KAAK+zB,cACL/zB,KAAKg0B,aAAentB,EACpB7G,KAAKw0B,0BAA0BD,EAAwBlqB,QAAQ,MAAOqlB,GAAoB9R,GAC1F5d,KAAKk0B,gCAAkCK,EAGvCv0B,KAAKm0B,wCAA0Cn0B,KAAKilB,SAASwP,YAAY/E,GAClE6E,GAOb,OAAOv0B,KAAK00B,mCAAmCjF,EAAY7R,KAG5D,CACDpb,IAAK,qCACLiB,MAAO,SAA4CgsB,EAAY7R,GAC7D,IAAI+W,EAAyB30B,KAAKg0B,aAE9BY,EAAoB50B,KAAK60B,aAAajX,GAE1C,GAAIgX,EACF,OAAIA,IAAsBD,EAIjB30B,KAAK80B,+BAA+BrF,GAMpCzvB,KAAK80B,+BAA+BlX,EAAMwR,uBAItD,CACD5sB,IAAK,4BACLiB,MAAO,SAAmCiT,GACxC,IAAIqe,EAAS/0B,KAETkP,EAA4BwH,EAAMxH,0BAClC3I,EAAiBmQ,EAAMnQ,eACvByL,EAAgB0E,EAAM1E,cACtBxM,EAAgB0J,EAYhB8lB,EAA4BxvB,EAAcvD,OAhMpB,EAkMtB+yB,EAA4B,IAC9BA,EAA4B,GAG9Bh1B,KAAKo0B,gBAAkBp0B,KAAKo0B,gBAAgB1wB,QAAO,SAAUmD,GAC3D,OAAOkuB,EAAOE,YAAYpuB,EAAQmL,EAAezL,IAAmBwuB,EAAOG,cAAcruB,EAAQrB,EAAewvB,MAS9Gh1B,KAAKg0B,eAAqE,IAArDh0B,KAAKo0B,gBAAgB5qB,QAAQxJ,KAAKg0B,eACzDh0B,KAAK+zB,gBAGR,CACDvxB,IAAK,cACLiB,MAAO,SAAqBoD,EAAQmL,EAAezL,GAWjD,QAAIA,IAAmBM,EAAOI,uBAC7BJ,EAAOG,8DASHgL,IAAkBzL,GAAkBM,EAAOsuB,6DAMjD,CACD3yB,IAAK,gBACLiB,MAAO,SAAuBoD,EAAQrB,EAAewvB,GACnD,IAAII,EAA6BvuB,EAAO2lB,wBAAwBvqB,OAGhE,GAAmC,IAA/BmzB,EACF,OAAO,EAOTJ,EAA4BK,KAAKC,IAAIN,EAA2BI,EAA6B,GAC7F,IAAIG,EAAuB1uB,EAAO2lB,wBAAwBwI,GA0B1D,GAAIxvB,EAAcvD,OA1RQ,EA+RxB,IACE,YAEOkC,IAFA,IAAI4sB,EAAewE,GAAsBvqB,MAAMxF,EAAe,CACnE0rB,eAAe,IAEjB,MAAOnjB,GAMP,OADA2K,QAAQ3K,MAAMA,IACP,EAUX,OAAO,IAAIhG,OAAO,KAAK7E,OAAOqyB,EAAsB,MAAM7wB,KAAKc,KAEhE,CACDhD,IAAK,kBACLiB,MAAO,SAAyBoD,EAAQmL,GACtC,OAAOA,EAAgBnL,EAAO0D,sBAAwB1D,EAAOA,WAE9D,CACDrE,IAAK,eACLiB,MAAO,SAAsBma,GAC3B,IAAI4X,EAASx1B,KAETy1B,EAAS,WACX,GAAIzD,EAAW,CACb,GAAI9B,GAAO6B,EAAW9vB,OAAQ,MAAO,QACrCwc,EAAQsT,EAAW7B,SACd,CAEL,IADAA,EAAM6B,EAAWnpB,QACTC,KAAM,MAAO,QACrB4V,EAAQyR,EAAIzsB,MAGd,IAAIoD,EAAS4X,EAGb,OAAI+W,EAAOxB,eAAiBntB,EACnB,QA2CJ6sB,EAA4BhvB,KAAK8wB,EAAOE,gBAAgB7uB,EAAQ+W,EAAM5L,gBAItEwjB,EAAOG,wBAAwB9uB,EAAQ+W,IAQ5C4X,EAAOxB,aAAentB,EACf,UAPL2uB,EAAOpB,gBAAkBoB,EAAOpB,gBAAgB1wB,QAAO,SAAUC,GAC/D,OAAOA,IAAMkD,KAER,YARA,YAiBKkrB,EAAa/xB,KAAKo0B,gBAAgB9qB,QAAS0oB,EAAYxpB,MAAMC,QAAQspB,GAAa7B,EAAM,EAAxG0F,EAAO,IAAoG7D,EAAaC,EAAYD,EAAaA,EAAWzwB,OAAOC,cAAe,CAChL,IAAIkd,EAIJ,OAFWgX,KAGT,IAAK,QACH,MAAMG,EAER,IAAK,WACH,UASN,OALK51B,KAAKg0B,cAERh0B,KAAK+zB,cAGA/zB,KAAKg0B,eAEb,CACDxxB,IAAK,0BACLiB,MAAO,SAAiCoD,EAAQ+W,GAM9C,KAA0C/W,EAAOyD,UAAUd,QAAQ,MAAQ,GAA3E,CAKA,IAAIyb,EAAWjlB,KAAK61B,qBAAqBhvB,EAAQ+W,GAGjD,OAAIqH,GACFjlB,KAAKw0B,0BAA0BvP,EAAUrH,IAClC,QAFT,KAKD,CACDpb,IAAK,iDACLiB,MAAO,SAAwDmY,EAAOlQ,GACpE,IAAIzG,EAAY2W,EAAM3W,UAClB+pB,EAAcpT,EAAMoT,YAExB,OAAI/pB,EACKyG,IAA+B,IAApBA,EAAQoqB,QAAoB7wB,EAAYA,EAAY,IAGpE+pB,EACK,GAGF,MAER,CACDxsB,IAAK,cACLiB,MAAO,SAAqBma,GAC1B,GAAK5d,KAAKilB,SAAV,CAaA,IANA,IAAI/C,GAAS,EACTnhB,EAAI,EACJg1B,EAAsBnY,EAAM5L,cAAgBhS,KAAKg2B,+CAA+CpY,EAAO,CACzGkY,SAAS,IACN,GAEE/0B,EAAIg1B,EAAoB9zB,OAAS2b,EAAMqY,sCAAsCh0B,QAClFigB,EAAQliB,KAAKilB,SAASzb,QAAQkmB,EAAmBxN,EAAQ,GACzDnhB,IAGF,OAAO+uB,EAA2B9vB,KAAKilB,SAAU/C,EAAQ,MAE1D,CACD1f,IAAK,4BACLiB,MAAO,SAAmCwhB,EAAUrH,GAClD5d,KAAKi0B,uBAAyBhP,EAC9BjlB,KAAKk0B,gCAAkCjP,EAGvCjlB,KAAKm0B,yCAA2C,EAM5CvW,EAAM5L,cACRhS,KAAKilB,SAAWjlB,KAAKg2B,+CAA+CpY,GAAOvT,QAAQ,UAAWqlB,GAAqBE,EAAOF,EAAmB9R,EAAMvZ,YAAYpC,QAAU,IAAMgjB,EAE/KjlB,KAAKilB,SAAWA,IAWnB,CACDziB,IAAK,uBACLiB,MAAO,SAA8BoD,EAAQqvB,GAC3C,IAAIhnB,EAA4BgnB,EAAMhnB,0BAClC8C,EAAgBkkB,EAAMlkB,cACtBzL,EAAiB2vB,EAAM3vB,eACvB+oB,EAA+C4G,EAAM5G,6CACrDhlB,EAAUzD,EAAOyD,UAInBA,EAAUA,EACTD,QAAQmpB,IAAkC,OAC1CnpB,QAAQopB,IAAmC,OAW9C,IAAIxE,EAASqE,EAA2BtoB,MAAMV,GAAS,GAGvD,KAAI4E,EAA0BjN,OAASgtB,EAAOhtB,QAA9C,CAiCA,IAAIk0B,EAAgB,IAAIpuB,OAAO,IAAMuC,EAAU,KAC3C8rB,EAA4BlnB,EAA0B7E,QAAQ,MAxnBtD,KA4nBR8rB,EAAczxB,KAAK0xB,KACrBnH,EAASmH,GAGX,IACIC,EADAC,EAAet2B,KAAK01B,gBAAgB7uB,EAAQmL,GAShD,GAAIhS,KAAKswB,sCAAsCzpB,EAAQ,CACrDmL,cAAeA,EACfzL,eAAgBA,IACd,CACF,IAAIgwB,EAAiCD,EAAajsB,QAAQP,EAA6D,EAAGjD,EAAOE,gCAUjI,GAAIzE,OAAO2F,EAA6B,EAApC3F,CAAuCuE,EAAOE,mCAAqCR,GAAkB,IAAMjE,OAAO2F,EAA6B,EAApC3F,CAAuC,QACpJg0B,EAAeC,EACfF,GAAmC,EAG/B9vB,GAGF,IAFA,IAAIxF,EAAIwF,EAAetE,OAEhBlB,EAAI,GACTu1B,EAAeA,EAAajsB,QAAQ,KAAMqlB,GAC1C3uB,IAOR,IAAIkkB,EAAWgK,EACd5kB,QAAQ,IAAItC,OAAOuC,GAAUgsB,GAC7BjsB,QAAQ,IAAItC,OA1qBD,IA0qBqB,KAAM2nB,GAmBvC,OAdK2G,IACC/G,EAEFrK,EAAW2K,EAAOF,EAAmBJ,EAA6CrtB,QAAU,IAAMgjB,EACzF1e,IAET0e,EAAW2K,EAAOF,EAAmBnpB,EAAetE,QAAUjC,KAAKuwB,gCAAgC1pB,GAAUoe,IAI7GjT,IACFiT,EAAW3iB,OAAO6L,EAAkD,EAAzD7L,CAA4D2iB,IAGlEA,KAER,CACDziB,IAAK,iCACLiB,MAAO,SAAwCwrB,GAC7C,IAAI5mB,EAj1CV,SAAoC4c,EAAUuR,EAAUvH,GAMjD,IAAI8C,EAAa9C,EAAOruB,MAAM,IAAKoxB,EAAYxpB,MAAMC,QAAQspB,GAAa0E,EAAM,EAArF,IAAwF1E,EAAaC,EAAYD,EAAaA,EAAWzwB,OAAOC,cAAe,CAC7J,IAAImP,EAEJ,GAAIshB,EAAW,CACb,GAAIyE,GAAO1E,EAAW9vB,OAAQ,MAC9ByO,EAAQqhB,EAAW0E,SACd,CAEL,IADAA,EAAM1E,EAAWnpB,QACTC,KAAM,MACd6H,EAAQ+lB,EAAIhzB,MAGd,IAAIqF,EAAQ4H,EAKZ,GAAIuU,EAAS3b,MAAMktB,EAAW,GAAG1rB,OAAO6kB,GAA6B,EACnE,OAGF6G,EAAWvR,EAASna,OAAO6kB,GAC3B1K,EAAWA,EAAS5a,QAAQslB,EAA2B7mB,GAGzD,MAAO,CAACmc,EAAUuR,GAkzCDE,CAA2B12B,KAAKk0B,gCAAiCl0B,KAAKm0B,wCAAyClF,GAE5H,GAAK5mB,EASL,OAHArI,KAAKk0B,gCAAkC7rB,EAAO,GAC9CrI,KAAKm0B,wCAA0C9rB,EAAO,GAE/CynB,EAA2B9vB,KAAKk0B,gCAAiCl0B,KAAKm0B,wCAA0C,GAPrHn0B,KAAK+zB,mBApuBKX,EAAoCxxB,EAAYH,UAAWiB,GACvEC,GAAaywB,EAAoCxxB,EAAae,GAivB3DixB,EA7oBgD,GAkpBrD+C,EAAoCv2B,EAAoB,MAGxD6K,EAAkE7K,EAAoB,MAGtFgP,EAAoDhP,EAAoB,MAGxEoK,EAAiBpK,EAAoB,MAGzC,SAAS4L,EAAeC,EAAKlL,GAC3B,OAiCF,SAAyBkL,GACvB,GAAIzD,MAAMC,QAAQwD,GAAM,OAAOA,EAlCxBC,CAAgBD,IAOzB,SAA+BA,EAAKlL,GAClC,IAAIoL,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKnI,EAET,IACE,IAAK,IAAiCoI,EAA7B7D,EAAKuD,EAAI3K,OAAOC,cAAmB6K,GAAMG,EAAK7D,EAAGE,QAAQC,QAChEsD,EAAKlM,KAAKsM,EAAG9I,QAET1C,GAAKoL,EAAKlK,SAAWlB,GAH8CqL,GAAK,IAK9E,MAAOI,GACPH,GAAK,EACLC,EAAKE,EACL,QACA,IACOJ,GAAsB,MAAhB1D,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAI2D,EAAI,MAAMC,GAIlB,OAAOH,EA9BwBM,CAAsBR,EAAKlL,IAG5D,WACE,MAAM,IAAIc,UAAU,wDAJ4C6K,GA2ClE,SAASkqB,EAAiC70B,EAAQC,GAChD,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAMC,OAAQlB,IAAK,CACrC,IAAImB,EAAaF,EAAMjB,GACvBmB,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeR,EAAQG,EAAWM,IAAKN,IAgBlD,IAAI20B,EAA2C,IAAM3J,EAAqC,EAAIA,EAAgC,EAAI,KAC9H4J,EAAmD,IAAI/uB,OAAO,IAAM8uB,EAA2C,IAAK,KACpHE,EAAoC,OAAc7J,EAA8B,EAA5C,KAA4DA,EAAqC,EAAIA,EAAgC,EAArI,OAA4JA,EAAqC,EAAIA,EAAgC,EAArO,MACpC8J,EAAwC,IAAIjvB,OAAO,KAAOmlB,EAAqC,EAAIA,EAAgC,EAAhF,SAInD+J,EAA0B,YAE1BC,EAA+C,WACjD,SAASC,EAAgBxuB,GACvB,IAAI+E,EAAiB/E,EAAK+E,eACtBwgB,EAAqBvlB,EAAKulB,mBAC1BprB,EAAW6F,EAAK7F,SAChBs0B,EAAoCzuB,EAAKyuB,mCA1CjD,SAAwCz1B,EAAUC,GAChD,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCA0CpBw1B,CAA+Br3B,KAAMm3B,GAErCn3B,KAAK0N,eAAiBA,EACtB1N,KAAKkuB,mBAAqBA,EAC1BluB,KAAK8C,SAAWA,EAChB9C,KAAKo3B,kCAAoCA,EAjC7C,IAAqCx1B,EAAac,EAAYC,EAoZ5D,OApZmCf,EAoCPu1B,GApCoBz0B,EAoCH,CAAC,CAC5CF,IAAK,QACLiB,MAAO,SAAeoE,EAAM+V,GAC1B,IAOI0Z,EAPAC,EA2aV,SAAuC1vB,GACrC,IACI2vB,EAAyBxrB,EAnB/B,SAAwCnE,GAEtC,IAAI4vB,EApCN,SAAqC5vB,GAEnC,IASI6vB,EATAjK,EAAW5lB,EAAKiD,OAAOisB,GAE3B,KAAItJ,EAAW,GAqBf,MAZgB,OAJhB5lB,EAAOA,EAAKyB,MAAMmkB,IAIT,KACPiK,GAAU,EACV7vB,EAAOA,EAAKyB,MAAM,IAAIrH,SAIxB4F,EAAOA,EAAKwC,QAAQ2sB,EAAuC,IAEvDU,IACF7vB,EAAO,IAAMA,GAGRA,EAWe6lB,CAA4B7lB,IAAS,GAE3D,MAA2B,MAAvB4vB,EAAgB,GACX,CAACA,EAAgBnuB,MAAM,IAAIrH,SAAS,GAGtC,CAACw1B,GAUqBE,CAA+B9vB,GACQ,GAChE+vB,EAAkBJ,EAAuB,GACzCE,EAAUF,EAAuB,GASrC,OAJKV,EAAiDpyB,KAAKkzB,KACzDA,EAAkB,IAGb,CAACA,EAAiBF,GAxbOG,CAA8BhwB,GACtDiwB,EAAyB9rB,EAAeurB,EAAuB,GAC/DK,EAAkBE,EAAuB,GACzCJ,EAAUI,EAAuB,GAEjC7I,EAAS3sB,OAAO2F,EAA6B,EAApC3F,CAAuCs1B,GAkBpD,OAdIF,IACG9Z,EAAMqR,SACTrR,EAAMma,2BAED9I,IACHqI,GAAkB,KAKpBrI,GACFjvB,KAAKg4B,YAAY/I,EAAQrR,GAGpB,CACLqR,OAAQA,EACRqI,gBAAiBA,KASpB,CACD90B,IAAK,cACLiB,MAAO,SAAqBgsB,EAAY7R,GACtC,IAAIqR,EAASrR,EAAMqR,OACfgJ,EAAgChJ,EAAOhtB,OAAS,GAAKgtB,EAAOhtB,OAASwtB,EAAWxtB,QAAU,EAqB9F,GAnBA2b,EAAMsa,aAAazI,GAefwI,GACFj4B,KAAKm4B,iBAAiBva,GAGpB5d,KAAKo4B,+BAA+Bxa,IACtC,IAAK5d,KAAKsO,0BAA0BsP,GAClC,YAGFA,EAAMya,sCAAsC5I,GAQzC7R,EAAM5L,eACJhS,KAAKs4B,uCACRt4B,KAAKu4B,iCAAiC3a,EAAMwR,oBAAqBxR,EAAM4a,UAI5E,CACDh2B,IAAK,iCACLiB,MAAO,SAAwCiN,GAC7C,IAAIsB,EAAgBtB,EAAMsB,cACtB3N,EAAcqM,EAAMrM,YACxB,OAAO2N,IAAkB3N,IAI1B,CACD7B,IAAK,4BACLiB,MAAO,SAAmCma,GACxC,IAAIjP,EAAwBrM,OAAOq0B,EAAmD,EAA1Dr0B,CAA6D,IAAMsb,EAAMqY,sCAAuCj2B,KAAK0N,eAAgB1N,KAAKkuB,mBAAoBluB,KAAK8C,SAASA,UACpMqE,EAAqBwH,EAAsBxH,mBAC3C6C,EAAS2E,EAAsB3E,OAEnC,GAAI7C,EAKF,OAJAyW,EAAM4R,eAAeroB,GACrByW,EAAM4a,OAAO,CACXtpB,0BAA2BlF,KAEtB,IAGV,CACDxH,IAAK,QACLiB,MAAO,SAAemB,GACpB,GAAIA,EAAe,CACjB5E,KAAKouB,0BAA2B,EAEhC,IAAI9oB,EAA2BV,EAAc0B,4BAE7CtG,KAAKy4B,qDAAuDnzB,GAA4B2xB,EAAwBvyB,KAAKY,QAErHtF,KAAKouB,8BAA2BjqB,EAChCnE,KAAKy4B,0DAAuDt0B,IAW/D,CACD3B,IAAK,mCACLiB,MAAO,SAA0Ci1B,EAAgB1a,GAC/D,GAAKhe,KAAKouB,yBAAV,CAIA,IAAInf,EAAwB3M,OAAO8M,EAAmE,EAA1E9M,CAA6Eo2B,EAAgB14B,KAAK8C,UAC1HyD,EAAiB0I,EAAsB1I,eACvCyC,EAAiBiG,EAAsBjG,eACvCoB,EAAc6E,EAAsB7E,YAExC,GAAIpB,IAAmB0vB,EAKvB,OADA14B,KAAK24B,0BAA0BpyB,EAAgB6D,EAAapB,EAAgB0vB,EAAgB1a,IACrF,KAQR,CACDxb,IAAK,0CACLiB,MAAO,SAAiDi1B,EAAgBE,EAA+B5a,GACrG,IAAKhe,KAAKs4B,sCACR,OAAOt4B,KAAKu4B,iCAAiCG,EAAgB1a,GAG/D,GAAKhe,KAAKy4B,qDAAV,CAIA,IAAII,EAAyBv2B,OAAO8M,EAAmE,EAA1E9M,CAA6Eo2B,EAAgB14B,KAAK8C,UAC3HyD,EAAiBsyB,EAAuBtyB,eACxCyC,EAAiB6vB,EAAuB7vB,eACxCoB,EAAcyuB,EAAuBzuB,YASzC,GAAIpB,IAAmB4vB,EAKvB,OADA54B,KAAK24B,0BAA0BpyB,EAAgB6D,EAAapB,EAAgB0vB,EAAgB1a,IACrF,KAER,CACDxb,IAAK,4BACLiB,MAAO,SAAmC8C,EAAgB6D,EAAa8E,EAA2BwpB,EAAgB1a,GAChH,IAAIsR,EACAD,EAEAyJ,EAAiCJ,EAAejE,YAAYvlB,GAMhE,GAAI4pB,GAAkC,GAAKA,IAAmCJ,EAAez2B,OAASiN,EAA0BjN,OAAQ,CACtIotB,GAAwC,EAMxC,IAAI3f,EAA6BgpB,EAAepvB,MAAM,EAAGwvB,GAMrDppB,IAA+BnJ,IACjC+oB,EAA+C5f,GAInDsO,EAAS,CACPzX,eAAgBA,EAChB6D,YAAaA,EACb8E,0BAA2BA,EAC3BmgB,sCAAuCA,EACvCC,6CAA8CA,IAIhDtvB,KAAKs4B,uCAAwC,EAC7Ct4B,KAAKo3B,sCAEN,CACD50B,IAAK,qCACLiB,MAAO,SAA4Cma,GAkCjD,QAAI5d,KAAK+4B,wCAAwCnb,EAAMwR,oBAAqBxR,EAAM1O,0BAA2B0O,EAAM4a,UAkB/Gx4B,KAAKm4B,iBAAiBva,IAYtB5d,KAAKg5B,eAAepb,IAXtB5d,KAAKi5B,+CAA+Crb,IAC7C,QAUT,KAKD,CACDpb,IAAK,mBACLiB,MAAO,SAA0Bma,GAG/B,IAAI5L,EAAgB4L,EAAM5L,cACtB/M,EAAY2Y,EAAM3Y,UAClBgqB,EAASrR,EAAMqR,OAGnB,GAFgCrR,EAAM1O,2BAElC8C,IAAiB/M,EAArB,CAQA,IAAIyJ,EAAmBpM,OAAOkI,EAAgC,EAAvClI,CAA0C2sB,EAAQjvB,KAAK0N,eAAgB1N,KAAKkuB,mBAAoBluB,KAAK8C,SAASA,UAErI,YAAyBqB,IAArBuK,GAAkCA,IAAqBugB,GAGzDrR,EAAM4a,OAAO,CACXvzB,UAAWgqB,EAAO3lB,MAAM,EAAG2lB,EAAOhtB,OAASyM,EAAiBzM,UAE9DjC,KAAK+3B,yBAAyBna,IACvB,QAPT,KAUD,CACDpb,IAAK,iBACLiB,MAAO,SAAwBma,GAC7B,IAAKA,EAAM5L,cAAe,CACxB,IAAIknB,EAAyB52B,OAAO2I,EAAiF,EAAxF3I,CAA2Fsb,EAAMqR,OAAQjvB,KAAK0N,eAAgB1N,KAAKkuB,mBAAoBluB,KAAK8C,SAASA,UAC9Lq2B,EAAiBD,EAAuB/xB,mBAG5C,GAFa+xB,EAAuBlvB,OAEhCmvB,EAKF,OAJAvb,EAAM4a,OAAO,CACXxJ,aAAa,IAEfhvB,KAAK+3B,yBAAyBna,IACvB,KAIZ,CACDpb,IAAK,2BACLiB,MAAO,SAAkCma,GACvCA,EAAMma,2BAEFna,EAAM1O,4BACR0O,EAAMsR,iCACNlvB,KAAKo3B,oCACLp3B,KAAKs4B,2CAAwCn0B,KAGhD,CACD3B,IAAK,iDACLiB,MAAO,SAAwDma,GACzD5d,KAAKsO,0BAA0BsP,IAOjC5d,KAAKu4B,iCAAiC3a,EAAMwR,oBAAqBxR,EAAM4a,aA9Y7D5B,EAAiCh1B,EAAYH,UAAWiB,GACpEC,GAAai0B,EAAiCh1B,EAAae,GAkZxDw0B,EA/X0C,GA6cnD,IAAIvnB,EAA0BxP,EAAoB,MAGlD,SAASgB,EAAQC,GAWf,OATED,EADoB,oBAAXE,QAAoD,kBAApBA,OAAOC,SACtC,SAAiBF,GACzB,cAAcA,GAGN,SAAiBA,GACzB,OAAOA,GAAyB,oBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,GAItHD,EAAQC,GAGjB,SAAS+3B,EAAwBntB,EAAKlL,GACpC,OAiCF,SAAkCkL,GAChC,GAAIzD,MAAMC,QAAQwD,GAAM,OAAOA,EAlCxBotB,CAAyBptB,IAOlC,SAAwCA,EAAKlL,GAC3C,IAAIoL,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKnI,EAET,IACE,IAAK,IAAiCoI,EAA7B7D,EAAKuD,EAAI3K,OAAOC,cAAmB6K,GAAMG,EAAK7D,EAAGE,QAAQC,QAChEsD,EAAKlM,KAAKsM,EAAG9I,QAET1C,GAAKoL,EAAKlK,SAAWlB,GAH8CqL,GAAK,IAK9E,MAAOI,GACPH,GAAK,EACLC,EAAKE,EACL,QACA,IACOJ,GAAsB,MAAhB1D,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAI2D,EAAI,MAAMC,GAIlB,OAAOH,EA9BiCmtB,CAA+BrtB,EAAKlL,IAG9E,WACE,MAAM,IAAIc,UAAU,wDAJ8D03B,GA2CpF,SAASC,EAA2Bz3B,EAAQC,GAC1C,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAMC,OAAQlB,IAAK,CACrC,IAAImB,EAAaF,EAAMjB,GACvBmB,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDC,OAAOC,eAAeR,EAAQG,EAAWM,IAAKN,IAgBlD,IAEI0sB,EAAmC,WAKrC,SAASvV,EAAUogB,EAAyB32B,IAnC9C,SAAkCnB,EAAUC,GAC1C,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,qCAkCpB63B,CAAyB15B,KAAMqZ,GAE/BrZ,KAAK8C,SAAW,IAAI6P,EAA8B,EAAE7P,GAEpD,IACI62B,EAAyBP,EADDp5B,KAAK45B,yBAAyBH,GACkB,GACxE/rB,EAAiBisB,EAAuB,GACxCzL,EAAqByL,EAAuB,GAEhD35B,KAAK0N,eAAiBA,EACtB1N,KAAKkuB,mBAAqBA,EAC1BluB,KAAK2gB,QA/BT,IAA+B/e,EAAac,EAAYC,EA0dtD,OA1d6Bf,EAkCPyX,GAlCoB3W,EAkCT,CAAC,CAChCF,IAAK,2BACLiB,MAAO,SAAkCg2B,GAEvC,IAAI/rB,EACAwgB,EAwBJ,OAtBIuL,IACuC,WAArCr4B,EAAQq4B,IACV/rB,EAAiB+rB,EAAwB/rB,eACzCwgB,EAAqBuL,EAAwBvL,oBAE7CxgB,EAAiB+rB,GAIjB/rB,IAAmB1N,KAAK8C,SAAS6B,WAAW+I,KAC9CA,OAAiBvJ,GAYZ,CAACuJ,EAAgBwgB,KAQzB,CACD1rB,IAAK,QACLiB,MAAO,SAAeoE,GACpB,IAAIgyB,EAAqB75B,KAAK85B,OAAOruB,MAAM5D,EAAM7H,KAAK4d,OAClDqR,EAAS4K,EAAmB5K,OAGhC,GAFsB4K,EAAmBvC,gBAGvCt3B,KAAK+5B,gBAAkB,SAClB,GAAI9K,EAAQ,CAOjB,IAAIyB,EAMJ,GAZA1wB,KAAKg6B,8BAEDh6B,KAAK4d,MAAM1O,2BACblP,KAAK+a,UAAUsZ,0BAA0Br0B,KAAK4d,OAK5C5d,KAAK8C,SAASsrB,6BAChBsC,EAA0B1wB,KAAK+a,UAAUlU,OAAOooB,EAAQjvB,KAAK4d,aAG/BzZ,IAA5BusB,GAEE1wB,KAAK85B,OAAOG,mCAAmCj6B,KAAK4d,OAAQ,CAC9D5d,KAAKg6B,8BAEL,IAAItB,EAAiB14B,KAAK4d,MAAMwR,oBAE5BsJ,IACFhI,EAA0B1wB,KAAK+a,UAAUlU,OAAO6xB,EAAgB14B,KAAK4d,QAK3E5d,KAAK+5B,gBAAkBrJ,EAA0B1wB,KAAKk6B,cAAcxJ,GAA2B1wB,KAAKm6B,wBAGtG,OAAOn6B,KAAK+5B,kBAEb,CACDv3B,IAAK,QACLiB,MAAO,WACL,IAAIuC,EAAQhG,KAoCZ,OAlCAA,KAAK4d,MAAQ,IAAIiR,EAAe,CAC9BtN,gBAAiB,SAAyBrd,GAMxC8B,EAAM9B,QAAUA,GAElB4qB,oBAAqB,SAA6B5qB,EAASG,GACzD2B,EAAMlD,SAAS2B,oBAAoBP,EAASG,GAE5C2B,EAAM+U,UAAU4F,MAAM3a,EAAMlD,SAAS8B,cAAeoB,EAAM4X,OAE1D5X,EAAM8zB,OAAOnZ,MAAM3a,EAAMlD,SAAS8B,kBAGtC5E,KAAK+a,UAAY,IAAI4Y,EAAsC,CACzD/V,MAAO5d,KAAK4d,MACZ9a,SAAU9C,KAAK8C,WAEjB9C,KAAK85B,OAAS,IAAI5C,EAAgC,CAChDxpB,eAAgB1N,KAAK0N,eACrBwgB,mBAAoBluB,KAAKkuB,mBACzBprB,SAAU9C,KAAK8C,SACf8a,MAAO5d,KAAK4d,MACZwZ,kCAAmC,WACjCpxB,EAAMg0B,8BAENh0B,EAAM+U,UAAU4F,MAAM3a,EAAMlD,SAAS8B,cAAeoB,EAAM4X,UAG9D5d,KAAK4d,MAAM+C,MAAM3gB,KAAK0N,eAAgB1N,KAAKkuB,oBAC3CluB,KAAK+5B,gBAAkB,GAChB/5B,OAQR,CACDwC,IAAK,kBACLiB,MAAO,WACL,OAAOzD,KAAK4d,MAAM5L,gBASnB,CACDxP,IAAK,iBACLiB,MAAO,WASL,GAAIzD,KAAKo6B,kBACP,OAAOp6B,KAAK4d,MAAMvZ,cAIrB,CACD7B,IAAK,wBACLiB,MAAO,WACL,OAAOzD,KAAKq6B,mBASb,CACD73B,IAAK,aACLiB,MAAO,WAGL,GAFazD,KAAK4d,MAAMqR,OAGtB,OAAOjvB,KAAKs6B,gBASf,CACD93B,IAAK,cACLiB,MAAO,WACL,IAAIS,EAAUlE,KAAK4d,MAAM1Z,QAWzB,OAAOA,IAER,CACD1B,IAAK,8BACLiB,MAAO,WAiBAzD,KAAK4d,MAAM1Z,UAAWlE,KAAKu6B,iCAC9Bv6B,KAAKw6B,wBAIR,CACDh4B,IAAK,gBACLiB,MAAO,SAAuBitB,GAC5B,IAAI4D,EAASt0B,KAEb,GAAIA,KAAKo6B,kBAAmB,CAC1B,IAAIvoB,EAAS,SAAgBhK,GAC3B,OAAOysB,EAAOvZ,UAAUib,+CAA+C1B,EAAO1W,MAAO,CACnFkY,UAASjuB,IACNA,GAGHxD,EAAcrE,KAAK4d,MAAMvZ,YAE7B,OAQOwN,EARFxN,EAIAqsB,EAIS,GAAGxtB,OAAOmB,EAAa,KAAKnB,OAAOwtB,GAHjCrsB,EAJA,GAAGnB,OAAOlD,KAAK4d,MAAMqY,wCAUvC,OAAOvF,IAER,CACDluB,IAAK,0CACLiB,MAAO,WACL,IAAIka,EAAc3d,KAAK4d,MACnB1O,EAA4ByO,EAAYzO,0BACxCogB,EAA+C3R,EAAY2R,6CAC3D/oB,EAAiBoX,EAAYpX,eAC7ByD,EAASkF,EACT2C,EAASyd,GAAgD/oB,EAM7D,OAJIsL,IACF7H,EAAS6H,EAAS7H,GAGbA,IAER,CACDxH,IAAK,wBACLiB,MAAO,WACL,IAAI4rB,EAAwCrvB,KAAK4d,MAAMyR,sCACvD,OAAOrvB,KAAKk6B,cAAc7K,EAAwCrvB,KAAKy6B,0CAA4Cz6B,KAAK4d,MAAMwR,uBAE/H,CACD5sB,IAAK,0BACLiB,MAAO,WACL,IAAIuG,EAAShK,KAAKm6B,wBAElB,GAAInwB,EACF,OAAOA,EAAOK,QAAQ,UAAWqlB,KAGpC,CACDltB,IAAK,gCACLiB,MAAO,WACL,IAAIY,EAAcrE,KAAK4d,MAAMvZ,YACzBE,EAAevE,KAAK8C,SAASwB,8BAA8BD,GAC/D,OAAOE,GAAgBA,EAAatC,OAAS,IAK9C,CACDO,IAAK,sBACLiB,MAAO,WACLzD,KAAK4d,MAAM2R,WAAWjtB,OAAOsN,EAAyC,EAAhDtN,CAAmDtC,KAAKo6B,kBAAoBp6B,KAAK4d,MAAMvZ,YAAcrE,KAAKkuB,mBAAoBluB,KAAK4d,MAAM1O,0BAA2BlP,KAAK8C,aAqBhM,CACDN,IAAK,iBACLiB,MAAO,WACL,IAAI8a,EAAeve,KAAK4d,MACpBqR,EAAS1Q,EAAa0Q,OACtB5qB,EAAcka,EAAala,YAC3BH,EAAUqa,EAAara,QACvBgL,EAA4BqP,EAAarP,0BAE7C,GAAK+f,EAIL,OAAIjvB,KAAKo6B,kBACH/1B,EACK,IAAMA,EAAc6K,EAEpB,IAAM+f,EAGX/qB,GAAWG,EAEN,KADYH,EAAUlE,KAAK8C,SAASqE,qBAAuB9C,GACtC6K,OAF9B,IAaH,CACD1M,IAAK,YACLiB,MAAO,WACL,IAAIkgB,EAAe3jB,KAAK4d,MACpB1O,EAA4ByU,EAAazU,0BACzC9E,EAAcuZ,EAAavZ,YAC3B/F,EAAcsf,EAAatf,YAI3BH,EAAUlE,KAAKs6B,cAEnB,GAAKprB,IAIAhL,GAAYG,GAAjB,CAIA,IAAI+W,EAAc,IAAIwR,EAA6B,EAAE1oB,GAAWG,EAAa6K,EAA2BlP,KAAK8C,SAASA,UAOtH,OALIsH,IACFgR,EAAYhR,YAAcA,GAIrBgR,KAQR,CACD5Y,IAAK,aACLiB,MAAO,WACL,IAAI2X,EAAcpb,KAAKqb,YAEvB,QAAKD,GAIEA,EAAYsf,eAQpB,CACDl4B,IAAK,UACLiB,MAAO,WACL,IAAI2X,EAAcpb,KAAKqb,YAEvB,QAAKD,GAIEA,EAAYuf,YAQpB,CACDn4B,IAAK,oBACLiB,MAAO,WACL,OAAOzD,KAAK4d,MAAM1O,4BAOnB,CACD1M,IAAK,WACLiB,MAAO,WACL,OAAQzD,KAAK4d,MAAM5L,cAAgB,IAAM,IAAMhS,KAAK4d,MAAMqR,SAO3D,CACDzsB,IAAK,cACLiB,MAAO,WACL,OAAOzD,KAAK+a,UAAUkO,YAAYjpB,KAAK4d,QAAU5d,KAAK46B,2BAA6B,QArdvEpB,EAA2B53B,EAAYH,UAAWiB,GAC9DC,GAAa62B,EAA2B53B,EAAae,GAwdlD0W,EA5c8B,IAmdjC,KACA,SAAUnZ,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOwN,KAC9E,IAAIktB,EAAiDz6B,EAAoB,MACrE06B,EAA4D16B,EAAoB,MAGzG,SAASuN,IACP,IAAIotB,EAAsBz4B,OAAOu4B,EAA2E,EAAlFv4B,CAAqF4K,WAC3GrF,EAAOkzB,EAAoBlzB,KAC3B6D,EAAUqvB,EAAoBrvB,QAC9B5I,EAAWi4B,EAAoBj4B,SAEnC,OAAOR,OAAOw4B,EAA2E,EAAlFx4B,CAAqFuF,EAAM6D,EAAS5I,KAKvG,KACA,SAAU5C,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO66B,KACpE56B,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO86B,KAC9E,IAAItpB,EAAsDvR,EAAoB,MACnG,SAASgB,EAAQC,GAWf,OATED,EADoB,oBAAXE,QAAoD,kBAApBA,OAAOC,SACtC,SAAiBF,GACzB,cAAcA,GAGN,SAAiBA,GACzB,OAAOA,GAAyB,oBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,GAItHD,EAAQC,GAajB,SAAS25B,EAAkBv3B,EAAOoD,EAAQ/D,GAQxC,GAPKA,GACqB,WAApB1B,EAAQyF,KACV/D,EAAW+D,EACXA,EAAS,aAIRpD,EACH,MAAO,GAGT,IAAI2X,EAAc9Y,OAAOqP,EAAqE,EAA5ErP,CAA+EmB,EAAOX,GAExG,IAAKsY,EACH,MAAO,GAKT,OAAQvU,GACN,IAAK,WACHA,EAAS,WACT,MAEF,IAAK,gBACHA,EAAS,gBAIb,OAAOuU,EAAYvU,OAAOA,GAE5B,SAASo0B,EAAsBx3B,EAAOX,GACpC,OAAOk4B,EAAkBv3B,EAAO,gBAAiBX,KAK7C,KACA,SAAU5C,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOsS,KAC9E,IAAIooB,EAAiDz6B,EAAoB,MACrE06B,EAA4D16B,EAAoB,MACzG,SAASqN,EAAc1L,GACrB,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAAyB,MAAhBD,UAAUnM,GAAamM,UAAUnM,GAAK,GAC/CqM,EAAU9K,OAAOa,KAAKgK,GAEkB,oBAAjC7K,OAAO+K,wBAChBD,EAAUA,EAAQlK,OAAOZ,OAAO+K,sBAAsBF,GAAQzJ,QAAO,SAAU4J,GAC7E,OAAOhL,OAAOiL,yBAAyBJ,EAAQG,GAAKnL,gBAIxDiL,EAAQI,SAAQ,SAAUhL,GACxBuJ,EAAgBhK,EAAQS,EAAK2K,EAAO3K,OAIxC,OAAOT,EAGT,SAASgK,EAAgB1K,EAAKmB,EAAKiB,GAYjC,OAXIjB,KAAOnB,EACTiB,OAAOC,eAAelB,EAAKmB,EAAK,CAC9BiB,MAAOA,EACPtB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZhB,EAAImB,GAAOiB,EAGNpC,EAKT,SAASoR,IACP,IAAIsoB,EAAsBz4B,OAAOu4B,EAA2E,EAAlFv4B,CAAqF4K,WAC3GrF,EAAOkzB,EAAoBlzB,KAC3B6D,EAAUqvB,EAAoBrvB,QAC9B5I,EAAWi4B,EAAoBj4B,SAEnC4I,EAAU+B,EAAc,GAAI/B,EAAS,CACnC6hB,SAAS,IAEX,IAAInS,EAAc9Y,OAAOw4B,EAA2E,EAAlFx4B,CAAqFuF,EAAM6D,EAAS5I,GACtH,OAAOsY,GAAeA,EAAYuf,YAAa,IAK3C,KACA,SAAUz6B,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAO8P,KAC9E,IAAI4qB,EAAiDz6B,EAAoB,MACrE06B,EAA4D16B,EAAoB,MACzG,SAASqN,EAAc1L,GACrB,IAAK,IAAIhB,EAAI,EAAGA,EAAImM,UAAUjL,OAAQlB,IAAK,CACzC,IAAIoM,EAAyB,MAAhBD,UAAUnM,GAAamM,UAAUnM,GAAK,GAC/CqM,EAAU9K,OAAOa,KAAKgK,GAEkB,oBAAjC7K,OAAO+K,wBAChBD,EAAUA,EAAQlK,OAAOZ,OAAO+K,sBAAsBF,GAAQzJ,QAAO,SAAU4J,GAC7E,OAAOhL,OAAOiL,yBAAyBJ,EAAQG,GAAKnL,gBAIxDiL,EAAQI,SAAQ,SAAUhL,GACxBuJ,EAAgBhK,EAAQS,EAAK2K,EAAO3K,OAIxC,OAAOT,EAGT,SAASgK,EAAgB1K,EAAKmB,EAAKiB,GAYjC,OAXIjB,KAAOnB,EACTiB,OAAOC,eAAelB,EAAKmB,EAAK,CAC9BiB,MAAOA,EACPtB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZhB,EAAImB,GAAOiB,EAGNpC,EAKT,SAAS4O,IACP,IAAI8qB,EAAsBz4B,OAAOu4B,EAA2E,EAAlFv4B,CAAqF4K,WAC3GrF,EAAOkzB,EAAoBlzB,KAC3B6D,EAAUqvB,EAAoBrvB,QAC9B5I,EAAWi4B,EAAoBj4B,SAEnC4I,EAAU+B,EAAc,GAAI/B,EAAS,CACnC6hB,SAAS,IAEX,IAAInS,EAAc9Y,OAAOw4B,EAA2E,EAAlFx4B,CAAqFuF,EAAM6D,EAAS5I,GACtH,OAAOsY,GAAeA,EAAYsf,eAAgB,IAK9C,KACA,SAAUx6B,EAAQC,EAAqBC,GAE7C,aAC+BA,EAAoBC,EAAEF,EAAqB,KAAK,WAAa,OAAOuS,KAC9E,IAAIjI,EAAyCrK,EAAoB,MAEtF,SAASsS,EAAa5P,GACpB,OAAO,IAAI2H,EAAwD,EAAE3H,GAAU4P"},"input":"(this[\"webpackJsonplightence-admin\"] = this[\"webpackJsonplightence-admin\"] || []).push([[0],{\n\n/***/ 2342:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ Metadata; });\n__webpack_require__.d(__webpack_exports__, \"b\", function() { return /* binding */ getCountryCallingCode; });\n__webpack_require__.d(__webpack_exports__, \"c\", function() { return /* binding */ isSupportedCountry; });\n\n// UNUSED EXPORTS: validateMetadata, getExtPrefix\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/tools/semver-compare.js\n// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\n/* harmony default export */ var semver_compare = (function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n});\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/metadata.js\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\n\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // Is always present.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nfunction validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nfunction getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nfunction getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nfunction isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (semver_compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (semver_compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n\n/***/ }),\n\n/***/ 2347:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return MIN_LENGTH_FOR_NSN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return MAX_LENGTH_FOR_NSN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MAX_LENGTH_COUNTRY_CODE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return VALID_DIGITS; });\n/* unused harmony export WHITESPACE */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return VALID_PUNCTUATION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return PLUS_CHARS; });\n// The minimum length of the national significant number.\nvar MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nvar MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nvar MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nvar VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nvar WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nvar VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nvar PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n\n/***/ }),\n\n/***/ 2353:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return matchesEntirely; });\n/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nfunction matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n\n/***/ }),\n\n/***/ 2361:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export DIGITS */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return parseDigit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return parseDigits; });\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nvar DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nfunction parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nfunction parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n\n/***/ }),\n\n/***/ 2369:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ checkNumberLength; });\n\n// UNUSED EXPORTS: checkNumberLengthForType\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/helpers/mergeArrays.js\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nfunction mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js\n\nfunction checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nfunction checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n\n/***/ }),\n\n/***/ 2379:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return FIRST_GROUP_PATTERN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return formatNationalNumberUsingFormat; });\n/* harmony import */ var _applyInternationalSeparatorStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2415);\n // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nvar FIRST_GROUP_PATTERN = /(\\$\\d)/;\nfunction formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return Object(_applyInternationalSeparatorStyle__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n\n/***/ }),\n\n/***/ 2380:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return stripIddPrefix; });\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2342);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2347);\n\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + _constants__WEBPACK_IMPORTED_MODULE_1__[/* VALID_DIGITS */ \"e\"] + '])');\nfunction stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new _metadata__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n\n/***/ }),\n\n/***/ 2381:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return extractCountryCallingCodeFromInternationalNumberWithoutPlusSign; });\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2342);\n/* harmony import */ var _matchesEntirely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2353);\n/* harmony import */ var _extractNationalNumber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2417);\n/* harmony import */ var _checkNumberLength__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2369);\n\n\n\n\n\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nfunction extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? Object(_metadata__WEBPACK_IMPORTED_MODULE_0__[/* getCountryCallingCode */ \"b\"])(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new _metadata__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = Object(_extractNationalNumber__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"])(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = Object(_extractNationalNumber__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"])(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!Object(_matchesEntirely__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(nationalNumber, metadata.nationalNumberPattern()) && Object(_matchesEntirely__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || Object(_checkNumberLength__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"])(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n\n/***/ }),\n\n/***/ 2382:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getNumberType; });\n/* unused harmony export isNumberTypeEqualTo */\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2342);\n/* harmony import */ var _matchesEntirely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2353);\n\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nfunction getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new _metadata__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!Object(_matchesEntirely__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {\n    var type = _NON_FIXED_LINE_PHONE[_i];\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nfunction isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return Object(_matchesEntirely__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(nationalNumber, type.pattern());\n}\n\n/***/ }),\n\n/***/ 2383:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export default */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return normalizeArguments; });\n/* harmony import */ var _parsePhoneNumber___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2434);\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n\nfunction parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return Object(_parsePhoneNumber___WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(text, options, metadata);\n}\nfunction normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n\n/***/ }),\n\n/***/ 2384:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return parsePhoneNumberFromString; });\n/* harmony import */ var _parsePhoneNumber___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2434);\n/* harmony import */ var _ParseError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2426);\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2342);\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n\n\n\nfunction parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !Object(_metadata__WEBPACK_IMPORTED_MODULE_2__[/* isSupportedCountry */ \"c\"])(options.defaultCountry, metadata)) {\n    options = _objectSpread({}, options, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return Object(_parsePhoneNumber___WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof _ParseError__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"]) {//\n    } else {\n      throw error;\n    }\n  }\n}\n\n/***/ }),\n\n/***/ 2414:\n/***/ (function(module) {\n\nmodule.exports = JSON.parse(\"{\\\"version\\\":4,\\\"country_calling_codes\\\":{\\\"1\\\":[\\\"US\\\",\\\"AG\\\",\\\"AI\\\",\\\"AS\\\",\\\"BB\\\",\\\"BM\\\",\\\"BS\\\",\\\"CA\\\",\\\"DM\\\",\\\"DO\\\",\\\"GD\\\",\\\"GU\\\",\\\"JM\\\",\\\"KN\\\",\\\"KY\\\",\\\"LC\\\",\\\"MP\\\",\\\"MS\\\",\\\"PR\\\",\\\"SX\\\",\\\"TC\\\",\\\"TT\\\",\\\"VC\\\",\\\"VG\\\",\\\"VI\\\"],\\\"7\\\":[\\\"RU\\\",\\\"KZ\\\"],\\\"20\\\":[\\\"EG\\\"],\\\"27\\\":[\\\"ZA\\\"],\\\"30\\\":[\\\"GR\\\"],\\\"31\\\":[\\\"NL\\\"],\\\"32\\\":[\\\"BE\\\"],\\\"33\\\":[\\\"FR\\\"],\\\"34\\\":[\\\"ES\\\"],\\\"36\\\":[\\\"HU\\\"],\\\"39\\\":[\\\"IT\\\",\\\"VA\\\"],\\\"40\\\":[\\\"RO\\\"],\\\"41\\\":[\\\"CH\\\"],\\\"43\\\":[\\\"AT\\\"],\\\"44\\\":[\\\"GB\\\",\\\"GG\\\",\\\"IM\\\",\\\"JE\\\"],\\\"45\\\":[\\\"DK\\\"],\\\"46\\\":[\\\"SE\\\"],\\\"47\\\":[\\\"NO\\\",\\\"SJ\\\"],\\\"48\\\":[\\\"PL\\\"],\\\"49\\\":[\\\"DE\\\"],\\\"51\\\":[\\\"PE\\\"],\\\"52\\\":[\\\"MX\\\"],\\\"53\\\":[\\\"CU\\\"],\\\"54\\\":[\\\"AR\\\"],\\\"55\\\":[\\\"BR\\\"],\\\"56\\\":[\\\"CL\\\"],\\\"57\\\":[\\\"CO\\\"],\\\"58\\\":[\\\"VE\\\"],\\\"60\\\":[\\\"MY\\\"],\\\"61\\\":[\\\"AU\\\",\\\"CC\\\",\\\"CX\\\"],\\\"62\\\":[\\\"ID\\\"],\\\"63\\\":[\\\"PH\\\"],\\\"64\\\":[\\\"NZ\\\"],\\\"65\\\":[\\\"SG\\\"],\\\"66\\\":[\\\"TH\\\"],\\\"81\\\":[\\\"JP\\\"],\\\"82\\\":[\\\"KR\\\"],\\\"84\\\":[\\\"VN\\\"],\\\"86\\\":[\\\"CN\\\"],\\\"90\\\":[\\\"TR\\\"],\\\"91\\\":[\\\"IN\\\"],\\\"92\\\":[\\\"PK\\\"],\\\"93\\\":[\\\"AF\\\"],\\\"94\\\":[\\\"LK\\\"],\\\"95\\\":[\\\"MM\\\"],\\\"98\\\":[\\\"IR\\\"],\\\"211\\\":[\\\"SS\\\"],\\\"212\\\":[\\\"MA\\\",\\\"EH\\\"],\\\"213\\\":[\\\"DZ\\\"],\\\"216\\\":[\\\"TN\\\"],\\\"218\\\":[\\\"LY\\\"],\\\"220\\\":[\\\"GM\\\"],\\\"221\\\":[\\\"SN\\\"],\\\"222\\\":[\\\"MR\\\"],\\\"223\\\":[\\\"ML\\\"],\\\"224\\\":[\\\"GN\\\"],\\\"225\\\":[\\\"CI\\\"],\\\"226\\\":[\\\"BF\\\"],\\\"227\\\":[\\\"NE\\\"],\\\"228\\\":[\\\"TG\\\"],\\\"229\\\":[\\\"BJ\\\"],\\\"230\\\":[\\\"MU\\\"],\\\"231\\\":[\\\"LR\\\"],\\\"232\\\":[\\\"SL\\\"],\\\"233\\\":[\\\"GH\\\"],\\\"234\\\":[\\\"NG\\\"],\\\"235\\\":[\\\"TD\\\"],\\\"236\\\":[\\\"CF\\\"],\\\"237\\\":[\\\"CM\\\"],\\\"238\\\":[\\\"CV\\\"],\\\"239\\\":[\\\"ST\\\"],\\\"240\\\":[\\\"GQ\\\"],\\\"241\\\":[\\\"GA\\\"],\\\"242\\\":[\\\"CG\\\"],\\\"243\\\":[\\\"CD\\\"],\\\"244\\\":[\\\"AO\\\"],\\\"245\\\":[\\\"GW\\\"],\\\"246\\\":[\\\"IO\\\"],\\\"247\\\":[\\\"AC\\\"],\\\"248\\\":[\\\"SC\\\"],\\\"249\\\":[\\\"SD\\\"],\\\"250\\\":[\\\"RW\\\"],\\\"251\\\":[\\\"ET\\\"],\\\"252\\\":[\\\"SO\\\"],\\\"253\\\":[\\\"DJ\\\"],\\\"254\\\":[\\\"KE\\\"],\\\"255\\\":[\\\"TZ\\\"],\\\"256\\\":[\\\"UG\\\"],\\\"257\\\":[\\\"BI\\\"],\\\"258\\\":[\\\"MZ\\\"],\\\"260\\\":[\\\"ZM\\\"],\\\"261\\\":[\\\"MG\\\"],\\\"262\\\":[\\\"RE\\\",\\\"YT\\\"],\\\"263\\\":[\\\"ZW\\\"],\\\"264\\\":[\\\"NA\\\"],\\\"265\\\":[\\\"MW\\\"],\\\"266\\\":[\\\"LS\\\"],\\\"267\\\":[\\\"BW\\\"],\\\"268\\\":[\\\"SZ\\\"],\\\"269\\\":[\\\"KM\\\"],\\\"290\\\":[\\\"SH\\\",\\\"TA\\\"],\\\"291\\\":[\\\"ER\\\"],\\\"297\\\":[\\\"AW\\\"],\\\"298\\\":[\\\"FO\\\"],\\\"299\\\":[\\\"GL\\\"],\\\"350\\\":[\\\"GI\\\"],\\\"351\\\":[\\\"PT\\\"],\\\"352\\\":[\\\"LU\\\"],\\\"353\\\":[\\\"IE\\\"],\\\"354\\\":[\\\"IS\\\"],\\\"355\\\":[\\\"AL\\\"],\\\"356\\\":[\\\"MT\\\"],\\\"357\\\":[\\\"CY\\\"],\\\"358\\\":[\\\"FI\\\",\\\"AX\\\"],\\\"359\\\":[\\\"BG\\\"],\\\"370\\\":[\\\"LT\\\"],\\\"371\\\":[\\\"LV\\\"],\\\"372\\\":[\\\"EE\\\"],\\\"373\\\":[\\\"MD\\\"],\\\"374\\\":[\\\"AM\\\"],\\\"375\\\":[\\\"BY\\\"],\\\"376\\\":[\\\"AD\\\"],\\\"377\\\":[\\\"MC\\\"],\\\"378\\\":[\\\"SM\\\"],\\\"380\\\":[\\\"UA\\\"],\\\"381\\\":[\\\"RS\\\"],\\\"382\\\":[\\\"ME\\\"],\\\"383\\\":[\\\"XK\\\"],\\\"385\\\":[\\\"HR\\\"],\\\"386\\\":[\\\"SI\\\"],\\\"387\\\":[\\\"BA\\\"],\\\"389\\\":[\\\"MK\\\"],\\\"420\\\":[\\\"CZ\\\"],\\\"421\\\":[\\\"SK\\\"],\\\"423\\\":[\\\"LI\\\"],\\\"500\\\":[\\\"FK\\\"],\\\"501\\\":[\\\"BZ\\\"],\\\"502\\\":[\\\"GT\\\"],\\\"503\\\":[\\\"SV\\\"],\\\"504\\\":[\\\"HN\\\"],\\\"505\\\":[\\\"NI\\\"],\\\"506\\\":[\\\"CR\\\"],\\\"507\\\":[\\\"PA\\\"],\\\"508\\\":[\\\"PM\\\"],\\\"509\\\":[\\\"HT\\\"],\\\"590\\\":[\\\"GP\\\",\\\"BL\\\",\\\"MF\\\"],\\\"591\\\":[\\\"BO\\\"],\\\"592\\\":[\\\"GY\\\"],\\\"593\\\":[\\\"EC\\\"],\\\"594\\\":[\\\"GF\\\"],\\\"595\\\":[\\\"PY\\\"],\\\"596\\\":[\\\"MQ\\\"],\\\"597\\\":[\\\"SR\\\"],\\\"598\\\":[\\\"UY\\\"],\\\"599\\\":[\\\"CW\\\",\\\"BQ\\\"],\\\"670\\\":[\\\"TL\\\"],\\\"672\\\":[\\\"NF\\\"],\\\"673\\\":[\\\"BN\\\"],\\\"674\\\":[\\\"NR\\\"],\\\"675\\\":[\\\"PG\\\"],\\\"676\\\":[\\\"TO\\\"],\\\"677\\\":[\\\"SB\\\"],\\\"678\\\":[\\\"VU\\\"],\\\"679\\\":[\\\"FJ\\\"],\\\"680\\\":[\\\"PW\\\"],\\\"681\\\":[\\\"WF\\\"],\\\"682\\\":[\\\"CK\\\"],\\\"683\\\":[\\\"NU\\\"],\\\"685\\\":[\\\"WS\\\"],\\\"686\\\":[\\\"KI\\\"],\\\"687\\\":[\\\"NC\\\"],\\\"688\\\":[\\\"TV\\\"],\\\"689\\\":[\\\"PF\\\"],\\\"690\\\":[\\\"TK\\\"],\\\"691\\\":[\\\"FM\\\"],\\\"692\\\":[\\\"MH\\\"],\\\"850\\\":[\\\"KP\\\"],\\\"852\\\":[\\\"HK\\\"],\\\"853\\\":[\\\"MO\\\"],\\\"855\\\":[\\\"KH\\\"],\\\"856\\\":[\\\"LA\\\"],\\\"880\\\":[\\\"BD\\\"],\\\"886\\\":[\\\"TW\\\"],\\\"960\\\":[\\\"MV\\\"],\\\"961\\\":[\\\"LB\\\"],\\\"962\\\":[\\\"JO\\\"],\\\"963\\\":[\\\"SY\\\"],\\\"964\\\":[\\\"IQ\\\"],\\\"965\\\":[\\\"KW\\\"],\\\"966\\\":[\\\"SA\\\"],\\\"967\\\":[\\\"YE\\\"],\\\"968\\\":[\\\"OM\\\"],\\\"970\\\":[\\\"PS\\\"],\\\"971\\\":[\\\"AE\\\"],\\\"972\\\":[\\\"IL\\\"],\\\"973\\\":[\\\"BH\\\"],\\\"974\\\":[\\\"QA\\\"],\\\"975\\\":[\\\"BT\\\"],\\\"976\\\":[\\\"MN\\\"],\\\"977\\\":[\\\"NP\\\"],\\\"992\\\":[\\\"TJ\\\"],\\\"993\\\":[\\\"TM\\\"],\\\"994\\\":[\\\"AZ\\\"],\\\"995\\\":[\\\"GE\\\"],\\\"996\\\":[\\\"KG\\\"],\\\"998\\\":[\\\"UZ\\\"]},\\\"countries\\\":{\\\"AC\\\":[\\\"247\\\",\\\"00\\\",\\\"(?:[01589]\\\\\\\\d|[46])\\\\\\\\d{4}\\\",[5,6]],\\\"AD\\\":[\\\"376\\\",\\\"00\\\",\\\"(?:1|6\\\\\\\\d)\\\\\\\\d{7}|[135-9]\\\\\\\\d{5}\\\",[6,8,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2\\\",[\\\"[135-9]\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"1\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"6\\\"]]]],\\\"AE\\\":[\\\"971\\\",\\\"00\\\",\\\"(?:[4-7]\\\\\\\\d|9[0-689])\\\\\\\\d{7}|800\\\\\\\\d{2,9}|[2-4679]\\\\\\\\d{7}\\\",[5,6,7,8,9,10,11,12],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2,9})\\\",\\\"$1 $2\\\",[\\\"60|8\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[236]|[479][2-8]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{5})\\\",\\\"$1 $2 $3\\\",[\\\"[479]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"5\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"AF\\\":[\\\"93\\\",\\\"00\\\",\\\"[2-7]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[2-7]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"AG\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:268|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([457]\\\\\\\\d{6})$\\\",\\\"268$1\\\",0,\\\"268\\\"],\\\"AI\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:264|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2457]\\\\\\\\d{6})$\\\",\\\"264$1\\\",0,\\\"264\\\"],\\\"AL\\\":[\\\"355\\\",\\\"00\\\",\\\"(?:700\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{3}|8\\\\\\\\d{5,7}|(?:[2-5]|6\\\\\\\\d)\\\\\\\\d{7}\\\",[6,7,8,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2\\\",[\\\"80|9\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"4[2-6]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[2358][2-5]|4\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"[23578]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"6\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"AM\\\":[\\\"374\\\",\\\"00\\\",\\\"(?:[1-489]\\\\\\\\d|55|60|77)\\\\\\\\d{6}\\\",[8],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[89]0\\\"],\\\"0 $1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"2|3[12]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"1|47\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"[3-9]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"AO\\\":[\\\"244\\\",\\\"00\\\",\\\"[29]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[29]\\\"]]]],\\\"AR\\\":[\\\"54\\\",\\\"00\\\",\\\"(?:11|[89]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{8}|[2368]\\\\\\\\d{9}\\\",[10,11],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2-$3\\\",[\\\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\\\",\\\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\\\",\\\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\\\",\\\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2-$3\\\",[\\\"1\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"[68]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2-$3\\\",[\\\"[23]\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$2 15-$3-$4\\\",[\\\"9(?:2[2-469]|3[3-578])\\\",\\\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\\\",\\\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\\\",\\\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\\\",\\\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3-$4\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$2 15-$3-$4\\\",[\\\"91\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3-$4\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1-$2-$3\\\",[\\\"8\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$2 15-$3-$4\\\",[\\\"9\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3-$4\\\"]],\\\"0\\\",0,\\\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\\\",\\\"9$1\\\"],\\\"AS\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[58]\\\\\\\\d\\\\\\\\d|684|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([267]\\\\\\\\d{6})$\\\",\\\"684$1\\\",0,\\\"684\\\"],\\\"AT\\\":[\\\"43\\\",\\\"00\\\",\\\"1\\\\\\\\d{3,12}|2\\\\\\\\d{6,12}|43(?:(?:0\\\\\\\\d|5[02-9])\\\\\\\\d{3,9}|2\\\\\\\\d{4,5}|[3467]\\\\\\\\d{4}|8\\\\\\\\d{4,6}|9\\\\\\\\d{4,7})|5\\\\\\\\d{4,12}|8\\\\\\\\d{7,12}|9\\\\\\\\d{8,12}|(?:[367]\\\\\\\\d|4[0-24-9])\\\\\\\\d{4,11}\\\",[4,5,6,7,8,9,10,11,12,13],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3,12})\\\",\\\"$1 $2\\\",[\\\"1(?:11|[2-9])\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})\\\",\\\"$1 $2\\\",[\\\"517\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,5})\\\",\\\"$1 $2\\\",[\\\"5[079]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,10})\\\",\\\"$1 $2\\\",[\\\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3,9})\\\",\\\"$1 $2\\\",[\\\"[2-467]|5[2-6]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"5\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4,7})\\\",\\\"$1 $2 $3\\\",[\\\"5\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"AU\\\":[\\\"61\\\",\\\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\\\",\\\"1(?:[0-79]\\\\\\\\d{7}(?:\\\\\\\\d(?:\\\\\\\\d{2})?)?|8[0-24-9]\\\\\\\\d{7})|[2-478]\\\\\\\\d{8}|1\\\\\\\\d{4,7}\\\",[5,6,7,8,9,10,12],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})\\\",\\\"$1 $2\\\",[\\\"16\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2,4})\\\",\\\"$1 $2 $3\\\",[\\\"16\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"14|4\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[2378]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"1(?:30|[89])\\\"]]],\\\"0\\\",0,\\\"0|(183[12])\\\",0,0,0,[[\\\"(?:(?:2(?:[0-26-9]\\\\\\\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\\\\\\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\\\\\\\d|2[0-8]))\\\\\\\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\\\\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\\\\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\\\\\\\d)\\\\\\\\d{3}|9(?:[02-9]\\\\\\\\d{3}|1(?:(?:[0-58]\\\\\\\\d|6[0135-9])\\\\\\\\d|7(?:0[0-24-9]|[1-9]\\\\\\\\d)|9(?:[0-46-9]\\\\\\\\d|5[0-79])))))\\\\\\\\d{3}\\\",[9]],[\\\"4(?:83[0-38]|93[0-6])\\\\\\\\d{5}|4(?:[0-3]\\\\\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\\\\\d{6}\\\",[9]],[\\\"180(?:0\\\\\\\\d{3}|2)\\\\\\\\d{3}\\\",[7,10]],[\\\"190[0-26]\\\\\\\\d{6}\\\",[10]],0,0,0,[\\\"163\\\\\\\\d{2,6}\\\",[5,6,7,8,9]],[\\\"14(?:5(?:1[0458]|[23][458])|71\\\\\\\\d)\\\\\\\\d{4}\\\",[9]],[\\\"13(?:00\\\\\\\\d{6}(?:\\\\\\\\d{2})?|45[0-4]\\\\\\\\d{3})|13\\\\\\\\d{4}\\\",[6,8,10,12]]],\\\"0011\\\"],\\\"AW\\\":[\\\"297\\\",\\\"00\\\",\\\"(?:[25-79]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{4}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[25-9]\\\"]]]],\\\"AX\\\":[\\\"358\\\",\\\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\\\",\\\"2\\\\\\\\d{4,9}|35\\\\\\\\d{4,5}|(?:60\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{4,6}|7\\\\\\\\d{5,11}|(?:[14]\\\\\\\\d|3[0-46-9]|50)\\\\\\\\d{4,8}\\\",[5,6,7,8,9,10,11,12],0,\\\"0\\\",0,0,0,0,\\\"18\\\",0,\\\"00\\\"],\\\"AZ\\\":[\\\"994\\\",\\\"00\\\",\\\"365\\\\\\\\d{6}|(?:[124579]\\\\\\\\d|60|88)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"90\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"1[28]|2|365|46\\\",\\\"1[28]|2|365[45]|46\\\",\\\"1[28]|2|365(?:4|5[02])|46\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[13-9]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"BA\\\":[\\\"387\\\",\\\"00\\\",\\\"6\\\\\\\\d{8}|(?:[35689]\\\\\\\\d|49|70)\\\\\\\\d{6}\\\",[8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"6[1-3]|[7-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2-$3\\\",[\\\"[3-5]|6[56]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"6\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"BB\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:246|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-9]\\\\\\\\d{6})$\\\",\\\"246$1\\\",0,\\\"246\\\"],\\\"BD\\\":[\\\"880\\\",\\\"00\\\",\\\"[1-469]\\\\\\\\d{9}|8[0-79]\\\\\\\\d{7,8}|[2-79]\\\\\\\\d{8}|[2-9]\\\\\\\\d{7}|[3-9]\\\\\\\\d{6}|[57-9]\\\\\\\\d{5}\\\",[6,7,8,9,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4,6})\\\",\\\"$1-$2\\\",[\\\"31[5-8]|[459]1\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,7})\\\",\\\"$1-$2\\\",[\\\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3,6})\\\",\\\"$1-$2\\\",[\\\"[13-9]|22\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{7,8})\\\",\\\"$1-$2\\\",[\\\"2\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"BE\\\":[\\\"32\\\",\\\"00\\\",\\\"4\\\\\\\\d{8}|[1-9]\\\\\\\\d{7}\\\",[8,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"(?:80|9)0\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[239]|4[23]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[15-8]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"4\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"BF\\\":[\\\"226\\\",\\\"00\\\",\\\"[025-7]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[025-7]\\\"]]]],\\\"BG\\\":[\\\"359\\\",\\\"00\\\",\\\"[2-7]\\\\\\\\d{6,7}|[89]\\\\\\\\d{6,8}|2\\\\\\\\d{5}\\\",[6,7,8,9],[[\\\"(\\\\\\\\d)(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"2\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"43[1-6]|70[1-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"2\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2,3})\\\",\\\"$1 $2 $3\\\",[\\\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"(?:70|8)0\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3\\\",[\\\"43[1-7]|7\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[48]|9[08]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"9\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"BH\\\":[\\\"973\\\",\\\"00\\\",\\\"[136-9]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[13679]|8[047]\\\"]]]],\\\"BI\\\":[\\\"257\\\",\\\"00\\\",\\\"(?:[267]\\\\\\\\d|31)\\\\\\\\d{6}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[2367]\\\"]]]],\\\"BJ\\\":[\\\"229\\\",\\\"00\\\",\\\"[25689]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[25689]\\\"]]]],\\\"BL\\\":[\\\"590\\\",\\\"00\\\",\\\"(?:590|(?:69|80)\\\\\\\\d|976)\\\\\\\\d{6}\\\",[9],0,\\\"0\\\",0,0,0,0,0,[[\\\"590(?:2[7-9]|5[12]|87)\\\\\\\\d{4}\\\"],[\\\"69(?:0\\\\\\\\d\\\\\\\\d|1(?:2[2-9]|3[0-5]))\\\\\\\\d{4}\\\"],[\\\"80[0-5]\\\\\\\\d{6}\\\"],0,0,0,0,0,[\\\"976[01]\\\\\\\\d{5}\\\"]]],\\\"BM\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:441|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-8]\\\\\\\\d{6})$\\\",\\\"441$1\\\",0,\\\"441\\\"],\\\"BN\\\":[\\\"673\\\",\\\"00\\\",\\\"[2-578]\\\\\\\\d{6}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2-578]\\\"]]]],\\\"BO\\\":[\\\"591\\\",\\\"00(?:1\\\\\\\\d)?\\\",\\\"(?:[2-467]\\\\\\\\d\\\\\\\\d|8001)\\\\\\\\d{5}\\\",[8,9],[[\\\"(\\\\\\\\d)(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"[23]|4[46]\\\"]],[\\\"(\\\\\\\\d{8})\\\",\\\"$1\\\",[\\\"[67]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]]],\\\"0\\\",0,\\\"0(1\\\\\\\\d)?\\\"],\\\"BQ\\\":[\\\"599\\\",\\\"00\\\",\\\"(?:[34]1|7\\\\\\\\d)\\\\\\\\d{5}\\\",[7],0,0,0,0,0,0,\\\"[347]\\\"],\\\"BR\\\":[\\\"55\\\",\\\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\\\",\\\"(?:[1-46-9]\\\\\\\\d\\\\\\\\d|5(?:[0-46-9]\\\\\\\\d|5[0-24679]))\\\\\\\\d{8}|[1-9]\\\\\\\\d{9}|[3589]\\\\\\\\d{8}|[34]\\\\\\\\d{7}\\\",[8,9,10,11],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1-$2\\\",[\\\"300|4(?:0[02]|37)\\\",\\\"4(?:02|37)0|[34]00\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2,3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"(?:[358]|90)0\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2-$3\\\",[\\\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\\\"],\\\"($1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})(\\\\\\\\d{4})\\\",\\\"$1 $2-$3\\\",[\\\"[16][1-9]|[2-57-9]\\\"],\\\"($1)\\\"]],\\\"0\\\",0,\\\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\\\\\d{10,11}))?\\\",\\\"$2\\\"],\\\"BS\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:242|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([3-8]\\\\\\\\d{6})$\\\",\\\"242$1\\\",0,\\\"242\\\"],\\\"BT\\\":[\\\"975\\\",\\\"00\\\",\\\"[17]\\\\\\\\d{7}|[2-8]\\\\\\\\d{6}\\\",[7,8],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[2-68]|7[246]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"1[67]|7\\\"]]]],\\\"BW\\\":[\\\"267\\\",\\\"00\\\",\\\"(?:0800|(?:[37]|800)\\\\\\\\d)\\\\\\\\d{6}|(?:[2-6]\\\\\\\\d|90)\\\\\\\\d{5}\\\",[7,8,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"90\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[24-6]|3[15-79]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[37]\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"0\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]]]],\\\"BY\\\":[\\\"375\\\",\\\"810\\\",\\\"(?:[12]\\\\\\\\d|33|44|902)\\\\\\\\d{7}|8(?:0[0-79]\\\\\\\\d{5,7}|[1-7]\\\\\\\\d{9})|8(?:1[0-489]|[5-79]\\\\\\\\d)\\\\\\\\d{7}|8[1-79]\\\\\\\\d{6,7}|8[0-79]\\\\\\\\d{5}|8\\\\\\\\d{5}\\\",[6,7,8,9,10,11],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2\\\",[\\\"800\\\"],\\\"8 $1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2,4})\\\",\\\"$1 $2 $3\\\",[\\\"800\\\"],\\\"8 $1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2-$3\\\",[\\\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\\\",\\\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\\\"],\\\"8 0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2-$3-$4\\\",[\\\"1(?:[56]|7[467])|2[1-3]\\\"],\\\"8 0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2-$3-$4\\\",[\\\"[1-4]\\\"],\\\"8 0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[89]\\\"],\\\"8 $1\\\"]],\\\"8\\\",0,\\\"0|80?\\\",0,0,0,0,\\\"8~10\\\"],\\\"BZ\\\":[\\\"501\\\",\\\"00\\\",\\\"(?:0800\\\\\\\\d|[2-8])\\\\\\\\d{6}\\\",[7,11],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2\\\",[\\\"[2-8]\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{3})\\\",\\\"$1-$2-$3-$4\\\",[\\\"0\\\"]]]],\\\"CA\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[2-8]\\\\\\\\d|90)\\\\\\\\d{8}\\\",[10],0,\\\"1\\\",0,0,0,0,0,[[\\\"(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|6[578])|4(?:03|1[68]|3[178]|50|74)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\\\\\d{6}\\\"],[\\\"\\\"],[\\\"8(?:00|33|44|55|66|77|88)[2-9]\\\\\\\\d{6}\\\"],[\\\"900[2-9]\\\\\\\\d{6}\\\"],[\\\"52(?:3(?:[2-46-9][02-9]\\\\\\\\d|5(?:[02-46-9]\\\\\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\\\\\d|5(?:[034]\\\\\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\\\\\d)|9(?:[05-9]\\\\\\\\d|2[0-5]|49)))\\\\\\\\d{4}|52[34][2-9]1[02-9]\\\\\\\\d{4}|(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\\\\\\\d{6}\\\"],0,0,0,[\\\"600[2-9]\\\\\\\\d{6}\\\"]]],\\\"CC\\\":[\\\"61\\\",\\\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\\\",\\\"1(?:[0-79]\\\\\\\\d{8}(?:\\\\\\\\d{2})?|8[0-24-9]\\\\\\\\d{7})|[148]\\\\\\\\d{8}|1\\\\\\\\d{5,7}\\\",[6,7,8,9,10,12],0,\\\"0\\\",0,\\\"0|([59]\\\\\\\\d{7})$\\\",\\\"8$1\\\",0,0,[[\\\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\\\\\d|70[23]|959))\\\\\\\\d{3}\\\",[9]],[\\\"4(?:83[0-38]|93[0-6])\\\\\\\\d{5}|4(?:[0-3]\\\\\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\\\\\d{6}\\\",[9]],[\\\"180(?:0\\\\\\\\d{3}|2)\\\\\\\\d{3}\\\",[7,10]],[\\\"190[0-26]\\\\\\\\d{6}\\\",[10]],0,0,0,0,[\\\"14(?:5(?:1[0458]|[23][458])|71\\\\\\\\d)\\\\\\\\d{4}\\\",[9]],[\\\"13(?:00\\\\\\\\d{6}(?:\\\\\\\\d{2})?|45[0-4]\\\\\\\\d{3})|13\\\\\\\\d{4}\\\",[6,8,10,12]]],\\\"0011\\\"],\\\"CD\\\":[\\\"243\\\",\\\"00\\\",\\\"[189]\\\\\\\\d{8}|[1-68]\\\\\\\\d{6}\\\",[7,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"88\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"[1-6]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[89]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"CF\\\":[\\\"236\\\",\\\"00\\\",\\\"(?:[27]\\\\\\\\d{3}|8776)\\\\\\\\d{4}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[278]\\\"]]]],\\\"CG\\\":[\\\"242\\\",\\\"00\\\",\\\"222\\\\\\\\d{6}|(?:0\\\\\\\\d|80)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[02]\\\"]]]],\\\"CH\\\":[\\\"41\\\",\\\"00\\\",\\\"8\\\\\\\\d{11}|[2-9]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"8[047]|90\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[2-79]|81\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4 $5\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"CI\\\":[\\\"225\\\",\\\"00\\\",\\\"[02]\\\\\\\\d{9}\\\",[10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d)(\\\\\\\\d{5})\\\",\\\"$1 $2 $3 $4\\\",[\\\"2\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3 $4\\\",[\\\"0\\\"]]]],\\\"CK\\\":[\\\"682\\\",\\\"00\\\",\\\"[2-578]\\\\\\\\d{4}\\\",[5],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2\\\",[\\\"[2-578]\\\"]]]],\\\"CL\\\":[\\\"56\\\",\\\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\\\",\\\"12300\\\\\\\\d{6}|6\\\\\\\\d{9,10}|[2-9]\\\\\\\\d{8}\\\",[9,10,11],[[\\\"(\\\\\\\\d{5})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"219\\\",\\\"2196\\\"],\\\"($1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"44\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"2[1-3]\\\"],\\\"($1)\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"9[2-9]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\\\"],\\\"($1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"60|8\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"60\\\"]]]],\\\"CM\\\":[\\\"237\\\",\\\"00\\\",\\\"[26]\\\\\\\\d{8}|88\\\\\\\\d{6,7}\\\",[8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"88\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4 $5\\\",[\\\"[26]|88\\\"]]]],\\\"CN\\\":[\\\"86\\\",\\\"00|1(?:[12]\\\\\\\\d|79)\\\\\\\\d\\\\\\\\d00\\\",\\\"1[127]\\\\\\\\d{8,9}|2\\\\\\\\d{9}(?:\\\\\\\\d{2})?|[12]\\\\\\\\d{6,7}|86\\\\\\\\d{6}|(?:1[03-689]\\\\\\\\d|6)\\\\\\\\d{7,9}|(?:[3-579]\\\\\\\\d|8[0-57-9])\\\\\\\\d{6,9}\\\",[7,8,9,10,11,12],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5,6})\\\",\\\"$1 $2\\\",[\\\"(?:10|2[0-57-9])[19]\\\",\\\"(?:10|2[0-57-9])(?:10|9[56])\\\",\\\"(?:10|2[0-57-9])(?:100|9[56])\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5,6})\\\",\\\"$1 $2\\\",[\\\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\\\",\\\"(?:3(?:[157]\\\\\\\\d|35|49|9[1-68])|4(?:[17]\\\\\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\\\\\d|4[13]|5[1-5]))[19]\\\",\\\"85[23](?:10|95)|(?:3(?:[157]\\\\\\\\d|35|49|9[1-68])|4(?:[17]\\\\\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\\\\\d|4[13]|5[1-5]))(?:10|9[56])\\\",\\\"85[23](?:100|95)|(?:3(?:[157]\\\\\\\\d|35|49|9[1-68])|4(?:[17]\\\\\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\\\\\d|4[13]|5[1-5]))(?:100|9[56])\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"(?:4|80)0\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"10|2(?:[02-57-9]|1[1-9])\\\",\\\"10|2(?:[02-57-9]|1[1-9])\\\",\\\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{7,8})\\\",\\\"$1 $2\\\",[\\\"9\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"80\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[3-578]\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1[3-9]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[12]\\\"],\\\"0$1\\\",1]],\\\"0\\\",0,\\\"0|(1(?:[12]\\\\\\\\d|79)\\\\\\\\d\\\\\\\\d)\\\",0,0,0,0,\\\"00\\\"],\\\"CO\\\":[\\\"57\\\",\\\"00(?:4(?:[14]4|56)|[579])\\\",\\\"(?:(?:1\\\\\\\\d|[36])\\\\\\\\d{3}|9101)\\\\\\\\d{6}|[124-8]\\\\\\\\d{7}\\\",[8,10,11],[[\\\"(\\\\\\\\d)(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"[146][2-9]|[2578]\\\"],\\\"($1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"6\\\"],\\\"($1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"[39]\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{7})\\\",\\\"$1-$2-$3\\\",[\\\"1\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3\\\"]],\\\"0\\\",0,\\\"0([3579]|4(?:[14]4|56))?\\\"],\\\"CR\\\":[\\\"506\\\",\\\"00\\\",\\\"(?:8\\\\\\\\d|90)\\\\\\\\d{8}|(?:[24-8]\\\\\\\\d{3}|3005)\\\\\\\\d{4}\\\",[8,10],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2-7]|8[3-9]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"[89]\\\"]]],0,0,\\\"(19(?:0[0-2468]|1[09]|20|66|77|99))\\\"],\\\"CU\\\":[\\\"53\\\",\\\"119\\\",\\\"[27]\\\\\\\\d{6,7}|[34]\\\\\\\\d{5,7}|(?:5|8\\\\\\\\d\\\\\\\\d)\\\\\\\\d{7}\\\",[6,7,8,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4,6})\\\",\\\"$1 $2\\\",[\\\"2[1-4]|[34]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{6,7})\\\",\\\"$1 $2\\\",[\\\"7\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"5\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"CV\\\":[\\\"238\\\",\\\"0\\\",\\\"(?:[2-59]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{4}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3\\\",[\\\"[2-589]\\\"]]]],\\\"CW\\\":[\\\"599\\\",\\\"00\\\",\\\"(?:[34]1|60|(?:7|9\\\\\\\\d)\\\\\\\\d)\\\\\\\\d{5}\\\",[7,8],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[3467]\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"9[4-8]\\\"]]],0,0,0,0,0,\\\"[69]\\\"],\\\"CX\\\":[\\\"61\\\",\\\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\\\",\\\"1(?:[0-79]\\\\\\\\d{8}(?:\\\\\\\\d{2})?|8[0-24-9]\\\\\\\\d{7})|[148]\\\\\\\\d{8}|1\\\\\\\\d{5,7}\\\",[6,7,8,9,10,12],0,\\\"0\\\",0,\\\"0|([59]\\\\\\\\d{7})$\\\",\\\"8$1\\\",0,0,[[\\\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\\\\\d|7(?:0[01]|1[0-2])|958))\\\\\\\\d{3}\\\",[9]],[\\\"4(?:83[0-38]|93[0-6])\\\\\\\\d{5}|4(?:[0-3]\\\\\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\\\\\\\d{6}\\\",[9]],[\\\"180(?:0\\\\\\\\d{3}|2)\\\\\\\\d{3}\\\",[7,10]],[\\\"190[0-26]\\\\\\\\d{6}\\\",[10]],0,0,0,0,[\\\"14(?:5(?:1[0458]|[23][458])|71\\\\\\\\d)\\\\\\\\d{4}\\\",[9]],[\\\"13(?:00\\\\\\\\d{6}(?:\\\\\\\\d{2})?|45[0-4]\\\\\\\\d{3})|13\\\\\\\\d{4}\\\",[6,8,10,12]]],\\\"0011\\\"],\\\"CY\\\":[\\\"357\\\",\\\"00\\\",\\\"(?:[279]\\\\\\\\d|[58]0)\\\\\\\\d{6}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"[257-9]\\\"]]]],\\\"CZ\\\":[\\\"420\\\",\\\"00\\\",\\\"(?:[2-578]\\\\\\\\d|60)\\\\\\\\d{7}|9\\\\\\\\d{8,11}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[2-8]|9[015-7]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"96\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"9\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"9\\\"]]]],\\\"DE\\\":[\\\"49\\\",\\\"00\\\",\\\"[2579]\\\\\\\\d{5,14}|49(?:[34]0|69|8\\\\\\\\d)\\\\\\\\d\\\\\\\\d?|49(?:37|49|60|7[089]|9\\\\\\\\d)\\\\\\\\d{1,3}|49(?:1\\\\\\\\d|2[02-9]|3[2-689]|7[1-7])\\\\\\\\d{1,8}|(?:1|[368]\\\\\\\\d|4[0-8])\\\\\\\\d{3,13}|49(?:[05]\\\\\\\\d|[23]1|[46][1-8])\\\\\\\\d{1,9}\\\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,13})\\\",\\\"$1 $2\\\",[\\\"3[02]|40|[68]9\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,12})\\\",\\\"$1 $2\\\",[\\\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\\\",\\\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{2,11})\\\",\\\"$1 $2\\\",[\\\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\\\",\\\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"138\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{5})(\\\\\\\\d{2,10})\\\",\\\"$1 $2\\\",[\\\"3\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5,11})\\\",\\\"$1 $2\\\",[\\\"181\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{4,10})\\\",\\\"$1 $2 $3\\\",[\\\"1(?:3|80)|9\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{7,8})\\\",\\\"$1 $2\\\",[\\\"1[67]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{7,12})\\\",\\\"$1 $2\\\",[\\\"8\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{5})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"185\\\",\\\"1850\\\",\\\"18500\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"7\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"18[68]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{5})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"15[0568]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"15[1279]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{8})\\\",\\\"$1 $2\\\",[\\\"18\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{7,8})\\\",\\\"$1 $2 $3\\\",[\\\"1(?:6[023]|7)\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{7})\\\",\\\"$1 $2 $3\\\",[\\\"15[279]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{8})\\\",\\\"$1 $2 $3\\\",[\\\"15\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"DJ\\\":[\\\"253\\\",\\\"00\\\",\\\"(?:2\\\\\\\\d|77)\\\\\\\\d{6}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[27]\\\"]]]],\\\"DK\\\":[\\\"45\\\",\\\"00\\\",\\\"[2-9]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[2-9]\\\"]]]],\\\"DM\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[58]\\\\\\\\d\\\\\\\\d|767|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-7]\\\\\\\\d{6})$\\\",\\\"767$1\\\",0,\\\"767\\\"],\\\"DO\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,0,0,0,\\\"8001|8[024]9\\\"],\\\"DZ\\\":[\\\"213\\\",\\\"00\\\",\\\"(?:[1-4]|[5-79]\\\\\\\\d|80)\\\\\\\\d{7}\\\",[8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[1-4]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"9\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[5-8]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"EC\\\":[\\\"593\\\",\\\"00\\\",\\\"1\\\\\\\\d{9,10}|(?:[2-7]|9\\\\\\\\d)\\\\\\\\d{7}\\\",[8,9,10,11],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2-$3\\\",[\\\"[2-7]\\\"],\\\"(0$1)\\\",0,\\\"$1-$2-$3\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"9\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"]]],\\\"0\\\"],\\\"EE\\\":[\\\"372\\\",\\\"00\\\",\\\"8\\\\\\\\d{9}|[4578]\\\\\\\\d{7}|(?:[3-8]\\\\\\\\d|90)\\\\\\\\d{5}\\\",[7,8,10],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\\\",\\\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3,4})\\\",\\\"$1 $2\\\",[\\\"[45]|8(?:00|[1-49])\\\",\\\"[45]|8(?:00[1-9]|[1-49])\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"7\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]]]],\\\"EG\\\":[\\\"20\\\",\\\"00\\\",\\\"[189]\\\\\\\\d{8,9}|[24-6]\\\\\\\\d{8}|[135]\\\\\\\\d{7}\\\",[8,9,10],[[\\\"(\\\\\\\\d)(\\\\\\\\d{7,8})\\\",\\\"$1 $2\\\",[\\\"[23]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6,7})\\\",\\\"$1 $2\\\",[\\\"1[35]|[4-6]|8[2468]|9[235-7]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[189]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"EH\\\":[\\\"212\\\",\\\"00\\\",\\\"[5-8]\\\\\\\\d{8}\\\",[9],0,\\\"0\\\",0,0,0,0,\\\"528[89]\\\"],\\\"ER\\\":[\\\"291\\\",\\\"00\\\",\\\"[178]\\\\\\\\d{6}\\\",[7],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[178]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"ES\\\":[\\\"34\\\",\\\"00\\\",\\\"[5-9]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[89]00\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[5-9]\\\"]]]],\\\"ET\\\":[\\\"251\\\",\\\"00\\\",\\\"(?:11|[2-59]\\\\\\\\d)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[1-59]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"FI\\\":[\\\"358\\\",\\\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\\\",\\\"[1-35689]\\\\\\\\d{4}|7\\\\\\\\d{10,11}|(?:[124-7]\\\\\\\\d|3[0-46-9])\\\\\\\\d{8}|[1-9]\\\\\\\\d{5,8}\\\",[5,6,7,8,9,10,11,12],[[\\\"(\\\\\\\\d)(\\\\\\\\d{4,9})\\\",\\\"$1 $2\\\",[\\\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,7})\\\",\\\"$1 $2\\\",[\\\"[12]00|[368]|70[07-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4,8})\\\",\\\"$1 $2\\\",[\\\"[1245]|7[135]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6,10})\\\",\\\"$1 $2\\\",[\\\"7\\\"],\\\"0$1\\\"]],\\\"0\\\",0,0,0,0,\\\"1[03-79]|[2-9]\\\",0,\\\"00\\\"],\\\"FJ\\\":[\\\"679\\\",\\\"0(?:0|52)\\\",\\\"45\\\\\\\\d{5}|(?:0800\\\\\\\\d|[235-9])\\\\\\\\d{6}\\\",[7,11],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[235-9]|45\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"0\\\"]]],0,0,0,0,0,0,0,\\\"00\\\"],\\\"FK\\\":[\\\"500\\\",\\\"00\\\",\\\"[2-7]\\\\\\\\d{4}\\\",[5]],\\\"FM\\\":[\\\"691\\\",\\\"00\\\",\\\"(?:[39]\\\\\\\\d\\\\\\\\d|820)\\\\\\\\d{4}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[389]\\\"]]]],\\\"FO\\\":[\\\"298\\\",\\\"00\\\",\\\"[2-9]\\\\\\\\d{5}\\\",[6],[[\\\"(\\\\\\\\d{6})\\\",\\\"$1\\\",[\\\"[2-9]\\\"]]],0,0,\\\"(10(?:01|[12]0|88))\\\"],\\\"FR\\\":[\\\"33\\\",\\\"00\\\",\\\"[1-9]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"8\\\"],\\\"0 $1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4 $5\\\",[\\\"[1-79]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"GA\\\":[\\\"241\\\",\\\"00\\\",\\\"(?:[067]\\\\\\\\d|11)\\\\\\\\d{6}|[2-7]\\\\\\\\d{6}\\\",[7,8],[[\\\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[2-7]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"11|[67]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"0\\\"]]],0,0,\\\"0(11\\\\\\\\d{6}|60\\\\\\\\d{6}|61\\\\\\\\d{6}|6[256]\\\\\\\\d{6}|7[47]\\\\\\\\d{6}|76\\\\\\\\d{6})\\\",\\\"$1\\\"],\\\"GB\\\":[\\\"44\\\",\\\"00\\\",\\\"[1-357-9]\\\\\\\\d{9}|[18]\\\\\\\\d{8}|8\\\\\\\\d{6}\\\",[7,9,10],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"800\\\",\\\"8001\\\",\\\"80011\\\",\\\"800111\\\",\\\"8001111\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3\\\",[\\\"845\\\",\\\"8454\\\",\\\"84546\\\",\\\"845464\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"800\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{5})(\\\\\\\\d{4,5})\\\",\\\"$1 $2\\\",[\\\"1(?:38|5[23]|69|76|94)\\\",\\\"1(?:(?:38|69)7|5(?:24|39)|768|946)\\\",\\\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{5,6})\\\",\\\"$1 $2\\\",[\\\"1(?:[2-69][02-9]|[78])\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[25]|7(?:0|6[02-9])\\\",\\\"[25]|7(?:0|6(?:[03-9]|2[356]))\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"7\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[1389]\\\"],\\\"0$1\\\"]],\\\"0\\\",0,0,0,0,0,[[\\\"(?:1(?:1(?:3(?:[0-58]\\\\\\\\d\\\\\\\\d|73[0235])|4(?:[0-5]\\\\\\\\d\\\\\\\\d|69[7-9]|70[0359])|(?:5[0-26-9]|[78][0-49])\\\\\\\\d\\\\\\\\d|6(?:[0-4]\\\\\\\\d\\\\\\\\d|50[0-24-69]))|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\\\\\d)\\\\\\\\d\\\\\\\\d|1(?:[0-7]\\\\\\\\d\\\\\\\\d|8(?:[02]\\\\\\\\d|1[0-278])))|(?:3(?:0\\\\\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\\\\\d\\\\\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\\\\\d{3})\\\\\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\\\\\d)|76\\\\\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\\\\\d|7[4-79])|295[5-7]|35[34]\\\\\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\\\\\d{3}\\\",[9,10]],[\\\"7(?:457[0-57-9]|700[01]|911[028])\\\\\\\\d{5}|7(?:[1-3]\\\\\\\\d\\\\\\\\d|4(?:[0-46-9]\\\\\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\\\\\d|[23][0-8])|9(?:[024-9]\\\\\\\\d|1[02-9]|3[0-689]))\\\\\\\\d{6}\\\",[10]],[\\\"80[08]\\\\\\\\d{7}|800\\\\\\\\d{6}|8001111\\\"],[\\\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\\\\\d|8[2-49]))\\\\\\\\d{7}|845464\\\\\\\\d\\\",[7,10]],[\\\"70\\\\\\\\d{8}\\\",[10]],0,[\\\"(?:3[0347]|55)\\\\\\\\d{8}\\\",[10]],[\\\"76(?:464|652)\\\\\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\\\\\\\d{6}\\\",[10]],[\\\"56\\\\\\\\d{8}\\\",[10]]],0,\\\" x\\\"],\\\"GD\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:473|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-9]\\\\\\\\d{6})$\\\",\\\"473$1\\\",0,\\\"473\\\"],\\\"GE\\\":[\\\"995\\\",\\\"00\\\",\\\"(?:[3-57]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{6}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"70\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"32\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[57]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[348]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"GF\\\":[\\\"594\\\",\\\"00\\\",\\\"(?:[56]94|80\\\\\\\\d|976)\\\\\\\\d{6}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[569]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"GG\\\":[\\\"44\\\",\\\"00\\\",\\\"(?:1481|[357-9]\\\\\\\\d{3})\\\\\\\\d{6}|8\\\\\\\\d{6}(?:\\\\\\\\d{2})?\\\",[7,9,10],0,\\\"0\\\",0,\\\"0|([25-9]\\\\\\\\d{5})$\\\",\\\"1481$1\\\",0,0,[[\\\"1481[25-9]\\\\\\\\d{5}\\\",[10]],[\\\"7(?:(?:781|839)\\\\\\\\d|911[17])\\\\\\\\d{5}\\\",[10]],[\\\"80[08]\\\\\\\\d{7}|800\\\\\\\\d{6}|8001111\\\"],[\\\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\\\\\d|8[0-3]))\\\\\\\\d{7}|845464\\\\\\\\d\\\",[7,10]],[\\\"70\\\\\\\\d{8}\\\",[10]],0,[\\\"(?:3[0347]|55)\\\\\\\\d{8}\\\",[10]],[\\\"76(?:464|652)\\\\\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\\\\\\\d{6}\\\",[10]],[\\\"56\\\\\\\\d{8}\\\",[10]]]],\\\"GH\\\":[\\\"233\\\",\\\"00\\\",\\\"(?:[235]\\\\\\\\d{3}|800)\\\\\\\\d{5}\\\",[8,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"8\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[235]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"GI\\\":[\\\"350\\\",\\\"00\\\",\\\"(?:[25]\\\\\\\\d\\\\\\\\d|606)\\\\\\\\d{5}\\\",[8],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"2\\\"]]]],\\\"GL\\\":[\\\"299\\\",\\\"00\\\",\\\"(?:19|[2-689]\\\\\\\\d|70)\\\\\\\\d{4}\\\",[6],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3\\\",[\\\"19|[2-9]\\\"]]]],\\\"GM\\\":[\\\"220\\\",\\\"00\\\",\\\"[2-9]\\\\\\\\d{6}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2-9]\\\"]]]],\\\"GN\\\":[\\\"224\\\",\\\"00\\\",\\\"722\\\\\\\\d{6}|(?:3|6\\\\\\\\d)\\\\\\\\d{7}\\\",[8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"3\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[67]\\\"]]]],\\\"GP\\\":[\\\"590\\\",\\\"00\\\",\\\"(?:590|(?:69|80)\\\\\\\\d|976)\\\\\\\\d{6}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[569]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\",0,0,0,0,0,[[\\\"590(?:0[1-68]|1[0-24]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\\\\\d)\\\\\\\\d{4}\\\"],[\\\"69(?:0\\\\\\\\d\\\\\\\\d|1(?:2[2-9]|3[0-5]))\\\\\\\\d{4}\\\"],[\\\"80[0-5]\\\\\\\\d{6}\\\"],0,0,0,0,0,[\\\"976[01]\\\\\\\\d{5}\\\"]]],\\\"GQ\\\":[\\\"240\\\",\\\"00\\\",\\\"222\\\\\\\\d{6}|(?:3\\\\\\\\d|55|[89]0)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[235]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"[89]\\\"]]]],\\\"GR\\\":[\\\"30\\\",\\\"00\\\",\\\"5005000\\\\\\\\d{3}|8\\\\\\\\d{9,11}|(?:[269]\\\\\\\\d|70)\\\\\\\\d{8}\\\",[10,11,12],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"21|7\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[2689]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,4})(\\\\\\\\d{5})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]]]],\\\"GT\\\":[\\\"502\\\",\\\"00\\\",\\\"(?:1\\\\\\\\d{3}|[2-7])\\\\\\\\d{7}\\\",[8,11],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2-7]\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"]]]],\\\"GU\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[58]\\\\\\\\d\\\\\\\\d|671|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([3-9]\\\\\\\\d{6})$\\\",\\\"671$1\\\",0,\\\"671\\\"],\\\"GW\\\":[\\\"245\\\",\\\"00\\\",\\\"[49]\\\\\\\\d{8}|4\\\\\\\\d{6}\\\",[7,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"40\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[49]\\\"]]]],\\\"GY\\\":[\\\"592\\\",\\\"001\\\",\\\"9008\\\\\\\\d{3}|(?:[2-467]\\\\\\\\d\\\\\\\\d|862)\\\\\\\\d{4}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2-46-9]\\\"]]]],\\\"HK\\\":[\\\"852\\\",\\\"00(?:30|5[09]|[126-9]?)\\\",\\\"8[0-46-9]\\\\\\\\d{6,7}|9\\\\\\\\d{4,7}|(?:[2-7]|9\\\\\\\\d{3})\\\\\\\\d{7}\\\",[5,6,7,8,9,11],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2,5})\\\",\\\"$1 $2\\\",[\\\"900\\\",\\\"9003\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"9\\\"]]],0,0,0,0,0,0,0,\\\"00\\\"],\\\"HN\\\":[\\\"504\\\",\\\"00\\\",\\\"8\\\\\\\\d{10}|[237-9]\\\\\\\\d{7}\\\",[8,11],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1-$2\\\",[\\\"[237-9]\\\"]]]],\\\"HR\\\":[\\\"385\\\",\\\"00\\\",\\\"(?:[24-69]\\\\\\\\d|3[0-79])\\\\\\\\d{7}|80\\\\\\\\d{5,7}|[1-79]\\\\\\\\d{7}|6\\\\\\\\d{5,6}\\\",[6,7,8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2,3})\\\",\\\"$1 $2 $3\\\",[\\\"6[01]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2,3})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[67]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"9\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[2-5]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"HT\\\":[\\\"509\\\",\\\"00\\\",\\\"[2-489]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[2-489]\\\"]]]],\\\"HU\\\":[\\\"36\\\",\\\"00\\\",\\\"[235-7]\\\\\\\\d{8}|[1-9]\\\\\\\\d{7}\\\",[8,9],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"],\\\"(06 $1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\\\"],\\\"(06 $1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[2-9]\\\"],\\\"06 $1\\\"]],\\\"06\\\"],\\\"ID\\\":[\\\"62\\\",\\\"00[89]\\\",\\\"(?:(?:00[1-9]|8\\\\\\\\d)\\\\\\\\d{4}|[1-36])\\\\\\\\d{6}|00\\\\\\\\d{10}|[1-9]\\\\\\\\d{8,10}|[2-9]\\\\\\\\d{7}\\\",[7,8,9,10,11,12,13],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"15\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5,9})\\\",\\\"$1 $2\\\",[\\\"2[124]|[36]1\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5,7})\\\",\\\"$1 $2\\\",[\\\"800\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5,8})\\\",\\\"$1 $2\\\",[\\\"[2-79]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,4})(\\\\\\\\d{3})\\\",\\\"$1-$2-$3\\\",[\\\"8[1-35-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{6,8})\\\",\\\"$1 $2\\\",[\\\"1\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"804\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"80\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4,5})\\\",\\\"$1-$2-$3\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"IE\\\":[\\\"353\\\",\\\"00\\\",\\\"(?:1\\\\\\\\d|[2569])\\\\\\\\d{6,8}|4\\\\\\\\d{6,9}|7\\\\\\\\d{8}|8\\\\\\\\d{8,9}\\\",[7,8,9,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"2[24-9]|47|58|6[237-9]|9[35-9]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"[45]0\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3,4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[2569]|4[1-69]|7[14]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"70\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"81\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[78]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"4\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3 $4\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"IL\\\":[\\\"972\\\",\\\"0(?:0|1[2-9])\\\",\\\"1\\\\\\\\d{6}(?:\\\\\\\\d{3,5})?|[57]\\\\\\\\d{8}|[1-489]\\\\\\\\d{7}\\\",[7,8,9,10,11,12],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})\\\",\\\"$1-$2\\\",[\\\"125\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1-$2-$3\\\",[\\\"121\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"[2-489]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"[57]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1-$2-$3\\\",[\\\"12\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{6})\\\",\\\"$1-$2\\\",[\\\"159\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1-$2-$3-$4\\\",[\\\"1[7-9]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{1,2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2 $3-$4\\\",[\\\"15\\\"]]],\\\"0\\\"],\\\"IM\\\":[\\\"44\\\",\\\"00\\\",\\\"1624\\\\\\\\d{6}|(?:[3578]\\\\\\\\d|90)\\\\\\\\d{8}\\\",[10],0,\\\"0\\\",0,\\\"0|([25-8]\\\\\\\\d{5})$\\\",\\\"1624$1\\\",0,\\\"74576|(?:16|7[56])24\\\"],\\\"IN\\\":[\\\"91\\\",\\\"00\\\",\\\"(?:000800|[2-9]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{7}|1\\\\\\\\d{7,12}\\\",[8,9,10,11,12,13],[[\\\"(\\\\\\\\d{8})\\\",\\\"$1\\\",[\\\"5(?:0|2[23]|3[03]|[67]1|88)\\\",\\\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\\\",\\\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\\\"],0,1],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4,5})\\\",\\\"$1 $2\\\",[\\\"180\\\",\\\"1800\\\"],0,1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"140\\\"],0,1],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\\\",\\\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\\\",\\\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\\\",\\\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\\\",\\\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\\\",\\\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\\\",\\\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\\\\\d|7(?:1(?:[013-8]\\\\\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\\\\\d|5[0-367])|70[13-7]))[2-7]\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{5})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"[6-9]\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{2,4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1(?:6|8[06])\\\",\\\"1(?:6|8[06]0)\\\"],0,1],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"18\\\"],0,1]],\\\"0\\\"],\\\"IO\\\":[\\\"246\\\",\\\"00\\\",\\\"3\\\\\\\\d{6}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"3\\\"]]]],\\\"IQ\\\":[\\\"964\\\",\\\"00\\\",\\\"(?:1|7\\\\\\\\d\\\\\\\\d)\\\\\\\\d{7}|[2-6]\\\\\\\\d{7,8}\\\",[8,9,10],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[2-6]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"7\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"IR\\\":[\\\"98\\\",\\\"00\\\",\\\"[1-9]\\\\\\\\d{9}|(?:[1-8]\\\\\\\\d\\\\\\\\d|9)\\\\\\\\d{3,4}\\\",[4,5,6,7,10],[[\\\"(\\\\\\\\d{4,5})\\\",\\\"$1\\\",[\\\"96\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4,5})\\\",\\\"$1 $2\\\",[\\\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"9\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[1-8]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"IS\\\":[\\\"354\\\",\\\"00|1(?:0(?:01|[12]0)|100)\\\",\\\"(?:38\\\\\\\\d|[4-9])\\\\\\\\d{6}\\\",[7,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[4-9]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"3\\\"]]],0,0,0,0,0,0,0,\\\"00\\\"],\\\"IT\\\":[\\\"39\\\",\\\"00\\\",\\\"0\\\\\\\\d{5,10}|1\\\\\\\\d{8,10}|3(?:[0-8]\\\\\\\\d{7,10}|9\\\\\\\\d{7,8})|55\\\\\\\\d{8}|8\\\\\\\\d{5}(?:\\\\\\\\d{2,4})?\\\",[6,7,8,9,10,11],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4,6})\\\",\\\"$1 $2\\\",[\\\"0[26]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,6})\\\",\\\"$1 $2\\\",[\\\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\\\",\\\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{2,6})\\\",\\\"$1 $2\\\",[\\\"0(?:[13-579][2-46-8]|8[236-8])\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"894\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"0[26]|5\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"1(?:44|[679])|[38]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"0[13-57-9][0159]|14\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{5})\\\",\\\"$1 $2 $3\\\",[\\\"0[26]\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"0\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4,5})\\\",\\\"$1 $2 $3\\\",[\\\"3\\\"]]],0,0,0,0,0,0,[[\\\"0669[0-79]\\\\\\\\d{1,6}|0(?:1(?:[0159]\\\\\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\\\\\d\\\\\\\\d|3(?:[0159]\\\\\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\\\\\d|6[0-8])|7(?:[0159]\\\\\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\\\\\d{2,7}\\\"],[\\\"3[1-9]\\\\\\\\d{8}|3[2-9]\\\\\\\\d{7}\\\",[9,10]],[\\\"80(?:0\\\\\\\\d{3}|3)\\\\\\\\d{3}\\\",[6,9]],[\\\"(?:0878\\\\\\\\d{3}|89(?:2\\\\\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\\\\\d\\\\\\\\d)|5[0-4]))\\\\\\\\d\\\\\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\\\\\d{6}\\\",[6,8,9,10]],[\\\"1(?:78\\\\\\\\d|99)\\\\\\\\d{6}\\\",[9,10]],0,0,0,[\\\"55\\\\\\\\d{8}\\\",[10]],[\\\"84(?:[08]\\\\\\\\d{3}|[17])\\\\\\\\d{3}\\\",[6,9]]]],\\\"JE\\\":[\\\"44\\\",\\\"00\\\",\\\"1534\\\\\\\\d{6}|(?:[3578]\\\\\\\\d|90)\\\\\\\\d{8}\\\",[10],0,\\\"0\\\",0,\\\"0|([0-24-8]\\\\\\\\d{5})$\\\",\\\"1534$1\\\",0,0,[[\\\"1534[0-24-8]\\\\\\\\d{5}\\\"],[\\\"7(?:(?:(?:50|82)9|937)\\\\\\\\d|7(?:00[378]|97[7-9]))\\\\\\\\d{5}\\\"],[\\\"80(?:07(?:35|81)|8901)\\\\\\\\d{4}\\\"],[\\\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\\\\\d{4}\\\"],[\\\"701511\\\\\\\\d{4}\\\"],0,[\\\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\\\\\d{4})\\\\\\\\d{4}\\\"],[\\\"76(?:464|652)\\\\\\\\d{5}|76(?:0[0-2]|2[356]|34|4[01347]|5[49]|6[0-369]|77|81|9[139])\\\\\\\\d{6}\\\"],[\\\"56\\\\\\\\d{8}\\\"]]],\\\"JM\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[58]\\\\\\\\d\\\\\\\\d|658|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,0,0,0,\\\"658|876\\\"],\\\"JO\\\":[\\\"962\\\",\\\"00\\\",\\\"(?:(?:[2689]|7\\\\\\\\d)\\\\\\\\d|32|53)\\\\\\\\d{6}\\\",[8,9],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[2356]|87\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5,6})\\\",\\\"$1 $2\\\",[\\\"[89]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"70\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"7\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"JP\\\":[\\\"81\\\",\\\"010\\\",\\\"00[1-9]\\\\\\\\d{6,14}|[257-9]\\\\\\\\d{9}|(?:00|[1-9]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{6}\\\",[8,9,10,11,12,13,14,15,16,17],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1-$2-$3\\\",[\\\"(?:12|57|99)0\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d)(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\\\",\\\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\\\",\\\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"60\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"[36]|4(?:2[09]|7[01])\\\",\\\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\\\",\\\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\\\",\\\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\\\",\\\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"[14]|[289][2-9]|5[3-9]|7[2-4679]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"800\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"[257-9]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"KE\\\":[\\\"254\\\",\\\"000\\\",\\\"(?:[17]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{6}|(?:2|80)0\\\\\\\\d{6,7}|[4-6]\\\\\\\\d{6,8}\\\",[7,8,9,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5,7})\\\",\\\"$1 $2\\\",[\\\"[24-6]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"[17]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[89]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"KG\\\":[\\\"996\\\",\\\"00\\\",\\\"8\\\\\\\\d{9}|(?:[235-8]\\\\\\\\d|99)\\\\\\\\d{7}\\\",[9,10],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"3(?:1[346]|[24-79])\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[235-79]|88\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{2,3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"KH\\\":[\\\"855\\\",\\\"00[14-9]\\\",\\\"1\\\\\\\\d{9}|[1-9]\\\\\\\\d{7,8}\\\",[8,9,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[1-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"]]],\\\"0\\\"],\\\"KI\\\":[\\\"686\\\",\\\"00\\\",\\\"(?:[37]\\\\\\\\d|6[0-79])\\\\\\\\d{6}|(?:[2-48]\\\\\\\\d|50)\\\\\\\\d{3}\\\",[5,8],0,\\\"0\\\"],\\\"KM\\\":[\\\"269\\\",\\\"00\\\",\\\"[3478]\\\\\\\\d{6}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3\\\",[\\\"[3478]\\\"]]]],\\\"KN\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-7]\\\\\\\\d{6})$\\\",\\\"869$1\\\",0,\\\"869\\\"],\\\"KP\\\":[\\\"850\\\",\\\"00|99\\\",\\\"85\\\\\\\\d{6}|(?:19\\\\\\\\d|[2-7])\\\\\\\\d{7}\\\",[8,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[2-7]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"KR\\\":[\\\"82\\\",\\\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\\\",\\\"00[1-9]\\\\\\\\d{8,11}|(?:[12]|5\\\\\\\\d{3})\\\\\\\\d{7}|[13-6]\\\\\\\\d{9}|(?:[1-6]\\\\\\\\d|80)\\\\\\\\d{7}|[3-6]\\\\\\\\d{4,5}|(?:00|7)0\\\\\\\\d{8}\\\",[5,6,8,9,10,11,12,13,14],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})\\\",\\\"$1-$2\\\",[\\\"(?:3[1-3]|[46][1-4]|5[1-5])1\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1-$2\\\",[\\\"1\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{3,4})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"2\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"60|8\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"[1346]|5[1-5]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"[57]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3\\\",[\\\"5\\\"],\\\"0$1\\\"]],\\\"0\\\",0,\\\"0(8(?:[1-46-8]|5\\\\\\\\d\\\\\\\\d))?\\\"],\\\"KW\\\":[\\\"965\\\",\\\"00\\\",\\\"18\\\\\\\\d{5}|(?:[2569]\\\\\\\\d|41)\\\\\\\\d{6}\\\",[7,8],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3,4})\\\",\\\"$1 $2\\\",[\\\"[169]|2(?:[235]|4[1-35-9])|52\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"[245]\\\"]]]],\\\"KY\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:345|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-9]\\\\\\\\d{6})$\\\",\\\"345$1\\\",0,\\\"345\\\"],\\\"KZ\\\":[\\\"7\\\",\\\"810\\\",\\\"(?:33622|8\\\\\\\\d{8})\\\\\\\\d{5}|[78]\\\\\\\\d{9}\\\",[10,14],0,\\\"8\\\",0,0,0,0,\\\"33|7\\\",0,\\\"8~10\\\"],\\\"LA\\\":[\\\"856\\\",\\\"00\\\",\\\"[23]\\\\\\\\d{9}|3\\\\\\\\d{8}|(?:[235-8]\\\\\\\\d|41)\\\\\\\\d{6}\\\",[8,9,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"2[13]|3[14]|[4-8]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"30[013-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[23]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"LB\\\":[\\\"961\\\",\\\"00\\\",\\\"[27-9]\\\\\\\\d{7}|[13-9]\\\\\\\\d{6}\\\",[7,8],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[27-9]\\\"]]],\\\"0\\\"],\\\"LC\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[58]\\\\\\\\d\\\\\\\\d|758|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-8]\\\\\\\\d{6})$\\\",\\\"758$1\\\",0,\\\"758\\\"],\\\"LI\\\":[\\\"423\\\",\\\"00\\\",\\\"[68]\\\\\\\\d{8}|(?:[2378]\\\\\\\\d|90)\\\\\\\\d{5}\\\",[7,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3\\\",[\\\"[2379]|8(?:0[09]|7)\\\",\\\"[2379]|8(?:0(?:02|9)|7)\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"69\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"6\\\"]]],\\\"0\\\",0,\\\"0|(1001)\\\"],\\\"LK\\\":[\\\"94\\\",\\\"00\\\",\\\"[1-9]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"7\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[1-689]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"LR\\\":[\\\"231\\\",\\\"00\\\",\\\"(?:2|33|5\\\\\\\\d|77|88)\\\\\\\\d{7}|[4-6]\\\\\\\\d{6}\\\",[7,8,9],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[4-6]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"2\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[3578]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"LS\\\":[\\\"266\\\",\\\"00\\\",\\\"(?:[256]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{5}\\\",[8],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2568]\\\"]]]],\\\"LT\\\":[\\\"370\\\",\\\"00\\\",\\\"(?:[3469]\\\\\\\\d|52|[78]0)\\\\\\\\d{6}\\\",[8],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"52[0-7]\\\"],\\\"(8-$1)\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[7-9]\\\"],\\\"8 $1\\\",1],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"37|4(?:[15]|6[1-8])\\\"],\\\"(8-$1)\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"[3-6]\\\"],\\\"(8-$1)\\\",1]],\\\"8\\\",0,\\\"[08]\\\"],\\\"LU\\\":[\\\"352\\\",\\\"00\\\",\\\"35[013-9]\\\\\\\\d{4,8}|6\\\\\\\\d{8}|35\\\\\\\\d{2,4}|(?:[2457-9]\\\\\\\\d|3[0-46-9])\\\\\\\\d{2,9}\\\",[4,5,6,7,8,9,10,11],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2\\\",[\\\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3\\\",[\\\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"20[2-689]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{1,2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"2(?:[0367]|4[3-8])\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"80[01]|90[015]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"20\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"6\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{1,2})\\\",\\\"$1 $2 $3 $4 $5\\\",[\\\"2(?:[0367]|4[3-8])\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{1,5})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\\\"]]],0,0,\\\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\\\\\d)\\\"],\\\"LV\\\":[\\\"371\\\",\\\"00\\\",\\\"(?:[268]\\\\\\\\d|90)\\\\\\\\d{6}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[269]|8[01]\\\"]]]],\\\"LY\\\":[\\\"218\\\",\\\"00\\\",\\\"[2-9]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{7})\\\",\\\"$1-$2\\\",[\\\"[2-9]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"MA\\\":[\\\"212\\\",\\\"00\\\",\\\"[5-8]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d{5})(\\\\\\\\d{4})\\\",\\\"$1-$2\\\",[\\\"5(?:29|38)\\\",\\\"5(?:29|38)[89]\\\",\\\"5(?:29|38)[89]0\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"5[45]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{5})\\\",\\\"$1-$2\\\",[\\\"5(?:2[2-489]|3[5-9]|9)|892\\\",\\\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{7})\\\",\\\"$1-$2\\\",[\\\"8\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{6})\\\",\\\"$1-$2\\\",[\\\"[5-7]\\\"],\\\"0$1\\\"]],\\\"0\\\",0,0,0,0,0,[[\\\"5(?:29(?:[189][05]|2[29]|3[01])|38[89][05])\\\\\\\\d{4}|5(?:2(?:[0-25-7]\\\\\\\\d|3[1-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\\\\\d|5[02-9]|6[02-8]|80|9[3-9])|(?:4[067]|5[03])\\\\\\\\d)\\\\\\\\d{5}\\\"],[\\\"(?:6(?:[0-79]\\\\\\\\d|8[0-247-9])|7(?:[017]\\\\\\\\d|6[0-367]))\\\\\\\\d{6}\\\"],[\\\"80\\\\\\\\d{7}\\\"],[\\\"89\\\\\\\\d{7}\\\"],0,0,0,0,[\\\"592(?:4[0-2]|93)\\\\\\\\d{4}\\\"]]],\\\"MC\\\":[\\\"377\\\",\\\"00\\\",\\\"(?:[3489]|6\\\\\\\\d)\\\\\\\\d{7}\\\",[8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"4\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[389]\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4 $5\\\",[\\\"6\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"MD\\\":[\\\"373\\\",\\\"00\\\",\\\"(?:[235-7]\\\\\\\\d|[89]0)\\\\\\\\d{6}\\\",[8],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"[89]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"22|3\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[25-7]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"ME\\\":[\\\"382\\\",\\\"00\\\",\\\"(?:20|[3-79]\\\\\\\\d)\\\\\\\\d{6}|80\\\\\\\\d{6,7}\\\",[8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[2-9]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"MF\\\":[\\\"590\\\",\\\"00\\\",\\\"(?:590|(?:69|80)\\\\\\\\d|976)\\\\\\\\d{6}\\\",[9],0,\\\"0\\\",0,0,0,0,0,[[\\\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\\\\\d{4}\\\"],[\\\"69(?:0\\\\\\\\d\\\\\\\\d|1(?:2[2-9]|3[0-5]))\\\\\\\\d{4}\\\"],[\\\"80[0-5]\\\\\\\\d{6}\\\"],0,0,0,0,0,[\\\"976[01]\\\\\\\\d{5}\\\"]]],\\\"MG\\\":[\\\"261\\\",\\\"00\\\",\\\"[23]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[23]\\\"],\\\"0$1\\\"]],\\\"0\\\",0,\\\"0|([24-9]\\\\\\\\d{6})$\\\",\\\"20$1\\\"],\\\"MH\\\":[\\\"692\\\",\\\"011\\\",\\\"329\\\\\\\\d{4}|(?:[256]\\\\\\\\d|45)\\\\\\\\d{5}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2\\\",[\\\"[2-6]\\\"]]],\\\"1\\\"],\\\"MK\\\":[\\\"389\\\",\\\"00\\\",\\\"[2-578]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"2|34[47]|4(?:[37]7|5[47]|64)\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[347]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[58]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"ML\\\":[\\\"223\\\",\\\"00\\\",\\\"[24-9]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[24-9]\\\"]]]],\\\"MM\\\":[\\\"95\\\",\\\"00\\\",\\\"1\\\\\\\\d{5,7}|95\\\\\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\\\\\d{6,8}|(?:2|8\\\\\\\\d)\\\\\\\\d{5,8}\\\",[6,7,8,9,10],[[\\\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"16|2\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[12]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[4-7]|8[1-35]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4,6})\\\",\\\"$1 $2 $3\\\",[\\\"9(?:2[0-4]|[35-9]|4[137-9])\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"2\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"92\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{5})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"9\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"MN\\\":[\\\"976\\\",\\\"001\\\",\\\"[12]\\\\\\\\d{7,9}|[57-9]\\\\\\\\d{7}\\\",[8,9,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[12]1\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[57-9]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5,6})\\\",\\\"$1 $2\\\",[\\\"[12]2[1-3]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{5,6})\\\",\\\"$1 $2\\\",[\\\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\\\",\\\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{5})(\\\\\\\\d{4,5})\\\",\\\"$1 $2\\\",[\\\"[12]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"MO\\\":[\\\"853\\\",\\\"00\\\",\\\"0800\\\\\\\\d{3}|(?:28|[68]\\\\\\\\d)\\\\\\\\d{6}\\\",[7,8],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})\\\",\\\"$1 $2\\\",[\\\"0\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[268]\\\"]]]],\\\"MP\\\":[\\\"1\\\",\\\"011\\\",\\\"[58]\\\\\\\\d{9}|(?:67|90)0\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-9]\\\\\\\\d{6})$\\\",\\\"670$1\\\",0,\\\"670\\\"],\\\"MQ\\\":[\\\"596\\\",\\\"00\\\",\\\"(?:69|80)\\\\\\\\d{7}|(?:59|97)6\\\\\\\\d{6}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[569]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"MR\\\":[\\\"222\\\",\\\"00\\\",\\\"(?:[2-4]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{5}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[2-48]\\\"]]]],\\\"MS\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[58]\\\\\\\\d\\\\\\\\d|664|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([34]\\\\\\\\d{6})$\\\",\\\"664$1\\\",0,\\\"664\\\"],\\\"MT\\\":[\\\"356\\\",\\\"00\\\",\\\"3550\\\\\\\\d{4}|(?:[2579]\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{5}\\\",[8],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2357-9]\\\"]]]],\\\"MU\\\":[\\\"230\\\",\\\"0(?:0|[24-7]0|3[03])\\\",\\\"(?:5|8\\\\\\\\d\\\\\\\\d)\\\\\\\\d{7}|[2-468]\\\\\\\\d{6}\\\",[7,8,10],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2-46]|8[013]\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"5\\\"]],[\\\"(\\\\\\\\d{5})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"8\\\"]]],0,0,0,0,0,0,0,\\\"020\\\"],\\\"MV\\\":[\\\"960\\\",\\\"0(?:0|19)\\\",\\\"(?:800|9[0-57-9]\\\\\\\\d)\\\\\\\\d{7}|[34679]\\\\\\\\d{6}\\\",[7,10],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2\\\",[\\\"[3467]|9[13-9]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[89]\\\"]]],0,0,0,0,0,0,0,\\\"00\\\"],\\\"MW\\\":[\\\"265\\\",\\\"00\\\",\\\"(?:[19]\\\\\\\\d|[23]1|77|88)\\\\\\\\d{7}|1\\\\\\\\d{6}\\\",[7,9],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"1[2-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"2\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[137-9]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"MX\\\":[\\\"52\\\",\\\"0[09]\\\",\\\"1(?:(?:44|99)[1-9]|65[0-689])\\\\\\\\d{7}|(?:1(?:[017]\\\\\\\\d|[235][1-9]|4[0-35-9]|6[0-46-9]|8[1-79]|9[1-8])|[2-9]\\\\\\\\d)\\\\\\\\d{8}\\\",[10,11],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"33|5[56]|81\\\"],0,1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[2-9]\\\"],0,1],[\\\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$2 $3 $4\\\",[\\\"1(?:33|5[56]|81)\\\"],0,1],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$2 $3 $4\\\",[\\\"1\\\"],0,1]],\\\"01\\\",0,\\\"0(?:[12]|4[45])|1\\\",0,0,0,0,\\\"00\\\"],\\\"MY\\\":[\\\"60\\\",\\\"00\\\",\\\"1\\\\\\\\d{8,9}|(?:3\\\\\\\\d|[4-9])\\\\\\\\d{7}\\\",[8,9,10],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2 $3\\\",[\\\"[4-79]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1-$2 $3\\\",[\\\"1(?:[02469]|[378][1-9])|8\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1-$2 $3\\\",[\\\"3\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1-$2-$3-$4\\\",[\\\"1[36-8]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2 $3\\\",[\\\"15\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1-$2 $3\\\",[\\\"1\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"MZ\\\":[\\\"258\\\",\\\"00\\\",\\\"(?:2|8\\\\\\\\d)\\\\\\\\d{7}\\\",[8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"2|8[2-79]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]]]],\\\"NA\\\":[\\\"264\\\",\\\"00\\\",\\\"[68]\\\\\\\\d{7,8}\\\",[8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"88\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"6\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"87\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"NC\\\":[\\\"687\\\",\\\"00\\\",\\\"[2-57-9]\\\\\\\\d{5}\\\",[6],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1.$2.$3\\\",[\\\"[2-57-9]\\\"]]]],\\\"NE\\\":[\\\"227\\\",\\\"00\\\",\\\"[027-9]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"08\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[089]|2[013]|7[04]\\\"]]]],\\\"NF\\\":[\\\"672\\\",\\\"00\\\",\\\"[13]\\\\\\\\d{5}\\\",[6],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"1[0-3]\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"[13]\\\"]]],0,0,\\\"([0-258]\\\\\\\\d{4})$\\\",\\\"3$1\\\"],\\\"NG\\\":[\\\"234\\\",\\\"009\\\",\\\"(?:[124-7]|9\\\\\\\\d{3})\\\\\\\\d{6}|[1-9]\\\\\\\\d{7}|[78]\\\\\\\\d{9,13}\\\",[7,8,10,11,12,13,14],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"78\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[12]|9(?:0[3-9]|[1-9])\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2,3})\\\",\\\"$1 $2 $3\\\",[\\\"[3-7]|8[2-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[7-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4,5})\\\",\\\"$1 $2 $3\\\",[\\\"[78]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})(\\\\\\\\d{5,6})\\\",\\\"$1 $2 $3\\\",[\\\"[78]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"NI\\\":[\\\"505\\\",\\\"00\\\",\\\"(?:1800|[25-8]\\\\\\\\d{3})\\\\\\\\d{4}\\\",[8],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[125-8]\\\"]]]],\\\"NL\\\":[\\\"31\\\",\\\"00\\\",\\\"(?:[124-7]\\\\\\\\d\\\\\\\\d|3(?:[02-9]\\\\\\\\d|1[0-8]))\\\\\\\\d{6}|[89]\\\\\\\\d{6,9}|1\\\\\\\\d{4,5}\\\",[5,6,7,8,9,10],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4,7})\\\",\\\"$1 $2\\\",[\\\"[89]0\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"66\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{8})\\\",\\\"$1 $2\\\",[\\\"6\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[1-57-9]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"NO\\\":[\\\"47\\\",\\\"00\\\",\\\"(?:0|[2-9]\\\\\\\\d{3})\\\\\\\\d{4}\\\",[5,8],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[489]|59\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[235-7]\\\"]]],0,0,0,0,0,\\\"[02-689]|7[0-8]\\\"],\\\"NP\\\":[\\\"977\\\",\\\"00\\\",\\\"(?:1\\\\\\\\d|9)\\\\\\\\d{9}|[1-9]\\\\\\\\d{7}\\\",[8,10,11],[[\\\"(\\\\\\\\d)(\\\\\\\\d{7})\\\",\\\"$1-$2\\\",[\\\"1[2-6]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6})\\\",\\\"$1-$2\\\",[\\\"1[01]|[2-8]|9(?:[1-579]|6[2-6])\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{7})\\\",\\\"$1-$2\\\",[\\\"9\\\"]]],\\\"0\\\"],\\\"NR\\\":[\\\"674\\\",\\\"00\\\",\\\"(?:444|(?:55|8\\\\\\\\d)\\\\\\\\d|666)\\\\\\\\d{4}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[4-68]\\\"]]]],\\\"NU\\\":[\\\"683\\\",\\\"00\\\",\\\"(?:[47]|888\\\\\\\\d)\\\\\\\\d{3}\\\",[4,7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"8\\\"]]]],\\\"NZ\\\":[\\\"64\\\",\\\"0(?:0|161)\\\",\\\"[29]\\\\\\\\d{7,9}|50\\\\\\\\d{5}(?:\\\\\\\\d{2,3})?|6[0-35-9]\\\\\\\\d{6}|7\\\\\\\\d{7,8}|8\\\\\\\\d{4,9}|(?:11\\\\\\\\d|[34])\\\\\\\\d{7}\\\",[5,6,7,8,9,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,8})\\\",\\\"$1 $2\\\",[\\\"8[1-579]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2,3})\\\",\\\"$1 $2 $3\\\",[\\\"50[036-8]|[89]0\\\",\\\"50(?:[0367]|88)|[89]0\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2 $3\\\",[\\\"24|[346]|7[2-57-9]|9[2-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"2(?:10|74)|[59]|80\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1|2[028]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,5})\\\",\\\"$1 $2 $3\\\",[\\\"2(?:[169]|7[0-35-9])|7|86\\\"],\\\"0$1\\\"]],\\\"0\\\",0,0,0,0,0,0,\\\"00\\\"],\\\"OM\\\":[\\\"968\\\",\\\"00\\\",\\\"(?:1505|[279]\\\\\\\\d{3}|500)\\\\\\\\d{4}|800\\\\\\\\d{5,6}\\\",[7,8,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4,6})\\\",\\\"$1 $2\\\",[\\\"[58]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"2\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[179]\\\"]]]],\\\"PA\\\":[\\\"507\\\",\\\"00\\\",\\\"(?:00800|8\\\\\\\\d{3})\\\\\\\\d{6}|[68]\\\\\\\\d{7}|[1-57-9]\\\\\\\\d{6}\\\",[7,8,10,11],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2\\\",[\\\"[1-57-9]\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1-$2\\\",[\\\"[68]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]]]],\\\"PE\\\":[\\\"51\\\",\\\"19(?:1[124]|77|90)00\\\",\\\"(?:[14-8]|9\\\\\\\\d)\\\\\\\\d{7}\\\",[8,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"80\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"1\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"[4-8]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"9\\\"]]],\\\"0\\\",0,0,0,0,0,0,0,\\\" Anexo \\\"],\\\"PF\\\":[\\\"689\\\",\\\"00\\\",\\\"4\\\\\\\\d{5}(?:\\\\\\\\d{2})?|8\\\\\\\\d{7,8}\\\",[6,8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3\\\",[\\\"44\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"4|8[7-9]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"8\\\"]]]],\\\"PG\\\":[\\\"675\\\",\\\"00|140[1-3]\\\",\\\"(?:180|[78]\\\\\\\\d{3})\\\\\\\\d{4}|(?:[2-589]\\\\\\\\d|64)\\\\\\\\d{5}\\\",[7,8],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"18|[2-69]|85\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[78]\\\"]]],0,0,0,0,0,0,0,\\\"00\\\"],\\\"PH\\\":[\\\"63\\\",\\\"00\\\",\\\"(?:[2-7]|9\\\\\\\\d)\\\\\\\\d{8}|2\\\\\\\\d{5}|(?:1800|8)\\\\\\\\d{7,9}\\\",[6,8,9,10,11,12,13],[[\\\"(\\\\\\\\d)(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"2\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4,6})\\\",\\\"$1 $2\\\",[\\\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\\\",\\\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{5})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"346|4(?:27|9[35])|883\\\",\\\"3469|4(?:279|9(?:30|56))|8834\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"2\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[3-7]|8[2-8]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[89]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{1,2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3 $4\\\",[\\\"1\\\"]]],\\\"0\\\"],\\\"PK\\\":[\\\"92\\\",\\\"00\\\",\\\"122\\\\\\\\d{6}|[24-8]\\\\\\\\d{10,11}|9(?:[013-9]\\\\\\\\d{8,10}|2(?:[01]\\\\\\\\d\\\\\\\\d|2(?:[06-8]\\\\\\\\d|1[01]))\\\\\\\\d{7})|(?:[2-8]\\\\\\\\d{3}|92(?:[0-7]\\\\\\\\d|8[1-9]))\\\\\\\\d{6}|[24-9]\\\\\\\\d{8}|[89]\\\\\\\\d{7}\\\",[8,9,10,11,12],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2,7})\\\",\\\"$1 $2 $3\\\",[\\\"[89]0\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"1\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{6,7})\\\",\\\"$1 $2\\\",[\\\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\\\",\\\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{7,8})\\\",\\\"$1 $2\\\",[\\\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{5})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"58\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"3\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[24-9]\\\"],\\\"(0$1)\\\"]],\\\"0\\\"],\\\"PL\\\":[\\\"48\\\",\\\"00\\\",\\\"6\\\\\\\\d{5}(?:\\\\\\\\d{2})?|8\\\\\\\\d{9}|[1-9]\\\\\\\\d{6}(?:\\\\\\\\d{2})?\\\",[6,7,8,9,10],[[\\\"(\\\\\\\\d{5})\\\",\\\"$1\\\",[\\\"19\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2\\\",[\\\"11|64\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\\\",\\\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2,3})\\\",\\\"$1 $2 $3\\\",[\\\"64\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"1[2-8]|[2-7]|8[1-79]|9[145]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]]]],\\\"PM\\\":[\\\"508\\\",\\\"00\\\",\\\"(?:[45]|80\\\\\\\\d\\\\\\\\d)\\\\\\\\d{5}\\\",[6,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3\\\",[\\\"[45]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"PR\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[589]\\\\\\\\d\\\\\\\\d|787)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,0,0,0,\\\"787|939\\\"],\\\"PS\\\":[\\\"970\\\",\\\"00\\\",\\\"[2489]2\\\\\\\\d{6}|(?:1\\\\\\\\d|5)\\\\\\\\d{8}\\\",[8,9,10],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[2489]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"5\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"]]],\\\"0\\\"],\\\"PT\\\":[\\\"351\\\",\\\"00\\\",\\\"1693\\\\\\\\d{5}|(?:[26-9]\\\\\\\\d|30)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"2[12]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"16|[236-9]\\\"]]]],\\\"PW\\\":[\\\"680\\\",\\\"01[12]\\\",\\\"(?:[24-8]\\\\\\\\d\\\\\\\\d|345|900)\\\\\\\\d{4}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2-9]\\\"]]]],\\\"PY\\\":[\\\"595\\\",\\\"00\\\",\\\"59\\\\\\\\d{4,6}|9\\\\\\\\d{5,10}|(?:[2-46-8]\\\\\\\\d|5[0-8])\\\\\\\\d{4,7}\\\",[6,7,8,9,10,11],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,6})\\\",\\\"$1 $2\\\",[\\\"[2-9]0\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4,5})\\\",\\\"$1 $2\\\",[\\\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"87\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"9(?:[5-79]|8[1-6])\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[2-8]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"9\\\"]]],\\\"0\\\"],\\\"QA\\\":[\\\"974\\\",\\\"00\\\",\\\"[2-7]\\\\\\\\d{7}|800\\\\\\\\d{4}(?:\\\\\\\\d{2})?|2\\\\\\\\d{6}\\\",[7,8,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"2[126]|8\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2-7]\\\"]]]],\\\"RE\\\":[\\\"262\\\",\\\"00\\\",\\\"9769\\\\\\\\d{5}|(?:26|[68]\\\\\\\\d)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[2689]\\\"],\\\"0$1\\\"]],\\\"0\\\",0,0,0,0,\\\"26[23]|69|[89]\\\"],\\\"RO\\\":[\\\"40\\\",\\\"00\\\",\\\"(?:[2378]\\\\\\\\d|90)\\\\\\\\d{7}|[23]\\\\\\\\d{5}\\\",[6,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2\\\",[\\\"2[3-6]\\\",\\\"2[3-6]\\\\\\\\d9\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"219|31\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[23]1\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[237-9]\\\"],\\\"0$1\\\"]],\\\"0\\\",0,0,0,0,0,0,0,\\\" int \\\"],\\\"RS\\\":[\\\"381\\\",\\\"00\\\",\\\"38[02-9]\\\\\\\\d{6,9}|6\\\\\\\\d{7,9}|90\\\\\\\\d{4,8}|38\\\\\\\\d{5,6}|(?:7\\\\\\\\d\\\\\\\\d|800)\\\\\\\\d{3,9}|(?:[12]\\\\\\\\d|3[0-79])\\\\\\\\d{5,10}\\\",[6,7,8,9,10,11,12],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,9})\\\",\\\"$1 $2\\\",[\\\"(?:2[389]|39)0|[7-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5,10})\\\",\\\"$1 $2\\\",[\\\"[1-36]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"RU\\\":[\\\"7\\\",\\\"810\\\",\\\"8\\\\\\\\d{13}|[347-9]\\\\\\\\d{9}\\\",[10,14],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"7(?:1[0-8]|2[1-9])\\\",\\\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\\\",\\\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\\\"],\\\"8 ($1)\\\",1],[\\\"(\\\\\\\\d{5})(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"7(?:1[0-68]|2[1-9])\\\",\\\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\\\",\\\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\\\"],\\\"8 ($1)\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"7\\\"],\\\"8 ($1)\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2-$3-$4\\\",[\\\"[349]|8(?:[02-7]|1[1-8])\\\"],\\\"8 ($1)\\\",1],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"8\\\"],\\\"8 ($1)\\\"]],\\\"8\\\",0,0,0,0,\\\"3[04-689]|[489]\\\",0,\\\"8~10\\\"],\\\"RW\\\":[\\\"250\\\",\\\"00\\\",\\\"(?:06|[27]\\\\\\\\d\\\\\\\\d|[89]00)\\\\\\\\d{6}\\\",[8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"0\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[7-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"2\\\"]]],\\\"0\\\"],\\\"SA\\\":[\\\"966\\\",\\\"00\\\",\\\"92\\\\\\\\d{7}|(?:[15]|8\\\\\\\\d)\\\\\\\\d{8}\\\",[9,10],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"9\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"5\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"81\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]]],\\\"0\\\"],\\\"SB\\\":[\\\"677\\\",\\\"0[01]\\\",\\\"(?:[1-6]|[7-9]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{4}\\\",[5,7],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"7|8[4-9]|9(?:[1-8]|9[0-8])\\\"]]]],\\\"SC\\\":[\\\"248\\\",\\\"010|0[0-2]\\\",\\\"8000\\\\\\\\d{3}|(?:[249]\\\\\\\\d|64)\\\\\\\\d{5}\\\",[7],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[246]|9[57]\\\"]]],0,0,0,0,0,0,0,\\\"00\\\"],\\\"SD\\\":[\\\"249\\\",\\\"00\\\",\\\"[19]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[19]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"SE\\\":[\\\"46\\\",\\\"00\\\",\\\"(?:[26]\\\\\\\\d\\\\\\\\d|9)\\\\\\\\d{9}|[1-9]\\\\\\\\d{8}|[1-689]\\\\\\\\d{7}|[1-4689]\\\\\\\\d{6}|2\\\\\\\\d{5}\\\",[6,7,8,9,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2,3})(\\\\\\\\d{2})\\\",\\\"$1-$2 $3\\\",[\\\"20\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2\\\",[\\\"9(?:00|39|44)\\\"],\\\"0$1\\\",0,\\\"$1 $2\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})\\\",\\\"$1-$2 $3\\\",[\\\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{2,3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1-$2 $3 $4\\\",[\\\"8\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3 $4\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2,3})(\\\\\\\\d{2})\\\",\\\"$1-$2 $3\\\",[\\\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2,3})(\\\\\\\\d{3})\\\",\\\"$1-$2 $3\\\",[\\\"9(?:00|39|44)\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2,3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1-$2 $3 $4\\\",[\\\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3 $4\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1-$2 $3 $4\\\",[\\\"10|7\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3 $4\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})\\\",\\\"$1-$2 $3 $4\\\",[\\\"8\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3 $4\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1-$2 $3 $4\\\",[\\\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3 $4\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1-$2 $3 $4\\\",[\\\"9\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3 $4\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1-$2 $3 $4 $5\\\",[\\\"[26]\\\"],\\\"0$1\\\",0,\\\"$1 $2 $3 $4 $5\\\"]],\\\"0\\\"],\\\"SG\\\":[\\\"65\\\",\\\"0[0-3]\\\\\\\\d\\\",\\\"(?:(?:1\\\\\\\\d|8)\\\\\\\\d\\\\\\\\d|7000)\\\\\\\\d{7}|[3689]\\\\\\\\d{7}\\\",[8,10,11],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[369]|8(?:0[1-5]|[1-9])\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"7\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"]]]],\\\"SH\\\":[\\\"290\\\",\\\"00\\\",\\\"(?:[256]\\\\\\\\d|8)\\\\\\\\d{3}\\\",[4,5],0,0,0,0,0,0,\\\"[256]\\\"],\\\"SI\\\":[\\\"386\\\",\\\"00|10(?:22|66|88|99)\\\",\\\"[1-7]\\\\\\\\d{7}|8\\\\\\\\d{4,7}|90\\\\\\\\d{4,6}\\\",[5,6,7,8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,6})\\\",\\\"$1 $2\\\",[\\\"8[09]|9\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"59|8\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[37][01]|4[0139]|51|6\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[1-57]\\\"],\\\"(0$1)\\\"]],\\\"0\\\",0,0,0,0,0,0,\\\"00\\\"],\\\"SJ\\\":[\\\"47\\\",\\\"00\\\",\\\"0\\\\\\\\d{4}|(?:[489]\\\\\\\\d|[57]9)\\\\\\\\d{6}\\\",[5,8],0,0,0,0,0,0,\\\"79\\\"],\\\"SK\\\":[\\\"421\\\",\\\"00\\\",\\\"[2-689]\\\\\\\\d{8}|[2-59]\\\\\\\\d{6}|[2-5]\\\\\\\\d{5}\\\",[6,7,9],[[\\\"(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"21\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2,3})\\\",\\\"$1 $2 $3\\\",[\\\"[3-5][1-8]1\\\",\\\"[3-5][1-8]1[67]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})\\\",\\\"$1/$2 $3 $4\\\",[\\\"2\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[689]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1/$2 $3 $4\\\",[\\\"[3-5]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"SL\\\":[\\\"232\\\",\\\"00\\\",\\\"(?:[237-9]\\\\\\\\d|66)\\\\\\\\d{6}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"[236-9]\\\"],\\\"(0$1)\\\"]],\\\"0\\\"],\\\"SM\\\":[\\\"378\\\",\\\"00\\\",\\\"(?:0549|[5-7]\\\\\\\\d)\\\\\\\\d{6}\\\",[8,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[5-7]\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"0\\\"]]],0,0,\\\"([89]\\\\\\\\d{5})$\\\",\\\"0549$1\\\"],\\\"SN\\\":[\\\"221\\\",\\\"00\\\",\\\"(?:[378]\\\\\\\\d|93)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"8\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[379]\\\"]]]],\\\"SO\\\":[\\\"252\\\",\\\"00\\\",\\\"[346-9]\\\\\\\\d{8}|[12679]\\\\\\\\d{7}|[1-5]\\\\\\\\d{6}|[1348]\\\\\\\\d{5}\\\",[6,7,8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"8[125]\\\"]],[\\\"(\\\\\\\\d{6})\\\",\\\"$1\\\",[\\\"[134]\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"[15]|2[0-79]|3[0-46-8]|4[0-7]\\\"]],[\\\"(\\\\\\\\d)(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"24|[67]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[3478]|64|90\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5,7})\\\",\\\"$1 $2\\\",[\\\"1|28|6(?:0[5-7]|[1-35-9])|9[2-9]\\\"]]],\\\"0\\\"],\\\"SR\\\":[\\\"597\\\",\\\"00\\\",\\\"(?:[2-5]|68|[78]\\\\\\\\d)\\\\\\\\d{5}\\\",[6,7],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1-$2-$3\\\",[\\\"56\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1-$2\\\",[\\\"[2-5]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1-$2\\\",[\\\"[6-8]\\\"]]]],\\\"SS\\\":[\\\"211\\\",\\\"00\\\",\\\"[19]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[19]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"ST\\\":[\\\"239\\\",\\\"00\\\",\\\"(?:22|9\\\\\\\\d)\\\\\\\\d{5}\\\",[7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[29]\\\"]]]],\\\"SV\\\":[\\\"503\\\",\\\"00\\\",\\\"[267]\\\\\\\\d{7}|[89]00\\\\\\\\d{4}(?:\\\\\\\\d{4})?\\\",[7,8,11],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[89]\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[267]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[89]\\\"]]]],\\\"SX\\\":[\\\"1\\\",\\\"011\\\",\\\"7215\\\\\\\\d{6}|(?:[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|(5\\\\\\\\d{6})$\\\",\\\"721$1\\\",0,\\\"721\\\"],\\\"SY\\\":[\\\"963\\\",\\\"00\\\",\\\"[1-39]\\\\\\\\d{8}|[1-5]\\\\\\\\d{7}\\\",[8,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[1-5]\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"9\\\"],\\\"0$1\\\",1]],\\\"0\\\"],\\\"SZ\\\":[\\\"268\\\",\\\"00\\\",\\\"0800\\\\\\\\d{4}|(?:[237]\\\\\\\\d|900)\\\\\\\\d{6}\\\",[8,9],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[0237]\\\"]],[\\\"(\\\\\\\\d{5})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"9\\\"]]]],\\\"TA\\\":[\\\"290\\\",\\\"00\\\",\\\"8\\\\\\\\d{3}\\\",[4],0,0,0,0,0,0,\\\"8\\\"],\\\"TC\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[58]\\\\\\\\d\\\\\\\\d|649|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-479]\\\\\\\\d{6})$\\\",\\\"649$1\\\",0,\\\"649\\\"],\\\"TD\\\":[\\\"235\\\",\\\"00|16\\\",\\\"(?:22|[69]\\\\\\\\d|77)\\\\\\\\d{6}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[2679]\\\"]]],0,0,0,0,0,0,0,\\\"00\\\"],\\\"TG\\\":[\\\"228\\\",\\\"00\\\",\\\"[279]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[279]\\\"]]]],\\\"TH\\\":[\\\"66\\\",\\\"00[1-9]\\\",\\\"(?:001800|[2-57]|[689]\\\\\\\\d)\\\\\\\\d{7}|1\\\\\\\\d{7,9}\\\",[8,9,10,13],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"2\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[13-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"]]],\\\"0\\\"],\\\"TJ\\\":[\\\"992\\\",\\\"810\\\",\\\"(?:00|[1-57-9]\\\\\\\\d)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d{6})(\\\\\\\\d)(\\\\\\\\d{2})\\\",\\\"$1 $2 $3\\\",[\\\"331\\\",\\\"3317\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[34]7|91[78]\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d)(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"3[1-5]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[0-57-9]\\\"]]],0,0,0,0,0,0,0,\\\"8~10\\\"],\\\"TK\\\":[\\\"690\\\",\\\"00\\\",\\\"[2-47]\\\\\\\\d{3,6}\\\",[4,5,6,7]],\\\"TL\\\":[\\\"670\\\",\\\"00\\\",\\\"7\\\\\\\\d{7}|(?:[2-47]\\\\\\\\d|[89]0)\\\\\\\\d{5}\\\",[7,8],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[2-489]|70\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"7\\\"]]]],\\\"TM\\\":[\\\"993\\\",\\\"810\\\",\\\"[1-6]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2-$3-$4\\\",[\\\"12\\\"],\\\"(8 $1)\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d)(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2-$3-$4\\\",[\\\"[1-5]\\\"],\\\"(8 $1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"6\\\"],\\\"8 $1\\\"]],\\\"8\\\",0,0,0,0,0,0,\\\"8~10\\\"],\\\"TN\\\":[\\\"216\\\",\\\"00\\\",\\\"[2-57-9]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[2-57-9]\\\"]]]],\\\"TO\\\":[\\\"676\\\",\\\"00\\\",\\\"(?:0800|(?:[5-8]\\\\\\\\d\\\\\\\\d|999)\\\\\\\\d)\\\\\\\\d{3}|[2-8]\\\\\\\\d{4}\\\",[5,7],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1-$2\\\",[\\\"[2-4]|50|6[09]|7[0-24-69]|8[05]\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3})\\\",\\\"$1 $2\\\",[\\\"0\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[5-9]\\\"]]]],\\\"TR\\\":[\\\"90\\\",\\\"00\\\",\\\"4\\\\\\\\d{6}|8\\\\\\\\d{11,12}|(?:[2-58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[7,10,12,13],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"512|8[01589]|90\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"5(?:[0-59]|61)\\\",\\\"5(?:[0-59]|616)\\\",\\\"5(?:[0-59]|6161)\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[24][1-8]|3[1-9]\\\"],\\\"(0$1)\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{6,7})\\\",\\\"$1 $2 $3\\\",[\\\"80\\\"],\\\"0$1\\\",1]],\\\"0\\\"],\\\"TT\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-46-8]\\\\\\\\d{6})$\\\",\\\"868$1\\\",0,\\\"868\\\"],\\\"TV\\\":[\\\"688\\\",\\\"00\\\",\\\"(?:2|7\\\\\\\\d\\\\\\\\d|90)\\\\\\\\d{4}\\\",[5,6,7],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})\\\",\\\"$1 $2\\\",[\\\"2\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"90\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"7\\\"]]]],\\\"TW\\\":[\\\"886\\\",\\\"0(?:0[25-79]|19)\\\",\\\"[2-689]\\\\\\\\d{8}|7\\\\\\\\d{9,10}|[2-8]\\\\\\\\d{7}|2\\\\\\\\d{6}\\\",[7,8,9,10,11],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d)(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"202\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[258]0\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3,4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\\\",\\\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[49]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4,5})\\\",\\\"$1 $2 $3\\\",[\\\"7\\\"],\\\"0$1\\\"]],\\\"0\\\",0,0,0,0,0,0,0,\\\"#\\\"],\\\"TZ\\\":[\\\"255\\\",\\\"00[056]\\\",\\\"(?:[26-8]\\\\\\\\d|41|90)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[89]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[24]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[67]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"UA\\\":[\\\"380\\\",\\\"00\\\",\\\"[89]\\\\\\\\d{9}|[3-9]\\\\\\\\d{8}\\\",[9,10],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\\\",\\\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\\\",\\\"4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"[3-6]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[89]\\\"],\\\"0$1\\\"]],\\\"0\\\",0,0,0,0,0,0,\\\"0~0\\\"],\\\"UG\\\":[\\\"256\\\",\\\"00[057]\\\",\\\"800\\\\\\\\d{6}|(?:[29]0|[347]\\\\\\\\d)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"202\\\",\\\"2024\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"[27-9]|4(?:6[45]|[7-9])\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"[34]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"US\\\":[\\\"1\\\",\\\"011\\\",\\\"[2-9]\\\\\\\\d{9}\\\",[10],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"($1) $2-$3\\\",[\\\"[2-9]\\\"],0,1,\\\"$1-$2-$3\\\"]],\\\"1\\\",0,0,0,0,0,[[\\\"5(?:05(?:[2-57-9]\\\\\\\\d\\\\\\\\d|6(?:[0-35-9]\\\\\\\\d|44))|82(?:2(?:0[0-3]|[268]2)|3(?:0[02]|33)|4(?:00|4[24]|65|82)|5(?:00|29|83)|6(?:00|66|82)|777|8(?:00|88)|9(?:00|9[89])))\\\\\\\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[39]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[0179]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-289]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01579]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\\\\\d{6}\\\"],[\\\"\\\"],[\\\"8(?:00|33|44|55|66|77|88)[2-9]\\\\\\\\d{6}\\\"],[\\\"900[2-9]\\\\\\\\d{6}\\\"],[\\\"52(?:3(?:[2-46-9][02-9]\\\\\\\\d|5(?:[02-46-9]\\\\\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\\\\\d|5(?:[034]\\\\\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\\\\\d)|9(?:[05-9]\\\\\\\\d|2[0-5]|49)))\\\\\\\\d{4}|52[34][2-9]1[02-9]\\\\\\\\d{4}|5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\\\\\d{6}\\\"]]],\\\"UY\\\":[\\\"598\\\",\\\"0(?:0|1[3-9]\\\\\\\\d)\\\",\\\"4\\\\\\\\d{9}|[1249]\\\\\\\\d{7}|(?:[49]\\\\\\\\d|80)\\\\\\\\d{5}\\\",[7,8,10],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"405|8|90\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"9\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[124]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"4\\\"],\\\"0$1\\\"]],\\\"0\\\",0,0,0,0,0,0,\\\"00\\\",\\\" int. \\\"],\\\"UZ\\\":[\\\"998\\\",\\\"810\\\",\\\"(?:33|55|[679]\\\\\\\\d|88)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[35-9]\\\"],\\\"8 $1\\\"]],\\\"8\\\",0,0,0,0,0,0,\\\"8~10\\\"],\\\"VA\\\":[\\\"39\\\",\\\"00\\\",\\\"0\\\\\\\\d{5,10}|3[0-8]\\\\\\\\d{7,10}|55\\\\\\\\d{8}|8\\\\\\\\d{5}(?:\\\\\\\\d{2,4})?|(?:1\\\\\\\\d|39)\\\\\\\\d{7,8}\\\",[6,7,8,9,10,11],0,0,0,0,0,0,\\\"06698\\\"],\\\"VC\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:[58]\\\\\\\\d\\\\\\\\d|784|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-7]\\\\\\\\d{6})$\\\",\\\"784$1\\\",0,\\\"784\\\"],\\\"VE\\\":[\\\"58\\\",\\\"00\\\",\\\"[68]00\\\\\\\\d{7}|(?:[24]\\\\\\\\d|[59]0)\\\\\\\\d{8}\\\",[10],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{7})\\\",\\\"$1-$2\\\",[\\\"[24-689]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"VG\\\":[\\\"1\\\",\\\"011\\\",\\\"(?:284|[58]\\\\\\\\d\\\\\\\\d|900)\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-578]\\\\\\\\d{6})$\\\",\\\"284$1\\\",0,\\\"284\\\"],\\\"VI\\\":[\\\"1\\\",\\\"011\\\",\\\"[58]\\\\\\\\d{9}|(?:34|90)0\\\\\\\\d{7}\\\",[10],0,\\\"1\\\",0,\\\"1|([2-9]\\\\\\\\d{6})$\\\",\\\"340$1\\\",0,\\\"340\\\"],\\\"VN\\\":[\\\"84\\\",\\\"00\\\",\\\"[12]\\\\\\\\d{9}|[135-9]\\\\\\\\d{8}|[16]\\\\\\\\d{7}|[16-8]\\\\\\\\d{6}\\\",[7,8,9,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"80\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4,6})\\\",\\\"$1 $2\\\",[\\\"1\\\"],0,1],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[69]\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[3578]\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"2[48]\\\"],\\\"0$1\\\",1],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"2\\\"],\\\"0$1\\\",1]],\\\"0\\\"],\\\"VU\\\":[\\\"678\\\",\\\"00\\\",\\\"[57-9]\\\\\\\\d{6}|(?:[238]\\\\\\\\d|48)\\\\\\\\d{3}\\\",[5,7],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[57-9]\\\"]]]],\\\"WF\\\":[\\\"681\\\",\\\"00\\\",\\\"(?:40|72)\\\\\\\\d{4}|8\\\\\\\\d{5}(?:\\\\\\\\d{3})?\\\",[6,9],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3\\\",[\\\"[478]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{2})\\\",\\\"$1 $2 $3 $4\\\",[\\\"8\\\"]]]],\\\"WS\\\":[\\\"685\\\",\\\"0\\\",\\\"(?:[2-6]|8\\\\\\\\d{5})\\\\\\\\d{4}|[78]\\\\\\\\d{6}|[68]\\\\\\\\d{5}\\\",[5,6,7,10],[[\\\"(\\\\\\\\d{5})\\\",\\\"$1\\\",[\\\"[2-5]|6[1-9]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,7})\\\",\\\"$1 $2\\\",[\\\"[68]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"7\\\"]]]],\\\"XK\\\":[\\\"383\\\",\\\"00\\\",\\\"[23]\\\\\\\\d{7,8}|(?:4\\\\\\\\d\\\\\\\\d|[89]00)\\\\\\\\d{5}\\\",[8,9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"[89]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[2-4]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[23]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"YE\\\":[\\\"967\\\",\\\"00\\\",\\\"(?:1|7\\\\\\\\d)\\\\\\\\d{7}|[1-7]\\\\\\\\d{6}\\\",[7,8,9],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"[1-6]|7[24-68]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"7\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"YT\\\":[\\\"262\\\",\\\"00\\\",\\\"80\\\\\\\\d{7}|(?:26|63)9\\\\\\\\d{6}\\\",[9],0,\\\"0\\\",0,0,0,0,\\\"269|63\\\"],\\\"ZA\\\":[\\\"27\\\",\\\"00\\\",\\\"[1-79]\\\\\\\\d{8}|8\\\\\\\\d{4,9}\\\",[5,6,7,8,9,10],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})\\\",\\\"$1 $2\\\",[\\\"8[1-4]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{2,3})\\\",\\\"$1 $2 $3\\\",[\\\"8[1-4]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"860\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[1-9]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"8\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"ZM\\\":[\\\"260\\\",\\\"00\\\",\\\"800\\\\\\\\d{6}|(?:21|63|[79]\\\\\\\\d)\\\\\\\\d{7}\\\",[9],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[28]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"[79]\\\"],\\\"0$1\\\"]],\\\"0\\\"],\\\"ZW\\\":[\\\"263\\\",\\\"00\\\",\\\"2(?:[0-57-9]\\\\\\\\d{6,8}|6[0-24-9]\\\\\\\\d{6,7})|[38]\\\\\\\\d{9}|[35-8]\\\\\\\\d{8}|[3-6]\\\\\\\\d{7}|[1-689]\\\\\\\\d{6}|[1-3569]\\\\\\\\d{5}|[1356]\\\\\\\\d{4}\\\",[5,6,7,8,9,10],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3,5})\\\",\\\"$1 $2\\\",[\\\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{2,4})\\\",\\\"$1 $2 $3\\\",[\\\"[49]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"80\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{7})\\\",\\\"$1 $2\\\",[\\\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\\\",\\\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\\\"],\\\"(0$1)\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"7\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\\\",\\\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"8\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,5})\\\",\\\"$1 $2\\\",[\\\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3})(\\\\\\\\d{3,4})\\\",\\\"$1 $2 $3\\\",[\\\"29[013-9]|39|54\\\"],\\\"0$1\\\"],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{3,5})\\\",\\\"$1 $2\\\",[\\\"(?:25|54)8\\\",\\\"258|5483\\\"],\\\"0$1\\\"]],\\\"0\\\"]},\\\"nonGeographic\\\":{\\\"800\\\":[\\\"800\\\",0,\\\"(?:005|[1-9]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{5}\\\",[8],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"\\\\\\\\d\\\"]]],0,0,0,0,0,0,[0,0,[\\\"(?:005|[1-9]\\\\\\\\d\\\\\\\\d)\\\\\\\\d{5}\\\"]]],\\\"808\\\":[\\\"808\\\",0,\\\"[1-9]\\\\\\\\d{7}\\\",[8],[[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2\\\",[\\\"[1-9]\\\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\\\"[1-9]\\\\\\\\d{7}\\\"]]],\\\"870\\\":[\\\"870\\\",0,\\\"7\\\\\\\\d{11}|[35-7]\\\\\\\\d{8}\\\",[9,12],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"[35-7]\\\"]]],0,0,0,0,0,0,[0,[\\\"(?:[356]|774[45])\\\\\\\\d{8}|7[6-8]\\\\\\\\d{7}\\\"]]],\\\"878\\\":[\\\"878\\\",0,\\\"10\\\\\\\\d{10}\\\",[12],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})(\\\\\\\\d{5})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\\\"10\\\\\\\\d{10}\\\"]]],\\\"881\\\":[\\\"881\\\",0,\\\"[0-36-9]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d)(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2 $3\\\",[\\\"[0-36-9]\\\"]]],0,0,0,0,0,0,[0,[\\\"[0-36-9]\\\\\\\\d{8}\\\"]]],\\\"882\\\":[\\\"882\\\",0,\\\"[13]\\\\\\\\d{6}(?:\\\\\\\\d{2,5})?|285\\\\\\\\d{9}|(?:[19]\\\\\\\\d|49)\\\\\\\\d{6}\\\",[7,8,9,10,11,12],[[\\\"(\\\\\\\\d{2})(\\\\\\\\d{5})\\\",\\\"$1 $2\\\",[\\\"16|342\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{6})\\\",\\\"$1 $2\\\",[\\\"4\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{2})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[19]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"3[23]\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{3,4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"1\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"34[57]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"34\\\"]],[\\\"(\\\\\\\\d{2})(\\\\\\\\d{4,5})(\\\\\\\\d{5})\\\",\\\"$1 $2 $3\\\",[\\\"[1-3]\\\"]]],0,0,0,0,0,0,[0,[\\\"342\\\\\\\\d{4}|(?:337|49)\\\\\\\\d{6}|3(?:2|47|7\\\\\\\\d{3})\\\\\\\\d{7}\\\",[7,8,9,10,12]],0,0,0,0,0,0,[\\\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\\\\\d{4}|6\\\\\\\\d{5,10})|(?:(?:285\\\\\\\\d\\\\\\\\d|3(?:45|[69]\\\\\\\\d{3}))\\\\\\\\d|9[89])\\\\\\\\d{6}\\\"]]],\\\"883\\\":[\\\"883\\\",0,\\\"(?:210|370\\\\\\\\d\\\\\\\\d)\\\\\\\\d{7}|51\\\\\\\\d{7}(?:\\\\\\\\d{3})?\\\",[9,10,12],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3\\\",[\\\"510\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"2\\\"]],[\\\"(\\\\\\\\d{4})(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"51[13]\\\"]],[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{3})\\\",\\\"$1 $2 $3 $4\\\",[\\\"[35]\\\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\\\"(?:210|(?:370[1-9]|51[013]0)\\\\\\\\d)\\\\\\\\d{7}|5100\\\\\\\\d{5}\\\"]]],\\\"888\\\":[\\\"888\\\",0,\\\"\\\\\\\\d{11}\\\",[11],[[\\\"(\\\\\\\\d{3})(\\\\\\\\d{3})(\\\\\\\\d{5})\\\",\\\"$1 $2 $3\\\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\\\"\\\\\\\\d{11}\\\"]]],\\\"979\\\":[\\\"979\\\",0,\\\"[1359]\\\\\\\\d{8}\\\",[9],[[\\\"(\\\\\\\\d)(\\\\\\\\d{4})(\\\\\\\\d{4})\\\",\\\"$1 $2 $3\\\",[\\\"[1359]\\\"]]],0,0,0,0,0,0,[0,0,0,[\\\"[1359]\\\\\\\\d{8}\\\"]]]}}\");\n\n/***/ }),\n\n/***/ 2415:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return applyInternationalSeparatorStyle; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2347);\n // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nfunction applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(_constants__WEBPACK_IMPORTED_MODULE_0__[/* VALID_PUNCTUATION */ \"f\"], \"]+\"), 'g'), ' ').trim();\n}\n\n/***/ }),\n\n/***/ 2416:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return extractCountryCallingCode; });\n/* harmony import */ var _stripIddPrefix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2380);\n/* harmony import */ var _extractCountryCallingCodeFromInternationalNumberWithoutPlusSign__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2381);\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2342);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2347);\n\n\n\n\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nfunction extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = Object(_stripIddPrefix__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = Object(_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new _metadata__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"](metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= _constants__WEBPACK_IMPORTED_MODULE_3__[/* MAX_LENGTH_COUNTRY_CODE */ \"a\"] && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}\n\n/***/ }),\n\n/***/ 2417:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return extractNationalNumber; });\n/* harmony import */ var _extractNationalNumberFromPossiblyIncompleteNumber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2418);\n/* harmony import */ var _matchesEntirely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2353);\n/* harmony import */ var _checkNumberLength__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2369);\n\n\n\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nfunction extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = Object(_extractNationalNumberFromPossiblyIncompleteNumber__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(number, metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode;\n\n  if (!shouldExtractNationalPrefix(number, nationalNumber, metadata)) {\n    // Don't strip the national prefix.\n    return {\n      nationalNumber: number\n    };\n  } // If a national prefix has been extracted, check to see\n  // if the resultant number isn't too short.\n  // Same code in Google's `libphonenumber`:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3291-L3302\n  // For some reason, they do this check right after the `national_number_pattern` check\n  // this library does in `shouldExtractNationalPrefix()` function.\n  // Why is there a second \"resultant\" number validity check?\n  // They don't provide an explanation.\n  // This library just copies the behavior.\n\n\n  if (number.length !== nationalNumber.length + (carrierCode ? carrierCode.length : 0)) {\n    // If not using legacy generated metadata (before version `1.0.18`)\n    // then it has \"possible lengths\", so use those to validate the number length.\n    if (metadata.possibleLengths()) {\n      // \"We require that the NSN remaining after stripping the national prefix and\n      // carrier code be long enough to be a possible length for the region.\n      // Otherwise, we don't do the stripping, since the original number could be\n      // a valid short number.\"\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      switch (Object(_checkNumberLength__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"])(nationalNumber, metadata)) {\n        case 'TOO_SHORT':\n        case 'INVALID_LENGTH':\n          // case 'IS_POSSIBLE_LOCAL_ONLY':\n          // Don't strip the national prefix.\n          return {\n            nationalNumber: number\n          };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldExtractNationalPrefix(number, nationalSignificantNumber, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (Object(_matchesEntirely__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(number, metadata.nationalNumberPattern()) && !Object(_matchesEntirely__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(nationalSignificantNumber, metadata.nationalNumberPattern())) {\n    return false;\n  } // Just \"possible\" number check would be more relaxed, so it's not used.\n  // if (isPossibleNumber(number, metadata) &&\n  // \t!isPossibleNumber(numberWithNationalPrefixExtracted, metadata)) {\n  // \treturn false\n  // }\n\n\n  return true;\n}\n\n/***/ }),\n\n/***/ 2418:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return extractNationalNumberFromPossiblyIncompleteNumber; });\n/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`.\r\n */\nfunction extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n        // then carrier code is the first one.\n\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\n\n/***/ }),\n\n/***/ 2419:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getCountryByCallingCode; });\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2342);\n/* harmony import */ var _getNumberType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2382);\n\n\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nfunction getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new _metadata__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n\n  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest and fastest one.\n    // Leading digits patterns are only defined for about 20% of all countries.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // Matching \"leading digits\" is a sufficient but not necessary condition.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (Object(_getNumberType__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      return country;\n    }\n  }\n}\n\n/***/ }),\n\n/***/ 2420:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isPossiblePhoneNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return isPossibleNumber; });\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2342);\n/* harmony import */ var _helpers_checkNumberLength__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2369);\n\n\nfunction isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new _metadata__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  }\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nfunction isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (Object(_helpers_checkNumberLength__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n\n/***/ }),\n\n/***/ 2421:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return parseRFC3966; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return formatRFC3966; });\n/* harmony import */ var _isViablePhoneNumber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2422);\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nfunction parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var part = _ref;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!Object(_isViablePhoneNumber__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nfunction formatRFC3966(_ref2) {\n  var number = _ref2.number,\n      ext = _ref2.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n\n/***/ }),\n\n/***/ 2422:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export VALID_PHONE_NUMBER */\n/* unused harmony export VALID_PHONE_NUMBER_WITH_EXTENSION */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isViablePhoneNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return isViablePhoneNumberStart; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2347);\n/* harmony import */ var _extension_createExtensionPattern__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2423);\n\n //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + _constants__WEBPACK_IMPORTED_MODULE_0__[/* VALID_DIGITS */ \"e\"] + ']{' + _constants__WEBPACK_IMPORTED_MODULE_0__[/* MIN_LENGTH_FOR_NSN */ \"c\"] + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nvar VALID_PHONE_NUMBER = '[' + _constants__WEBPACK_IMPORTED_MODULE_0__[/* PLUS_CHARS */ \"d\"] + ']{0,1}' + '(?:' + '[' + _constants__WEBPACK_IMPORTED_MODULE_0__[/* VALID_PUNCTUATION */ \"f\"] + ']*' + '[' + _constants__WEBPACK_IMPORTED_MODULE_0__[/* VALID_DIGITS */ \"e\"] + ']' + '){3,}' + '[' + _constants__WEBPACK_IMPORTED_MODULE_0__[/* VALID_PUNCTUATION */ \"f\"] + _constants__WEBPACK_IMPORTED_MODULE_0__[/* VALID_DIGITS */ \"e\"] + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + _constants__WEBPACK_IMPORTED_MODULE_0__[/* PLUS_CHARS */ \"d\"] + ']{0,1}' + '(?:' + '[' + _constants__WEBPACK_IMPORTED_MODULE_0__[/* VALID_PUNCTUATION */ \"f\"] + ']*' + '[' + _constants__WEBPACK_IMPORTED_MODULE_0__[/* VALID_DIGITS */ \"e\"] + ']' + '){1,2}' + '$', 'i');\nvar VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + Object(_extension_createExtensionPattern__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nfunction isViablePhoneNumber(number) {\n  return number.length >= _constants__WEBPACK_IMPORTED_MODULE_0__[/* MIN_LENGTH_FOR_NSN */ \"c\"] && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nfunction isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}\n\n/***/ }),\n\n/***/ 2423:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return createExtensionPattern; });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2347);\n // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(_constants__WEBPACK_IMPORTED_MODULE_0__[/* VALID_DIGITS */ \"e\"], \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nfunction createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n\n/***/ }),\n\n/***/ 2424:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getInternationalPhoneNumberPrefix; });\n/* harmony import */ var libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2342);\n\nvar ONLY_DIGITS_REGEXP = /^\\d+$/;\nfunction getInternationalPhoneNumberPrefix(country, metadata) {\n  // Standard international phone number prefix: \"+\" and \"country calling code\".\n  var prefix = '+' + Object(libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__[/* getCountryCallingCode */ \"b\"])(country, metadata); // Get \"leading digits\" for a phone number of the country.\n  // If there're \"leading digits\" then they can be part of the prefix too.\n\n  metadata = new libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata);\n  metadata.selectNumberingPlan(country);\n\n  if (metadata.numberingPlan.leadingDigits() && ONLY_DIGITS_REGEXP.test(metadata.numberingPlan.leadingDigits())) {\n    prefix += metadata.numberingPlan.leadingDigits();\n  }\n\n  return prefix;\n}\n\n/***/ }),\n\n/***/ 2425:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getInputValuePrefix; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return removeInputValuePrefix; });\n/* harmony import */ var libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2342);\n\nfunction getInputValuePrefix(_ref) {\n  var country = _ref.country,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      metadata = _ref.metadata;\n  return country && international && !withCountryCallingCode ? \"+\".concat(Object(libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__[/* getCountryCallingCode */ \"b\"])(country, metadata)) : '';\n}\nfunction removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n\n  return value;\n}\n\n/***/ }),\n\n/***/ 2426:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ParseError; });\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // https://stackoverflow.com/a/46971044/970769\n\n\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\n\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n\n/***/ }),\n\n/***/ 2430:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ min_isValidPhoneNumber; });\n\n// UNUSED EXPORTS: parsePhoneNumber, formatPhoneNumber, formatPhoneNumberIntl, isPossiblePhoneNumber, getCountries, getCountryCallingCode, isSupportedCountry\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/metadata.min.json\nvar metadata_min = __webpack_require__(2414);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js\nvar parsePhoneNumberFromString = __webpack_require__(2556);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/libphonenumber/formatPhoneNumber.js\nvar formatPhoneNumber = __webpack_require__(2557);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isValidPhoneNumber.js\nvar isValidPhoneNumber = __webpack_require__(2558);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isPossiblePhoneNumber.js\nvar isPossiblePhoneNumber = __webpack_require__(2559);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/getCountries.js\nvar getCountries = __webpack_require__(2560);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/metadata.js + 1 modules\nvar es6_metadata = __webpack_require__(2342);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/locale/en.json\nvar en = __webpack_require__(2530);\n\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(64);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/PropTypes.js\n\nvar PropTypes_metadata = prop_types_default.a.shape({\n  country_calling_codes: prop_types_default.a.object.isRequired,\n  countries: prop_types_default.a.object.isRequired\n});\nvar PropTypes_labels = prop_types_default.a.objectOf(prop_types_default.a.string);\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(10);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/InputSmart.js + 9 modules\nvar InputSmart = __webpack_require__(2431);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/InputBasic.js + 1 modules\nvar InputBasic = __webpack_require__(2438);\n\n// CONCATENATED MODULE: ./node_modules/country-flag-icons/modules/unicode.js\n/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\nfunction getCountryFlag(country) {\n  return getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1]);\n}\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\n\nfunction getRegionalIndicatorSymbol(letter) {\n  return String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0));\n}\n// CONCATENATED MODULE: ./node_modules/country-flag-icons/unicode/index.js\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/CountrySelect.js\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n\n\n\n\nfunction CountrySelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      options = _ref.options,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"options\"]);\n\n  var onChange_ = Object(react[\"useCallback\"])(function (event) {\n    var value = event.target.value;\n    onChange(value === 'ZZ' ? undefined : value);\n  }, [onChange]);\n  var selectedOption = Object(react[\"useMemo\"])(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]); // \"ZZ\" means \"International\".\n  // (HTML requires each `<option/>` have some string `value`).\n\n  return react_default.a.createElement(\"select\", _extends({}, rest, {\n    value: value || 'ZZ',\n    onChange: onChange_\n  }), options.map(function (_ref2) {\n    var value = _ref2.value,\n        label = _ref2.label,\n        divider = _ref2.divider;\n    return react_default.a.createElement(\"option\", {\n      key: divider ? '|' : value || 'ZZ',\n      value: divider ? '|' : value || 'ZZ',\n      disabled: divider ? true : false,\n      style: divider ? DIVIDER_STYLE : undefined\n    }, label);\n  }));\n}\nCountrySelect.propTypes = {\n  /**\r\n   * A two-letter country code.\r\n   * Example: \"US\", \"RU\", etc.\r\n   */\n  value: prop_types_default.a.string,\n\n  /**\r\n   * A function of `value: string`.\r\n   * Updates the `value` property.\r\n   */\n  onChange: prop_types_default.a.func.isRequired,\n  // `<select/>` options.\n  options: prop_types_default.a.arrayOf(prop_types_default.a.shape({\n    value: prop_types_default.a.string,\n    label: prop_types_default.a.string,\n    divider: prop_types_default.a.bool\n  })).isRequired\n};\nvar DIVIDER_STYLE = {\n  fontSize: '1px',\n  backgroundColor: 'currentColor',\n  color: 'inherit'\n};\nfunction CountrySelectWithIcon(_ref3) {\n  var value = _ref3.value,\n      options = _ref3.options,\n      className = _ref3.className,\n      Icon = _ref3.iconComponent,\n      getIconAspectRatio = _ref3.getIconAspectRatio,\n      Arrow = _ref3.arrowComponent,\n      unicodeFlags = _ref3.unicodeFlags,\n      rest = _objectWithoutProperties(_ref3, [\"value\", \"options\", \"className\", \"iconComponent\", \"getIconAspectRatio\", \"arrowComponent\", \"unicodeFlags\"]);\n\n  var selectedOption = Object(react[\"useMemo\"])(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]);\n  return react_default.a.createElement(\"div\", {\n    className: \"PhoneInputCountry\"\n  }, react_default.a.createElement(CountrySelect, _extends({}, rest, {\n    value: value,\n    options: options,\n    className: classnames_default()('PhoneInputCountrySelect', className)\n  })), unicodeFlags && value && react_default.a.createElement(\"div\", {\n    className: \"PhoneInputCountryIconUnicode\"\n  }, getCountryFlag(value)), !(unicodeFlags && value) && react_default.a.createElement(Icon, {\n    country: value,\n    label: selectedOption && selectedOption.label,\n    aspectRatio: unicodeFlags ? 1 : undefined\n  }), react_default.a.createElement(Arrow, null));\n}\nCountrySelectWithIcon.propTypes = {\n  // Country flag component.\n  iconComponent: prop_types_default.a.elementType,\n  // Select arrow component.\n  arrowComponent: prop_types_default.a.elementType.isRequired,\n  // Set to `true` to render Unicode flag icons instead of SVG images.\n  unicodeFlags: prop_types_default.a.bool\n};\nCountrySelectWithIcon.defaultProps = {\n  arrowComponent: function arrowComponent() {\n    return react_default.a.createElement(\"div\", {\n      className: \"PhoneInputCountrySelectArrow\"\n    });\n  }\n};\n\nfunction getSelectedOption(options, value) {\n  for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref4 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref4 = _i.value;\n    }\n\n    var option = _ref4;\n\n    if (!option.divider && option.value === value) {\n      return option;\n    }\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/Flag.js\nfunction Flag_extends() {\n  Flag_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return Flag_extends.apply(this, arguments);\n}\n\nfunction Flag_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = Flag_objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction Flag_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n\n\n // Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\n\nfunction Flag_FlagComponent(_ref) {\n  var country = _ref.country,\n      countryName = _ref.countryName,\n      flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      rest = Flag_objectWithoutProperties(_ref, [\"country\", \"countryName\", \"flags\", \"flagUrl\"]);\n\n  if (flags && flags[country]) {\n    return flags[country]({\n      title: countryName\n    });\n  }\n\n  return react_default.a.createElement(\"img\", Flag_extends({}, rest, {\n    alt: countryName,\n    role: countryName ? undefined : \"presentation\",\n    src: flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())\n  }));\n}\nFlag_FlagComponent.propTypes = {\n  // The country to be selected by default.\n  // Two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: prop_types_default.a.string.isRequired,\n  // Will be HTML `title` attribute of the `<img/>`.\n  countryName: prop_types_default.a.string.isRequired,\n  // Country flag icon components.\n  // By default flag icons are inserted as `<img/>`s\n  // with their `src` pointed to `country-flag-icons` gitlab pages website.\n  // There might be cases (e.g. an offline application)\n  // where having a large (3 megabyte) `<svg/>` flags\n  // bundle is more appropriate.\n  // `import flags from 'react-phone-number-input/flags'`.\n  flags: prop_types_default.a.objectOf(prop_types_default.a.elementType),\n  // A URL for a country flag icon.\n  // By default it points to `country-flag-icons` gitlab pages website.\n  flagUrl: prop_types_default.a.string.isRequired\n};\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/InternationalIcon.js\nfunction InternationalIcon_extends() {\n  InternationalIcon_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return InternationalIcon_extends.apply(this, arguments);\n}\n\nfunction InternationalIcon_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = InternationalIcon_objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction InternationalIcon_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n\n\nfunction InternationalIcon_InternationalIcon(_ref) {\n  var aspectRatio = _ref.aspectRatio,\n      rest = InternationalIcon_objectWithoutProperties(_ref, [\"aspectRatio\"]);\n\n  if (aspectRatio === 1) {\n    return react_default.a.createElement(InternationalIcon1x1, rest);\n  } else {\n    return react_default.a.createElement(InternationalIcon3x2, rest);\n  }\n}\nInternationalIcon_InternationalIcon.propTypes = {\n  title: prop_types_default.a.string.isRequired,\n  aspectRatio: prop_types_default.a.number\n}; // 3x2.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon3x2(_ref2) {\n  var title = _ref2.title,\n      rest = InternationalIcon_objectWithoutProperties(_ref2, [\"title\"]);\n\n  return react_default.a.createElement(\"svg\", InternationalIcon_extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 75 50\"\n  }), react_default.a.createElement(\"title\", null, title), react_default.a.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeMiterlimit: \"10\"\n  }, react_default.a.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"\n  }), react_default.a.createElement(\"path\", {\n    d: \"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"\n  }), react_default.a.createElement(\"line\", {\n    x1: \"26\",\n    y1: \"25\",\n    x2: \"74\",\n    y2: \"25\"\n  }), react_default.a.createElement(\"line\", {\n    x1: \"50\",\n    y1: \"1\",\n    x2: \"50\",\n    y2: \"49\"\n  }), react_default.a.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"\n  }), react_default.a.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"\n  })), react_default.a.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"none\",\n    fill: \"currentColor\",\n    d: \"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"\n  }));\n}\n\nInternationalIcon3x2.propTypes = {\n  title: prop_types_default.a.string.isRequired\n}; // 1x1.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon1x1(_ref3) {\n  var title = _ref3.title,\n      rest = InternationalIcon_objectWithoutProperties(_ref3, [\"title\"]);\n\n  return react_default.a.createElement(\"svg\", InternationalIcon_extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\"\n  }), react_default.a.createElement(\"title\", null, title), react_default.a.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\"\n  }, react_default.a.createElement(\"path\", {\n    d: \"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"\n  }), react_default.a.createElement(\"path\", {\n    d: \"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"\n  }), react_default.a.createElement(\"path\", {\n    d: \"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"\n  }), react_default.a.createElement(\"path\", {\n    d: \"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"\n  }), react_default.a.createElement(\"line\", {\n    x1: \"27.8\",\n    y1: \"0.85\",\n    x2: \"27.8\",\n    y2: \"34.61\"\n  }), react_default.a.createElement(\"line\", {\n    x1: \"15.2\",\n    y1: \"22.23\",\n    x2: \"49.15\",\n    y2: \"22.23\"\n  })), react_default.a.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"transparent\",\n    fill: \"currentColor\",\n    d: \"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"\n  }));\n}\n\nInternationalIcon1x1.propTypes = {\n  title: prop_types_default.a.string.isRequired\n};\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/helpers/countries.js\n\n\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\n\nfunction sortCountryOptions(options, order) {\n  if (!order) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  for (var _iterator = order, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      (function () {\n        var countryCode = void 0;\n\n        if (element === '🌐') {\n          countryCode = undefined;\n        } else {\n          countryCode = element;\n        } // Find the position of the option.\n\n\n        var index = options.indexOf(options.filter(function (option) {\n          return option.value === countryCode;\n        })[0]); // Get the option.\n\n        var option = options[index]; // Remove the option from its default position.\n\n        options.splice(index, 1); // Add the option on top.\n\n        appendTo.push(option);\n      })();\n    }\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\nfunction getSupportedCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (option) {\n      switch (option) {\n        case '🌐':\n        case '|':\n        case '...':\n        case '…':\n          return true;\n\n        default:\n          return isCountrySupportedWithError(option, metadata);\n      }\n    });\n\n    if (countryOptions.length > 0) {\n      return countryOptions;\n    }\n  }\n}\nfunction isCountrySupportedWithError(country, metadata) {\n  if (Object(es6_metadata[\"c\" /* isSupportedCountry */])(country, metadata)) {\n    return true;\n  } else {\n    console.error(\"Country not found: \".concat(country));\n    return false;\n  }\n}\nfunction getSupportedCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/CountryIcon.js\n\n\n\n\n\nfunction createCountryIconComponent(_ref) {\n  var flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      FlagComponent = _ref.flagComponent,\n      InternationalIcon = _ref.internationalIcon;\n\n  function CountryIcon(_ref2) {\n    var country = _ref2.country,\n        label = _ref2.label,\n        aspectRatio = _ref2.aspectRatio; // `aspectRatio` is currently a hack for the default \"International\" icon\n    // to render it as a square when Unicode flag icons are used.\n    // So `aspectRatio` property is only used with the default \"International\" icon.\n\n    var _aspectRatio = InternationalIcon === InternationalIcon_InternationalIcon ? aspectRatio : undefined;\n\n    return react_default.a.createElement(\"div\", {\n      className: classnames_default()('PhoneInputCountryIcon', {\n        'PhoneInputCountryIcon--square': _aspectRatio === 1,\n        'PhoneInputCountryIcon--border': country\n      })\n    }, country ? react_default.a.createElement(FlagComponent, {\n      country: country,\n      countryName: label,\n      flags: flags,\n      flagUrl: flagUrl,\n      className: \"PhoneInputCountryIconImg\"\n    }) : react_default.a.createElement(InternationalIcon, {\n      title: label,\n      aspectRatio: _aspectRatio,\n      className: \"PhoneInputCountryIconImg\"\n    }));\n  }\n\n  CountryIcon.propTypes = {\n    country: prop_types_default.a.string,\n    label: prop_types_default.a.string.isRequired,\n    aspectRatio: prop_types_default.a.number\n  };\n  return CountryIcon;\n}\n/* harmony default export */ var modules_CountryIcon = (createCountryIconComponent({\n  // Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n  flagComponent: Flag_FlagComponent,\n  internationalIcon: InternationalIcon_InternationalIcon\n}));\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/AsYouType.js + 6 modules\nvar AsYouType = __webpack_require__(2547);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/helpers/getInternationalPhoneNumberPrefix.js\nvar getInternationalPhoneNumberPrefix = __webpack_require__(2424);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/helpers/phoneInputHelpers.js\n\n\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\n\nfunction getPreSelectedCountry(_ref) {\n  var value = _ref.value,\n      phoneNumber = _ref.phoneNumber,\n      defaultCountry = _ref.defaultCountry,\n      getAnyCountry = _ref.getAnyCountry,\n      countries = _ref.countries,\n      required = _ref.required,\n      metadata = _ref.metadata;\n  var country; // If can get country from E.164 phone number\n  // then it overrides the `country` passed (or not passed).\n\n  if (phoneNumber && phoneNumber.country) {\n    // `country` will be left `undefined` in case of non-detection.\n    country = phoneNumber.country;\n  } else if (defaultCountry) {\n    if (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\n      country = defaultCountry;\n    }\n  } // Only pre-select a country if it's in the available `countries` list.\n\n\n  if (countries && countries.indexOf(country) < 0) {\n    country = undefined;\n  } // If there will be no \"International\" option\n  // then some `country` must be selected.\n  // It will still be the wrong country though.\n  // But still country `<select/>` can't be left in a broken state.\n\n\n  if (!country && required && countries && countries.length > 0) {\n    country = getAnyCountry(); // noCountryMatchesTheNumber = true\n  }\n\n  return country;\n}\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\n\nfunction phoneInputHelpers_getCountrySelectOptions(_ref2) {\n  var countries = _ref2.countries,\n      countryNames = _ref2.countryNames,\n      addInternationalOption = _ref2.addInternationalOption,\n      compareStringsLocales = _ref2.compareStringsLocales,\n      _compareStrings = _ref2.compareStrings; // Default country name comparator uses `String.localeCompare()`.\n\n  if (!_compareStrings) {\n    _compareStrings = compareStrings;\n  } // Generates a `<Select/>` option for each country.\n\n\n  var countrySelectOptions = countries.map(function (country) {\n    return {\n      value: country,\n      // All `locale` country names included in this library\n      // include all countries (this is checked at build time).\n      // The only case when a country name might be missing\n      // is when a developer supplies their own `labels` property.\n      // To guard against such cases, a missing country name\n      // is substituted by country code.\n      label: countryNames[country] || country\n    };\n  }); // Sort the list of countries alphabetically.\n\n  countrySelectOptions.sort(function (a, b) {\n    return _compareStrings(a.label, b.label, compareStringsLocales);\n  }); // Add the \"International\" option to the country list (if suitable)\n\n  if (addInternationalOption) {\n    countrySelectOptions.unshift({\n      label: countryNames.ZZ\n    });\n  }\n\n  return countrySelectOptions;\n}\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\n\nfunction parsePhoneNumber(value, metadata) {\n  return Object(parsePhoneNumberFromString[\"a\" /* default */])(value || '', metadata);\n}\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\n\nfunction generateNationalNumberDigits(phoneNumber) {\n  return phoneNumber.formatNational().replace(/\\D/g, '');\n}\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\n\nfunction getPhoneDigitsForNewCountry(phoneDigits, _ref3) {\n  var prevCountry = _ref3.prevCountry,\n      newCountry = _ref3.newCountry,\n      metadata = _ref3.metadata,\n      useNationalFormat = _ref3.useNationalFormat;\n\n  if (prevCountry === newCountry) {\n    return phoneDigits;\n  } // If `parsed_input` is empty\n  // then no need to migrate anything.\n\n\n  if (!phoneDigits) {\n    if (useNationalFormat) {\n      return '';\n    } else {\n      // If `phoneDigits` is empty then set `phoneDigits` to\n      // `+{getCountryCallingCode(newCountry)}`.\n      return Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(newCountry, metadata);\n    }\n  } // If switching to some country.\n  // (from \"International\" or another country)\n  // If switching from \"International\" then `phoneDigits` starts with a `+`.\n  // Otherwise it may or may not start with a `+`.\n\n\n  if (newCountry) {\n    // If the phone number was entered in international format\n    // then migrate it to the newly selected country.\n    // The phone number may be incomplete.\n    // The phone number entered not necessarily starts with\n    // the previously selected country phone prefix.\n    if (phoneDigits[0] === '+') {\n      // If the international phone number is for the new country\n      // then convert it to local if required.\n      if (useNationalFormat) {\n        // // If a phone number is being input in international form\n        // // and the country can already be derived from it,\n        // // and if it is the new country, then format as a national number.\n        // const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\n        // if (derived_country === newCountry) {\n        // \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\n        // }\n        // Actually, the two countries don't necessarily need to match:\n        // the condition could be looser here, because several countries\n        // might share the same international phone number format\n        // (for example, \"NANPA\" countries like US, Canada, etc).\n        // The looser condition would be just \"same nternational phone number format\"\n        // which would mean \"same country calling code\" in the context of `libphonenumber-js`.\n        if (phoneDigits.indexOf('+' + Object(es6_metadata[\"b\" /* getCountryCallingCode */])(newCountry, metadata)) === 0) {\n          return stripCountryCallingCode(phoneDigits, newCountry, metadata);\n        } // Simply discard the previously entered international phone number,\n        // because otherwise any \"smart\" transformation like getting the\n        // \"national (significant) number\" part and then prepending the\n        // newly selected country's \"country calling code\" to it\n        // would just be confusing for a user without being actually useful.\n\n\n        return ''; // // Simply strip the leading `+` character\n        // // therefore simply converting all digits into a \"local\" phone number.\n        // // https://github.com/catamphetamine/react-phone-number-input/issues/287\n        // return phoneDigits.slice(1)\n      }\n\n      if (prevCountry) {\n        var newCountryPrefix = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(newCountry, metadata);\n\n        if (phoneDigits.indexOf(newCountryPrefix) === 0) {\n          return phoneDigits;\n        } else {\n          return newCountryPrefix;\n        }\n      } else {\n        var defaultValue = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(newCountry, metadata); // If `phoneDigits`'s country calling code part is the same\n        // as for the new `country`, then leave `phoneDigits` as is.\n\n        if (phoneDigits.indexOf(defaultValue) === 0) {\n          return phoneDigits;\n        } // If `phoneDigits`'s country calling code part is not the same\n        // as for the new `country`, then set `phoneDigits` to\n        // `+{getCountryCallingCode(newCountry)}`.\n\n\n        return defaultValue;\n      } // // If the international phone number already contains\n      // // any country calling code then trim the country calling code part.\n      // // (that could also be the newly selected country phone code prefix as well)\n      // // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\n      // // (e.g. if a user enters an international number\n      // //  not belonging to any of the reduced `countries` list).\n      // phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\n      // // Prepend country calling code prefix\n      // // for the newly selected country.\n      // return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\n\n    }\n  } // If switching to \"International\" from a country.\n  else {\n    // If the phone number was entered in national format.\n    if (phoneDigits[0] !== '+') {\n      // Format the national phone number as an international one.\n      // The phone number entered not necessarily even starts with\n      // the previously selected country phone prefix.\n      // Even if the phone number belongs to whole another country\n      // it will still be parsed into some national phone number.\n      //\n      // Ignore the now-uncovered `|| ''` code branch:\n      // previously `e164()` function could return an empty string\n      // even when `phoneDigits` were not empty.\n      // Now it always returns some `value` when there're any `phoneDigits`.\n      // Still, didn't remove the `|| ''` code branch just in case\n      // that logic changes somehow in some future, so there're no\n      // possible bugs related to that.\n      //\n      // (ignore the `|| ''` code branch)\n\n      /* istanbul ignore next */\n      return e164(phoneDigits, prevCountry, metadata) || '';\n    }\n  }\n\n  return phoneDigits;\n}\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nfunction e164(number, country, metadata) {\n  if (!number) {\n    return;\n  } // If the phone number is being input in international format.\n\n\n  if (number[0] === '+') {\n    // If it's just the `+` sign then return nothing.\n    if (number === '+') {\n      return;\n    } // Return a E.164 phone number.\n    //\n    // Could return `number` \"as is\" here, but there's a possibility\n    // that some user might incorrectly input an international number\n    // with a \"national prefix\". Such numbers aren't considered valid,\n    // but `libphonenumber-js` is \"forgiving\" when it comes to parsing\n    // user's input, and this input component follows that behavior.\n    //\n\n\n    var asYouType = new AsYouType[\"a\" /* default */](country, metadata);\n    asYouType.input(number); // This function would return `undefined` only when `number` is `\"+\"`,\n    // but at this point it is known that `number` is not `\"+\"`.\n\n    return asYouType.getNumberValue();\n  } // For non-international phone numbers\n  // an accompanying country code is required.\n  // The situation when `country` is `undefined`\n  // and a non-international phone number is passed\n  // to this function shouldn't happen.\n\n\n  if (!country) {\n    return;\n  }\n\n  var partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata); //\n  // Even if no \"national (significant) number\" digits have been input,\n  // still return a non-`undefined` value.\n  // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\n  //\n  // For example, if the user has selected country `US` and entered `\"1\"`\n  // then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\n  // digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\n  // because otherwise the app would think that the input is empty and mark it as such\n  // while in reality it isn't empty, which might be thought of as a \"bug\", or just\n  // a \"weird\" behavior.\n  //\n  // if (partial_national_significant_number) {\n\n  return \"+\".concat(Object(es6_metadata[\"b\" /* getCountryCallingCode */])(country, metadata)).concat(partial_national_significant_number || ''); // }\n}\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\nfunction trimNumber(number, country, metadata) {\n  var nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (nationalSignificantNumberPart) {\n    var overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\n    if (overflowDigitsCount > 0) {\n      return number.slice(0, number.length - overflowDigitsCount);\n    }\n  }\n\n  return number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n  // Get \"possible lengths\" for a phone number of the country.\n  metadata = new es6_metadata[\"a\" /* default */](metadata);\n  metadata.selectNumberingPlan(country); // Return the last \"possible length\".\n\n  return metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1];\n} // If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nfunction getCountryForPartialE164Number(partialE164Number, _ref4) {\n  var country = _ref4.country,\n      countries = _ref4.countries,\n      required = _ref4.required,\n      metadata = _ref4.metadata;\n\n  if (partialE164Number === '+') {\n    // Don't change the currently selected country yet.\n    return country;\n  }\n\n  var derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata); // If a phone number is being input in international form\n  // and the country can already be derived from it,\n  // then select that country.\n\n  if (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n    return derived_country;\n  } // If \"International\" country option has not been disabled\n  // and the international phone number entered doesn't correspond\n  // to the currently selected country then reset the currently selected country.\n  else if (country && !required && !couldNumberBelongToCountry(partialE164Number, country, metadata)) {\n    return undefined;\n  } // Don't change the currently selected country.\n\n\n  return country;\n}\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\n\nfunction onPhoneDigitsChange(phoneDigits, _ref5) {\n  var prevPhoneDigits = _ref5.prevPhoneDigits,\n      country = _ref5.country,\n      defaultCountry = _ref5.defaultCountry,\n      countryRequired = _ref5.countryRequired,\n      getAnyCountry = _ref5.getAnyCountry,\n      countries = _ref5.countries,\n      international = _ref5.international,\n      limitMaxLength = _ref5.limitMaxLength,\n      countryCallingCodeEditable = _ref5.countryCallingCodeEditable,\n      metadata = _ref5.metadata;\n\n  if (international && countryCallingCodeEditable === false) {\n    var prefix = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata); // The `<input/>` value must start with the country calling code.\n\n    if (phoneDigits.indexOf(prefix) !== 0) {\n      var _value; // If a phone number input is declared as\n      // `international` and `withCountryCallingCode`,\n      // then it's gonna be non-empty even before the user\n      // has input anything in it.\n      // This will result in its contents (the country calling code part)\n      // being selected when the user tabs into such field.\n      // If the user then starts inputting the national part digits,\n      // then `<input/>` value changes from `+xxx` to `y`\n      // because inputting anything while having the `<input/>` value\n      // selected results in erasing the `<input/>` value.\n      // So, the component handles such case by restoring\n      // the intended `<input/>` value: `+xxxy`.\n      // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\n\n\n      if (phoneDigits && phoneDigits[0] !== '+') {\n        phoneDigits = prefix + phoneDigits;\n        _value = e164(phoneDigits, country, metadata);\n      } else {\n        phoneDigits = prefix;\n      }\n\n      return {\n        phoneDigits: phoneDigits,\n        value: _value,\n        country: country\n      };\n    }\n  } // If `international` property is `false`, then it means\n  // \"enforce national-only format during input\",\n  // so, if that's the case, then remove all `+` characters,\n  // but only if some country is currently selected.\n  // (not if \"International\" country is selected).\n\n\n  if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n    phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata);\n  } // Trim the input to not exceed the maximum possible number length.\n\n\n  if (phoneDigits && country && limitMaxLength) {\n    phoneDigits = trimNumber(phoneDigits, country, metadata);\n  } // If this `onChange()` event was triggered\n  // as a result of selecting \"International\" country,\n  // then force-prepend a `+` sign if the phone number\n  // `<input/>` value isn't in international format.\n  // Also, force-prepend a `+` sign if international\n  // phone number input format is set.\n\n\n  if (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\n    phoneDigits = '+' + phoneDigits;\n  } // If the previously entered phone number\n  // has been entered in international format\n  // and the user decides to erase it,\n  // then also reset the `country`\n  // because it was most likely automatically selected\n  // while the user was typing in the phone number\n  // in international format.\n  // This fixes the issue when a user is presented\n  // with a phone number input with no country selected\n  // and then types in their local phone number\n  // then discovers that the input's messed up\n  // (a `+` has been prepended at the start of their input\n  //  and a random country has been selected),\n  // decides to undo it all by erasing everything\n  // and then types in their local phone number again\n  // resulting in a seemingly correct phone number\n  // but in reality that phone number has incorrect country.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/273\n\n\n  if (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\n    if (international) {\n      country = undefined;\n    } else {\n      country = defaultCountry;\n    }\n  } // Also resets such \"randomly\" selected country\n  // as soon as the user erases the number\n  // digit-by-digit up to the leading `+` sign.\n\n\n  if (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\n    country = undefined;\n  } // Generate the new `value` property.\n\n\n  var value;\n\n  if (phoneDigits) {\n    if (phoneDigits[0] === '+') {\n      if (phoneDigits === '+') {\n        value = undefined;\n      } else if (country && Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata).indexOf(phoneDigits) === 0) {\n        // Selected a `country` but started inputting an\n        // international phone number for another country.\n        // Even though the input value is non-empty,\n        // the `value` is assumed `undefined` in such case.\n        // The `country` will be reset (or re-selected)\n        // immediately after such mismatch has been detected\n        // by the phone number input component, and `value`\n        // will be set to the currently entered international prefix.\n        //\n        // For example, if selected `country` `\"US\"`\n        // and started inputting phone number `\"+2\"`\n        // then `value` `undefined` will be returned from this function,\n        // and then, immediately after that, `country` will be reset\n        // and the `value` will be set to `\"+2\"`.\n        //\n        value = undefined;\n      } else {\n        value = e164(phoneDigits, country, metadata);\n      }\n    } else {\n      value = e164(phoneDigits, country, metadata);\n    }\n  } // Derive the country from the phone number.\n  // (regardless of whether there's any country currently selected,\n  //  because there could be several countries corresponding to one country calling code)\n\n\n  if (value) {\n    country = getCountryForPartialE164Number(value, {\n      country: country,\n      countries: countries,\n      metadata: metadata\n    }); // If `international` property is `false`, then it means\n    // \"enforce national-only format during input\",\n    // so, if that's the case, then remove all `+` characters,\n    // but only if some country is currently selected.\n    // (not if \"International\" country is selected).\n\n    if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n      phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata); // Re-calculate `value` because `phoneDigits` has changed.\n\n      value = e164(phoneDigits, country, metadata);\n    }\n  }\n\n  if (!country && countryRequired) {\n    country = defaultCountry || getAnyCountry();\n  }\n\n  return {\n    phoneDigits: phoneDigits,\n    country: country,\n    value: value\n  };\n}\n\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\n  // Handle the case when a user might have pasted\n  // a phone number in international format.\n  if (input.indexOf(Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata)) === 0) {\n    // Create \"as you type\" formatter.\n    var formatter = new AsYouType[\"a\" /* default */](country, metadata); // Input partial national phone number.\n\n    formatter.input(input); // Return the parsed partial national phone number.\n\n    var phoneNumber = formatter.getNumber();\n\n    if (phoneNumber) {\n      // Transform the number to a national one,\n      // and remove all non-digits.\n      return phoneNumber.formatNational().replace(/\\D/g, '');\n    } else {\n      return '';\n    }\n  } else {\n    // Just remove the `+` sign.\n    return input.replace(/\\D/g, '');\n  }\n}\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nfunction getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\n  var formatter = new AsYouType[\"a\" /* default */](null, metadata);\n  formatter.input(number); // // `001` is a special \"non-geograpical entity\" code\n  // // in Google's `libphonenumber` library.\n  // if (formatter.getCountry() === '001') {\n  // \treturn\n  // }\n\n  return formatter.getCountry();\n}\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\n\nfunction compareStrings(a, b, locales) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b, locales);\n  }\n  /* istanbul ignore next */\n\n\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\n\nfunction stripCountryCallingCode(number, country, metadata) {\n  // Just an optimization, so that it\n  // doesn't have to iterate through all country calling codes.\n  if (country) {\n    var countryCallingCodePrefix = '+' + Object(es6_metadata[\"b\" /* getCountryCallingCode */])(country, metadata); // If `country` fits the actual `number`.\n\n    if (number.length < countryCallingCodePrefix.length) {\n      if (countryCallingCodePrefix.indexOf(number) === 0) {\n        return '';\n      }\n    } else {\n      if (number.indexOf(countryCallingCodePrefix) === 0) {\n        return number.slice(countryCallingCodePrefix.length);\n      }\n    }\n  } // If `country` doesn't fit the actual `number`.\n  // Try all available country calling codes.\n\n\n  for (var _i = 0, _Object$keys = Object.keys(metadata.country_calling_codes); _i < _Object$keys.length; _i++) {\n    var country_calling_code = _Object$keys[_i];\n\n    if (number.indexOf(country_calling_code) === '+'.length) {\n      return number.slice('+'.length + country_calling_code.length);\n    }\n  }\n\n  return '';\n}\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\n\nfunction getNationalSignificantNumberDigits(number, country, metadata) {\n  // Create \"as you type\" formatter.\n  var formatter = new AsYouType[\"a\" /* default */](country, metadata); // Input partial national phone number.\n\n  formatter.input(number); // Return the parsed partial national phone number.\n\n  var phoneNumber = formatter.getNumber();\n  return phoneNumber && phoneNumber.nationalNumber;\n}\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\n\nfunction couldNumberBelongToCountry(number, country, metadata) {\n  var intlPhoneNumberPrefix = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata);\n  var i = 0;\n\n  while (i < number.length && i < intlPhoneNumberPrefix.length) {\n    if (number[i] !== intlPhoneNumberPrefix[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\n\nfunction getInitialPhoneDigits(_ref6) {\n  var value = _ref6.value,\n      phoneNumber = _ref6.phoneNumber,\n      defaultCountry = _ref6.defaultCountry,\n      international = _ref6.international,\n      useNationalFormat = _ref6.useNationalFormat,\n      metadata = _ref6.metadata; // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `useNationalFormat` is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n\n  if ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\n    return generateNationalNumberDigits(phoneNumber);\n  } // If `international` property is `true`,\n  // meaning \"enforce international phone number format\",\n  // then always show country calling code in the input field.\n\n\n  if (!value && international && defaultCountry) {\n    return Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(defaultCountry, metadata);\n  }\n\n  return value;\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n\n\nfunction getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\n  var metadata = props.metadata,\n      countries = props.countries,\n      newDefaultCountry = props.defaultCountry,\n      newValue = props.value,\n      newReset = props.reset,\n      international = props.international,\n      displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber,\n      initialValueFormat = props.initialValueFormat;\n  var prevDefaultCountry = prevProps.defaultCountry,\n      prevValue = prevProps.value,\n      prevReset = prevProps.reset;\n  var country = state.country,\n      value = state.value,\n      hasUserSelectedACountry = state.hasUserSelectedACountry;\n\n  var _getInitialPhoneDigits = function _getInitialPhoneDigits(parameters) {\n    return getInitialPhoneDigits(_objectSpread({}, parameters, {\n      international: international,\n      useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n      metadata: metadata\n    }));\n  }; // Some users requested a way to reset the component\n  // (both number `<input/>` and country `<select/>`).\n  // Whenever `reset` property changes both number `<input/>`\n  // and country `<select/>` are reset.\n  // It's not implemented as some instance `.reset()` method\n  // because `ref` is forwarded to `<input/>`.\n  // It's also not replaced with just resetting `country` on\n  // external `value` reset, because a user could select a country\n  // and then not input any `value`, and so the selected country\n  // would be \"stuck\", if not using this `reset` property.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n\n  if (newReset !== prevReset) {\n    return {\n      phoneDigits: _getInitialPhoneDigits({\n        value: undefined,\n        defaultCountry: newDefaultCountry\n      }),\n      value: undefined,\n      country: newDefaultCountry,\n      hasUserSelectedACountry: undefined\n    };\n  } // `value` is the value currently shown in the component:\n  // it's stored in the component's `state`, and it's not the `value` property.\n  // `prevValue` is \"previous `value` property\".\n  // `newValue` is \"new `value` property\".\n  // If the default country changed\n  // (e.g. in case of ajax GeoIP detection after page loaded)\n  // then select it, but only if the user hasn't already manually\n  // selected a country, and no phone number has been manually entered so far.\n  // Because if the user has already started inputting a phone number\n  // then they're okay with no country being selected at all (\"International\")\n  // and they don't want to be disturbed, don't want their input to be screwed, etc.\n\n\n  if (newDefaultCountry !== prevDefaultCountry) {\n    var isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata);\n\n    var noValueHasBeenEnteredByTheUser = // By default, \"no value has been entered\" means `value` is `undefined`.\n    !value || // When `international` is `true`, and some country has been pre-selected,\n    // then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\n    // so in case of `international` being `true`, \"the user hasn't entered anything\" situation\n    // doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\n    international && value === _getInitialPhoneDigits({\n      value: undefined,\n      defaultCountry: prevDefaultCountry\n    }); // Only update the `defaultCountry` property if no phone number\n    // has been entered by the user or pre-set by the application.\n\n\n    var noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser;\n\n    if (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\n      return {\n        country: newDefaultCountry,\n        // If `phoneDigits` is empty, then automatically select the new `country`\n        // and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\n        // The code assumes that \"no phone number has been entered by the user\",\n        // and no `value` property has been passed, so the `phoneNumber` parameter\n        // of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\n        phoneDigits: _getInitialPhoneDigits({\n          value: undefined,\n          defaultCountry: newDefaultCountry\n        }),\n        // `value` is `undefined` and it stays so.\n        value: undefined\n      };\n    }\n  } // If a new `value` is set externally.\n  // (e.g. as a result of an ajax API request\n  //  to get user's phone after page loaded)\n  // The first part — `newValue !== prevValue` —\n  // is basically `props.value !== prevProps.value`\n  // so it means \"if value property was changed externally\".\n  // The second part — `newValue !== value` —\n  // is for ignoring the `getDerivedStateFromProps()` call\n  // which happens in `this.onChange()` right after `this.setState()`.\n  // If this `getDerivedStateFromProps()` call isn't ignored\n  // then the country flag would reset on each input.\n\n\n  if (newValue !== prevValue && newValue !== value) {\n    var phoneNumber;\n    var parsedCountry;\n\n    if (newValue) {\n      phoneNumber = parsePhoneNumber(newValue, metadata);\n      var supportedCountries = getSupportedCountries(countries, metadata);\n\n      if (phoneNumber && phoneNumber.country) {\n        // Ignore `else` because all countries are supported in metadata.\n\n        /* istanbul ignore next */\n        if (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\n          parsedCountry = phoneNumber.country;\n        }\n      } else {\n        parsedCountry = getCountryForPartialE164Number(newValue, {\n          country: undefined,\n          countries: supportedCountries,\n          metadata: metadata\n        });\n      }\n    }\n\n    var hasUserSelectedACountryUpdate;\n\n    if (!newValue) {\n      // Reset `hasUserSelectedACountry` flag in `state`.\n      hasUserSelectedACountryUpdate = {\n        hasUserSelectedACountry: undefined\n      };\n    }\n\n    return _objectSpread({}, hasUserSelectedACountryUpdate, {\n      phoneDigits: _getInitialPhoneDigits({\n        phoneNumber: phoneNumber,\n        value: newValue,\n        defaultCountry: newDefaultCountry\n      }),\n      value: newValue,\n      country: newValue ? parsedCountry : newDefaultCountry\n    });\n  } // `defaultCountry` didn't change.\n  // `value` didn't change.\n  // `phoneDigits` didn't change, because `value` didn't change.\n  //\n  // So no need to update state.\n\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/PhoneInputWithCountry.js\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction PhoneInputWithCountry_ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction PhoneInputWithCountry_objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      PhoneInputWithCountry_ownKeys(Object(source), true).forEach(function (key) {\n        PhoneInputWithCountry_defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      PhoneInputWithCountry_ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction PhoneInputWithCountry_extends() {\n  PhoneInputWithCountry_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return PhoneInputWithCountry_extends.apply(this, arguments);\n}\n\nfunction PhoneInputWithCountry_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = PhoneInputWithCountry_objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction PhoneInputWithCountry_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction PhoneInputWithCountry_defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar PhoneInputWithCountry_PhoneNumberInput_ = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n\n  function PhoneNumberInput_(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneNumberInput_);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PhoneNumberInput_).call(this, props));\n\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"inputRef\", react_default.a.createRef());\n\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"setInputRef\", function (instance) {\n      _this.inputRef.current = instance;\n      var ref = _this.props.inputRef;\n\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(instance);\n        } else {\n          ref.current = instance;\n        }\n      }\n    });\n\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n          international = _this$props.international,\n          metadata = _this$props.metadata,\n          onChange = _this$props.onChange,\n          focusInputOnCountrySelection = _this$props.focusInputOnCountrySelection;\n      var _this$state = _this.state,\n          prevPhoneDigits = _this$state.phoneDigits,\n          prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n        prevCountry: prevCountry,\n        newCountry: newCountry,\n        metadata: metadata,\n        // Convert the phone number to \"national\" format\n        // when the user changes the selected country by hand.\n        useNationalFormat: !international\n      });\n      var newValue = e164(newPhoneDigits, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      if (focusInputOnCountrySelection) {\n        _this.inputRef.current.focus();\n      } // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        phoneDigits: newPhoneDigits,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onChange\", function (_phoneDigits) {\n      var _this$props2 = _this.props,\n          defaultCountry = _this$props2.defaultCountry,\n          onChange = _this$props2.onChange,\n          addInternationalOption = _this$props2.addInternationalOption,\n          international = _this$props2.international,\n          limitMaxLength = _this$props2.limitMaxLength,\n          countryCallingCodeEditable = _this$props2.countryCallingCodeEditable,\n          metadata = _this$props2.metadata;\n      var _this$state2 = _this.state,\n          countries = _this$state2.countries,\n          prevPhoneDigits = _this$state2.phoneDigits,\n          currentlySelectedCountry = _this$state2.country;\n\n      var _onPhoneDigitsChange = onPhoneDigitsChange(_phoneDigits, {\n        prevPhoneDigits: prevPhoneDigits,\n        country: currentlySelectedCountry,\n        countryRequired: !addInternationalOption,\n        defaultCountry: defaultCountry,\n        getAnyCountry: function getAnyCountry() {\n          return _this.getFirstSupportedCountry({\n            countries: countries\n          });\n        },\n        countries: countries,\n        international: international,\n        limitMaxLength: limitMaxLength,\n        countryCallingCodeEditable: countryCallingCodeEditable,\n        metadata: metadata\n      }),\n          phoneDigits = _onPhoneDigitsChange.phoneDigits,\n          country = _onPhoneDigitsChange.country,\n          value = _onPhoneDigitsChange.value;\n\n      var stateUpdate = {\n        phoneDigits: phoneDigits,\n        value: value,\n        country: country\n      };\n\n      if (countryCallingCodeEditable === false) {\n        // If it simply did `setState({ phoneDigits: intlPrefix })` here,\n        // then it would have no effect when erasing an inital international prefix\n        // via Backspace, because `phoneDigits` in `state` wouldn't change\n        // as a result, because it was `prefix` and it became `prefix`,\n        // so the component wouldn't rerender, and the user would be able\n        // to erase the country calling code part, and that part is\n        // assumed to be non-eraseable. That's why the component is\n        // forcefully rerendered here.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n        if (!value && phoneDigits === _this.state.phoneDigits) {\n          // Force a re-render of the `<input/>` in order to reset its value.\n          stateUpdate.forceRerender = {};\n        }\n      }\n\n      _this.setState(stateUpdate, // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n\n      _this._onBlur();\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n\n    PhoneInputWithCountry_defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n\n    var _this$props3 = _this.props,\n        _value = _this$props3.value,\n        labels = _this$props3.labels,\n        _international = _this$props3.international,\n        _addInternationalOption = _this$props3.addInternationalOption,\n        displayInitialValueAsLocalNumber = _this$props3.displayInitialValueAsLocalNumber,\n        initialValueFormat = _this$props3.initialValueFormat,\n        _metadata = _this$props3.metadata;\n    var _this$props4 = _this.props,\n        _defaultCountry = _this$props4.defaultCountry,\n        _countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n\n    _countries = getSupportedCountries(_countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    var preSelectedCountry = getPreSelectedCountry({\n      value: _value,\n      phoneNumber: phoneNumber,\n      defaultCountry: _defaultCountry,\n      required: !_addInternationalOption,\n      countries: _countries || Object(getCountries[\"a\" /* default */])(_metadata),\n      getAnyCountry: function getAnyCountry() {\n        return _this.getFirstSupportedCountry({\n          countries: _countries\n        });\n      },\n      metadata: _metadata\n    });\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: preSelectedCountry,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: _countries,\n      // `phoneDigits` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value` is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `phoneDigits` are `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n      phoneDigits: getInitialPhoneDigits({\n        value: _value,\n        phoneNumber: phoneNumber,\n        defaultCountry: _defaultCountry,\n        international: _international,\n        useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n        metadata: _metadata\n      }),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `phoneDigits` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `phoneDigits` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    }\n  }, {\n    key: \"getCountrySelectOptions\",\n    value: function getCountrySelectOptions(_ref) {\n      var countries = _ref.countries;\n      var _this$props5 = this.props,\n          international = _this$props5.international,\n          countryCallingCodeEditable = _this$props5.countryCallingCodeEditable,\n          countryOptionsOrder = _this$props5.countryOptionsOrder,\n          addInternationalOption = _this$props5.addInternationalOption,\n          labels = _this$props5.labels,\n          locales = _this$props5.locales,\n          metadata = _this$props5.metadata;\n      return useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(phoneInputHelpers_getCountrySelectOptions({\n          countries: countries || Object(getCountries[\"a\" /* default */])(metadata),\n          countryNames: labels,\n          addInternationalOption: international && countryCallingCodeEditable === false ? false : addInternationalOption,\n          compareStringsLocales: locales // compareStrings\n\n        }), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n    }\n  }, {\n    key: \"getFirstSupportedCountry\",\n    value: function getFirstSupportedCountry(_ref2) {\n      var countries = _ref2.countries;\n      var countryOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return countryOptions[0].value;\n    } // A shorthand for not passing `metadata` as a second argument.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          name = _this$props6.name,\n          disabled = _this$props6.disabled,\n          autoComplete = _this$props6.autoComplete,\n          style = _this$props6.style,\n          className = _this$props6.className,\n          inputRef = _this$props6.inputRef,\n          inputComponent = _this$props6.inputComponent,\n          numberInputProps = _this$props6.numberInputProps,\n          smartCaret = _this$props6.smartCaret,\n          CountrySelectComponent = _this$props6.countrySelectComponent,\n          countrySelectProps = _this$props6.countrySelectProps,\n          ContainerComponent = _this$props6.containerComponent,\n          defaultCountry = _this$props6.defaultCountry,\n          countriesProperty = _this$props6.countries,\n          countryOptionsOrder = _this$props6.countryOptionsOrder,\n          labels = _this$props6.labels,\n          flags = _this$props6.flags,\n          flagComponent = _this$props6.flagComponent,\n          flagUrl = _this$props6.flagUrl,\n          addInternationalOption = _this$props6.addInternationalOption,\n          internationalIcon = _this$props6.internationalIcon,\n          displayInitialValueAsLocalNumber = _this$props6.displayInitialValueAsLocalNumber,\n          initialValueFormat = _this$props6.initialValueFormat,\n          onCountryChange = _this$props6.onCountryChange,\n          limitMaxLength = _this$props6.limitMaxLength,\n          countryCallingCodeEditable = _this$props6.countryCallingCodeEditable,\n          focusInputOnCountrySelection = _this$props6.focusInputOnCountrySelection,\n          reset = _this$props6.reset,\n          metadata = _this$props6.metadata,\n          international = _this$props6.international,\n          locales = _this$props6.locales,\n          rest = PhoneInputWithCountry_objectWithoutProperties(_this$props6, [\"name\", \"disabled\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"containerComponent\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"initialValueFormat\", \"onCountryChange\", \"limitMaxLength\", \"countryCallingCodeEditable\", \"focusInputOnCountrySelection\", \"reset\", \"metadata\", \"international\", \"locales\"]);\n\n      var _this$state3 = this.state,\n          country = _this$state3.country,\n          countries = _this$state3.countries,\n          phoneDigits = _this$state3.phoneDigits,\n          isFocused = _this$state3.isFocused;\n      var InputComponent = smartCaret ? InputSmart[\"a\" /* default */] : InputBasic[\"a\" /* default */];\n      var countrySelectOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return react_default.a.createElement(ContainerComponent, {\n        style: style,\n        className: classnames_default()(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused\n        })\n      }, react_default.a.createElement(CountrySelectComponent, PhoneInputWithCountry_extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        iconComponent: this.CountryIcon\n      })), react_default.a.createElement(InputComponent, PhoneInputWithCountry_extends({\n        ref: this.setInputRef,\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: phoneDigits || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        inputComponent: inputComponent,\n        className: classnames_default()('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    value: function getDerivedStateFromProps(props, state) {\n      return PhoneInputWithCountry_objectSpread({\n        // Emulate `prevProps` via `state.props`.\n        props: props\n      }, getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state));\n    }\n  }]);\n\n  return PhoneNumberInput_;\n}(react_default.a.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\n\nvar PhoneNumberInput = react_default.a.forwardRef(function (props, ref) {\n  return react_default.a.createElement(PhoneInputWithCountry_PhoneNumberInput_, PhoneInputWithCountry_extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   */\n  value: prop_types_default.a.string,\n\n  /**\r\n   * A function of `value: string?`.\r\n   *\r\n   * Updates the `value` property as the user inputs a phone number.\r\n   */\n  onChange: prop_types_default.a.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: prop_types_default.a.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: prop_types_default.a.func,\n\n  /**\r\n   * Set to `true` to disable both the phone number `<input/>`\r\n   * and the country `<select/>`.\r\n   */\n  disabled: prop_types_default.a.bool,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com\r\n   * /web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: prop_types_default.a.string.isRequired,\n\n  /**\r\n   * Set to `\"national\"` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if `initialValueFormat` is `\"national\"`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, `initialValueFormat` is `undefined`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `undefined` by default)\n  initialValueFormat: prop_types_default.a.oneOf(['national']),\n  // `displayInitialValueAsLocalNumber` property has been\n  // superceded by `initialValueFormat` property.\n  displayInitialValueAsLocalNumber: prop_types_default.a.bool,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: prop_types_default.a.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: prop_types_default.a.arrayOf(prop_types_default.a.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: PropTypes_labels.isRequired,\n\n  /**\r\n   * Country `<select/>` options are sorted by their labels.\r\n   * The default sorting function uses `a.localeCompare(b, locales)`,\r\n   * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n   * Some languages, like Chinese, support multiple sorting variants\r\n   * (called \"collations\"), and the user might prefer one or another.\r\n   * Also, sometimes the Operating System language is not always\r\n   * the preferred language for a person using a website or an application,\r\n   * so there should be a way to specify custom locale.\r\n   * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n   * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n   */\n  locales: prop_types_default.a.oneOfType([prop_types_default.a.string, prop_types_default.a.arrayOf(prop_types_default.a.string)]),\n\n  /*\r\n   * Custom country `<select/>` options sorting function.\r\n   * The default one uses `a.localeCompare(b)`, and,\r\n   * if that's not available, falls back to simple `a > b`/`a < b`.\r\n   * There have been requests to add custom sorter for cases\r\n   * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n   * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n  compareStrings: PropTypes.func,\r\n   */\n\n  /**\r\n   * A URL template of a country flag, where\r\n   * \"{XX}\" is a two-letter country code in upper case,\r\n   * or where \"{xx}\" is a two-letter country code in lower case.\r\n   * By default it points to `country-flag-icons` gitlab pages website.\r\n   * I imagine someone might want to download those country flag icons\r\n   * and host them on their own servers instead\r\n   * (all flags are available in the `country-flag-icons` library).\r\n   * There's a catch though: new countries may be added in future,\r\n   * so when hosting country flag icons on your own server\r\n   * one should check the `CHANGELOG.md` every time before updating this library,\r\n   * otherwise there's a possibility that some new country flag would be missing.\r\n   */\n  flagUrl: prop_types_default.a.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags will be used instead of the default ones.\r\n   * The the \"Flags\" section of the readme for more info.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n   *\r\n   * Example:\r\n   *\r\n   * `import flags from 'country-flag-icons/react/3x2'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: prop_types_default.a.objectOf(prop_types_default.a.elementType),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * `country: string` — The country code.\r\n   * * `countryName: string` — The country name.\r\n   * * `flagUrl: string` — The `flagUrl` property (see above).\r\n   * * `flags: object` — The `flags` property (see above).\r\n   */\n  flagComponent: prop_types_default.a.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n   */\n  addInternationalOption: prop_types_default.a.bool.isRequired,\n\n  /**\r\n   * \"International\" icon component.\r\n   * Should have the same aspect ratio.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `title: string` — \"International\" country option label.\r\n   */\n  internationalIcon: prop_types_default.a.elementType.isRequired,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"XX\"` — inserts an option for \"XX\" country.\r\n   * * `\"🌐\"` — inserts \"International\" option.\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptionsOrder: prop_types_default.a.arrayOf(prop_types_default.a.string),\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: prop_types_default.a.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: prop_types_default.a.string,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name: string?` — HTML `name` attribute.\r\n   * * `value: string?` — The currently selected country code.\r\n   * * `onChange(value: string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n   * * `disabled: boolean?` — HTML `disabled` attribute.\r\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className: string` — CSS class name.\r\n   */\n  countrySelectComponent: prop_types_default.a.elementType.isRequired,\n\n  /**\r\n   * Country `<select/>` component props.\r\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n   */\n  countrySelectProps: prop_types_default.a.object,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  inputComponent: prop_types_default.a.elementType.isRequired,\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `style: object` — A component CSS style object.\r\n   * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n   */\n  containerComponent: prop_types_default.a.elementType.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: prop_types_default.a.object,\n\n  /**\r\n   * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n   * the caret position is moved right before the next available digit skipping\r\n   * any punctuation in between. This is called \"smart\" caret positioning.\r\n   * Another case would be the phone number format changing as a result of\r\n   * the user inserting the digit somewhere in the middle, which would require\r\n   * re-positioning the caret because all digit positions have changed.\r\n   * This \"smart\" caret positioning feature can be turned off by passing\r\n   * `smartCaret={false}` property: use it in case of any possible issues\r\n   * with caret position during phone number input.\r\n   */\n  // Is `true` by default.\n  smartCaret: prop_types_default.a.bool.isRequired,\n\n  /**\r\n   * Set to `true` to force \"international\" phone number format.\r\n   * Set to `false` to force \"national\" phone number format.\r\n   * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n   */\n  international: prop_types_default.a.bool,\n\n  /**\r\n   * If set to `true`, the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: prop_types_default.a.bool.isRequired,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: prop_types_default.a.bool.isRequired,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: PropTypes_metadata.isRequired,\n\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: prop_types_default.a.func,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: prop_types_default.a.bool.isRequired\n};\nPhoneNumberInput.defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Country `<select/>` component.\r\n   */\n  countrySelectComponent: CountrySelectWithIcon,\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag_FlagComponent,\n\n  /**\r\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon_InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   */\n  containerComponent: 'div',\n\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: prop_types_default.a.any,\n\n  /**\r\n   *\r\n   */\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: true,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: true\n};\n/* harmony default export */ var PhoneInputWithCountry = (PhoneNumberInput);\nvar countrySelectOptionsMemo;\nvar countrySelectOptionsMemoDependencies;\n\nfunction useMemoCountrySelectOptions(generator, dependencies) {\n  if (!countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\n    countrySelectOptionsMemo = generator();\n    countrySelectOptionsMemoDependencies = dependencies;\n  }\n\n  return countrySelectOptionsMemo;\n}\n\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var i = 0;\n\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/PhoneInputWithCountryDefault.js\nfunction PhoneInputWithCountryDefault_extends() {\n  PhoneInputWithCountryDefault_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return PhoneInputWithCountryDefault_extends.apply(this, arguments);\n}\n\n\n\n\n\n\nfunction createPhoneInput(defaultMetadata) {\n  var PhoneInputDefault = react_default.a.forwardRef(function (props, ref) {\n    return react_default.a.createElement(PhoneInputWithCountry, PhoneInputWithCountryDefault_extends({\n      ref: ref\n    }, props));\n  });\n  PhoneInputDefault.propTypes = {\n    metadata: PropTypes_metadata.isRequired,\n    labels: PropTypes_labels.isRequired\n  };\n  PhoneInputDefault.defaultProps = {\n    metadata: defaultMetadata,\n    labels: en\n  };\n  return PhoneInputDefault;\n}\n/* harmony default export */ var PhoneInputWithCountryDefault = (createPhoneInput());\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/min/index.js\n\n\n\n\nfunction call(func, _arguments) {\n  var args = Array.prototype.slice.call(_arguments);\n  args.push(metadata_min);\n  return func.apply(this, args);\n}\n\n/* harmony default export */ var min = (createPhoneInput(metadata_min));\nfunction min_parsePhoneNumber() {\n  return call(parsePhoneNumberFromString[\"a\" /* default */], arguments);\n}\nfunction min_formatPhoneNumber() {\n  return call(formatPhoneNumber[\"a\" /* default */], arguments);\n}\nfunction formatPhoneNumberIntl() {\n  return call(formatPhoneNumber[\"b\" /* formatPhoneNumberIntl */], arguments);\n}\nfunction min_isValidPhoneNumber() {\n  return call(isValidPhoneNumber[\"a\" /* default */], arguments);\n}\nfunction min_isPossiblePhoneNumber() {\n  return call(isPossiblePhoneNumber[\"a\" /* default */], arguments);\n}\nfunction min_getCountries() {\n  return call(getCountries[\"a\" /* default */], arguments);\n}\nfunction getCountryCallingCode() {\n  return call(es6_metadata[\"b\" /* getCountryCallingCode */], arguments);\n}\nfunction isSupportedCountry() {\n  return call(es6_metadata[\"c\" /* isSupportedCountry */], arguments);\n}\n\n/***/ }),\n\n/***/ 2431:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// UNUSED EXPORTS: createInput\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(64);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// CONCATENATED MODULE: ./node_modules/input-format/modules/edit.js\n// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nfunction edit(value, caret, operation) {\n  switch (operation) {\n    case 'Backspace':\n      // If there exists the previous character,\n      // then erase it and reposition the caret.\n      if (caret > 0) {\n        // Remove the previous character\n        value = value.slice(0, caret - 1) + value.slice(caret); // Position the caret where the previous (erased) character was\n\n        caret--;\n      }\n\n      break;\n\n    case 'Delete':\n      // Remove current digit (if any)\n      value = value.slice(0, caret) + value.slice(caret + 1);\n      break;\n  }\n\n  return {\n    value: value,\n    caret: caret\n  };\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/parse.js\n// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nfunction parse_parse(text, caret_position, parse_character) {\n  var value = '';\n  var focused_input_character_index = 0;\n  var index = 0;\n\n  while (index < text.length) {\n    var character = parse_character(text[index], value);\n\n    if (character !== undefined) {\n      value += character;\n\n      if (caret_position !== undefined) {\n        if (caret_position === index) {\n          focused_input_character_index = value.length - 1;\n        } else if (caret_position > index) {\n          focused_input_character_index = value.length;\n        }\n      }\n    }\n\n    index++;\n  } // If caret position wasn't specified\n\n\n  if (caret_position === undefined) {\n    // Then set caret position to \"after the last input character\"\n    focused_input_character_index = value.length;\n  }\n\n  var result = {\n    value: value,\n    caret: focused_input_character_index\n  };\n  return result;\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/helpers.js\n// Counts all occurences of a symbol in a string\nfunction count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/closeBraces.js\n\nfunction closeBraces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return retained_template;\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/templateFormatter.js\n\n // Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\n\n/* harmony default export */ var templateFormatter = (function (template) {\n  var placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var should_close_braces = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!template) {\n    return function (value) {\n      return {\n        text: value\n      };\n    };\n  }\n\n  var characters_in_template = count_occurences(placeholder, template);\n  return function (value) {\n    if (!value) {\n      return {\n        text: '',\n        template: template\n      };\n    }\n\n    var value_character_index = 0;\n    var filled_in_template = ''; // Using `.split('')` here instead of normal `for ... of`\n    // because the importing application doesn't neccessarily include an ES6 polyfill.\n    // The `.split('')` approach discards \"exotic\" UTF-8 characters\n    // (the ones consisting of four bytes)\n    // but template placeholder characters don't fall into that range\n    // and appending UTF-8 characters to a string in parts still works.\n\n    for (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var character = _ref;\n\n      if (character !== placeholder) {\n        filled_in_template += character;\n        continue;\n      }\n\n      filled_in_template += value[value_character_index];\n      value_character_index++; // If the last available value character has been filled in,\n      // then return the filled in template\n      // (either trim the right part or retain it,\n      //  if no more character placeholders in there)\n\n      if (value_character_index === value.length) {\n        // If there are more character placeholders\n        // in the right part of the template\n        // then simply trim it.\n        if (value.length < characters_in_template) {\n          break;\n        }\n      }\n    }\n\n    if (should_close_braces) {\n      filled_in_template = closeBraces(filled_in_template, template);\n    }\n\n    return {\n      text: filled_in_template,\n      template: template\n    };\n  };\n});\n// CONCATENATED MODULE: ./node_modules/input-format/modules/format.js\n // Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\n\nfunction format_format(value, caret, formatter) {\n  if (typeof formatter === 'string') {\n    formatter = templateFormatter(formatter);\n  }\n\n  var _ref = formatter(value) || {},\n      text = _ref.text,\n      template = _ref.template;\n\n  if (text === undefined) {\n    text = value;\n  }\n\n  if (template) {\n    if (caret === undefined) {\n      caret = text.length;\n    } else {\n      var index = 0;\n      var found = false;\n      var possibly_last_input_character_index = -1;\n\n      while (index < text.length && index < template.length) {\n        // Character placeholder found\n        if (text[index] !== template[index]) {\n          if (caret === 0) {\n            found = true;\n            caret = index;\n            break;\n          }\n\n          possibly_last_input_character_index = index;\n          caret--;\n        }\n\n        index++;\n      } // If the caret was positioned after last input character,\n      // then the text caret index is just after the last input character.\n\n\n      if (!found) {\n        caret = possibly_last_input_character_index + 1;\n      }\n    }\n  }\n\n  return {\n    text: text,\n    caret: caret\n  };\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/dom.js\nfunction isReadOnly(element) {\n  return element.hasAttribute('readonly');\n} // Gets <input/> selection bounds\n\nfunction getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nvar Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nfunction getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nfunction getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nfunction setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n// CONCATENATED MODULE: ./node_modules/input-format/modules/inputControl.js\n\n\n\n // Deprecated.\n// I don't know why this function exists.\n\nfunction onCut(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  } // The actual cut hasn't happened just yet hence the timeout.\n\n\n  setTimeout(function () {\n    return formatInputText(input, _parse, _format, undefined, on_change);\n  }, 0);\n} // Deprecated.\n// I don't know why this function exists.\n\nfunction onPaste(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  }\n\n  var selection = getSelection(input); // If selection is made,\n  // just erase the selected text\n  // prior to pasting\n\n  if (selection) {\n    eraseSelection(input, selection);\n  }\n\n  formatInputText(input, _parse, _format, undefined, on_change);\n}\nfunction inputControl_onChange(event, input, _parse, _format, on_change) {\n  formatInputText(input, _parse, _format, undefined, on_change);\n} // \"Delete\" and \"Backspace\" keys are special\n// in a way that they're not handled by the regular `onChange()` handler\n// and instead are intercepted and re-applied manually.\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\n// results in erasing a character, but that character might be any character,\n// while it would be a better \"user experience\" if it erased not just any character\n// but the closest \"meaningful\" character.\n// For example, if a template is `(xxx) xxx-xxxx`,\n// and the `<input/>` value is `(111) 222-3333`,\n// then, if a user begins erasing the `3333` part via \"Backspace\"\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\n// Nothing wrong with that, but it would be a better \"user experience\"\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\n// character, which would be the rightmost `2`.\n// So, what this `onKeyDown()` handler does is it intercepts\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\n// following the logic described above.\n\nfunction inputControl_onKeyDown(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  }\n\n  var operation = getOperation(event);\n\n  switch (operation) {\n    case 'Delete':\n    case 'Backspace':\n      // Intercept this operation and perform it manually.\n      event.preventDefault();\n      var selection = getSelection(input); // If a selection is made, just erase the selected text.\n\n      if (selection) {\n        eraseSelection(input, selection);\n        return formatInputText(input, _parse, _format, undefined, on_change);\n      } // Else, perform the (character erasing) operation manually.\n\n\n      return formatInputText(input, _parse, _format, operation, on_change);\n\n    default: // Will be handled normally as part of the `onChange` handler.\n\n  }\n}\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\n\nfunction eraseSelection(input, selection) {\n  var text = input.value;\n  text = text.slice(0, selection.start) + text.slice(selection.end);\n  input.value = text;\n  setCaretPosition(input, selection.start);\n}\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\n\n\nfunction formatInputText(input, _parse, _format, operation, on_change) {\n  // Parse `<input/>` textual value.\n  // Get the `value` and `caret` position.\n  var _parse2 = parse_parse(input.value, getCaretPosition(input), _parse),\n      value = _parse2.value,\n      caret = _parse2.caret; // If a user performed an operation (\"Backspace\", \"Delete\")\n  // then apply that operation and get the new `value` and `caret` position.\n\n\n  if (operation) {\n    var newValueAndCaret = edit(value, caret, operation);\n    value = newValueAndCaret.value;\n    caret = newValueAndCaret.caret;\n  } // Format the `value`.\n  // (and reposition the caret accordingly)\n\n\n  var formatted = format_format(value, caret, _format);\n  var text = formatted.text;\n  caret = formatted.caret; // Set `<input/>` textual value manually\n  // to prevent React from resetting the caret position\n  // later inside a subsequent `render()`.\n  // Doesn't work for custom `inputComponent`s for some reason.\n\n  input.value = text; // Position the caret properly.\n\n  setCaretPosition(input, caret); // If the `<input/>` textual value did change,\n  // then the parsed `value` may have changed too.\n\n  on_change(value);\n}\n// CONCATENATED MODULE: ./node_modules/input-format/modules/react/Input.js\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} // This is just `./ReactInput.js` rewritten in Hooks.\n\n\n\n\n // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nfunction Input(_ref, ref) {\n  var value = _ref.value,\n      parse = _ref.parse,\n      format = _ref.format,\n      InputComponent = _ref.inputComponent,\n      onChange = _ref.onChange,\n      onKeyDown = _ref.onKeyDown,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"parse\", \"format\", \"inputComponent\", \"onChange\", \"onKeyDown\"]);\n\n  var internalRef = Object(react[\"useRef\"])();\n  var setRef = Object(react[\"useCallback\"])(function (instance) {\n    internalRef.current = instance;\n\n    if (ref) {\n      if (typeof ref === 'function') {\n        ref(instance);\n      } else {\n        ref.current = instance;\n      }\n    }\n  }, [ref]);\n\n  var _onChange = Object(react[\"useCallback\"])(function (event) {\n    return inputControl_onChange(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange]);\n\n  var _onKeyDown = Object(react[\"useCallback\"])(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    return inputControl_onKeyDown(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange, onKeyDown]);\n\n  return react_default.a.createElement(InputComponent, _extends({}, rest, {\n    ref: setRef,\n    value: format(isEmptyValue(value) ? '' : value).text,\n    onKeyDown: _onKeyDown,\n    onChange: _onChange\n  }));\n}\n\nInput = react_default.a.forwardRef(Input);\nInput.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: prop_types_default.a.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: prop_types_default.a.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: prop_types_default.a.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: prop_types_default.a.string.isRequired,\n  // Is parsed from <input/> text.\n  value: prop_types_default.a.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: prop_types_default.a.func.isRequired,\n  // Passthrough\n  onKeyDown: prop_types_default.a.func,\n  onCut: prop_types_default.a.func,\n  onPaste: prop_types_default.a.func\n};\nInput.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n};\n/* harmony default export */ var react_Input = (Input);\n\nfunction isEmptyValue(value) {\n  return value === undefined || value === null;\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/AsYouType.js + 6 modules\nvar AsYouType = __webpack_require__(2547);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js\nvar parseIncompletePhoneNumber = __webpack_require__(2529);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/helpers/inputValuePrefix.js\nvar inputValuePrefix = __webpack_require__(2425);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/InputSmart.js\nfunction InputSmart_extends() {\n  InputSmart_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return InputSmart_extends.apply(this, arguments);\n}\n\nfunction InputSmart_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = InputSmart_objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction InputSmart_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n\n\n\n\n\nfunction createInput(defaultMetadata) {\n  /**\r\n   * `InputSmart` is a \"smarter\" implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's and maintains the caret's position in the process.\r\n   * The caret positioning is maintained using `input-format` library.\r\n   * Relies on being run in a DOM environment for calling caret positioning functions.\r\n   */\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        rest = InputSmart_objectWithoutProperties(_ref, [\"country\", \"international\", \"withCountryCallingCode\", \"metadata\"]);\n\n    var format = Object(react[\"useCallback\"])(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType[\"a\" /* default */](country, metadata);\n      var prefix = Object(inputValuePrefix[\"a\" /* getInputValuePrefix */])({\n        country: country,\n        international: international,\n        withCountryCallingCode: withCountryCallingCode,\n        metadata: metadata\n      }); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = Object(inputValuePrefix[\"b\" /* removeInputValuePrefix */])(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = Object(inputValuePrefix[\"b\" /* removeInputValuePrefix */])(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return react_default.a.createElement(react_Input, InputSmart_extends({}, rest, {\n      ref: ref,\n      parse: parseIncompletePhoneNumber[\"b\" /* parsePhoneNumberCharacter */],\n      format: format\n    }));\n  }\n\n  InputSmart = react_default.a.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: prop_types_default.a.string.isRequired,\n\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: prop_types_default.a.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: prop_types_default.a.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: prop_types_default.a.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: prop_types_default.a.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: prop_types_default.a.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\n/* harmony default export */ var modules_InputSmart = __webpack_exports__[\"a\"] = (createInput());\n\n/***/ }),\n\n/***/ 2432:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// UNUSED EXPORTS: parsePhoneNumber, formatPhoneNumber, formatPhoneNumberIntl, isValidPhoneNumber, isPossiblePhoneNumber, getCountries, getCountryCallingCode, isSupportedCountry\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/metadata.min.json\nvar metadata_min = __webpack_require__(2414);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js\nvar parsePhoneNumberFromString = __webpack_require__(2556);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/libphonenumber/formatPhoneNumber.js\nvar formatPhoneNumber = __webpack_require__(2557);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isValidPhoneNumber.js\nvar isValidPhoneNumber = __webpack_require__(2558);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isPossiblePhoneNumber.js\nvar isPossiblePhoneNumber = __webpack_require__(2559);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/getCountries.js\nvar getCountries = __webpack_require__(2560);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/metadata.js + 1 modules\nvar es6_metadata = __webpack_require__(2342);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(64);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/AsYouType.js + 6 modules\nvar AsYouType = __webpack_require__(2547);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/parseDigits.js\nvar parseDigits = __webpack_require__(2361);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/helpers/getInternationalPhoneNumberPrefix.js\nvar getInternationalPhoneNumberPrefix = __webpack_require__(2424);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/usePhoneDigits.js\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n\n\n\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\n\nfunction usePhoneDigits(_ref) {\n  var _this = this;\n\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      country = _ref.country,\n      defaultCountry = _ref.defaultCountry,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n      metadata = _ref.metadata;\n  var countryMismatchDetected = Object(react[\"useRef\"])();\n\n  var onCountryMismatch = function onCountryMismatch(value, country, actualCountry) {\n    console.error(\"[react-phone-number-input] Expected phone number \".concat(value, \" to correspond to country \").concat(country, \" but \").concat(actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t', \".\"));\n    countryMismatchDetected.current = true;\n  };\n\n  var getInitialPhoneDigits = function getInitialPhoneDigits(options) {\n    return getPhoneDigitsForValue(value, country, international, withCountryCallingCode, defaultCountry, useNationalFormatForDefaultCountryValue, metadata, function () {\n      if (options && options.onCountryMismatch) {\n        options.onCountryMismatch();\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      onCountryMismatch.apply(_this, args);\n    });\n  }; // This is only used to detect `country` property change.\n\n\n  var _useState = Object(react[\"useState\"])(country),\n      _useState2 = _slicedToArray(_useState, 2),\n      prevCountry = _useState2[0],\n      setPrevCountry = _useState2[1]; // This is only used to detect `defaultCountry` property change.\n\n\n  var _useState3 = Object(react[\"useState\"])(defaultCountry),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevDefaultCountry = _useState4[0],\n      setPrevDefaultCountry = _useState4[1]; // `phoneDigits` is the `value` passed to the `<input/>`.\n\n\n  var _useState5 = Object(react[\"useState\"])(getInitialPhoneDigits()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      phoneDigits = _useState6[0],\n      setPhoneDigits = _useState6[1]; // This is only used to detect `value` property changes.\n\n\n  var _useState7 = Object(react[\"useState\"])(value),\n      _useState8 = _slicedToArray(_useState7, 2),\n      valueForPhoneDigits = _useState8[0],\n      setValueForPhoneDigits = _useState8[1]; // Rerender hack.\n\n\n  var _useState9 = Object(react[\"useState\"])(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      rerenderTrigger = _useState10[0],\n      setRerenderTrigger = _useState10[1];\n\n  var rerender = Object(react[\"useCallback\"])(function () {\n    return setRerenderTrigger({});\n  }, [setRerenderTrigger]);\n\n  function getValueForPhoneDigits(phoneDigits) {\n    // If the user hasn't input any digits then `value` is `undefined`.\n    if (!phoneDigits) {\n      return;\n    }\n\n    if (country && international && !withCountryCallingCode) {\n      phoneDigits = \"+\".concat(Object(es6_metadata[\"b\" /* getCountryCallingCode */])(country, metadata)).concat(phoneDigits);\n    } // Return the E.164 phone number value.\n    //\n    // Even if no \"national (significant) number\" digits have been input,\n    // still return a non-`undefined` value.\n    // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\n    //\n    // For example, if the user has selected country `US` and entered `\"1\"`\n    // then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\n    // digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\n    // because otherwise the app would think that the input is empty and mark it as such\n    // while in reality it isn't empty, which might be thought of as a \"bug\", or just\n    // a \"weird\" behavior.\n    //\n    // The only case when there's any input and `getNumberValue()` still returns `undefined`\n    // is when that input is `\"+\"`.\n    //\n\n\n    var asYouType = new AsYouType[\"a\" /* default */](country || defaultCountry, metadata);\n    asYouType.input(phoneDigits);\n    return asYouType.getNumberValue();\n  } // If `value` property has been changed externally\n  // then re-initialize the component.\n\n\n  Object(react[\"useEffect\"])(function () {\n    if (value !== valueForPhoneDigits) {\n      setValueForPhoneDigits(value);\n      setPhoneDigits(getInitialPhoneDigits());\n    }\n  }, [value]); // If the `country` has been changed then re-initialize the component.\n\n  Object(react[\"useEffect\"])(function () {\n    if (country !== prevCountry) {\n      setPrevCountry(country);\n\n      var _countryMismatchDetected;\n\n      var _phoneDigits = getInitialPhoneDigits({\n        onCountryMismatch: function onCountryMismatch() {\n          _countryMismatchDetected = true;\n        }\n      });\n\n      setPhoneDigits(_phoneDigits);\n\n      if (_countryMismatchDetected) {\n        setValueForPhoneDigits(getValueForPhoneDigits(_phoneDigits));\n      }\n    }\n  }, [country]); // If the `defaultCountry` has been changed then re-initialize the component.\n\n  Object(react[\"useEffect\"])(function () {\n    if (defaultCountry !== prevDefaultCountry) {\n      setPrevDefaultCountry(defaultCountry);\n      setPhoneDigits(getInitialPhoneDigits());\n    }\n  }, [defaultCountry]); // Update the `value` after `valueForPhoneDigits` has been updated.\n\n  Object(react[\"useEffect\"])(function () {\n    if (valueForPhoneDigits !== value) {\n      onChange(valueForPhoneDigits);\n    }\n  }, [valueForPhoneDigits]);\n  var onSetPhoneDigits = Object(react[\"useCallback\"])(function (phoneDigits) {\n    var value;\n\n    if (country) {\n      if (international && withCountryCallingCode) {\n        // The `<input/>` value must start with the country calling code.\n        var prefix = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata);\n\n        if (phoneDigits.indexOf(prefix) !== 0) {\n          // If a user tabs into a phone number input field\n          // that is `international` and `withCountryCallingCode`,\n          // and then starts inputting local phone number digits,\n          // the first digit would get \"swallowed\" if the fix below wasn't implemented.\n          // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\n          if (phoneDigits && phoneDigits[0] !== '+') {\n            phoneDigits = prefix + phoneDigits;\n          } else {\n            // // Reset phone digits if they don't start with the correct prefix.\n            // // Undo the `<input/>` value change if it doesn't.\n            if (countryMismatchDetected.current) {// In case of a `country`/`value` mismatch,\n              // if it performed an \"undo\" here, then\n              // it wouldn't let a user edit their phone number at all,\n              // so this special case at least allows phone number editing\n              // when `value` already doesn't match the `country`.\n            } else {\n              // If it simply did `phoneDigits = prefix` here,\n              // then it could have no effect when erasing phone number\n              // via Backspace, because `phoneDigits` in `state` wouldn't change\n              // as a result, because it was `prefix` and it became `prefix`,\n              // so the component wouldn't rerender, and the user would be able\n              // to erase the country calling code part, and that part is\n              // assumed to be non-eraseable. That's why the component is\n              // forcefully rerendered here.\n              setPhoneDigits(prefix);\n              setValueForPhoneDigits(undefined); // Force a re-render of the `<input/>` with previous `phoneDigits` value.\n\n              return rerender();\n            }\n          }\n        }\n      } else {\n        // Entering phone number either in \"national\" format\n        // when `country` has been specified, or in \"international\" format\n        // when `country` has been specified but `withCountryCallingCode` hasn't.\n        // Therefore, `+` is not allowed.\n        if (phoneDigits && phoneDigits[0] === '+') {\n          // Remove the `+`.\n          phoneDigits = phoneDigits.slice(1);\n        }\n      }\n    } else if (!defaultCountry) {\n      // Force a `+` in the beginning of a `value`\n      // when no `country` and `defaultCountry` have been specified.\n      if (phoneDigits && phoneDigits[0] !== '+') {\n        // Prepend a `+`.\n        phoneDigits = '+' + phoneDigits;\n      }\n    } // Convert `phoneDigits` to `value`.\n\n\n    if (phoneDigits) {\n      value = getValueForPhoneDigits(phoneDigits);\n    }\n\n    setPhoneDigits(phoneDigits);\n    setValueForPhoneDigits(value);\n  }, [country, international, withCountryCallingCode, defaultCountry, metadata, setPhoneDigits, setValueForPhoneDigits, rerender, countryMismatchDetected]);\n  return [phoneDigits, onSetPhoneDigits];\n}\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {boolean} [withCountryCallingCode]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nfunction getPhoneDigitsForValue(value, country, international, withCountryCallingCode, defaultCountry, useNationalFormatForDefaultCountryValue, metadata, onCountryMismatch) {\n  if (country && international && withCountryCallingCode) {\n    var prefix = Object(getInternationalPhoneNumberPrefix[\"a\" /* default */])(country, metadata);\n\n    if (value) {\n      if (value.indexOf(prefix) !== 0) {\n        onCountryMismatch(value, country);\n      }\n\n      return value;\n    }\n\n    return prefix;\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  if (!country && !defaultCountry) {\n    return value;\n  }\n\n  var asYouType = new AsYouType[\"a\" /* default */](undefined, metadata);\n  asYouType.input(value);\n  var phoneNumber = asYouType.getNumber();\n\n  if (phoneNumber) {\n    if (country) {\n      if (phoneNumber.country && phoneNumber.country !== country) {\n        onCountryMismatch(value, country, phoneNumber.country);\n      } else if (phoneNumber.countryCallingCode !== Object(es6_metadata[\"b\" /* getCountryCallingCode */])(country, metadata)) {\n        onCountryMismatch(value, country);\n      }\n\n      if (international) {\n        return phoneNumber.nationalNumber;\n      }\n\n      return Object(parseDigits[\"a\" /* default */])(phoneNumber.formatNational());\n    } else {\n      // `phoneNumber.countryCallingCode` is compared here  instead of\n      // `phoneNumber.country`, because, for example, a person could have\n      // previously input a phone number (in \"national\" format) that isn't\n      // 100% valid for the `defaultCountry`, and if `phoneNumber.country`\n      // was compared, then it wouldn't match, and such phone number\n      // wouldn't be formatted as a \"national\" one, and instead would be\n      // formatted as an \"international\" one, confusing the user.\n      // Comparing `phoneNumber.countryCallingCode` works around such issues.\n      //\n      // Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\n      // The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\n      // The user then clicks \"Save\", the page is refreshed, and the user sees\n      // that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\n      // the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\n      // was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\n      // is not a valid national number for US, and `phoneNumber.country` is compared\n      // instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\n      // comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\n      // is no longer the case.\n      //\n      if (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === Object(es6_metadata[\"b\" /* getCountryCallingCode */])(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\n        return Object(parseDigits[\"a\" /* default */])(phoneNumber.formatNational());\n      }\n\n      return value;\n    }\n  } else {\n    return '';\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/PhoneInput.js\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction PhoneInput_slicedToArray(arr, i) {\n  return PhoneInput_arrayWithHoles(arr) || PhoneInput_iterableToArrayLimit(arr, i) || PhoneInput_nonIterableRest();\n}\n\nfunction PhoneInput_nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction PhoneInput_iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction PhoneInput_arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n\n\n\n\nfunction PhoneInput_PhoneInput(_ref, ref) {\n  var Component = _ref.Component,\n      country = _ref.country,\n      defaultCountry = _ref.defaultCountry,\n      useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      metadata = _ref.metadata,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      rest = _objectWithoutProperties(_ref, [\"Component\", \"country\", \"defaultCountry\", \"useNationalFormatForDefaultCountryValue\", \"value\", \"onChange\", \"metadata\", \"international\", \"withCountryCallingCode\"]); // \"Phone digits\" includes not only \"digits\" but also a `+` sign.\n\n\n  var _usePhoneDigits = usePhoneDigits({\n    value: value,\n    onChange: onChange,\n    country: country,\n    defaultCountry: defaultCountry,\n    international: international,\n    withCountryCallingCode: withCountryCallingCode,\n    useNationalFormatForDefaultCountryValue: useNationalFormatForDefaultCountryValue,\n    metadata: metadata\n  }),\n      _usePhoneDigits2 = PhoneInput_slicedToArray(_usePhoneDigits, 2),\n      phoneDigits = _usePhoneDigits2[0],\n      setPhoneDigits = _usePhoneDigits2[1];\n\n  return react_default.a.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    metadata: metadata,\n    international: international,\n    withCountryCallingCode: withCountryCallingCode,\n    country: country || defaultCountry,\n    value: phoneDigits,\n    onChange: setPhoneDigits\n  }));\n}\n\nPhoneInput_PhoneInput = react_default.a.forwardRef(PhoneInput_PhoneInput);\nPhoneInput_PhoneInput.propTypes = {\n  /**\r\n   * The phone number (in E.164 format).\r\n   * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n   */\n  value: prop_types_default.a.string,\n\n  /**\r\n   * A function of `value: string?`.\r\n   * Updates the `value` property.\r\n   */\n  onChange: prop_types_default.a.func.isRequired,\n\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * as a national phone number (example: `(213) 373-4253`),\r\n   * or as an international phone number without \"country calling code\"\r\n   * if `international` property is passed (example: `213 373 4253`).\r\n   * Example: \"US\".\r\n   * If no `country` is passed then `value`\r\n   * is formatted as an international phone number.\r\n   * (example: `+1 213 373 4253`)\r\n   */\n  country: prop_types_default.a.string,\n\n  /**\r\n   * A two-letter country code for formatting `value`\r\n   * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n   * The user can still input a phone number in international format.\r\n   * Example: \"US\".\r\n   * `country` and `defaultCountry` properties are mutually exclusive.\r\n   */\n  defaultCountry: prop_types_default.a.string,\n\n  /**\r\n   * If `country` property is passed along with `international={true}` property\r\n   * then the phone number will be input in \"international\" format for that `country`\r\n   * (without \"country calling code\").\r\n   * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n   * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n   * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n   * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n   * (without \"country calling code\" `+1`).\r\n   */\n  international: prop_types_default.a.bool,\n\n  /**\r\n   * If `country` and `international` properties are set,\r\n   * then by default it won't include \"country calling code\" in the input field.\r\n   * To change that, pass `withCountryCallingCode` property,\r\n   * and it will include \"country calling code\" in the input field.\r\n   */\n  withCountryCallingCode: prop_types_default.a.bool,\n\n  /**\r\n   * A component that renders the `<input/>` itself and also\r\n   * parses and formats its `value` as the user inputs it.\r\n   */\n  Component: prop_types_default.a.elementType.isRequired,\n\n  /**\r\n   * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n   * then the `value` will be formatted as a national phone number by default.\r\n   * To format the initial `value` of `defaultCountry` as an international number instead\r\n   * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n   */\n  useNationalFormatForDefaultCountryValue: prop_types_default.a.bool.isRequired,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   */\n  metadata: prop_types_default.a.object.isRequired\n};\nPhoneInput_PhoneInput.defaultProps = {\n  /**\r\n   * Set to `true` to force international phone number format\r\n   * (without \"country calling code\") when `country` is specified.\r\n   */\n  // international: false,\n\n  /**\r\n   * Prefer national format when formatting E.164 phone number `value`\r\n   * corresponding to `defaultCountry`.\r\n   */\n  useNationalFormatForDefaultCountryValue: true\n};\n/* harmony default export */ var modules_PhoneInput = (PhoneInput_PhoneInput);\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/InputSmart.js + 9 modules\nvar InputSmart = __webpack_require__(2431);\n\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/InputBasic.js + 1 modules\nvar InputBasic = __webpack_require__(2438);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/PhoneInputBrowser.js\nfunction PhoneInputBrowser_extends() {\n  PhoneInputBrowser_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return PhoneInputBrowser_extends.apply(this, arguments);\n}\n\nfunction PhoneInputBrowser_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = PhoneInputBrowser_objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction PhoneInputBrowser_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n\n\n\n\n\nfunction createInput(defaultMetadata) {\n  function PhoneInput(_ref, ref) {\n    var smartCaret = _ref.smartCaret,\n        rest = PhoneInputBrowser_objectWithoutProperties(_ref, [\"smartCaret\"]);\n\n    return react_default.a.createElement(modules_PhoneInput, PhoneInputBrowser_extends({}, rest, {\n      ref: ref,\n      Component: smartCaret ? InputSmart[\"a\" /* default */] : InputBasic[\"a\" /* default */]\n    }));\n  }\n\n  PhoneInput = react_default.a.forwardRef(PhoneInput);\n  PhoneInput.propTypes = {\n    /**\r\n     * HTML `<input/>` `type` attribute.\r\n     */\n    type: prop_types_default.a.string,\n\n    /**\r\n     * HTML `<input/>` `autocomplete` attribute.\r\n     */\n    autoComplete: prop_types_default.a.string,\n\n    /**\r\n     * By default, the caret position is being \"intelligently\" managed\r\n     * while a user inputs a phone number.\r\n     * This \"smart\" caret behavior can be turned off\r\n     * by passing `smartCaret={false}` property.\r\n     * This is just an \"escape hatch\" for any possible caret position issues.\r\n     */\n    // Is `true` by default.\n    smartCaret: prop_types_default.a.bool.isRequired,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: prop_types_default.a.object.isRequired\n  };\n  PhoneInput.defaultProps = {\n    /**\r\n     * HTML `<input/>` `type=\"tel\"`.\r\n     */\n    type: 'tel',\n\n    /**\r\n     * Remember (and autofill) the value as a phone number.\r\n     */\n    autoComplete: 'tel',\n\n    /**\r\n     * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n     */\n    smartCaret: true,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: defaultMetadata\n  };\n  return PhoneInput;\n}\n/* harmony default export */ var PhoneInputBrowser = (createInput());\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/input/index.js\n\n\n\n\nfunction call(func, _arguments) {\n  var args = Array.prototype.slice.call(_arguments);\n  args.push(metadata_min);\n  return func.apply(this, args);\n}\n\n/* harmony default export */ var input = __webpack_exports__[\"a\"] = (createInput(metadata_min));\nfunction parsePhoneNumber() {\n  return call(parsePhoneNumberFromString[\"a\" /* default */], arguments);\n}\nfunction input_formatPhoneNumber() {\n  return call(formatPhoneNumber[\"a\" /* default */], arguments);\n}\nfunction formatPhoneNumberIntl() {\n  return call(formatPhoneNumber[\"b\" /* formatPhoneNumberIntl */], arguments);\n}\nfunction input_isValidPhoneNumber() {\n  return call(isValidPhoneNumber[\"a\" /* default */], arguments);\n}\nfunction input_isPossiblePhoneNumber() {\n  return call(isPossiblePhoneNumber[\"a\" /* default */], arguments);\n}\nfunction input_getCountries() {\n  return call(getCountries[\"a\" /* default */], arguments);\n}\nfunction getCountryCallingCode() {\n  return call(es6_metadata[\"b\" /* getCountryCallingCode */], arguments);\n}\nfunction isSupportedCountry() {\n  return call(es6_metadata[\"c\" /* isSupportedCountry */], arguments);\n}\n\n/***/ }),\n\n/***/ 2433:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ PhoneNumber_PhoneNumber; });\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/metadata.js + 1 modules\nvar es6_metadata = __webpack_require__(2342);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isPossibleNumber_.js\nvar isPossibleNumber_ = __webpack_require__(2420);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js\nvar matchesEntirely = __webpack_require__(2353);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/getNumberType.js\nvar getNumberType = __webpack_require__(2382);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/validate_.js\n\n\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nfunction isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new es6_metadata[\"a\" /* default */](metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return Object(getNumberType[\"a\" /* default */])(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return Object(matchesEntirely[\"a\" /* default */])(national_number, metadata.nationalNumberPattern());\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js\nvar formatNationalNumberUsingFormat = __webpack_require__(2379);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nfunction getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new es6_metadata[\"a\" /* default */](metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/RFC3966.js\nvar RFC3966 = __webpack_require__(2421);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/format_.js\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\n\n\n\n\n\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // formatNumber('+78005553535', 'NATIONAL')\n  // formatNumber('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\nfunction formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread({}, DEFAULT_OPTIONS, options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new es6_metadata[\"a\" /* default */](metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return Object(RFC3966[\"a\" /* formatRFC3966 */])({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return Object(formatNationalNumberUsingFormat[\"b\" /* default */])(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var format = _ref; // Validate leading digits\n\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (Object(matchesEntirely[\"a\" /* default */])(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = Object(es6_metadata[\"b\" /* getCountryCallingCode */])(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/PhoneNumber.js\nfunction PhoneNumber_objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      PhoneNumber_defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction PhoneNumber_defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n\n\n\n\n\n\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber_PhoneNumber = /*#__PURE__*/function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n\n    var _metadata = new es6_metadata[\"a\" /* default */](metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return Object(isPossibleNumber_[\"a\" /* default */])(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new es6_metadata[\"a\" /* default */](this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return Object(getNumberType[\"a\" /* default */])(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? PhoneNumber_objectSpread({}, options, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\n\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n\n/***/ }),\n\n/***/ 2434:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ parsePhoneNumber_parsePhoneNumber; });\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/constants.js\nvar constants = __webpack_require__(2347);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/ParseError.js\nvar ParseError = __webpack_require__(2426);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/metadata.js + 1 modules\nvar es6_metadata = __webpack_require__(2342);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js\nvar isViablePhoneNumber = __webpack_require__(2422);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js\nvar createExtensionPattern = __webpack_require__(2423);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js\n // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + Object(createExtensionPattern[\"a\" /* default */])() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nfunction extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js\nvar parseIncompletePhoneNumber = __webpack_require__(2529);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/isPossibleNumber_.js\nvar isPossibleNumber_ = __webpack_require__(2420);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/RFC3966.js\nvar RFC3966 = __webpack_require__(2421);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/PhoneNumber.js + 3 modules\nvar PhoneNumber = __webpack_require__(2433);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js\nvar matchesEntirely = __webpack_require__(2353);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js\nvar extractCountryCallingCode = __webpack_require__(2416);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js\nvar extractNationalNumber = __webpack_require__(2417);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js\nvar getCountryByCallingCode = __webpack_require__(2419);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/parse_.js\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + constants[\"d\" /* PLUS_CHARS */] + constants[\"e\" /* VALID_DIGITS */] + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + constants[\"e\" /* VALID_DIGITS */] + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nfunction parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new es6_metadata[\"a\" /* default */](metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError[\"a\" /* default */]('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext,\n      error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError[\"a\" /* default */]('TOO_SHORT');\n      }\n\n      throw new ParseError[\"a\" /* default */]('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError[\"a\" /* default */]('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < constants[\"c\" /* MIN_LENGTH_FOR_NSN */]) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError[\"a\" /* default */]('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > constants[\"b\" /* MAX_LENGTH_FOR_NSN */]) {\n    if (options.v2) {\n      throw new ParseError[\"a\" /* default */]('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber[\"a\" /* default */](countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? Object(matchesEntirely[\"a\" /* default */])(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && Object(isPossibleNumber_[\"b\" /* isPossibleNumber */])(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError[\"a\" /* default */]('TOO_LONG');\n    }\n\n    return;\n  }\n\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2, extract) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return Object(RFC3966[\"b\" /* parseRFC3966 */])(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, extract, v2); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n\n  if (!Object(isViablePhoneNumber[\"a\" /* default */])(number)) {\n    if (Object(isViablePhoneNumber[\"b\" /* isViablePhoneNumberStart */])(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = Object(extractCountryCallingCode[\"a\" /* default */])(Object(parseIncompletePhoneNumber[\"a\" /* default */])(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n\n    countryCallingCode = defaultCallingCode || Object(es6_metadata[\"b\" /* getCountryCallingCode */])(defaultCountry, metadata.metadata);\n  } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = Object(extractNationalNumber[\"a\" /* default */])(Object(parseIncompletePhoneNumber[\"a\" /* default */])(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = Object(getCountryByCallingCode[\"a\" /* default */])(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/parsePhoneNumber_.js\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n\nfunction parsePhoneNumber_parsePhoneNumber(text, options, metadata) {\n  return parse(text, _objectSpread({}, options, {\n    v2: true\n  }), metadata);\n}\n\n/***/ }),\n\n/***/ 2438:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// UNUSED EXPORTS: createInput\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(64);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js\nvar parseIncompletePhoneNumber = __webpack_require__(2529);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/AsYouType.js + 6 modules\nvar AsYouType = __webpack_require__(2547);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\n\nfunction formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n\n  return new AsYouType[\"a\" /* default */](country, metadata).input(value);\n}\n// EXTERNAL MODULE: ./node_modules/react-phone-number-input/modules/helpers/inputValuePrefix.js\nvar inputValuePrefix = __webpack_require__(2425);\n\n// CONCATENATED MODULE: ./node_modules/react-phone-number-input/modules/InputBasic.js\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n\n\n\n\nfunction createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic` is the most basic implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's input but doesn't control the caret in the process:\r\n   * when erasing or inserting digits in the middle of a phone number\r\n   * the caret usually jumps to the end (this is the expected behavior).\r\n   * Why does `InputBasic` exist when there's `InputSmart`?\r\n   * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n   * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"country\", \"international\", \"withCountryCallingCode\", \"metadata\", \"inputComponent\"]);\n\n    var prefix = Object(inputValuePrefix[\"a\" /* getInputValuePrefix */])({\n      country: country,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      metadata: metadata\n    });\n\n    var _onChange = Object(react[\"useCallback\"])(function (event) {\n      var newValue = Object(parseIncompletePhoneNumber[\"a\" /* default */])(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return react_default.a.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = react_default.a.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: prop_types_default.a.string.isRequired,\n\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: prop_types_default.a.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: prop_types_default.a.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: prop_types_default.a.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: prop_types_default.a.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: prop_types_default.a.object.isRequired,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: prop_types_default.a.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\n/* harmony default export */ var modules_InputBasic = __webpack_exports__[\"a\"] = (createInput());\n\nfunction format(prefix, value, country, metadata) {\n  return Object(inputValuePrefix[\"b\" /* removeInputValuePrefix */])(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}\n\n/***/ }),\n\n/***/ 2529:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return parseIncompletePhoneNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return parsePhoneNumberCharacter; });\n/* harmony import */ var _helpers_parseDigits__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2361);\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nfunction parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nfunction parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return Object(_helpers_parseDigits__WEBPACK_IMPORTED_MODULE_0__[/* parseDigit */ \"b\"])(character);\n}\n\n/***/ }),\n\n/***/ 2530:\n/***/ (function(module) {\n\nmodule.exports = JSON.parse(\"{\\\"ext\\\":\\\"ext.\\\",\\\"country\\\":\\\"Phone number country\\\",\\\"phone\\\":\\\"Phone\\\",\\\"AB\\\":\\\"Abkhazia\\\",\\\"AC\\\":\\\"Ascension Island\\\",\\\"AD\\\":\\\"Andorra\\\",\\\"AE\\\":\\\"United Arab Emirates\\\",\\\"AF\\\":\\\"Afghanistan\\\",\\\"AG\\\":\\\"Antigua and Barbuda\\\",\\\"AI\\\":\\\"Anguilla\\\",\\\"AL\\\":\\\"Albania\\\",\\\"AM\\\":\\\"Armenia\\\",\\\"AO\\\":\\\"Angola\\\",\\\"AQ\\\":\\\"Antarctica\\\",\\\"AR\\\":\\\"Argentina\\\",\\\"AS\\\":\\\"American Samoa\\\",\\\"AT\\\":\\\"Austria\\\",\\\"AU\\\":\\\"Australia\\\",\\\"AW\\\":\\\"Aruba\\\",\\\"AX\\\":\\\"Åland Islands\\\",\\\"AZ\\\":\\\"Azerbaijan\\\",\\\"BA\\\":\\\"Bosnia and Herzegovina\\\",\\\"BB\\\":\\\"Barbados\\\",\\\"BD\\\":\\\"Bangladesh\\\",\\\"BE\\\":\\\"Belgium\\\",\\\"BF\\\":\\\"Burkina Faso\\\",\\\"BG\\\":\\\"Bulgaria\\\",\\\"BH\\\":\\\"Bahrain\\\",\\\"BI\\\":\\\"Burundi\\\",\\\"BJ\\\":\\\"Benin\\\",\\\"BL\\\":\\\"Saint Barthélemy\\\",\\\"BM\\\":\\\"Bermuda\\\",\\\"BN\\\":\\\"Brunei Darussalam\\\",\\\"BO\\\":\\\"Bolivia\\\",\\\"BQ\\\":\\\"Bonaire, Sint Eustatius and Saba\\\",\\\"BR\\\":\\\"Brazil\\\",\\\"BS\\\":\\\"Bahamas\\\",\\\"BT\\\":\\\"Bhutan\\\",\\\"BV\\\":\\\"Bouvet Island\\\",\\\"BW\\\":\\\"Botswana\\\",\\\"BY\\\":\\\"Belarus\\\",\\\"BZ\\\":\\\"Belize\\\",\\\"CA\\\":\\\"Canada\\\",\\\"CC\\\":\\\"Cocos (Keeling) Islands\\\",\\\"CD\\\":\\\"Congo, Democratic Republic of the\\\",\\\"CF\\\":\\\"Central African Republic\\\",\\\"CG\\\":\\\"Congo\\\",\\\"CH\\\":\\\"Switzerland\\\",\\\"CI\\\":\\\"Cote d'Ivoire\\\",\\\"CK\\\":\\\"Cook Islands\\\",\\\"CL\\\":\\\"Chile\\\",\\\"CM\\\":\\\"Cameroon\\\",\\\"CN\\\":\\\"China\\\",\\\"CO\\\":\\\"Colombia\\\",\\\"CR\\\":\\\"Costa Rica\\\",\\\"CU\\\":\\\"Cuba\\\",\\\"CV\\\":\\\"Cape Verde\\\",\\\"CW\\\":\\\"Curaçao\\\",\\\"CX\\\":\\\"Christmas Island\\\",\\\"CY\\\":\\\"Cyprus\\\",\\\"CZ\\\":\\\"Czech Republic\\\",\\\"DE\\\":\\\"Germany\\\",\\\"DJ\\\":\\\"Djibouti\\\",\\\"DK\\\":\\\"Denmark\\\",\\\"DM\\\":\\\"Dominica\\\",\\\"DO\\\":\\\"Dominican Republic\\\",\\\"DZ\\\":\\\"Algeria\\\",\\\"EC\\\":\\\"Ecuador\\\",\\\"EE\\\":\\\"Estonia\\\",\\\"EG\\\":\\\"Egypt\\\",\\\"EH\\\":\\\"Western Sahara\\\",\\\"ER\\\":\\\"Eritrea\\\",\\\"ES\\\":\\\"Spain\\\",\\\"ET\\\":\\\"Ethiopia\\\",\\\"FI\\\":\\\"Finland\\\",\\\"FJ\\\":\\\"Fiji\\\",\\\"FK\\\":\\\"Falkland Islands\\\",\\\"FM\\\":\\\"Federated States of Micronesia\\\",\\\"FO\\\":\\\"Faroe Islands\\\",\\\"FR\\\":\\\"France\\\",\\\"GA\\\":\\\"Gabon\\\",\\\"GB\\\":\\\"United Kingdom\\\",\\\"GD\\\":\\\"Grenada\\\",\\\"GE\\\":\\\"Georgia\\\",\\\"GF\\\":\\\"French Guiana\\\",\\\"GG\\\":\\\"Guernsey\\\",\\\"GH\\\":\\\"Ghana\\\",\\\"GI\\\":\\\"Gibraltar\\\",\\\"GL\\\":\\\"Greenland\\\",\\\"GM\\\":\\\"Gambia\\\",\\\"GN\\\":\\\"Guinea\\\",\\\"GP\\\":\\\"Guadeloupe\\\",\\\"GQ\\\":\\\"Equatorial Guinea\\\",\\\"GR\\\":\\\"Greece\\\",\\\"GS\\\":\\\"South Georgia and the South Sandwich Islands\\\",\\\"GT\\\":\\\"Guatemala\\\",\\\"GU\\\":\\\"Guam\\\",\\\"GW\\\":\\\"Guinea-Bissau\\\",\\\"GY\\\":\\\"Guyana\\\",\\\"HK\\\":\\\"Hong Kong\\\",\\\"HM\\\":\\\"Heard Island and McDonald Islands\\\",\\\"HN\\\":\\\"Honduras\\\",\\\"HR\\\":\\\"Croatia\\\",\\\"HT\\\":\\\"Haiti\\\",\\\"HU\\\":\\\"Hungary\\\",\\\"ID\\\":\\\"Indonesia\\\",\\\"IE\\\":\\\"Ireland\\\",\\\"IL\\\":\\\"Israel\\\",\\\"IM\\\":\\\"Isle of Man\\\",\\\"IN\\\":\\\"India\\\",\\\"IO\\\":\\\"British Indian Ocean Territory\\\",\\\"IQ\\\":\\\"Iraq\\\",\\\"IR\\\":\\\"Iran\\\",\\\"IS\\\":\\\"Iceland\\\",\\\"IT\\\":\\\"Italy\\\",\\\"JE\\\":\\\"Jersey\\\",\\\"JM\\\":\\\"Jamaica\\\",\\\"JO\\\":\\\"Jordan\\\",\\\"JP\\\":\\\"Japan\\\",\\\"KE\\\":\\\"Kenya\\\",\\\"KG\\\":\\\"Kyrgyzstan\\\",\\\"KH\\\":\\\"Cambodia\\\",\\\"KI\\\":\\\"Kiribati\\\",\\\"KM\\\":\\\"Comoros\\\",\\\"KN\\\":\\\"Saint Kitts and Nevis\\\",\\\"KP\\\":\\\"North Korea\\\",\\\"KR\\\":\\\"South Korea\\\",\\\"KW\\\":\\\"Kuwait\\\",\\\"KY\\\":\\\"Cayman Islands\\\",\\\"KZ\\\":\\\"Kazakhstan\\\",\\\"LA\\\":\\\"Laos\\\",\\\"LB\\\":\\\"Lebanon\\\",\\\"LC\\\":\\\"Saint Lucia\\\",\\\"LI\\\":\\\"Liechtenstein\\\",\\\"LK\\\":\\\"Sri Lanka\\\",\\\"LR\\\":\\\"Liberia\\\",\\\"LS\\\":\\\"Lesotho\\\",\\\"LT\\\":\\\"Lithuania\\\",\\\"LU\\\":\\\"Luxembourg\\\",\\\"LV\\\":\\\"Latvia\\\",\\\"LY\\\":\\\"Libya\\\",\\\"MA\\\":\\\"Morocco\\\",\\\"MC\\\":\\\"Monaco\\\",\\\"MD\\\":\\\"Moldova\\\",\\\"ME\\\":\\\"Montenegro\\\",\\\"MF\\\":\\\"Saint Martin (French Part)\\\",\\\"MG\\\":\\\"Madagascar\\\",\\\"MH\\\":\\\"Marshall Islands\\\",\\\"MK\\\":\\\"North Macedonia\\\",\\\"ML\\\":\\\"Mali\\\",\\\"MM\\\":\\\"Burma\\\",\\\"MN\\\":\\\"Mongolia\\\",\\\"MO\\\":\\\"Macao\\\",\\\"MP\\\":\\\"Northern Mariana Islands\\\",\\\"MQ\\\":\\\"Martinique\\\",\\\"MR\\\":\\\"Mauritania\\\",\\\"MS\\\":\\\"Montserrat\\\",\\\"MT\\\":\\\"Malta\\\",\\\"MU\\\":\\\"Mauritius\\\",\\\"MV\\\":\\\"Maldives\\\",\\\"MW\\\":\\\"Malawi\\\",\\\"MX\\\":\\\"Mexico\\\",\\\"MY\\\":\\\"Malaysia\\\",\\\"MZ\\\":\\\"Mozambique\\\",\\\"NA\\\":\\\"Namibia\\\",\\\"NC\\\":\\\"New Caledonia\\\",\\\"NE\\\":\\\"Niger\\\",\\\"NF\\\":\\\"Norfolk Island\\\",\\\"NG\\\":\\\"Nigeria\\\",\\\"NI\\\":\\\"Nicaragua\\\",\\\"NL\\\":\\\"Netherlands\\\",\\\"NO\\\":\\\"Norway\\\",\\\"NP\\\":\\\"Nepal\\\",\\\"NR\\\":\\\"Nauru\\\",\\\"NU\\\":\\\"Niue\\\",\\\"NZ\\\":\\\"New Zealand\\\",\\\"OM\\\":\\\"Oman\\\",\\\"OS\\\":\\\"South Ossetia\\\",\\\"PA\\\":\\\"Panama\\\",\\\"PE\\\":\\\"Peru\\\",\\\"PF\\\":\\\"French Polynesia\\\",\\\"PG\\\":\\\"Papua New Guinea\\\",\\\"PH\\\":\\\"Philippines\\\",\\\"PK\\\":\\\"Pakistan\\\",\\\"PL\\\":\\\"Poland\\\",\\\"PM\\\":\\\"Saint Pierre and Miquelon\\\",\\\"PN\\\":\\\"Pitcairn\\\",\\\"PR\\\":\\\"Puerto Rico\\\",\\\"PS\\\":\\\"Palestine\\\",\\\"PT\\\":\\\"Portugal\\\",\\\"PW\\\":\\\"Palau\\\",\\\"PY\\\":\\\"Paraguay\\\",\\\"QA\\\":\\\"Qatar\\\",\\\"RE\\\":\\\"Reunion\\\",\\\"RO\\\":\\\"Romania\\\",\\\"RS\\\":\\\"Serbia\\\",\\\"RU\\\":\\\"Russia\\\",\\\"RW\\\":\\\"Rwanda\\\",\\\"SA\\\":\\\"Saudi Arabia\\\",\\\"SB\\\":\\\"Solomon Islands\\\",\\\"SC\\\":\\\"Seychelles\\\",\\\"SD\\\":\\\"Sudan\\\",\\\"SE\\\":\\\"Sweden\\\",\\\"SG\\\":\\\"Singapore\\\",\\\"SH\\\":\\\"Saint Helena\\\",\\\"SI\\\":\\\"Slovenia\\\",\\\"SJ\\\":\\\"Svalbard and Jan Mayen\\\",\\\"SK\\\":\\\"Slovakia\\\",\\\"SL\\\":\\\"Sierra Leone\\\",\\\"SM\\\":\\\"San Marino\\\",\\\"SN\\\":\\\"Senegal\\\",\\\"SO\\\":\\\"Somalia\\\",\\\"SR\\\":\\\"Suriname\\\",\\\"SS\\\":\\\"South Sudan\\\",\\\"ST\\\":\\\"Sao Tome and Principe\\\",\\\"SV\\\":\\\"El Salvador\\\",\\\"SX\\\":\\\"Sint Maarten\\\",\\\"SY\\\":\\\"Syria\\\",\\\"SZ\\\":\\\"Swaziland\\\",\\\"TA\\\":\\\"Tristan da Cunha\\\",\\\"TC\\\":\\\"Turks and Caicos Islands\\\",\\\"TD\\\":\\\"Chad\\\",\\\"TF\\\":\\\"French Southern Territories\\\",\\\"TG\\\":\\\"Togo\\\",\\\"TH\\\":\\\"Thailand\\\",\\\"TJ\\\":\\\"Tajikistan\\\",\\\"TK\\\":\\\"Tokelau\\\",\\\"TL\\\":\\\"Timor-Leste\\\",\\\"TM\\\":\\\"Turkmenistan\\\",\\\"TN\\\":\\\"Tunisia\\\",\\\"TO\\\":\\\"Tonga\\\",\\\"TR\\\":\\\"Turkey\\\",\\\"TT\\\":\\\"Trinidad and Tobago\\\",\\\"TV\\\":\\\"Tuvalu\\\",\\\"TW\\\":\\\"Taiwan\\\",\\\"TZ\\\":\\\"Tanzania\\\",\\\"UA\\\":\\\"Ukraine\\\",\\\"UG\\\":\\\"Uganda\\\",\\\"UM\\\":\\\"United States Minor Outlying Islands\\\",\\\"US\\\":\\\"United States\\\",\\\"UY\\\":\\\"Uruguay\\\",\\\"UZ\\\":\\\"Uzbekistan\\\",\\\"VA\\\":\\\"Holy See (Vatican City State)\\\",\\\"VC\\\":\\\"Saint Vincent and the Grenadines\\\",\\\"VE\\\":\\\"Venezuela\\\",\\\"VG\\\":\\\"Virgin Islands, British\\\",\\\"VI\\\":\\\"Virgin Islands, U.S.\\\",\\\"VN\\\":\\\"Vietnam\\\",\\\"VU\\\":\\\"Vanuatu\\\",\\\"WF\\\":\\\"Wallis and Futuna\\\",\\\"WS\\\":\\\"Samoa\\\",\\\"XK\\\":\\\"Kosovo\\\",\\\"YE\\\":\\\"Yemen\\\",\\\"YT\\\":\\\"Mayotte\\\",\\\"ZA\\\":\\\"South Africa\\\",\\\"ZM\\\":\\\"Zambia\\\",\\\"ZW\\\":\\\"Zimbabwe\\\",\\\"ZZ\\\":\\\"International\\\"}\");\n\n/***/ }),\n\n/***/ 2547:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ AsYouType_AsYouType; });\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/metadata.js + 1 modules\nvar es6_metadata = __webpack_require__(2342);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/PhoneNumber.js + 3 modules\nvar PhoneNumber = __webpack_require__(2433);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeState.js\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar AsYouTypeState = /*#__PURE__*/function () {\n  function AsYouTypeState(_ref) {\n    var _this = this;\n\n    var onCountryChange = _ref.onCountryChange,\n        onCallingCodeChange = _ref.onCallingCodeChange;\n\n    _classCallCheck(this, AsYouTypeState);\n\n    _defineProperty(this, \"update\", function (properties) {\n      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        _this[key] = properties[key];\n      }\n    });\n\n    this.onCountryChange = onCountryChange;\n    this.onCallingCodeChange = onCallingCodeChange;\n  }\n\n  _createClass(AsYouTypeState, [{\n    key: \"reset\",\n    value: function reset(defaultCountry, defaultCallingCode) {\n      this.international = false;\n      this.IDDPrefix = undefined;\n      this.missingPlus = undefined;\n      this.callingCode = undefined;\n      this.digits = '';\n      this.resetNationalSignificantNumber();\n      this.initCountryAndCallingCode(defaultCountry, defaultCallingCode);\n    }\n  }, {\n    key: \"resetNationalSignificantNumber\",\n    value: function resetNationalSignificantNumber() {\n      this.nationalSignificantNumber = this.getNationalDigits();\n      this.nationalSignificantNumberMatchesInput = true;\n      this.nationalPrefix = undefined;\n      this.carrierCode = undefined;\n      this.complexPrefixBeforeNationalSignificantNumber = undefined;\n    }\n  }, {\n    key: \"initCountryAndCallingCode\",\n    value: function initCountryAndCallingCode(country, callingCode) {\n      this.setCountry(country);\n      this.setCallingCode(callingCode);\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country) {\n      this.country = country;\n      this.onCountryChange(country);\n    }\n  }, {\n    key: \"setCallingCode\",\n    value: function setCallingCode(callingCode) {\n      this.callingCode = callingCode;\n      return this.onCallingCodeChange(this.country, callingCode);\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber() {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.initCountryAndCallingCode();\n    }\n  }, {\n    key: \"appendDigits\",\n    value: function appendDigits(nextDigits) {\n      this.digits += nextDigits;\n    }\n  }, {\n    key: \"appendNationalSignificantNumberDigits\",\n    value: function appendNationalSignificantNumberDigits(nextDigits) {\n      this.nationalSignificantNumber += nextDigits;\n    }\n    /**\r\n     * Returns the part of `this.digits` that corresponds to the national number.\r\n     * Basically, all digits that have been input by the user, except for the\r\n     * international prefix and the country calling code part\r\n     * (if the number is an international one).\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getNationalDigits\",\n    value: function getNationalDigits() {\n      if (this.international) {\n        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));\n      }\n\n      return this.digits;\n    }\n  }, {\n    key: \"getDigitsWithoutInternationalPrefix\",\n    value: function getDigitsWithoutInternationalPrefix() {\n      if (this.international) {\n        if (this.IDDPrefix) {\n          return this.digits.slice(this.IDDPrefix.length);\n        }\n      }\n\n      return this.digits;\n    }\n  }]);\n\n  return AsYouTypeState;\n}();\n\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js\n// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\nvar DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nfunction countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nfunction repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\nfunction cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nfunction closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n}\nfunction stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i2 = 0, _dangling_braces = dangling_braces; _i2 < _dangling_braces.length; _i2++) {\n    var index = _dangling_braces[_i2];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nfunction populateTemplateWithDigits(template, position, digits) {\n  // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for `digits` it is safe.\n  // for (const digit of digits)\n  for (var _iterator2 = digits.split(''), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _ref2;\n\n    if (_isArray2) {\n      if (_i3 >= _iterator2.length) break;\n      _ref2 = _iterator2[_i3++];\n    } else {\n      _i3 = _iterator2.next();\n      if (_i3.done) break;\n      _ref2 = _i3.value;\n    }\n\n    var digit = _ref2; // If there is room for more digits in current `template`,\n    // then set the next digit in the `template`,\n    // and return the formatted digits so far.\n    // If more digits are entered than the current format could handle.\n\n    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n      return;\n    }\n\n    position = template.search(DIGIT_PLACEHOLDER_MATCHER);\n    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n  }\n\n  return [template, position];\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js + 1 modules\nvar checkNumberLength = __webpack_require__(2369);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/parseDigits.js\nvar parseDigits = __webpack_require__(2361);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js\nvar formatNationalNumberUsingFormat = __webpack_require__(2379);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js\n\n\n\nfunction formatCompleteNumber(state, format, _ref) {\n  var metadata = _ref.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;\n  var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n\n  if (matcher.test(state.nationalSignificantNumber)) {\n    return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\n      metadata: metadata,\n      shouldTryNationalPrefixFormattingRule: shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix\n    });\n  }\n}\nfunction canFormatCompleteNumber(nationalSignificantNumber, metadata) {\n  return Object(checkNumberLength[\"a\" /* default */])(nationalSignificantNumber, metadata) === 'IS_POSSIBLE';\n}\n\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {\n  var metadata = _ref2.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix; // `format` has already been checked for `nationalPrefix` requirement.\n\n  var nationalSignificantNumber = state.nationalSignificantNumber,\n      international = state.international,\n      nationalPrefix = state.nationalPrefix,\n      carrierCode = state.carrierCode; // Format the number with using `national_prefix_formatting_rule`.\n  // If the resulting formatted number is a valid formatted number, then return it.\n  //\n  // Google's AsYouType formatter is different in a way that it doesn't try\n  // to format using the \"national prefix formatting rule\", and instead it\n  // simply prepends a national prefix followed by a \" \" character.\n  // This code does that too, but as a fallback.\n  // The reason is that \"national prefix formatting rule\" may use parentheses,\n  // which wouldn't be included has it used the simpler Google's way.\n  //\n\n  if (shouldTryNationalPrefixFormattingRule(format)) {\n    var formattedNumber = formatNationalNumber(state, format, {\n      useNationalPrefixFormattingRule: true,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n      metadata: metadata\n    });\n\n    if (formattedNumber) {\n      return formattedNumber;\n    }\n  } // Format the number without using `national_prefix_formatting_rule`.\n\n\n  return formatNationalNumber(state, format, {\n    useNationalPrefixFormattingRule: false,\n    getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n    metadata: metadata\n  });\n}\n\nfunction formatNationalNumber(state, format, _ref3) {\n  var metadata = _ref3.metadata,\n      useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;\n  var formattedNationalNumber = Object(formatNationalNumberUsingFormat[\"b\" /* default */])(state.nationalSignificantNumber, format, {\n    carrierCode: state.carrierCode,\n    useInternationalFormat: state.international,\n    withNationalPrefix: useNationalPrefixFormattingRule,\n    metadata: metadata\n  });\n\n  if (!useNationalPrefixFormattingRule) {\n    if (state.nationalPrefix) {\n      // If a national prefix was extracted, then just prepend it,\n      // followed by a \" \" character.\n      formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n    } else if (state.complexPrefixBeforeNationalSignificantNumber) {\n      formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + ' ' + formattedNationalNumber;\n    }\n  }\n\n  if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\n    return formattedNationalNumber;\n  }\n} // Check that the formatted phone number contains exactly\n// the same digits that have been input by the user.\n// For example, when \"0111523456789\" is input for `AR` country,\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\n// which means that the national part of `this.digits` isn't simply equal to\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\n//\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\n// being formatted via `metadata[country].national_prefix_transform_rule`.\n// For example, for `VI` country, it prepends `340` to the national number,\n// and if this check hasn't been implemented, then there would be a bug\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\n//\n// So, all these \"gotchas\" are filtered out.\n//\n// In the original Google's code, the comments say:\n// \"Check that we didn't remove nor add any extra digits when we matched\n// this formatting pattern. This usually happens after we entered the last\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n// formatted but AYTF should retain all the number entered and not change\n// in order to match a format (of same leading digits and length) display\n// in that way.\"\n// \"If it's the same (i.e entered number and format is same), then it's\n// safe to return this in formatted number as nothing is lost / added.\"\n// Otherwise, don't use this format.\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n//\n\n\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\n  return Object(parseDigits[\"a\" /* default */])(formattedNationalNumber) === state.getNationalDigits();\n}\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternMatcher.js\nfunction AsYouTypeFormatter_PatternMatcher_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction AsYouTypeFormatter_PatternMatcher_defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction AsYouTypeFormatter_PatternMatcher_createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) AsYouTypeFormatter_PatternMatcher_defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) AsYouTypeFormatter_PatternMatcher_defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar PatternMatcher = /*#__PURE__*/function () {\n  function PatternMatcher(pattern) {\n    AsYouTypeFormatter_PatternMatcher_classCallCheck(this, PatternMatcher);\n\n    this.matchTree = new PatternParser().parse(pattern); // console.log(JSON.stringify(this.matchTree, null, 2))\n  }\n\n  AsYouTypeFormatter_PatternMatcher_createClass(PatternMatcher, [{\n    key: \"match\",\n    value: function match(string) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          allowOverflow = _ref.allowOverflow;\n\n      if (!string) {\n        throw new Error('String is required');\n      }\n\n      var result = _match(string.split(''), this.matchTree, true);\n\n      if (result && result.match) {\n        delete result.matchedChars;\n      }\n\n      if (result && result.overflow) {\n        if (!allowOverflow) {\n          return;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return PatternMatcher;\n}();\n\n\n\nfunction _match(characters, tree, last) {\n  if (typeof tree === 'string') {\n    if (last) {\n      if (characters.length > tree.length) {\n        return {\n          overflow: true\n        };\n      }\n    }\n\n    var characterString = characters.join('');\n\n    if (tree.indexOf(characterString) === 0) {\n      if (characters.length === tree.length) {\n        return {\n          match: true,\n          matchedChars: characters\n        };\n      }\n\n      return {\n        partialMatch: true // matchedChars: characters\n\n      };\n    }\n\n    if (characterString.indexOf(tree) === 0) {\n      return {\n        match: true,\n        matchedChars: characters.slice(0, tree.length)\n      };\n    }\n\n    return;\n  }\n\n  if (Array.isArray(tree)) {\n    var restCharacters = characters.slice();\n    var i = 0;\n\n    while (i < tree.length) {\n      var subtree = tree[i];\n\n      var result = _match(restCharacters, subtree, last && i === tree.length - 1);\n\n      if (!result || result.overflow) {\n        return result;\n      }\n\n      if (result.match) {\n        // Continue with the next subtree with the rest of the characters.\n        restCharacters = restCharacters.slice(result.matchedChars.length);\n\n        if (restCharacters.length === 0) {\n          if (i === tree.length - 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          } else {\n            return {\n              partialMatch: true // matchedChars: characters\n\n            };\n          }\n        }\n      } else if (result.partialMatch) {\n        return {\n          partialMatch: true // matchedChars: characters\n\n        };\n      } else {\n        throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(result, null, 2)));\n      }\n\n      i++;\n    }\n\n    if (last) {\n      return {\n        overflow: true\n      };\n    }\n\n    return {\n      match: true,\n      matchedChars: characters.slice(0, characters.length - restCharacters.length)\n    };\n  }\n\n  switch (tree.op) {\n    case '|':\n      var partialMatch;\n\n      for (var _iterator = tree.args, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref2 = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref2 = _i.value;\n        }\n\n        var branch = _ref2;\n\n        var _result = _match(characters, branch, last);\n\n        if (_result) {\n          if (_result.overflow) {\n            return _result;\n          } else if (_result.match) {\n            return {\n              match: true,\n              matchedChars: _result.matchedChars\n            };\n          } else if (_result.partialMatch) {\n            partialMatch = true;\n          }\n        }\n      }\n\n      if (partialMatch) {\n        return {\n          partialMatch: true // matchedChars: ...\n\n        };\n      } // Not even a partial match.\n\n\n      return;\n\n    case '[]':\n      for (var _iterator2 = tree.args, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref3 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref3 = _i2.value;\n        }\n\n        var _char = _ref3;\n\n        if (characters[0] === _char) {\n          if (characters.length === 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          }\n\n          if (last) {\n            return {\n              overflow: true\n            };\n          }\n\n          return {\n            match: true,\n            matchedChars: [_char]\n          };\n        }\n      } // No character matches.\n\n\n      return;\n\n    default:\n      throw new Error(\"Unsupported instruction tree: \".concat(tree));\n  }\n}\n\nvar OPERATOR = new RegExp( // any of:\n'(' + // or operator\n'\\\\|' + // or\n'|' + // or group start\n'\\\\(\\\\?\\\\:' + // or\n'|' + // or group end\n'\\\\)' + // or\n'|' + // one-of set start\n'\\\\[' + // or\n'|' + // one-of set end\n'\\\\]' + ')');\n\nvar PatternParser = /*#__PURE__*/function () {\n  function PatternParser() {\n    AsYouTypeFormatter_PatternMatcher_classCallCheck(this, PatternParser);\n  }\n\n  AsYouTypeFormatter_PatternMatcher_createClass(PatternParser, [{\n    key: \"parse\",\n    value: function parse(pattern) {\n      this.context = [{\n        or: true,\n        instructions: []\n      }];\n      this.parsePattern(pattern);\n\n      if (this.context.length !== 1) {\n        throw new Error('Non-finalized contexts left when pattern parse ended');\n      }\n\n      var _this$context$ = this.context[0],\n          branches = _this$context$.branches,\n          instructions = _this$context$.instructions;\n\n      if (branches) {\n        return [{\n          op: '|',\n          args: branches.concat([instructions])\n        }];\n      }\n\n      if (instructions.length === 0) {\n        throw new Error('Pattern is required');\n      }\n\n      return instructions;\n    }\n  }, {\n    key: \"startContext\",\n    value: function startContext(context) {\n      this.context.push(context);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.context.pop();\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.context[this.context.length - 1];\n    }\n  }, {\n    key: \"parsePattern\",\n    value: function parsePattern(pattern) {\n      if (!pattern) {\n        throw new Error('Empty pattern passed');\n      }\n\n      var match = pattern.match(OPERATOR);\n\n      if (!match) {\n        this.getContext().instructions = this.getContext().instructions.concat(pattern.split(''));\n        return;\n      }\n\n      var operator = match[1];\n      var before = pattern.slice(0, match.index);\n      var rightPart = pattern.slice(match.index + operator.length);\n\n      switch (operator) {\n        case '(?:':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            or: true,\n            instructions: [],\n            branches: []\n          });\n          break;\n\n        case ')':\n          if (!this.getContext().or) {\n            throw new Error('\")\" operator must be preceded by \"(?:\" operator');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          if (this.getContext().instructions.length === 0) {\n            throw new Error('No instructions found after \"|\" operator in an \"or\" group');\n          }\n\n          var _this$getContext = this.getContext(),\n              branches = _this$getContext.branches;\n\n          branches.push(this.getContext().instructions);\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '|',\n            args: branches\n          });\n          break;\n\n        case '|':\n          if (!this.getContext().or) {\n            throw new Error('\"|\" operator can only be used inside \"or\" groups');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          } // The top-level is an implicit \"or\" group, if required.\n\n\n          if (!this.getContext().branches) {\n            if (this.context.length === 1) {\n              this.getContext().branches = [];\n            } else {\n              throw new Error('\"branches\" not found in an \"or\" group context');\n            }\n          }\n\n          this.getContext().branches.push(this.getContext().instructions);\n          this.getContext().instructions = [];\n          break;\n\n        case '[':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            oneOfSet: true\n          });\n          break;\n\n        case ']':\n          if (!this.getContext().oneOfSet) {\n            throw new Error('\"]\" operator must be preceded by \"[\" operator');\n          }\n\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '[]',\n            args: parseOneOfSet(before)\n          });\n          break;\n\n        default:\n          throw new Error(\"Unknown operator: \".concat(operator));\n      }\n\n      if (rightPart) {\n        this.parsePattern(rightPart);\n      }\n    }\n  }]);\n\n  return PatternParser;\n}();\n\nfunction parseOneOfSet(pattern) {\n  var values = [];\n  var i = 0;\n\n  while (i < pattern.length) {\n    if (pattern[i] === '-') {\n      if (i === 0 || i === pattern.length - 1) {\n        throw new Error(\"Couldn't parse a one-of set pattern: \".concat(pattern));\n      }\n\n      var prevValue = pattern[i - 1].charCodeAt(0) + 1;\n      var nextValue = pattern[i + 1].charCodeAt(0) - 1;\n      var value = prevValue;\n\n      while (value <= nextValue) {\n        values.push(String.fromCharCode(value));\n        value++;\n      }\n    } else {\n      values.push(pattern[i]);\n    }\n\n    i++;\n  }\n\n  return values;\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/constants.js\nvar constants = __webpack_require__(2347);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js\nvar applyInternationalSeparatorStyle = __webpack_require__(2415);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js\nfunction AsYouTypeFormatter_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction AsYouTypeFormatter_defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction AsYouTypeFormatter_createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) AsYouTypeFormatter_defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) AsYouTypeFormatter_defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction AsYouTypeFormatter_defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n\n\n\n\n\n\n\n // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A regular expression that is used to determine if a `format` is\n// suitable to be used in the \"as you type formatter\".\n// A `format` is suitable when the resulting formatted number has\n// the same digits as the user has entered.\n//\n// In the simplest case, that would mean that the format\n// doesn't add any additional digits when formatting a number.\n// Google says that it also shouldn't add \"star\" (`*`) characters,\n// like it does in some Israeli formats.\n// Such basic format would only contain \"valid punctuation\"\n// and \"captured group\" identifiers ($1, $2, etc).\n//\n// An example of a format that adds additional digits:\n//\n// Country: `AR` (Argentina).\n// Format:\n// {\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n//    \"leading_digits_patterns\": [\"91\"],\n//    \"national_prefix_formatting_rule\": \"0$1\",\n//    \"format\": \"$2 15-$3-$4\",\n//    \"international_format\": \"$1 $2 $3-$4\"\n// }\n//\n// In the format above, the `format` adds `15` to the digits when formatting a number.\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\n// has previously removed `15` from a national number, so re-adding `15` in `format`\n// doesn't actually result in any extra digits added to user's input.\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\n//\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\n// `libphonenumber` code.\n//\n\n\nvar NON_ALTERING_FORMAT_REG_EXP = new RegExp('^' + '[' + constants[\"f\" /* VALID_PUNCTUATION */] + ']*' + '(\\\\$\\\\d[' + constants[\"f\" /* VALID_PUNCTUATION */] + ']*)+' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar AsYouTypeFormatter_AsYouTypeFormatter = /*#__PURE__*/function () {\n  function AsYouTypeFormatter(_ref) {\n    var _this = this;\n\n    var state = _ref.state,\n        metadata = _ref.metadata;\n\n    AsYouTypeFormatter_classCallCheck(this, AsYouTypeFormatter);\n\n    AsYouTypeFormatter_defineProperty(this, \"getSeparatorAfterNationalPrefix\", function (format) {\n      // `US` metadata doesn't have a `national_prefix_formatting_rule`,\n      // so the `if` condition below doesn't apply to `US`,\n      // but in reality there shoudl be a separator\n      // between a national prefix and a national (significant) number.\n      // So `US` national prefix separator is a \"special\" \"hardcoded\" case.\n      if (_this.isNANP) {\n        return ' ';\n      } // If a `format` has a `national_prefix_formatting_rule`\n      // and that rule has a separator after a national prefix,\n      // then it means that there should be a separator\n      // between a national prefix and a national (significant) number.\n\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      } // At this point, there seems to be no clear evidence that\n      // there should be a separator between a national prefix\n      // and a national (significant) number. So don't insert one.\n\n\n      return '';\n    });\n\n    AsYouTypeFormatter_defineProperty(this, \"shouldTryNationalPrefixFormattingRule\", function (format, _ref2) {\n      var international = _ref2.international,\n          nationalPrefix = _ref2.nationalPrefix;\n\n      if (format.nationalPrefixFormattingRule()) {\n        // In some countries, `national_prefix_formatting_rule` is `($1)`,\n        // so it applies even if the user hasn't input a national prefix.\n        // `format.usesNationalPrefix()` detects such cases.\n        var usesNationalPrefix = format.usesNationalPrefix();\n\n        if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {\n          return true;\n        }\n      }\n    });\n\n    this.metadata = metadata;\n    this.resetFormat();\n  }\n\n  AsYouTypeFormatter_createClass(AsYouTypeFormatter, [{\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.nationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan, state) {\n      this.resetFormat();\n\n      if (numberingPlan) {\n        this.isNANP = numberingPlan.callingCode() === '1';\n        this.matchingFormats = numberingPlan.formats();\n\n        if (state.nationalSignificantNumber) {\n          this.narrowDownMatchingFormats(state);\n        }\n      } else {\n        this.isNANP = undefined;\n        this.matchingFormats = [];\n      }\n    }\n    /**\r\n     * Formats an updated phone number.\r\n     * @param  {string} nextDigits — Additional phone number digits.\r\n     * @param  {object} state — `AsYouType` state.\r\n     * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(nextDigits, state) {\n      var _this2 = this; // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNationalNumberWithNextDigits()`,\n      // which formats based on the chosen formatting pattern.\n      //\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`, so this library just follows it.\n      // Google's `libphonenumber` code doesn't explain in detail why does it\n      // attempt to format digits as a complete phone number\n      // instead of just going with a previoulsy (or newly) chosen `format`:\n      //\n      // \"Checks to see if there is an exact pattern match for these digits.\n      //  If so, we should use this instead of any other formatting template\n      //  whose leadingDigitsPattern also matches the input.\"\n      //\n\n\n      if (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\n        for (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref3;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref3 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref3 = _i.value;\n          }\n\n          var format = _ref3;\n          var formattedCompleteNumber = formatCompleteNumber(state, format, {\n            metadata: this.metadata,\n            shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format) {\n              return _this2.shouldTryNationalPrefixFormattingRule(format, {\n                international: state.international,\n                nationalPrefix: state.nationalPrefix\n              });\n            },\n            getSeparatorAfterNationalPrefix: this.getSeparatorAfterNationalPrefix\n          });\n\n          if (formattedCompleteNumber) {\n            this.resetFormat();\n            this.chosenFormat = format;\n            this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state);\n            this.populatedNationalNumberTemplate = formattedCompleteNumber; // With a new formatting template, the matched position\n            // using the old template needs to be reset.\n\n            this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER);\n            return formattedCompleteNumber;\n          }\n        }\n      } // Format the digits as a partial (incomplete) phone number\n      // using the previously chosen formatting pattern (or a newly chosen one).\n\n\n      return this.formatNationalNumberWithNextDigits(nextDigits, state);\n    } // Formats the next phone number digits.\n\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits, state) {\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat(state);\n\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If it can format the next (current) digits\n          // using the previously chosen phone number format\n          // then return the updated formatted number.\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then re-format the national phone number part\n          // using the newly selected format.\n          return this.formatNextNationalNumberDigits(state.getNationalDigits());\n        }\n      }\n    }\n  }, {\n    key: \"narrowDownMatchingFormats\",\n    value: function narrowDownMatchingFormats(_ref4) {\n      var _this3 = this;\n\n      var nationalSignificantNumber = _ref4.nationalSignificantNumber,\n          nationalPrefix = _ref4.nationalPrefix,\n          international = _ref4.international;\n      var leadingDigits = nationalSignificantNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        return _this3.formatSuits(format, international, nationalPrefix) && _this3.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"formatSuits\",\n    value: function formatSuits(format, international, nationalPrefix) {\n      // When a prefix before a national (significant) number is\n      // simply a national prefix, then it's parsed as `this.nationalPrefix`.\n      // In more complex cases, a prefix before national (significant) number\n      // could include a national prefix as well as some \"capturing groups\",\n      // and in that case there's no info whether a national prefix has been parsed.\n      // If national prefix is not used when formatting a phone number\n      // using this format, but a national prefix has been entered by the user,\n      // and was extracted, then discard such phone number format.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\n      if (nationalPrefix && !format.usesNationalPrefix() && // !format.domesticCarrierCodeFormattingRule() &&\n      !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n        return false;\n      } // If national prefix is mandatory for this phone number format\n      // and there're no guarantees that a national prefix is present in user input\n      // then discard this phone number format as not suitable.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\n\n\n      if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"formatMatches\",\n    value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\n      var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n      // leading digits pattern then it fits.\n\n      if (leadingDigitsPatternsCount === 0) {\n        return true;\n      } // Start narrowing down the list of possible formats based on the leading digits.\n      // (only previously matched formats take part in the narrowing down process)\n      // `leading_digits_patterns` start with 3 digits min\n      // and then go up from there one digit at a time.\n\n\n      leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n      var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Google imposes a requirement on the leading digits\n      // to be minimum 3 digits long in order to be eligible\n      // for checking those with a leading digits pattern.\n      //\n      // Since `leading_digits_patterns` start with 3 digits min,\n      // Google's original `libphonenumber` library only starts\n      // excluding any non-matching formats only when the\n      // national number entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives.\n      //\n      // For example, when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n      //\n      // Also, `leading_digits_patterns` doesn't always correspond to a single\n      // digits count. For example, `60|8` pattern would already match `8`\n      // but the `60` part would require having at least two leading digits,\n      // so the whole pattern would require inputting two digits first in order to\n      // decide on whether it matches the input, even when the input is \"80\".\n      //\n      // This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\n      // even when there's only 1 or 2 digits of the national (significant) number.\n      // To do that, it uses a non-strict pattern matcher written specifically for that.\n      //\n\n      if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n        // Before leading digits < 3 matching was implemented:\n        // return true\n        //\n        // After leading digits < 3 matching was implemented:\n        try {\n          return new PatternMatcher(leadingDigitsPattern).match(leadingDigits, {\n            allowOverflow: true\n          }) !== undefined;\n        } catch (error) {\n          // There's a slight possibility that there could be some undiscovered bug\n          // in the pattern matcher code. Since the \"leading digits < 3 matching\"\n          // feature is not \"essential\" for operation, it can fall back to the old way\n          // in case of any issues rather than halting the application's execution.\n          console.error(error);\n          return true;\n        }\n      } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\n      // available then use the usual regular expression matching.\n      //\n      // The whole pattern is wrapped in round brackets (`()`) because\n      // the pattern can use \"or\" operator (`|`) at the top level of the pattern.\n      //\n\n\n      return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format, international) {\n      return international ? format.internationalFormat() : format.format();\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat(state) {\n      var _this4 = this;\n\n      var _loop2 = function _loop2() {\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) return \"break\";\n          _ref5 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) return \"break\";\n          _ref5 = _i2.value;\n        }\n\n        var format = _ref5; // If this format is currently being used\n        // and is still suitable, then stick to it.\n\n        if (_this4.chosenFormat === format) {\n          return \"break\";\n        } // Sometimes, a formatting rule inserts additional digits in a phone number,\n        // and \"as you type\" formatter can't do that: it should only use the digits\n        // that the user has input.\n        //\n        // For example, in Argentina, there's a format for mobile phone numbers:\n        //\n        // {\n        //    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n        //    \"leading_digits_patterns\": [\"91\"],\n        //    \"national_prefix_formatting_rule\": \"0$1\",\n        //    \"format\": \"$2 15-$3-$4\",\n        //    \"international_format\": \"$1 $2 $3-$4\"\n        // }\n        //\n        // In that format, `international_format` is used instead of `format`\n        // because `format` inserts `15` in the formatted number,\n        // and `AsYouType` formatter should only use the digits\n        // the user has actually input, without adding any extra digits.\n        // In this case, it wouldn't make a difference, because the `15`\n        // is first stripped when applying `national_prefix_for_parsing`\n        // and then re-added when using `format`, so in reality it doesn't\n        // add any new digits to the number, but to detect that, the code\n        // would have to be more complex: it would have to try formatting\n        // the digits using the format and then see if any digits have\n        // actually been added or removed, and then, every time a new digit\n        // is input, it should re-check whether the chosen format doesn't\n        // alter the digits.\n        //\n        // Google's code doesn't go that far, and so does this library:\n        // it simply requires that a `format` doesn't add any additonal\n        // digits to user's input.\n        //\n        // Also, people in general should move from inputting phone numbers\n        // in national format (possibly with national prefixes)\n        // and use international phone number format instead:\n        // it's a logical thing in the modern age of mobile phones,\n        // globalization and the internet.\n        //\n\n        /* istanbul ignore if */\n\n\n        if (!NON_ALTERING_FORMAT_REG_EXP.test(_this4.getFormatFormat(format, state.international))) {\n          return \"continue\";\n        }\n\n        if (!_this4.createTemplateForFormat(format, state)) {\n          // Remove the format if it can't generate a template.\n          _this4.matchingFormats = _this4.matchingFormats.filter(function (_) {\n            return _ !== format;\n          });\n          return \"continue\";\n        }\n\n        _this4.chosenFormat = format;\n        return \"break\";\n      }; // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n\n\n      _loop: for (var _iterator2 = this.matchingFormats.slice(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref5;\n\n        var _ret = _loop2();\n\n        switch (_ret) {\n          case \"break\":\n            break _loop;\n\n          case \"continue\":\n            continue;\n        }\n      }\n\n      if (!this.chosenFormat) {\n        // No format matches the national (significant) phone number.\n        this.resetFormat();\n      }\n\n      return this.chosenFormat;\n    }\n  }, {\n    key: \"createTemplateForFormat\",\n    value: function createTemplateForFormat(format, state) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForFormat(format, state); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (template) {\n        this.setNationalNumberTemplate(template, state);\n        return true;\n      }\n    }\n  }, {\n    key: \"getInternationalPrefixBeforeCountryCallingCode\",\n    value: function getInternationalPrefixBeforeCountryCallingCode(_ref6, options) {\n      var IDDPrefix = _ref6.IDDPrefix,\n          missingPlus = _ref6.missingPlus;\n\n      if (IDDPrefix) {\n        return options && options.spacing === false ? IDDPrefix : IDDPrefix + ' ';\n      }\n\n      if (missingPlus) {\n        return '';\n      }\n\n      return '+';\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(state) {\n      if (!this.template) {\n        return;\n      } // `this.template` holds the template for a \"complete\" phone number.\n      // The currently entered phone number is most likely not \"complete\",\n      // so trim all non-populated digits.\n\n\n      var index = -1;\n      var i = 0;\n      var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {\n        spacing: false\n      }) : '';\n\n      while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }, {\n    key: \"setNationalNumberTemplate\",\n    value: function setNationalNumberTemplate(template, state) {\n      this.nationalNumberTemplate = template;\n      this.populatedNationalNumberTemplate = template; // With a new formatting template, the matched position\n      // using the old template needs to be reset.\n\n      this.populatedNationalNumberTemplatePosition = -1; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (state.international) {\n        this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, state.callingCode.length) + ' ' + template;\n      } else {\n        this.template = template;\n      }\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplateForFormat\",\n    value: function getTemplateForFormat(format, _ref7) {\n      var nationalSignificantNumber = _ref7.nationalSignificantNumber,\n          international = _ref7.international,\n          nationalPrefix = _ref7.nationalPrefix,\n          complexPrefixBeforeNationalSignificantNumber = _ref7.complexPrefixBeforeNationalSignificantNumber;\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (nationalSignificantNumber.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalSignificantNumber : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalSignificantNumber`\n      // is used instead of `digits`.\n\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n\n      var numberFormat = this.getFormatFormat(format, international);\n      var nationalPrefixIncludedInTemplate; // If a user did input a national prefix (and that's guaranteed),\n      // and if a `format` does have a national prefix formatting rule,\n      // then see if that national prefix formatting rule\n      // prepends exactly the same national prefix the user has input.\n      // If that's the case, then use the `format` with the national prefix formatting rule.\n      // Otherwise, use  the `format` without the national prefix formatting rule,\n      // and prepend a national prefix manually to it.\n\n      if (this.shouldTryNationalPrefixFormattingRule(format, {\n        international: international,\n        nationalPrefix: nationalPrefix\n      })) {\n        var numberFormatWithNationalPrefix = numberFormat.replace(formatNationalNumberUsingFormat[\"a\" /* FIRST_GROUP_PATTERN */], format.nationalPrefixFormattingRule()); // If `national_prefix_formatting_rule` of a `format` simply prepends\n        // national prefix at the start of a national (significant) number,\n        // then such formatting can be used with `AsYouType` formatter.\n        // There seems to be no `else` case: everywhere in metadata,\n        // national prefix formatting rule is national prefix + $1,\n        // or `($1)`, in which case such format isn't even considered\n        // when the user has input a national prefix.\n\n        /* istanbul ignore else */\n\n        if (Object(parseDigits[\"a\" /* default */])(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + Object(parseDigits[\"a\" /* default */])('$1')) {\n          numberFormat = numberFormatWithNationalPrefix;\n          nationalPrefixIncludedInTemplate = true; // Replace all digits of the national prefix in the formatting template\n          // with `DIGIT_PLACEHOLDER`s.\n\n          if (nationalPrefix) {\n            var i = nationalPrefix.length;\n\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER); // If a prefix of a national (significant) number is not as simple\n      // as just a basic national prefix, then just prepend such prefix\n      // before the national (significant) number, optionally spacing\n      // the two with a whitespace.\n\n      if (!nationalPrefixIncludedInTemplate) {\n        if (complexPrefixBeforeNationalSignificantNumber) {\n          // Prepend the prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + ' ' + template;\n        } else if (nationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n\n      if (international) {\n        template = Object(applyInternationalSeparatorStyle[\"a\" /* default */])(template);\n      }\n\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      var result = populateTemplateWithDigits(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);\n\n      if (!result) {\n        // Reset the format.\n        this.resetFormat();\n        return;\n      }\n\n      this.populatedNationalNumberTemplate = result[0];\n      this.populatedNationalNumberTemplatePosition = result[1]; // Return the formatted phone number so far.\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }]);\n\n  return AsYouTypeFormatter;\n}();\n\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js\nvar helpers_extractCountryCallingCode = __webpack_require__(2416);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js\nvar extractCountryCallingCodeFromInternationalNumberWithoutPlusSign = __webpack_require__(2381);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js\nvar extractNationalNumberFromPossiblyIncompleteNumber = __webpack_require__(2418);\n\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js\nvar stripIddPrefix = __webpack_require__(2380);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouTypeParser.js\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction AsYouTypeParser_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction AsYouTypeParser_defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction AsYouTypeParser_createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) AsYouTypeParser_defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) AsYouTypeParser_defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n\n\n\n\n\n\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART = '[' + constants[\"f\" /* VALID_PUNCTUATION */] + constants[\"e\" /* VALID_DIGITS */] + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i');\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '(?:' + '[' + constants[\"d\" /* PLUS_CHARS */] + ']' + '[' + constants[\"f\" /* VALID_PUNCTUATION */] + constants[\"e\" /* VALID_DIGITS */] + ']*' + '|' + '[' + constants[\"f\" /* VALID_PUNCTUATION */] + constants[\"e\" /* VALID_DIGITS */] + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + constants[\"f\" /* VALID_PUNCTUATION */] + constants[\"e\" /* VALID_DIGITS */] + ']+' + '.*' + '$'); // Tests whether `national_prefix_for_parsing` could match\n// different national prefixes.\n// Matches anything that's not a digit or a square bracket.\n\nvar COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/;\n\nvar AsYouTypeParser_AsYouTypeParser = /*#__PURE__*/function () {\n  function AsYouTypeParser(_ref) {\n    var defaultCountry = _ref.defaultCountry,\n        defaultCallingCode = _ref.defaultCallingCode,\n        metadata = _ref.metadata,\n        onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;\n\n    AsYouTypeParser_classCallCheck(this, AsYouTypeParser);\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.metadata = metadata;\n    this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;\n  }\n\n  AsYouTypeParser_createClass(AsYouTypeParser, [{\n    key: \"input\",\n    value: function input(text, state) {\n      var _extractFormattedDigi = extractFormattedDigitsAndPlus(text),\n          _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2),\n          formattedDigits = _extractFormattedDigi2[0],\n          hasPlus = _extractFormattedDigi2[1];\n\n      var digits = Object(parseDigits[\"a\" /* default */])(formattedDigits); // Checks for a special case: just a leading `+` has been entered.\n\n      var justLeadingPlus;\n\n      if (hasPlus) {\n        if (!state.digits) {\n          state.startInternationalNumber();\n\n          if (!digits) {\n            justLeadingPlus = true;\n          }\n        }\n      }\n\n      if (digits) {\n        this.inputDigits(digits, state);\n      }\n\n      return {\n        digits: digits,\n        justLeadingPlus: justLeadingPlus\n      };\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits, state) {\n      var digits = state.digits;\n      var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3; // Append phone number digits.\n\n      state.appendDigits(nextDigits); // Attempt to extract IDD prefix:\n      // Some users input their phone number in international format,\n      // but in an \"out-of-country\" dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers as soon as there're at least 3 digits.\n      // Google's library attempts to extract IDD prefix at 3 digits,\n      // so this library just copies that behavior.\n      // I guess that's because the most commot IDD prefixes are\n      // `00` (Europe) and `011` (US).\n      // There exist really long IDD prefixes too:\n      // for example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      // An IDD prefix is extracted here, and then every time when\n      // there's a new digit and the number couldn't be formatted.\n\n      if (hasReceivedThreeLeadingDigits) {\n        this.extractIddPrefix(state);\n      }\n\n      if (this.isWaitingForCountryCallingCode(state)) {\n        if (!this.extractCountryCallingCode(state)) {\n          return;\n        }\n      } else {\n        state.appendNationalSignificantNumberDigits(nextDigits);\n      } // If a phone number is being input in international format,\n      // then it's not valid for it to have a national prefix.\n      // Still, some people incorrectly input such numbers with a national prefix.\n      // In such cases, only attempt to strip a national prefix if the number becomes too long.\n      // (but that is done later, not here)\n\n\n      if (!state.international) {\n        if (!this.hasExtractedNationalSignificantNumber) {\n          this.extractNationalSignificantNumber(state.getNationalDigits(), state.update);\n        }\n      }\n    }\n  }, {\n    key: \"isWaitingForCountryCallingCode\",\n    value: function isWaitingForCountryCallingCode(_ref2) {\n      var international = _ref2.international,\n          callingCode = _ref2.callingCode;\n      return international && !callingCode;\n    } // Extracts a country calling code from a number\n    // being entered in internatonal format.\n\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode(state) {\n      var _extractCountryCallin = Object(helpers_extractCountryCallingCode[\"a\" /* default */])('+' + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (countryCallingCode) {\n        state.setCallingCode(countryCallingCode);\n        state.update({\n          nationalSignificantNumber: number\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan) {\n      if (numberingPlan) {\n        this.hasSelectedNumberingPlan = true;\n\n        var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();\n\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);\n      } else {\n        this.hasSelectedNumberingPlan = undefined;\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = undefined;\n      }\n    }\n    /**\r\n     * Extracts a national (significant) number from user input.\r\n     * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n     * and doesn't apply `national_prefix_transform_rule` after that.\r\n     * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n     * @return {boolean} [extracted]\r\n     */\n\n  }, {\n    key: \"extractNationalSignificantNumber\",\n    value: function extractNationalSignificantNumber(nationalDigits, setState) {\n      if (!this.hasSelectedNumberingPlan) {\n        return;\n      }\n\n      var _extractNationalNumbe = Object(extractNationalNumberFromPossiblyIncompleteNumber[\"a\" /* default */])(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe.nationalPrefix,\n          nationalNumber = _extractNationalNumbe.nationalNumber,\n          carrierCode = _extractNationalNumbe.carrierCode;\n\n      if (nationalNumber === nationalDigits) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n    /**\r\n     * In Google's code this function is called \"attempt to extract longer NDD\".\r\n     * \"Some national prefixes are a substring of others\", they say.\r\n     * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n     */\n\n  }, {\n    key: \"extractAnotherNationalSignificantNumber\",\n    value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\n      if (!this.hasExtractedNationalSignificantNumber) {\n        return this.extractNationalSignificantNumber(nationalDigits, setState);\n      }\n\n      if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\n        return;\n      }\n\n      var _extractNationalNumbe2 = Object(extractNationalNumberFromPossiblyIncompleteNumber[\"a\" /* default */])(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe2.nationalPrefix,\n          nationalNumber = _extractNationalNumbe2.nationalNumber,\n          carrierCode = _extractNationalNumbe2.carrierCode; // If a national prefix has been extracted previously,\n      // then it's always extracted as additional digits are added.\n      // That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\n      // doesn't do anything different from what it currently does.\n      // So, just in case, here's this check, though it doesn't occur.\n\n      /* istanbul ignore if */\n\n\n      if (nationalNumber === prevNationalSignificantNumber) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n  }, {\n    key: \"onExtractedNationalNumber\",\n    value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {\n      var complexPrefixBeforeNationalSignificantNumber;\n      var nationalSignificantNumberMatchesInput; // This check also works with empty `this.nationalSignificantNumber`.\n\n      var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber); // If the extracted national (significant) number is the\n      // last substring of the `digits`, then it means that it hasn't been altered:\n      // no digits have been removed from the national (significant) number\n      // while applying `national_prefix_transform_rule`.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n\n      if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\n        nationalSignificantNumberMatchesInput = true; // If a prefix of a national (significant) number is not as simple\n        // as just a basic national prefix, then such prefix is stored in\n        // `this.complexPrefixBeforeNationalSignificantNumber` property and will be\n        // prepended \"as is\" to the national (significant) number to produce\n        // a formatted result.\n\n        var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex); // `prefixBeforeNationalNumber` is always non-empty,\n        // because `onExtractedNationalNumber()` isn't called\n        // when a national (significant) number hasn't been actually \"extracted\":\n        // when a national (significant) number is equal to the national part of `digits`,\n        // then `onExtractedNationalNumber()` doesn't get called.\n\n        if (prefixBeforeNationalNumber !== nationalPrefix) {\n          complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;\n        }\n      }\n\n      setState({\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode,\n        nationalSignificantNumber: nationalSignificantNumber,\n        nationalSignificantNumberMatchesInput: nationalSignificantNumberMatchesInput,\n        complexPrefixBeforeNationalSignificantNumber: complexPrefixBeforeNationalSignificantNumber\n      }); // `onExtractedNationalNumber()` is only called when\n      // the national (significant) number actually did change.\n\n      this.hasExtractedNationalSignificantNumber = true;\n      this.onNationalSignificantNumberChange();\n    }\n  }, {\n    key: \"reExtractNationalSignificantNumber\",\n    value: function reExtractNationalSignificantNumber(state) {\n      // Attempt to extract a national prefix.\n      //\n      // Some people incorrectly input national prefix\n      // in an international phone number.\n      // For example, some people write British phone numbers as `+44(0)...`.\n      //\n      // Also, in some rare cases, it is valid for a national prefix\n      // to be a part of an international phone number.\n      // For example, mobile phone numbers in Mexico are supposed to be\n      // dialled internationally using a `1` national prefix,\n      // so the national prefix will be part of an international number.\n      //\n      // Quote from:\n      // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n      //\n      // \"Dialing a Mexican cell phone from abroad\n      // When you are calling a cell phone number in Mexico from outside Mexico,\n      // it’s necessary to dial an additional “1” after Mexico’s country code\n      // (which is “52”) and before the area code.\n      // You also ignore the 045, and simply dial the area code and the\n      // cell phone’s number.\n      //\n      // If you don’t add the “1”, you’ll receive a recorded announcement\n      // asking you to redial using it.\n      //\n      // For example, if you are calling from the USA to a cell phone\n      // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n      // (Note that this is different to calling a land line in Mexico City\n      // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n      //\n      // Google's demo output:\n      // https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\n      //\n      if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, state.update)) {\n        return true;\n      } // If no format matches the phone number, then it could be\n      // \"a really long IDD\" (quote from a comment in Google's library).\n      // An IDD prefix is first extracted when the user has entered at least 3 digits,\n      // and then here — every time when there's a new digit and the number\n      // couldn't be formatted.\n      // For example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      //\n      // Could also check `!hasReceivedThreeLeadingDigits` here\n      // to filter out the case when this check duplicates the one\n      // already performed when there're 3 leading digits,\n      // but it's not a big deal, and in most cases there\n      // will be a suitable `format` when there're 3 leading digits.\n      //\n\n\n      if (this.extractIddPrefix(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      } // Google's AsYouType formatter supports sort of an \"autocorrection\" feature\n      // when it \"autocorrects\" numbers that have been input for a country\n      // with that country's calling code.\n      // Such \"autocorrection\" feature looks weird, but different people have been requesting it:\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      // https://github.com/catamphetamine/libphonenumber-js/issues/375\n      // https://github.com/catamphetamine/libphonenumber-js/issues/316\n\n\n      if (this.fixMissingPlus(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"extractIddPrefix\",\n    value: function extractIddPrefix(state) {\n      // An IDD prefix can't be present in a number written with a `+`.\n      // Also, don't re-extract an IDD prefix if has already been extracted.\n      var international = state.international,\n          IDDPrefix = state.IDDPrefix,\n          digits = state.digits,\n          nationalSignificantNumber = state.nationalSignificantNumber;\n\n      if (international || IDDPrefix) {\n        return;\n      } // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n\n\n      var numberWithoutIDD = Object(stripIddPrefix[\"a\" /* default */])(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n\n      if (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\n        // If an IDD prefix was stripped then convert the IDD-prefixed number\n        // to international number for subsequent parsing.\n        state.update({\n          IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\n        });\n        this.startInternationalNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"fixMissingPlus\",\n    value: function fixMissingPlus(state) {\n      if (!state.international) {\n        var _extractCountryCallin2 = Object(extractCountryCallingCodeFromInternationalNumberWithoutPlusSign[\"a\" /* default */])(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n            newCallingCode = _extractCountryCallin2.countryCallingCode,\n            number = _extractCountryCallin2.number;\n\n        if (newCallingCode) {\n          state.update({\n            missingPlus: true\n          });\n          this.startInternationalNumber(state);\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(state) {\n      state.startInternationalNumber(); // If a national (significant) number has been extracted before, reset it.\n\n      if (state.nationalSignificantNumber) {\n        state.resetNationalSignificantNumber();\n        this.onNationalSignificantNumberChange();\n        this.hasExtractedNationalSignificantNumber = undefined;\n      }\n    }\n  }, {\n    key: \"extractCallingCodeAndNationalSignificantNumber\",\n    value: function extractCallingCodeAndNationalSignificantNumber(state) {\n      if (this.extractCountryCallingCode(state)) {\n        // `this.extractCallingCode()` is currently called when the number\n        // couldn't be formatted during the standard procedure.\n        // Normally, the national prefix would be re-extracted\n        // for an international number if such number couldn't be formatted,\n        // but since it's already not able to be formatted,\n        // there won't be yet another retry, so also extract national prefix here.\n        this.extractNationalSignificantNumber(state.getNationalDigits(), state.update);\n      }\n    }\n  }]);\n\n  return AsYouTypeParser;\n}();\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\n\n\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART);\n\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n\n  return text;\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nfunction _extractFormattedDigitsAndPlus(text) {\n  // Extract a formatted phone number part from text.\n  var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n  if (extractedNumber[0] === '+') {\n    return [extractedNumber.slice('+'.length), true];\n  }\n\n  return [extractedNumber];\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nfunction extractFormattedDigitsAndPlus(text) {\n  var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text),\n      _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2),\n      formattedDigits = _extractFormattedDigi4[0],\n      hasPlus = _extractFormattedDigi4[1]; // If the extracted phone number part\n  // can possibly be a part of some valid phone number\n  // then parse phone number characters from a formatted phone number.\n\n\n  if (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\n    formattedDigits = '';\n  }\n\n  return [formattedDigits, hasPlus];\n}\n// EXTERNAL MODULE: ./node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js\nvar getCountryByCallingCode = __webpack_require__(2419);\n\n// CONCATENATED MODULE: ./node_modules/libphonenumber-js/es6/AsYouType.js\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction AsYouType_slicedToArray(arr, i) {\n  return AsYouType_arrayWithHoles(arr) || AsYouType_iterableToArrayLimit(arr, i) || AsYouType_nonIterableRest();\n}\n\nfunction AsYouType_nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction AsYouType_iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction AsYouType_arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction AsYouType_classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction AsYouType_defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction AsYouType_createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) AsYouType_defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) AsYouType_defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n\n\n\n\n\n\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar AsYouType_AsYouType = /*#__PURE__*/function () {\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    AsYouType_classCallCheck(this, AsYouType);\n\n    this.metadata = new es6_metadata[\"a\" /* default */](metadata);\n\n    var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry),\n        _this$getCountryAndCa2 = AsYouType_slicedToArray(_this$getCountryAndCa, 2),\n        defaultCountry = _this$getCountryAndCa2[0],\n        defaultCallingCode = _this$getCountryAndCa2[1];\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.reset();\n  }\n\n  AsYouType_createClass(AsYouType, [{\n    key: \"getCountryAndCallingCode\",\n    value: function getCountryAndCallingCode(optionsOrDefaultCountry) {\n      // Set `defaultCountry` and `defaultCallingCode` options.\n      var defaultCountry;\n      var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n      if (optionsOrDefaultCountry) {\n        if (_typeof(optionsOrDefaultCountry) === 'object') {\n          defaultCountry = optionsOrDefaultCountry.defaultCountry;\n          defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n        } else {\n          defaultCountry = optionsOrDefaultCountry;\n        }\n      }\n\n      if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\n        defaultCountry = undefined;\n      }\n\n      if (defaultCallingCode) {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            defaultCountry = '001';\n          }\n        }\n      }\n\n      return [defaultCountry, defaultCallingCode];\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var _this$parser$input = this.parser.input(text, this.state),\n          digits = _this$parser$input.digits,\n          justLeadingPlus = _this$parser$input.justLeadingPlus;\n\n      if (justLeadingPlus) {\n        this.formattedOutput = '+';\n      } else if (digits) {\n        this.determineTheCountryIfNeeded(); // Match the available formats by the currently available leading digits.\n\n        if (this.state.nationalSignificantNumber) {\n          this.formatter.narrowDownMatchingFormats(this.state);\n        }\n\n        var formattedNationalNumber;\n\n        if (this.metadata.hasSelectedNumberingPlan()) {\n          formattedNationalNumber = this.formatter.format(digits, this.state);\n        }\n\n        if (formattedNationalNumber === undefined) {\n          // See if another national (significant) number could be re-extracted.\n          if (this.parser.reExtractNationalSignificantNumber(this.state)) {\n            this.determineTheCountryIfNeeded(); // If it could, then re-try formatting the new national (significant) number.\n\n            var nationalDigits = this.state.getNationalDigits();\n\n            if (nationalDigits) {\n              formattedNationalNumber = this.formatter.format(nationalDigits, this.state);\n            }\n          }\n        }\n\n        this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();\n      }\n\n      return this.formattedOutput;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n\n      this.state = new AsYouTypeState({\n        onCountryChange: function onCountryChange(country) {\n          // Before version `1.6.0`, the official `AsYouType` formatter API\n          // included the `.country` property of an `AsYouType` instance.\n          // Since that property (along with the others) have been moved to\n          // `this.state`, `this.country` property is emulated for compatibility\n          // with the old versions.\n          _this.country = country;\n        },\n        onCallingCodeChange: function onCallingCodeChange(country, callingCode) {\n          _this.metadata.selectNumberingPlan(country, callingCode);\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n\n          _this.parser.reset(_this.metadata.numberingPlan);\n        }\n      });\n      this.formatter = new AsYouTypeFormatter_AsYouTypeFormatter({\n        state: this.state,\n        metadata: this.metadata\n      });\n      this.parser = new AsYouTypeParser_AsYouTypeParser({\n        defaultCountry: this.defaultCountry,\n        defaultCallingCode: this.defaultCallingCode,\n        metadata: this.metadata,\n        state: this.state,\n        onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {\n          _this.determineTheCountryIfNeeded();\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n        }\n      });\n      this.state.reset(this.defaultCountry, this.defaultCallingCode);\n      this.formattedOutput = '';\n      return this;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.state.international;\n    }\n    /**\r\n     * Returns the \"calling code\" part of the phone number when it's being input\r\n     * in an international format.\r\n     * If no valid calling code has been entered so far, returns `undefined`.\r\n     * @return {string} [callingCode]\r\n     */\n\n  }, {\n    key: \"getCallingCode\",\n    value: function getCallingCode() {\n      // If the number is being input in national format and some \"default calling code\"\n      // has been passed to `AsYouType` constructor, then `this.state.callingCode`\n      // is equal to that \"default calling code\".\n      //\n      // If the number is being input in national format and no \"default calling code\"\n      // has been passed to `AsYouType` constructor, then returns `undefined`,\n      // even if a \"default country\" has been passed to `AsYouType` constructor.\n      //\n      if (this.isInternational()) {\n        return this.state.callingCode;\n      }\n    } // A legacy alias.\n\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.getCallingCode();\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      var digits = this.state.digits; // Return `undefined` if no digits have been input yet.\n\n      if (digits) {\n        return this._getCountry();\n      }\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"_getCountry\",\n    value: function _getCountry() {\n      var country = this.state.country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        // `AsYouType.getCountry()` returns `undefined`\n        // for \"non-geographic\" phone numbering plans.\n        if (country === '001') {\n          return;\n        }\n      }\n\n      return country;\n    }\n  }, {\n    key: \"determineTheCountryIfNeeded\",\n    value: function determineTheCountryIfNeeded() {\n      // Suppose a user enters a phone number in international format,\n      // and there're several countries corresponding to that country calling code,\n      // and a country has been derived from the number, and then\n      // a user enters one more digit and the number is no longer\n      // valid for the derived country, so the country should be re-derived\n      // on every new digit in those cases.\n      //\n      // If the phone number is being input in national format,\n      // then it could be a case when `defaultCountry` wasn't specified\n      // when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\n      // and that \"calling code\" could correspond to a \"non-geographic entity\",\n      // or there could be several countries corresponding to that country calling code.\n      // In those cases, `this.country` is `undefined` and should be derived\n      // from the number. Again, if country calling code is ambiguous, then\n      // `this.country` should be re-derived with each new digit.\n      //\n      if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\n        this.determineTheCountry();\n      }\n    } // Prepends `+CountryCode ` in case of an international phone number\n\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      var _this2 = this;\n\n      if (this.isInternational()) {\n        var prefix = function prefix(text) {\n          return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {\n            spacing: text ? true : false\n          }) + text;\n        };\n\n        var callingCode = this.state.callingCode;\n\n        if (!callingCode) {\n          return prefix(\"\".concat(this.state.getDigitsWithoutInternationalPrefix()));\n        }\n\n        if (!formattedNationalNumber) {\n          return prefix(callingCode);\n        }\n\n        return prefix(\"\".concat(callingCode, \" \").concat(formattedNationalNumber));\n      }\n\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumberWithPrefix\",\n    value: function getNonFormattedNationalNumberWithPrefix() {\n      var _this$state = this.state,\n          nationalSignificantNumber = _this$state.nationalSignificantNumber,\n          complexPrefixBeforeNationalSignificantNumber = _this$state.complexPrefixBeforeNationalSignificantNumber,\n          nationalPrefix = _this$state.nationalPrefix;\n      var number = nationalSignificantNumber;\n      var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;\n\n      if (prefix) {\n        number = prefix + number;\n      }\n\n      return number;\n    }\n  }, {\n    key: \"getNonFormattedNumber\",\n    value: function getNonFormattedNumber() {\n      var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;\n      return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      var number = this.getNonFormattedNumber();\n\n      if (number) {\n        return number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n      }\n    }\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var callingCode = this.state.callingCode;\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);\n      return countryCodes && countryCodes.length > 1;\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.state.setCountry(Object(getCountryByCallingCode[\"a\" /* default */])(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, this.state.nationalSignificantNumber, this.metadata));\n    }\n    /**\r\n     * Returns a E.164 phone number value for the user's input.\r\n     *\r\n     * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n     * it will return `\"+12223334444\"`.\r\n     *\r\n     * For international phone number input, it will also auto-correct\r\n     * some minor errors such as using a national prefix when writing\r\n     * an international phone number. For example, if the user inputs\r\n     * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n     * `\"+447400000000\"` phone number value.\r\n     *\r\n     * Will return `undefined` if no digits have been input,\r\n     * or when inputting a phone number in national format and no\r\n     * default country or default \"country calling code\" have been set.\r\n     *\r\n     * @return {string} [value]\r\n     */\n\n  }, {\n    key: \"getNumberValue\",\n    value: function getNumberValue() {\n      var _this$state2 = this.state,\n          digits = _this$state2.digits,\n          callingCode = _this$state2.callingCode,\n          country = _this$state2.country,\n          nationalSignificantNumber = _this$state2.nationalSignificantNumber; // Will return `undefined` if no digits have been input.\n\n      if (!digits) {\n        return;\n      }\n\n      if (this.isInternational()) {\n        if (callingCode) {\n          return '+' + callingCode + nationalSignificantNumber;\n        } else {\n          return '+' + digits;\n        }\n      } else {\n        if (country || callingCode) {\n          var callingCode_ = country ? this.metadata.countryCallingCode() : callingCode;\n          return '+' + callingCode_ + nationalSignificantNumber;\n        }\n      }\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      var _this$state3 = this.state,\n          nationalSignificantNumber = _this$state3.nationalSignificantNumber,\n          carrierCode = _this$state3.carrierCode,\n          callingCode = _this$state3.callingCode; // `this._getCountry()` is basically same as `this.state.country`\n      // with the only change that it return `undefined` in case of a\n      // \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\n\n      var country = this._getCountry();\n\n      if (!nationalSignificantNumber) {\n        return;\n      }\n\n      if (!country && !callingCode) {\n        return;\n      }\n\n      var phoneNumber = new PhoneNumber[\"a\" /* default */](country || callingCode, nationalSignificantNumber, this.metadata.metadata);\n\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.state.nationalSignificantNumber;\n    }\n    /**\r\n     * Returns the phone number characters entered by the user.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getChars\",\n    value: function getChars() {\n      return (this.state.international ? '+' : '') + this.state.digits;\n    }\n    /**\r\n     * Returns the template for the formatted phone number.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || '';\n    }\n  }]);\n\n  return AsYouType;\n}();\n\n\n\n/***/ }),\n\n/***/ 2556:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return parsePhoneNumberFromString; });\n/* harmony import */ var _parsePhoneNumber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2383);\n/* harmony import */ var _parsePhoneNumberFromString___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2384);\n\n\nfunction parsePhoneNumberFromString() {\n  var _normalizeArguments = Object(_parsePhoneNumber__WEBPACK_IMPORTED_MODULE_0__[/* normalizeArguments */ \"a\"])(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return Object(_parsePhoneNumberFromString___WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(text, options, metadata);\n}\n\n/***/ }),\n\n/***/ 2557:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return formatPhoneNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return formatPhoneNumberIntl; });\n/* harmony import */ var libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2556);\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\n\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nfunction formatPhoneNumber(value, format, metadata) {\n  if (!metadata) {\n    if (_typeof(format) === 'object') {\n      metadata = format;\n      format = 'NATIONAL';\n    }\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  var phoneNumber = Object(libphonenumber_js_core__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(value, metadata);\n\n  if (!phoneNumber) {\n    return '';\n  } // Deprecated.\n  // Legacy `format`s.\n\n\n  switch (format) {\n    case 'National':\n      format = 'NATIONAL';\n      break;\n\n    case 'International':\n      format = 'INTERNATIONAL';\n      break;\n  }\n\n  return phoneNumber.format(format);\n}\nfunction formatPhoneNumberIntl(value, metadata) {\n  return formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}\n\n/***/ }),\n\n/***/ 2558:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isValidPhoneNumber; });\n/* harmony import */ var _parsePhoneNumber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2383);\n/* harmony import */ var _parsePhoneNumberFromString___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2384);\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n\n\nfunction isValidPhoneNumber() {\n  var _normalizeArguments = Object(_parsePhoneNumber__WEBPACK_IMPORTED_MODULE_0__[/* normalizeArguments */ \"a\"])(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread({}, options, {\n    extract: false\n  });\n  var phoneNumber = Object(_parsePhoneNumberFromString___WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(text, options, metadata);\n  return phoneNumber && phoneNumber.isValid() || false;\n}\n\n/***/ }),\n\n/***/ 2559:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isPossiblePhoneNumber; });\n/* harmony import */ var _parsePhoneNumber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2383);\n/* harmony import */ var _parsePhoneNumberFromString___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2384);\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n\n\nfunction isPossiblePhoneNumber() {\n  var _normalizeArguments = Object(_parsePhoneNumber__WEBPACK_IMPORTED_MODULE_0__[/* normalizeArguments */ \"a\"])(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread({}, options, {\n    extract: false\n  });\n  var phoneNumber = Object(_parsePhoneNumberFromString___WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(text, options, metadata);\n  return phoneNumber && phoneNumber.isPossible() || false;\n}\n\n/***/ }),\n\n/***/ 2560:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getCountries; });\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2342);\n\nfunction getCountries(metadata) {\n  return new _metadata__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](metadata).getCountries();\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["../../source/tools/semver-compare.js","../source/metadata.js","../source/constants.js","../../source/helpers/matchesEntirely.js","../../source/helpers/parseDigits.js","../../source/helpers/mergeArrays.js","../../source/helpers/checkNumberLength.js","../../source/helpers/formatNationalNumberUsingFormat.js","../../source/helpers/stripIddPrefix.js","../../source/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../../source/helpers/getNumberType.js","../source/parsePhoneNumber.js","../source/parsePhoneNumberFromString_.js","../../source/helpers/applyInternationalSeparatorStyle.js","../../source/helpers/extractCountryCallingCode.js","../../source/helpers/extractNationalNumber.js","../../source/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../../source/helpers/getCountryByCallingCode.js","../source/isPossibleNumber_.js","../../source/helpers/RFC3966.js","../../source/helpers/isViablePhoneNumber.js","../../../source/helpers/extension/createExtensionPattern.js","../../source/helpers/getInternationalPhoneNumberPrefix.js","../../source/helpers/inputValuePrefix.js","../source/ParseError.js","../source/PropTypes.js","../source/unicode.js","../source/CountrySelect.js","../source/Flag.js","../source/InternationalIcon.js","../../source/helpers/countries.js","../source/CountryIcon.js","../../source/helpers/phoneInputHelpers.js","../../source/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js","../source/PhoneInputWithCountry.js","../source/PhoneInputWithCountryDefault.js","/workspace/lightence-ant-design-react-template/node_modules/react-phone-number-input/min/index.js","../source/edit.js","../source/parse.js","../source/helpers.js","../source/closeBraces.js","../source/templateFormatter.js","../source/format.js","../source/dom.js","../source/inputControl.js","../../source/react/Input.js","../source/InputSmart.js","../source/usePhoneDigits.js","../source/PhoneInput.js","../source/PhoneInputBrowser.js","/workspace/lightence-ant-design-react-template/node_modules/react-phone-number-input/input/index.js","../source/validate_.js","../../source/helpers/getIddPrefix.js","../source/format_.js","../source/PhoneNumber.js","../../../source/helpers/extension/extractExtension.js","../source/parse_.js","../source/parsePhoneNumber_.js","../source/formatIncompletePhoneNumber.js","../source/InputBasic.js","../source/parseIncompletePhoneNumber.js","../source/AsYouTypeState.js","../source/AsYouTypeFormatter.util.js","../source/AsYouTypeFormatter.complete.js","../source/AsYouTypeFormatter.PatternMatcher.js","../source/AsYouTypeFormatter.js","../source/AsYouTypeParser.js","../source/AsYouType.js","../source/parsePhoneNumberFromString.js","../../source/libphonenumber/formatPhoneNumber.js","../source/isValidPhoneNumber.js","../source/isPossiblePhoneNumber.js","../source/getCountries.js"],"names":["a","b","pa","pb","i","na","Number","nb","isNaN","V2","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","validateMetadata","setVersion","_","countryCode","country","callingCode","countryCodes","metadata","type","NumberingPlan","globalMetadataObject","formats","getType","Format","FIRST_GROUP_ONLY_PREFIX_PATTERN","Type","types","is_object","Object","type_of","version","compare","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_PUNCTUATION","PLUS_CHARS","text","DIGITS","result","string","character","digit","parseDigit","merged","element","checkNumberLengthForType","type_info","possible_lengths","mobile_type","mergeArrays","actual_length","nationalNumber","minimum_length","FIRST_GROUP_PATTERN","useInternationalFormat","withNationalPrefix","carrierCode","formattedNumber","number","format","applyInternationalSeparatorStyle","CAPTURING_DIGIT_PATTERN","countryMetadata","IDDPrefixPattern","matchedGroups","countryCallingCode","getCountryCallingCode","possibleShorterNumber","extractNationalNumber","possibleShorterNationalNumber","matchesEntirely","checkNumberLength","NON_FIXED_LINE_PHONE_TYPES","options","input","isNumberTypeEqualTo","normalizeArguments","parsePhoneNumber_","Array","arg_1","arg_2","arg_3","arg_4","defaultCountry","isObject","isSupportedCountry","undefined","parsePhoneNumber","error","numberWithoutIDD","stripIddPrefix","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","shorterNumber","extractNationalNumberFromPossiblyIncompleteNumber","shouldExtractNationalPrefix","prefixPattern","prefixMatch","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","possibleNationalPrefix","nationalPrefix","USE_NON_GEOGRAPHIC_COUNTRY_CODE","possibleCountries","selectCountryFromList","nationalPhoneNumber","getNumberType","phone","isPossibleNumber","part","name","value","ext","isViablePhoneNumber","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","VALID_PHONE_NUMBER_WITH_EXTENSION","createExtensionPattern","VALID_PHONE_NUMBER_PATTERN","RFC3966_EXTN_PREFIX","getExtensionDigitsPattern","extLimitAfterExplicitLabel","extLimitAfterLikelyLabel","extLimitAfterAmbiguousChar","extLimitWhenNotSure","possibleSeparatorsBetweenNumberAndExtLabel","possibleCharsAfterExtLabel","optionalExtnSuffix","explicitExtLabels","ambiguousExtLabels","ambiguousSeparator","possibleSeparatorsNumberExtLabelNoComma","autoDiallingAndExtLabelsFound","rfcExtn","explicitExtn","ambiguousExtn","americanStyleExtnWithSuffix","autoDiallingExtn","onlyCommasExtn","ONLY_DIGITS_REGEXP","prefix","international","withCountryCallingCode","ParseError","Error","country_calling_codes","PropTypes","countries","isRequired","labels","getRegionalIndicatorSymbol","String","letter","onChange","rest","onChange_","useCallback","event","selectedOption","useMemo","getSelectedOption","label","divider","CountrySelect","bool","DIVIDER_STYLE","fontSize","backgroundColor","color","className","Icon","iconComponent","getIconAspectRatio","Arrow","arrowComponent","unicodeFlags","classNames","getUnicodeFlagIcon","CountrySelectWithIcon","option","countryName","flags","flagUrl","title","FlagComponent","aspectRatio","InternationalIcon","InternationalIcon3x2","InternationalIcon1x1","optionsOnTop","optionsOnBottom","appendTo","index","countryOptions","isCountrySupportedWithError","console","flagComponent","internationalIcon","_aspectRatio","CountryIcon","createCountryIconComponent","DefaultInternationalIcon","phoneNumber","getAnyCountry","required","couldNumberBelongToCountry","countryNames","addInternationalOption","compareStringsLocales","_compareStrings","compareStrings","countrySelectOptions","ZZ","prevCountry","newCountry","useNationalFormat","getInternationalPhoneNumberPrefix","phoneDigits","stripCountryCallingCode","newCountryPrefix","defaultValue","e164","asYouType","partial_national_significant_number","getNationalSignificantNumberDigits","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","partialE164Number","derived_country","getCountryFromPossiblyIncompleteInternationalPhoneNumber","prevPhoneDigits","countryRequired","limitMaxLength","countryCallingCodeEditable","convertInternationalPhoneDigitsToNational","trimNumber","getCountryForPartialE164Number","formatter","countryCallingCodePrefix","country_calling_code","intlPhoneNumberPrefix","generateNationalNumberDigits","props","newDefaultCountry","newValue","newReset","displayInitialValueAsLocalNumber","initialValueFormat","prevDefaultCountry","prevProps","prevValue","prevReset","state","hasUserSelectedACountry","_getInitialPhoneDigits","getInitialPhoneDigits","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","noValueHasBeenEntered","supportedCountries","getSupportedCountries","parsedCountry","hasUserSelectedACountryUpdate","PhoneNumberInput_","React","ref","focusInputOnCountrySelection","newPhoneDigits","getPhoneDigitsForNewCountry","currentlySelectedCountry","onPhoneDigitsChange","stateUpdate","isFocused","onFocus","onBlur","countrySelectProps","preSelectedCountry","getPreSelectedCountry","getCountries","onCountryChange","selectedCountry","prevState","countryOptionsOrder","locales","useMemoCountrySelectOptions","sortCountryOptions","getCountrySelectOptions","getSupportedCountryOptions","disabled","autoComplete","style","inputRef","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","ContainerComponent","countriesProperty","reset","InputComponent","getPhoneInputWithCountryStateUpdateFromNewProps","PureComponent","PhoneNumberInput","labelsPropType","countrySelectComponent","containerComponent","metadataPropType","areEqualArrays","countrySelectOptionsMemo","generator","countrySelectOptionsMemoDependencies","PhoneInputDefault","createPhoneInput","call","func","_arguments","args","prototype","slice","push","apply","_parsePhoneNumber","arguments","formatPhoneNumber","_formatPhoneNumber","formatPhoneNumberIntl","_formatPhoneNumberIntl","isValidPhoneNumber","_isValidPhoneNumber","isPossiblePhoneNumber","_isPossiblePhoneNumber","_getCountries","_getCountryCallingCode","_isSupportedCountry","caret","focused_input_character_index","parse_character","caret_position","count","placeholder","empty_placeholder","cut_before","retained_template","opening_braces","count_occurences","closing_braces","dangling_braces","template","should_close_braces","characters_in_template","value_character_index","filled_in_template","close_braces","template_formatter","found","possibly_last_input_character_index","start","end","selectionEnd","Keys","Backspace","Delete","isAndroid","setTimeout","ANDROID_USER_AGENT_REG_EXP","navigator","isReadOnly","formatInputText","selection","getSelection","eraseSelection","operation","getOperation","setCaretPosition","parse","getCaretPosition","newValueAndCaret","edit","formatted","on_change","onKeyDown","internalRef","useRef","setRef","_onChange","onInputChange","_onKeyDown","onInputKeyDown","isEmptyValue","Input","onCut","onPaste","getInputValuePrefix","removeInputValuePrefix","InputSmart","defaultMetadata","createInput","useNationalFormatForDefaultCountryValue","countryMismatchDetected","onCountryMismatch","actualCountry","getPhoneDigitsForValue","useState","setPrevCountry","setPrevDefaultCountry","setPhoneDigits","valueForPhoneDigits","setValueForPhoneDigits","rerenderTrigger","setRerenderTrigger","rerender","useEffect","getValueForPhoneDigits","onSetPhoneDigits","parseDigits","Component","usePhoneDigits","PhoneInput","InputBasic","national_number","SINGLE_IDD_PREFIX_REG_EXP","DEFAULT_OPTIONS","formatExtension","formatNationalNumber","addExtension","formatRFC3966","formatIDD","chooseFormatForNumber","formatNationalNumberUsingFormat","formatAs","lastLeadingDigitsPattern","nationalNnumber","fromCountryCallingCode","iddPrefix","getIddPrefix","PhoneNumber","_metadata","isCountryCode","v2","isValidNumber","formatNumber","EXTN_PATTERN","numberWithoutExtension","matches","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parseInput","formattedPhoneNumber","valid","possible","extract","startsAt","parseRFC3966","extractFormattedPhoneNumber","isViablePhoneNumberStart","withExtensionStripped","extractExtension","extractCountryCallingCode","parseIncompletePhoneNumber","defaultCallingCode","exactCountry","getCountryByCallingCode","parseNumber","newValueFormatted","formatIncompletePhoneNumber","parsePhoneNumberCharacter","AsYouTypeState","onCallingCodeChange","key","properties","nextDigits","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","times","cutBeforeIndex","stripNonPairedParens","countOccurences","cleared_string","digits","position","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","matcher","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","nationalSignificantNumber","useNationalPrefixFormattingRule","formattedNationalNumber","isValidFormattedNationalNumber","PatternMatcher","allowOverflow","match","characters","tree","overflow","characterString","matchedChars","partialMatch","restCharacters","subtree","last","JSON","branch","char","OPERATOR","PatternParser","pattern","or","instructions","branches","op","context","operator","before","rightPart","oneOfSet","parseOneOfSet","values","nextValue","DUMMY_DIGIT","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","LONGEST_DUMMY_PHONE_NUMBER","repeat","NATIONAL_PREFIX_SEPARATORS_PATTERN","SUPPORT_LEGACY_FORMATTING_PATTERNS","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","NON_ALTERING_FORMAT_REG_EXP","MIN_LEADING_DIGITS_LENGTH","AsYouTypeFormatter","usesNationalPrefix","numberingPlan","canFormatCompleteNumber","formattedCompleteNumber","formatCompleteNumber","previouslyChosenFormat","newlyChosenFormat","leadingDigits","leadingDigitsPatternIndex","leadingDigitsPatternsCount","Math","leadingDigitsPattern","IDDPrefix","missingPlus","internationalPrefix","spacing","cutAndStripNonPairedParens","complexPrefixBeforeNationalSignificantNumber","strictPattern","nationalNumberDummyDigits","numberFormat","numberFormatWithNationalPrefix","nationalPrefixIncludedInTemplate","populateTemplateWithDigits","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser","onNationalSignificantNumberChange","extractFormattedDigitsAndPlus","formattedDigits","hasPlus","justLeadingPlus","hasReceivedThreeLeadingDigits","nationalPrefixForParsing","nationalDigits","setState","prevNationalSignificantNumber","nationalSignificantNumberIndex","nationalSignificantNumberMatchesInput","newCallingCode","extractedNumber","_extractFormattedDigitsAndPlus","AsYouType","optionsOrDefaultCountry","callingCode_","parsePhoneNumberFromString_","parsePhoneNumberFromString"],"mappings":"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","file":"x","sourcesContent":["// Copy-pasted from:\r\n// https://github.com/substack/semver-compare/blob/master/index.js\r\n//\r\n// Inlining this function because some users reported issues with\r\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\r\n//\r\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\r\nexport default function(a, b) {\r\n    a = a.split('-')\r\n    b = b.split('-')\r\n    var pa = a[0].split('.')\r\n    var pb = b[0].split('.')\r\n    for (var i = 0; i < 3; i++) {\r\n        var na = Number(pa[i])\r\n        var nb = Number(pb[i])\r\n        if (na > nb) return 1\r\n        if (nb > na) return -1\r\n        if (!isNaN(na) && isNaN(nb)) return 1\r\n        if (isNaN(na) && !isNaN(nb)) return -1\r\n    }\r\n    if (a[1] && b[1]) {\r\n        return a[1] > b[1] ? 1 : (a[1] < b[1] ? -1 : 0)\r\n    }\r\n    return !a[1] && b[1] ? 1 : (a[1] && !b[1] ? -1 : 0)\r\n}","import compare from './tools/semver-compare'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nconst CALLING_CODE_REG_EXP = /^\\d+$/\r\n\r\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\t// Supports just passing `callingCode` as the first argument.\r\n\t\tif (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\r\n\t\t\tcallingCode = countryCode\r\n\t\t\tcountryCode = null\r\n\t\t}\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\treturn this.selectNumberingPlan(callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\t// Is always present.\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\t// Is only present when a country supports multiple IDD prefixes.\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\t// Is always present.\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\r\n\t\t\t// when `national_prefix_formatting_rule` is not present.\r\n\t\t\t// So, `true` or `false` are returned explicitly here, so that\r\n\t\t\t// `0` number isn't returned.\r\n\t\t\t? true\r\n\t\t\t: false\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif (!is_object(metadata) || !is_object(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tconst { version } = metadata\r\n\tif (typeof version === 'number') {\r\n\t\tthis.v1 = version === 1\r\n\t\tthis.v2 = version === 2\r\n\t\tthis.v3 = version === 3\r\n\t\tthis.v4 = version === 4\r\n\t} else {\r\n\t\tif (!version) {\r\n\t\t\tthis.v1 = true\r\n\t\t} else if (compare(version, V3) === -1) {\r\n\t\t\tthis.v2 = true\r\n\t\t} else if (compare(version, V4) === -1) {\r\n\t\t\tthis.v3 = true\r\n\t\t} else {\r\n\t\t\tthis.v4 = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }","// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\r\nexport default function matchesEntirely(text, regular_expression) {\r\n\t// If assigning the `''` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\ttext = text || ''\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}","// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS = {\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character) {\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\treturn result\r\n}","/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport default function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b) {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}","import mergeArrays from './mergeArrays'\r\n\r\nexport default function checkNumberLength(nationalNumber, metadata) {\r\n\treturn checkNumberLengthForType(nationalNumber, undefined, metadata)\r\n}\r\n\r\n// Checks whether a number is possible for the country based on its length.\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\t// Metadata before version `1.0.18` didn't contain `possible_lengths`.\r\n\tif (!possible_lengths) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE')) {\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographic entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\t\tif (mobile_type) {\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths) {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// } else {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info) {\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length) {\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle'\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly. Therefore, we use `\\d`, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport default function formatNationalNumberUsingFormat(\r\n\tnumber,\r\n\tformat,\r\n\t{\r\n\t\tuseInternationalFormat,\r\n\t\twithNationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tmetadata\r\n\t}\r\n) {\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat\r\n\t\t\t? format.internationalFormat()\r\n\t\t\t: (\r\n\t\t\t\t// This library doesn't use `domestic_carrier_code_formatting_rule`,\r\n\t\t\t\t// because that one is only used when formatting phone numbers\r\n\t\t\t\t// for dialing from a mobile phone, and this is not a dialing library.\r\n\t\t\t\t// carrierCode && format.domesticCarrierCodeFormattingRule()\r\n\t\t\t\t// \t// First, replace the $CC in the formatting rule with the desired carrier code.\r\n\t\t\t\t// \t// Then, replace the $FG in the formatting rule with the first group\r\n\t\t\t\t// \t// and the carrier code combined in the appropriate way.\r\n\t\t\t\t// \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\r\n\t\t\t\t// \t: (\r\n\t\t\t\t// \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t// \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t// \t\t\t: format.format()\r\n\t\t\t\t// \t)\r\n\t\t\t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t\t: format.format()\r\n\t\t\t)\r\n\t)\r\n\tif (useInternationalFormat) {\r\n\t\treturn applyInternationalSeparatorStyle(formattedNumber)\r\n\t}\r\n\treturn formattedNumber\r\n}","import Metadata from '../metadata'\r\nimport { VALID_DIGITS } from '../constants'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\t// Check if the number is IDD-prefixed.\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\t// If there're any digits after an IDD prefix,\r\n\t// then those digits are a country calling code.\r\n\t// Since no country code starts with a `0`,\r\n\t// the code below validates that the next digit (if present) is not `0`.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\r\n\t\tif (matchedGroups[1] === '0') {\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}","import Metadata from '../metadata'\r\nimport matchesEntirely from './matchesEntirely'\r\nimport extractNationalNumber from './extractNationalNumber'\r\nimport checkNumberLength from './checkNumberLength'\r\nimport getCountryCallingCode from '../getCountryCallingCode'\r\n\r\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\r\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tconst countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode\r\n\tif (number.indexOf(countryCallingCode) === 0) {\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(country, callingCode)\r\n\t\tconst possibleShorterNumber = number.slice(countryCallingCode.length)\r\n\t\tconst {\r\n\t\t\tnationalNumber: possibleShorterNationalNumber,\r\n\t\t} = extractNationalNumber(\r\n\t\t\tpossibleShorterNumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tconst {\r\n\t\t\tnationalNumber\r\n\t\t} = extractNationalNumber(\r\n\t\t\tnumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\t// If the number was not valid before but is valid now,\r\n\t\t// or if it was too long before, we consider the number\r\n\t\t// with the country calling code stripped to be a better result\r\n\t\t// and keep that instead.\r\n\t\t// For example, in Germany (+49), `49` is a valid area code,\r\n\t\t// so if a number starts with `49`, it could be both a valid\r\n\t\t// national German number or an international number without\r\n\t\t// a leading `+`.\r\n\t\tif (\r\n\t\t\t(\r\n\t\t\t\t!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t\t&&\r\n\t\t\t\tmatchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t)\r\n\t\t\t||\r\n\t\t\tcheckNumberLength(nationalNumber, metadata) === 'TOO_LONG'\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: possibleShorterNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn { number }\r\n}","import Metadata from '../metadata'\r\nimport matchesEntirely from './matchesEntirely'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES = [\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// v1 metadata.\r\n\t\t// Legacy.\r\n\t\t// Deprecated.\r\n\t\tif (!metadata.type('MOBILE')) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const type of NON_FIXED_LINE_PHONE_TYPES) {\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\r\n\t\t\treturn type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\r\n\ttype = metadata.type(type)\r\n\tif (!type || !type.pattern()) {\r\n\t\treturn false\r\n\t}\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0) {\r\n\t\treturn false\r\n\t}\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}","import parsePhoneNumber_ from './parsePhoneNumber_'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'","import parsePhoneNumber from './parsePhoneNumber_'\r\nimport ParseError from './ParseError'\r\nimport { isSupportedCountry } from './metadata'\r\n\r\nexport default function parsePhoneNumberFromString(text, options, metadata) {\r\n\t// Validate `defaultCountry`.\r\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\r\n\t\toptions = {\r\n\t\t\t...options,\r\n\t\t\tdefaultCountry: undefined\r\n\t\t}\r\n\t}\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\treturn parsePhoneNumber(text, options, metadata)\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\t//\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n","import { VALID_PUNCTUATION } from '../constants'\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\r\n\treturn formattedNumber.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}","import stripIddPrefix from './stripIddPrefix'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign'\r\nimport Metadata from '../metadata'\r\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants'\r\n\r\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\r\nexport default function extractCountryCallingCode(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then either extract an \"IDD\" prefix, or extract a\r\n\t// country calling code from a number by autocorrecting it\r\n\t// by prepending a leading `+` in cases when it starts\r\n\t// with the country calling code.\r\n\t// https://wikitravel.org/en/International_dialling_prefix\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\tif (number[0] !== '+') {\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata)\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\t// Check to see if the number starts with the country calling code\r\n\t\t\t// for the default country. If so, we remove the country calling code,\r\n\t\t\t// and do some checks on the validity of the number before and after.\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\t\tnumber,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tcallingCode,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\t\t\t\tif (countryCallingCode) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0') {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\t\tif (metadata.hasCallingCode(countryCallingCode)) {\r\n\t\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber'\r\nimport matchesEntirely from './matchesEntirely'\r\nimport checkNumberLength from './checkNumberLength'\r\n\r\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\r\nexport default function extractNationalNumber(number, metadata) {\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\tnumber,\r\n\t\tmetadata\r\n\t)\r\n\tif (!shouldExtractNationalPrefix(number, nationalNumber, metadata)) {\r\n\t\t// Don't strip the national prefix.\r\n\t\treturn { nationalNumber: number }\r\n\t}\r\n\t// If a national prefix has been extracted, check to see\r\n\t// if the resultant number isn't too short.\r\n\t// Same code in Google's `libphonenumber`:\r\n\t// https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3291-L3302\r\n\t// For some reason, they do this check right after the `national_number_pattern` check\r\n\t// this library does in `shouldExtractNationalPrefix()` function.\r\n\t// Why is there a second \"resultant\" number validity check?\r\n\t// They don't provide an explanation.\r\n\t// This library just copies the behavior.\r\n\tif (number.length !== nationalNumber.length + (carrierCode ? carrierCode.length : 0)) {\r\n\t\t// If not using legacy generated metadata (before version `1.0.18`)\r\n\t\t// then it has \"possible lengths\", so use those to validate the number length.\r\n\t\tif (metadata.possibleLengths()) {\r\n\t\t\t// \"We require that the NSN remaining after stripping the national prefix and\r\n\t\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t\t// a valid short number.\"\r\n\t\t\t// https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\r\n\t\t\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\t\t\tcase 'TOO_SHORT':\r\n\t\t\t\tcase 'INVALID_LENGTH':\r\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\t\t\t// Don't strip the national prefix.\r\n\t\t\t\t\treturn { nationalNumber: number }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn { nationalNumber, carrierCode }\r\n}\r\n\r\n// In some countries, the same digit could be a national prefix\r\n// or a leading digit of a valid phone number.\r\n// For example, in Russia, national prefix is `8`,\r\n// and also `800 555 35 35` is a valid number\r\n// in which `8` is not a national prefix, but the first digit\r\n// of a national (significant) number.\r\n// Same's with Belarus:\r\n// `82004910060` is a valid national (significant) number,\r\n// but `2004910060` is not.\r\n// To support such cases (to prevent the code from always stripping\r\n// national prefix), a condition is imposed: a national prefix\r\n// is not extracted when the original number is \"viable\" and the\r\n// resultant number is not, a \"viable\" national number being the one\r\n// that matches `national_number_pattern`.\r\nfunction shouldExtractNationalPrefix(number, nationalSignificantNumber, metadata) {\r\n\t// The equivalent in Google's code is:\r\n\t// https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\r\n\tif (matchesEntirely(number, metadata.nationalNumberPattern()) &&\r\n\t\t!matchesEntirely(nationalSignificantNumber, metadata.nationalNumberPattern())) {\r\n\t\treturn false\r\n\t}\r\n\t// Just \"possible\" number check would be more relaxed, so it's not used.\r\n\t// if (isPossibleNumber(number, metadata) &&\r\n\t// \t!isPossibleNumber(numberWithNationalPrefixExtracted, metadata)) {\r\n\t// \treturn false\r\n\t// }\r\n\treturn true\r\n}","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`.\r\n */\r\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\r\n\tif (number && metadata.numberingPlan.nationalPrefixForParsing()) {\r\n\t\t// See METADATA.md for the description of\r\n\t\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\r\n\t\t// Attempt to parse the first digits as a national prefix.\r\n\t\tconst prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')')\r\n\t\tconst prefixMatch = prefixPattern.exec(number)\r\n\t\tif (prefixMatch) {\r\n\t\t\tlet nationalNumber\r\n\t\t\tlet carrierCode\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\t\t// If a `national_prefix_for_parsing` has any \"capturing groups\"\r\n\t\t\t// then it means that the national (significant) number is equal to\r\n\t\t\t// those \"capturing groups\" transformed via `national_prefix_transform_rule`,\r\n\t\t\t// and nothing could be said about the actual national prefix:\r\n\t\t\t// what is it and was it even there.\r\n\t\t\t// If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\r\n\t\t\t// then everything it matches is a national prefix.\r\n\t\t\t// To determine whether `national_prefix_for_parsing` matched any\r\n\t\t\t// \"capturing groups\", the value of the result of calling `.exec()`\r\n\t\t\t// is looked at, and if it has non-undefined values where there're\r\n\t\t\t// \"capturing groups\" in the regular expression, then it means\r\n\t\t\t// that \"capturing groups\" have been matched.\r\n\t\t\t// It's not possible to tell whether there'll be any \"capturing gropus\"\r\n\t\t\t// before the matching process, because a `national_prefix_for_parsing`\r\n\t\t\t// could exhibit both behaviors.\r\n\t\t\tconst capturedGroupsCount = prefixMatch.length - 1\r\n\t\t\tconst hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]\r\n\t\t\tif (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\r\n\t\t\t\tnationalNumber = number.replace(\r\n\t\t\t\t\tprefixPattern,\r\n\t\t\t\t\tmetadata.nationalPrefixTransformRule()\r\n\t\t\t\t)\r\n\t\t\t\t// If there's more than one captured group,\r\n\t\t\t\t// then carrier code is the second one.\r\n\t\t\t\tif (capturedGroupsCount > 1) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// If there're no \"capturing groups\",\r\n\t\t\t// or if there're \"capturing groups\" but no\r\n\t\t\t// `national_prefix_transform_rule`,\r\n\t\t\t// then just strip the national prefix from the number,\r\n\t\t\t// and possibly a carrier code.\r\n\t\t\t// Seems like there could be more.\r\n\t\t\telse {\r\n\t\t\t\t// `prefixBeforeNationalNumber` is the whole substring matched by\r\n\t\t\t\t// the `national_prefix_for_parsing` regular expression.\r\n\t\t\t\t// There seem to be no guarantees that it's just a national prefix.\r\n\t\t\t\t// For example, if there's a carrier code, it's gonna be a\r\n\t\t\t\t// part of `prefixBeforeNationalNumber` too.\r\n\t\t\t\tconst prefixBeforeNationalNumber = prefixMatch[0]\r\n\t\t\t\tnationalNumber = number.slice(prefixBeforeNationalNumber.length)\r\n\t\t\t\t// If there's at least one captured group,\r\n\t\t\t\t// then carrier code is the first one.\r\n\t\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Tries to guess whether a national prefix was present in the input.\r\n\t\t\t// This is not something copy-pasted from Google's library:\r\n\t\t\t// they don't seem to have an equivalent for that.\r\n\t\t\t// So this isn't an \"officially approved\" way of doing something like that.\r\n\t\t\t// But since there seems no other existing method, this library uses it.\r\n\t\t\tlet nationalPrefix\r\n\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\tconst possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1])\r\n\t\t\t\tconst possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup)\r\n\t\t\t\t// Example: an Argentinian (AR) phone number `0111523456789`.\r\n\t\t\t\t// `prefixMatch[0]` is `01115`, and `$1` is `11`,\r\n\t\t\t\t// and the rest of the phone number is `23456789`.\r\n\t\t\t\t// The national number is transformed via `9$1` to `91123456789`.\r\n\t\t\t\t// National prefix `0` is detected being present at the start.\r\n\t\t\t\t// if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\r\n\t\t\t\tif (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\r\n\t\t\t\t\tnationalPrefix = metadata.numberingPlan.nationalPrefix()\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnationalPrefix = prefixMatch[0]\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tnationalPrefix,\r\n\t\t\t\tcarrierCode\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n   return {\r\n   \tnationalNumber: number\r\n   }\r\n}","import Metadata from '../metadata'\r\nimport getNumberType from './getNumberType'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\t// Is always non-empty, because `callingCode` is always valid\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata)\r\n}\r\n\r\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\tfor (const country of possibleCountries) {\r\n\t\tmetadata.country(country)\r\n\t\t// Leading digits check would be the simplest and fastest one.\r\n\t\t// Leading digits patterns are only defined for about 20% of all countries.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\r\n\t\t// Matching \"leading digits\" is a sufficient but not necessary condition.\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}","import Metadata from './metadata'\r\nimport checkNumberLength from './helpers/checkNumberLength'\r\n\r\nexport default function isPossiblePhoneNumber(input, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2) {\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t} else {\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\tif (metadata.possibleLengths()) {\r\n\t\treturn isPossibleNumber(input.phone || input.nationalNumber, metadata)\r\n\t} else {\r\n\t\t// There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\r\n\t\t// were missing for \"non-geographical\" numbering plans.\r\n\t\t// Just assume the number is possible in such cases:\r\n\t\t// it's unlikely that anyone generated their custom metadata\r\n\t\t// in that short period of time (one day).\r\n\t\t// This code can be removed in some future major version update.\r\n\t\tif (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\r\n\t\t\t// \"Non-geographic entities\" did't have `possibleLengths`\r\n\t\t\t// due to a bug in metadata generation process.\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\tthrow new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isPossibleNumber(nationalNumber, metadata) { //, isInternational) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !isInternational\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}","import isViablePhoneNumber from './isViablePhoneNumber'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text) {\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';')) {\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name) {\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext }) {\r\n\tif (!number) {\r\n\t\treturn ''\r\n\t}\r\n\tif (number[0] !== '+') {\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}","import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from '../constants'\r\n\r\nimport createExtensionPattern from './extension/createExtensionPattern'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nexport const VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// This regular expression isn't present in Google's `libphonenumber`\r\n// and is only used to determine whether the phone number being input\r\n// is too short for it to even consider it a \"valid\" number.\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nconst VALID_PHONE_NUMBER_START_REG_EXP = new RegExp(\r\n\t'^' +\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){1,2}' +\r\n\t'$'\r\n, 'i')\r\n\r\nexport const VALID_PHONE_NUMBER_WITH_EXTENSION =\r\n\tVALID_PHONE_NUMBER +\r\n\t// Phone number extensions\r\n\t'(?:' + createExtensionPattern() + ')?'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER_WITH_EXTENSION +\r\n\t'$'\r\n, 'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number) {\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}\r\n\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nexport function isViablePhoneNumberStart(number) {\r\n\treturn VALID_PHONE_NUMBER_START_REG_EXP.test(number)\r\n}","import { VALID_DIGITS } from '../../constants'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\r\nconst getExtensionDigitsPattern = (maxLength) => `([${VALID_DIGITS}]{1,${maxLength}})`\r\n\r\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\r\nexport default function createExtensionPattern(purpose) {\r\n\t// We cap the maximum length of an extension based on the ambiguity of the way\r\n\t// the extension is prefixed. As per ITU, the officially allowed length for\r\n\t// extensions is actually 40, but we don't support this since we haven't seen real\r\n\t// examples and this introduces many false interpretations as the extension labels\r\n\t// are not standardized.\r\n\t/** @type {string} */\r\n\tvar extLimitAfterExplicitLabel = '20';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterLikelyLabel = '15';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterAmbiguousChar = '9';\r\n\t/** @type {string} */\r\n\tvar extLimitWhenNotSure = '6';\r\n\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\u00A0\\\\t,]*\";\r\n\t// Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\r\n\t/** @type {string} */\r\n\tvar possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*\";\r\n\t/** @type {string} */\r\n\tvar optionalExtnSuffix = \"#?\";\r\n\r\n\t// Here the extension is called out in more explicit way, i.e mentioning it obvious\r\n\t// patterns like \"ext.\".\r\n\t/** @type {string} */\r\n\tvar explicitExtLabels =\r\n\t  \"(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\";\r\n\t// One-character symbols that can be used to indicate an extension, and less\r\n\t// commonly used or more ambiguous extension labels.\r\n\t/** @type {string} */\r\n\tvar ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\";\r\n\t// When extension is not separated clearly.\r\n\t/** @type {string} */\r\n\tvar ambiguousSeparator = \"[- ]+\";\r\n\t// This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\r\n\t// comma as extension label may have it.\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsNumberExtLabelNoComma = \"[ \\u00A0\\\\t]*\";\r\n\t// \",,\" is commonly used for auto dialling the extension when connected. First\r\n\t// comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\r\n\t// not repeat it here. Semi-colon works in Iphone and Android also to pop up a\r\n\t// button with the extension number following.\r\n\t/** @type {string} */\r\n\tvar autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\r\n\r\n\t/** @type {string} */\r\n\tvar rfcExtn = RFC3966_EXTN_PREFIX\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\r\n\t/** @type {string} */\r\n\tvar explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel)\r\n\t     + optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t+ getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar americanStyleExtnWithSuffix = ambiguousSeparator\r\n\t+ getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\r\n\r\n\t/** @type {string} */\r\n\tvar autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t     + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterLikelyLabel)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t    + \"(?:,)+\" + possibleCharsAfterExtLabel\r\n\t    + getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t    + optionalExtnSuffix;\r\n\r\n\t// The first regular expression covers RFC 3966 format, where the extension is added\r\n\t// using \";ext=\". The second more generic where extension is mentioned with explicit\r\n\t// labels like \"ext:\". In both the above cases we allow more numbers in extension than\r\n\t// any other extension labels. The third one captures when single character extension\r\n\t// labels or less commonly used labels are used. In such cases we capture fewer\r\n\t// extension digits in order to reduce the chance of falsely interpreting two\r\n\t// numbers beside each other as a number + extension. The fourth one covers the\r\n\t// special case of American numbers where the extension is written with a hash\r\n\t// at the end, such as \"- 503#\". The fifth one is exclusively for extension\r\n\t// autodialling formats which are used when dialling and in this case we accept longer\r\n\t// extensions. The last one is more liberal on the number of commas that acts as\r\n\t// extension labels, so we have a strict cap on the number of digits in such extensions.\r\n\treturn rfcExtn + \"|\"\r\n\t       + explicitExtn + \"|\"\r\n\t       + ambiguousExtn + \"|\"\r\n\t       + americanStyleExtnWithSuffix + \"|\"\r\n\t       + autoDiallingExtn + \"|\"\r\n\t       + onlyCommasExtn;\r\n}","import {\r\n\tgetCountryCallingCode,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\nconst ONLY_DIGITS_REGEXP = /^\\d+$/\r\nexport default function getInternationalPhoneNumberPrefix(country, metadata) {\r\n\t// Standard international phone number prefix: \"+\" and \"country calling code\".\r\n\tlet prefix = '+' + getCountryCallingCode(country, metadata)\r\n\t// Get \"leading digits\" for a phone number of the country.\r\n\t// If there're \"leading digits\" then they can be part of the prefix too.\r\n\tmetadata = new Metadata(metadata)\r\n\tmetadata.selectNumberingPlan(country)\r\n\tif (metadata.numberingPlan.leadingDigits() && ONLY_DIGITS_REGEXP.test(metadata.numberingPlan.leadingDigits())) {\r\n\t\tprefix += metadata.numberingPlan.leadingDigits()\r\n\t}\r\n\treturn prefix\r\n}","import { getCountryCallingCode } from 'libphonenumber-js/core'\r\n\r\nexport function getInputValuePrefix({\r\n\tcountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tmetadata\r\n}) {\r\n\treturn country && international && !withCountryCallingCode ?\r\n\t\t`+${getCountryCallingCode(country, metadata)}` :\r\n\t\t''\r\n}\r\n\r\nexport function removeInputValuePrefix(value, prefix) {\r\n\tif (prefix) {\r\n\t\tvalue = value.slice(prefix.length)\r\n\t\tif (value[0] === ' ') {\r\n\t\t\tvalue = value.slice(1)\r\n\t\t}\r\n\t}\r\n\treturn value\r\n}","// https://stackoverflow.com/a/46971044/970769\r\nexport default class ParseError {\r\n  constructor(code) {\r\n    this.name = this.constructor.name\r\n    this.message = code\r\n    this.stack = (new Error(code)).stack\r\n  }\r\n}\r\n\r\nParseError.prototype = Object.create(Error.prototype)\r\nParseError.prototype.constructor = ParseError","import PropTypes from 'prop-types'\r\n\r\nexport const metadata = PropTypes.shape({\r\n\tcountry_calling_codes : PropTypes.object.isRequired,\r\n\tcountries : PropTypes.object.isRequired\r\n})\r\n\r\nexport const labels = PropTypes.objectOf(PropTypes.string)","/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\r\nexport default function getCountryFlag(country) {\r\n\treturn getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1])\r\n}\r\n\r\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\r\nfunction getRegionalIndicatorSymbol(letter) {\r\n\treturn String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0))\r\n}","import React, { useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode'\r\n\r\nexport default function CountrySelect({\r\n\tvalue,\r\n\tonChange,\r\n\toptions,\r\n\t...rest\r\n}) {\r\n\tconst onChange_ = useCallback((event) => {\r\n\t\tconst value = event.target.value\r\n\t\tonChange(value === 'ZZ' ? undefined : value)\r\n\t}, [onChange])\r\n\r\n\tconst selectedOption = useMemo(() => {\r\n\t\treturn getSelectedOption(options, value)\r\n\t}, [options, value])\r\n\r\n\t// \"ZZ\" means \"International\".\r\n\t// (HTML requires each `<option/>` have some string `value`).\r\n\treturn (\r\n\t\t<select\r\n\t\t\t{...rest}\r\n\t\t\tvalue={value || 'ZZ'}\r\n\t\t\tonChange={onChange_}>\r\n\t\t\t{options.map(({ value, label, divider }) => (\r\n\t\t\t\t<option\r\n\t\t\t\t\tkey={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\tvalue={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\tdisabled={divider ? true : false}\r\n\t\t\t\t\tstyle={divider ? DIVIDER_STYLE : undefined}>\r\n\t\t\t\t\t{label}\r\n\t\t\t\t</option>\r\n\t\t\t))}\r\n\t\t</select>\r\n\t)\r\n}\r\n\r\nCountrySelect.propTypes = {\r\n\t/**\r\n\t * A two-letter country code.\r\n\t * Example: \"US\", \"RU\", etc.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string`.\r\n\t * Updates the `value` property.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// `<select/>` options.\r\n\toptions: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tvalue: PropTypes.string,\r\n\t\tlabel: PropTypes.string,\r\n\t\tdivider: PropTypes.bool\r\n\t})).isRequired\r\n}\r\n\r\nconst DIVIDER_STYLE = {\r\n\tfontSize: '1px',\r\n\tbackgroundColor: 'currentColor',\r\n\tcolor: 'inherit'\r\n}\r\n\r\nexport function CountrySelectWithIcon({\r\n\tvalue,\r\n\toptions,\r\n\tclassName,\r\n\ticonComponent: Icon,\r\n\tgetIconAspectRatio,\r\n\tarrowComponent: Arrow,\r\n\tunicodeFlags,\r\n\t...rest\r\n}) {\r\n\tconst selectedOption = useMemo(() => {\r\n\t\treturn getSelectedOption(options, value)\r\n\t}, [options, value])\r\n\r\n\treturn (\r\n\t\t<div className=\"PhoneInputCountry\">\r\n\t\t\t<CountrySelect\r\n\t\t\t\t{...rest}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\toptions={options}\r\n\t\t\t\tclassName={classNames('PhoneInputCountrySelect', className)}/>\r\n\r\n\t\t\t{/* Either a Unicode flag icon. */}\r\n\t\t\t{(unicodeFlags && value) &&\r\n\t\t\t\t<div className=\"PhoneInputCountryIconUnicode\">\r\n\t\t\t\t\t{getUnicodeFlagIcon(value)}\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\r\n\t\t\t{/* Or an SVG flag icon. */}\r\n\t\t\t{!(unicodeFlags && value) &&\r\n\t\t\t\t<Icon\r\n\t\t\t\t\tcountry={value}\r\n\t\t\t\t\tlabel={selectedOption && selectedOption.label}\r\n\t\t\t\t\taspectRatio={unicodeFlags ? 1 : undefined}/>\r\n\t\t\t}\r\n\r\n\t\t\t<Arrow/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nCountrySelectWithIcon.propTypes = {\r\n\t// Country flag component.\r\n\ticonComponent: PropTypes.elementType,\r\n\r\n\t// Select arrow component.\r\n\tarrowComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Set to `true` to render Unicode flag icons instead of SVG images.\r\n\tunicodeFlags: PropTypes.bool\r\n}\r\n\r\nCountrySelectWithIcon.defaultProps = {\r\n\tarrowComponent: () => <div className=\"PhoneInputCountrySelectArrow\"/>\r\n}\r\n\r\nfunction getSelectedOption(options, value) {\r\n\tfor (const option of options) {\r\n\t\tif (!option.divider && option.value === value) {\r\n\t\t\treturn option\r\n\t\t}\r\n\t}\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n// Default country flag icon.\r\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\r\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\r\nexport default function FlagComponent({\r\n\tcountry,\r\n\tcountryName,\r\n\tflags,\r\n\tflagUrl,\r\n\t...rest\r\n}) {\r\n\tif (flags && flags[country]) {\r\n\t\treturn flags[country]({ title: countryName })\r\n\t}\r\n\treturn (\r\n\t\t<img\r\n\t\t\t{...rest}\r\n\t\t\talt={countryName}\r\n\t\t\trole={countryName ? undefined : \"presentation\"}\r\n\t\t\tsrc={flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())}/>\r\n\t)\r\n}\r\n\r\nFlagComponent.propTypes = {\r\n\t// The country to be selected by default.\r\n\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tcountry: PropTypes.string.isRequired,\r\n\r\n\t// Will be HTML `title` attribute of the `<img/>`.\r\n\tcountryName: PropTypes.string.isRequired,\r\n\r\n\t// Country flag icon components.\r\n\t// By default flag icons are inserted as `<img/>`s\r\n\t// with their `src` pointed to `country-flag-icons` gitlab pages website.\r\n\t// There might be cases (e.g. an offline application)\r\n\t// where having a large (3 megabyte) `<svg/>` flags\r\n\t// bundle is more appropriate.\r\n\t// `import flags from 'react-phone-number-input/flags'`.\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t// A URL for a country flag icon.\r\n\t// By default it points to `country-flag-icons` gitlab pages website.\r\n\tflagUrl: PropTypes.string.isRequired\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function InternationalIcon({ aspectRatio, ...rest }) {\r\n\tif (aspectRatio === 1) {\r\n\t\treturn <InternationalIcon1x1 {...rest}/>\r\n\t} else {\r\n\t\treturn <InternationalIcon3x2 {...rest}/>\r\n\t}\r\n}\r\n\r\nInternationalIcon.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\taspectRatio: PropTypes.number\r\n}\r\n\r\n// 3x2.\r\n// Using `<title/>` in `<svg/>`s:\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\r\nfunction InternationalIcon3x2({ title, ...rest }) {\r\n\treturn (\r\n\t\t<svg\r\n\t\t\t{...rest}\r\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\tviewBox=\"0 0 75 50\">\r\n\t\t\t<title>{title}</title>\r\n\t\t\t<g\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconGlobe\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeMiterlimit=\"10\">\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"/>\r\n\t\t\t\t<path d=\"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"/>\r\n\t\t\t\t<line x1=\"26\" y1=\"25\" x2=\"74\" y2=\"25\"/>\r\n\t\t\t\t<line x1=\"50\" y1=\"1\" x2=\"50\" y2=\"49\"/>\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"/>\r\n\t\t\t\t<path strokeLinecap=\"round\" d=\"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"/>\r\n\t\t\t</g>\r\n\t\t\t<path\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconPhone\"\r\n\t\t\t\tstroke=\"none\"\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"/>\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\nInternationalIcon3x2.propTypes = {\r\n\ttitle: PropTypes.string.isRequired\r\n}\r\n\r\n// 1x1.\r\n// Using `<title/>` in `<svg/>`s:\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\r\nfunction InternationalIcon1x1({ title, ...rest }) {\r\n\treturn (\r\n\t\t<svg\r\n\t\t\t{...rest}\r\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\tviewBox=\"0 0 50 50\">\r\n\t\t\t<title>{title}</title>\r\n\t\t\t<g\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconGlobe\"\r\n\t\t\t\tstroke=\"currentColor\"\r\n\t\t\t\tfill=\"none\"\r\n\t\t\t\tstrokeWidth=\"2\"\r\n\t\t\t\tstrokeLinecap=\"round\">\r\n\t\t\t\t<path d=\"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"/>\r\n\t\t\t\t<path d=\"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"/>\r\n\t\t\t\t<path d=\"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"/>\r\n\t\t\t\t<path d=\"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"/>\r\n\t\t\t\t<line x1=\"27.8\" y1=\"0.85\" x2=\"27.8\" y2=\"34.61\"/>\r\n\t\t\t\t<line x1=\"15.2\" y1=\"22.23\" x2=\"49.15\" y2=\"22.23\"/>\r\n\t\t\t</g>\r\n\t\t\t<path\r\n\t\t\t\tclassName=\"PhoneInputInternationalIconPhone\"\r\n\t\t\t\tstroke=\"transparent\"\r\n\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\td=\"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"/>\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\nInternationalIcon1x1.propTypes = {\r\n\ttitle: PropTypes.string.isRequired\r\n}\r\n","import { isSupportedCountry } from 'libphonenumber-js/core'\r\nexport { getCountries } from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\r\nexport function sortCountryOptions(options, order) {\r\n\tif (!order) {\r\n\t\treturn options\r\n\t}\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\tfor (const element of order) {\r\n\t\tif (element === '|') {\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t} else if (element === '...' || element === '…') {\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t} else {\r\n\t\t\tlet countryCode\r\n\t\t\tif (element === '🌐') {\r\n\t\t\t\tcountryCode = undefined\r\n\t\t\t} else {\r\n\t\t\t\tcountryCode = element\r\n\t\t\t}\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === countryCode)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nexport function getSupportedCountryOptions(countryOptions, metadata) {\r\n\tif (countryOptions) {\r\n\t\tcountryOptions = countryOptions.filter((option) => {\r\n\t\t\tswitch (option) {\r\n\t\t\t\tcase '🌐':\r\n\t\t\t\tcase '|':\r\n\t\t\t\tcase '...':\r\n\t\t\t\tcase '…':\r\n\t\t\t\t\treturn true\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn isCountrySupportedWithError(option, metadata)\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (countryOptions.length > 0) {\r\n\t\t\treturn countryOptions\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isCountrySupportedWithError(country, metadata) {\r\n\tif (isSupportedCountry(country, metadata)) {\r\n\t\treturn true\r\n\t} else {\r\n\t\tconsole.error(`Country not found: ${country}`)\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nexport function getSupportedCountries(countries, metadata) {\r\n\tif (countries) {\r\n\t\tcountries = countries.filter(country => isCountrySupportedWithError(country, metadata))\r\n\t\tif (countries.length === 0) {\r\n\t\t\tcountries = undefined\r\n\t\t}\r\n\t}\r\n\treturn countries\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport DefaultInternationalIcon from './InternationalIcon'\r\nimport Flag from './Flag'\r\n\r\nexport function createCountryIconComponent({\r\n\tflags,\r\n\tflagUrl,\r\n\tflagComponent: FlagComponent,\r\n\tinternationalIcon: InternationalIcon\r\n}) {\r\n\tfunction CountryIcon({\r\n\t\tcountry,\r\n\t\tlabel,\r\n\t\taspectRatio\r\n\t}) {\r\n\t\t// `aspectRatio` is currently a hack for the default \"International\" icon\r\n\t\t// to render it as a square when Unicode flag icons are used.\r\n\t\t// So `aspectRatio` property is only used with the default \"International\" icon.\r\n\t\tconst _aspectRatio = InternationalIcon === DefaultInternationalIcon ? aspectRatio : undefined\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={classNames('PhoneInputCountryIcon', {\r\n\t\t\t\t\t'PhoneInputCountryIcon--square': _aspectRatio === 1,\r\n\t\t\t\t\t'PhoneInputCountryIcon--border': country\r\n\t\t\t\t})}>\r\n\t\t\t\t{\r\n\t\t\t\t\tcountry\r\n\t\t\t\t\t?\r\n\t\t\t\t\t<FlagComponent\r\n\t\t\t\t\t\tcountry={country}\r\n\t\t\t\t\t\tcountryName={label}\r\n\t\t\t\t\t\tflags={flags}\r\n\t\t\t\t\t\tflagUrl={flagUrl}\r\n\t\t\t\t\t\tclassName=\"PhoneInputCountryIconImg\"/>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<InternationalIcon\r\n\t\t\t\t\t\ttitle={label}\r\n\t\t\t\t\t\taspectRatio={_aspectRatio}\r\n\t\t\t\t\t\tclassName=\"PhoneInputCountryIconImg\"/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tCountryIcon.propTypes = {\r\n\t\tcountry: PropTypes.string,\r\n\t\tlabel: PropTypes.string.isRequired,\r\n\t\taspectRatio: PropTypes.number\r\n\t}\r\n\r\n\treturn CountryIcon\r\n}\r\n\r\nexport default createCountryIconComponent({\r\n\t// Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\tflagComponent: Flag,\r\n\tinternationalIcon: DefaultInternationalIcon\r\n})","import parsePhoneNumber_, {\r\n\tgetCountryCallingCode,\r\n\tAsYouType,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix'\r\n\r\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\r\nexport function getPreSelectedCountry({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tlet country\r\n\r\n\t// If can get country from E.164 phone number\r\n\t// then it overrides the `country` passed (or not passed).\r\n\tif (phoneNumber && phoneNumber.country) {\r\n\t\t// `country` will be left `undefined` in case of non-detection.\r\n\t\tcountry = phoneNumber.country\r\n\t} else if (defaultCountry) {\r\n\t\tif (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// Only pre-select a country if it's in the available `countries` list.\r\n\tif (countries && countries.indexOf(country) < 0) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// If there will be no \"International\" option\r\n\t// then some `country` must be selected.\r\n\t// It will still be the wrong country though.\r\n\t// But still country `<select/>` can't be left in a broken state.\r\n\tif (!country && required && countries && countries.length > 0) {\r\n\t\tcountry = getAnyCountry()\r\n\t\t// noCountryMatchesTheNumber = true\r\n\t}\r\n\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\r\nexport function getCountrySelectOptions({\r\n\tcountries,\r\n\tcountryNames,\r\n\taddInternationalOption,\r\n\t// `locales` are only used in country name comparator:\r\n\t// depending on locale, string sorting order could be different.\r\n\tcompareStringsLocales,\r\n\tcompareStrings: _compareStrings\r\n}) {\r\n\t// Default country name comparator uses `String.localeCompare()`.\r\n\tif (!_compareStrings) {\r\n\t\t_compareStrings = compareStrings\r\n\t}\r\n\r\n\t// Generates a `<Select/>` option for each country.\r\n\tconst countrySelectOptions = countries.map((country) => ({\r\n\t\tvalue: country,\r\n\t\t// All `locale` country names included in this library\r\n\t\t// include all countries (this is checked at build time).\r\n\t\t// The only case when a country name might be missing\r\n\t\t// is when a developer supplies their own `labels` property.\r\n\t\t// To guard against such cases, a missing country name\r\n\t\t// is substituted by country code.\r\n\t\tlabel: countryNames[country] || country\r\n\t}))\r\n\r\n\t// Sort the list of countries alphabetically.\r\n\tcountrySelectOptions.sort((a, b) => _compareStrings(a.label, b.label, compareStringsLocales))\r\n\r\n\t// Add the \"International\" option to the country list (if suitable)\r\n\tif (addInternationalOption) {\r\n\t\tcountrySelectOptions.unshift({\r\n\t\t\tlabel: countryNames.ZZ\r\n\t\t})\r\n\t}\r\n\r\n\treturn countrySelectOptions\r\n}\r\n\r\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\r\nexport function parsePhoneNumber(value, metadata) {\r\n\treturn parsePhoneNumber_(value || '', metadata)\r\n}\r\n\r\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\r\nexport function generateNationalNumberDigits(phoneNumber) {\r\n\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n}\r\n\r\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\r\nexport function getPhoneDigitsForNewCountry(phoneDigits, {\r\n\tprevCountry,\r\n\tnewCountry,\r\n\tmetadata,\r\n\tuseNationalFormat\r\n}) {\r\n\tif (prevCountry === newCountry) {\r\n\t\treturn phoneDigits\r\n\t}\r\n\r\n\t// If `parsed_input` is empty\r\n\t// then no need to migrate anything.\r\n\tif (!phoneDigits) {\r\n\t\tif (useNationalFormat) {\r\n\t\t\treturn ''\r\n\t\t} else {\r\n\t\t\t// If `phoneDigits` is empty then set `phoneDigits` to\r\n\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\treturn getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// If switching to some country.\r\n\t// (from \"International\" or another country)\r\n\t// If switching from \"International\" then `phoneDigits` starts with a `+`.\r\n\t// Otherwise it may or may not start with a `+`.\r\n\tif (newCountry) {\r\n\t\t// If the phone number was entered in international format\r\n\t\t// then migrate it to the newly selected country.\r\n\t\t// The phone number may be incomplete.\r\n\t\t// The phone number entered not necessarily starts with\r\n\t\t// the previously selected country phone prefix.\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\t// If the international phone number is for the new country\r\n\t\t\t// then convert it to local if required.\r\n\t\t\tif (useNationalFormat) {\r\n\t\t\t\t// // If a phone number is being input in international form\r\n\t\t\t\t// // and the country can already be derived from it,\r\n\t\t\t\t// // and if it is the new country, then format as a national number.\r\n\t\t\t\t// const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\r\n\t\t\t\t// if (derived_country === newCountry) {\r\n\t\t\t\t// \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\r\n\t\t\t\t// }\r\n\r\n\t\t\t\t// Actually, the two countries don't necessarily need to match:\r\n\t\t\t\t// the condition could be looser here, because several countries\r\n\t\t\t\t// might share the same international phone number format\r\n\t\t\t\t// (for example, \"NANPA\" countries like US, Canada, etc).\r\n\t\t\t\t// The looser condition would be just \"same nternational phone number format\"\r\n\t\t\t\t// which would mean \"same country calling code\" in the context of `libphonenumber-js`.\r\n\t\t\t\tif (phoneDigits.indexOf('+' + getCountryCallingCode(newCountry, metadata)) === 0) {\r\n\t\t\t\t\treturn stripCountryCallingCode(phoneDigits, newCountry, metadata)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Simply discard the previously entered international phone number,\r\n\t\t\t\t// because otherwise any \"smart\" transformation like getting the\r\n\t\t\t\t// \"national (significant) number\" part and then prepending the\r\n\t\t\t\t// newly selected country's \"country calling code\" to it\r\n\t\t\t\t// would just be confusing for a user without being actually useful.\r\n\t\t\t\treturn ''\r\n\r\n\t\t\t\t// // Simply strip the leading `+` character\r\n\t\t\t\t// // therefore simply converting all digits into a \"local\" phone number.\r\n\t\t\t\t// // https://github.com/catamphetamine/react-phone-number-input/issues/287\r\n\t\t\t\t// return phoneDigits.slice(1)\r\n\t\t\t}\r\n\r\n\t\t\tif (prevCountry) {\r\n\t\t\t\tconst newCountryPrefix = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(newCountryPrefix) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn newCountryPrefix\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst defaultValue = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is the same\r\n\t\t\t\t// as for the new `country`, then leave `phoneDigits` as is.\r\n\t\t\t\tif (phoneDigits.indexOf(defaultValue) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t}\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is not the same\r\n\t\t\t\t// as for the new `country`, then set `phoneDigits` to\r\n\t\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\treturn defaultValue\r\n\t\t\t}\r\n\r\n\t\t\t// // If the international phone number already contains\r\n\t\t\t// // any country calling code then trim the country calling code part.\r\n\t\t\t// // (that could also be the newly selected country phone code prefix as well)\r\n\t\t\t// // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\r\n\t\t\t// // (e.g. if a user enters an international number\r\n\t\t\t// //  not belonging to any of the reduced `countries` list).\r\n\t\t\t// phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\r\n\r\n\t\t\t// // Prepend country calling code prefix\r\n\t\t\t// // for the newly selected country.\r\n\t\t\t// return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\r\n\t\t}\r\n\t}\r\n\t// If switching to \"International\" from a country.\r\n\telse {\r\n\t\t// If the phone number was entered in national format.\r\n\t\tif (phoneDigits[0] !== '+') {\r\n\t\t\t// Format the national phone number as an international one.\r\n\t\t\t// The phone number entered not necessarily even starts with\r\n\t\t\t// the previously selected country phone prefix.\r\n\t\t\t// Even if the phone number belongs to whole another country\r\n\t\t\t// it will still be parsed into some national phone number.\r\n\t\t\t//\r\n\t\t\t// Ignore the now-uncovered `|| ''` code branch:\r\n\t\t\t// previously `e164()` function could return an empty string\r\n\t\t\t// even when `phoneDigits` were not empty.\r\n\t\t\t// Now it always returns some `value` when there're any `phoneDigits`.\r\n\t\t\t// Still, didn't remove the `|| ''` code branch just in case\r\n\t\t\t// that logic changes somehow in some future, so there're no\r\n\t\t\t// possible bugs related to that.\r\n\t\t\t//\r\n\t\t\t// (ignore the `|| ''` code branch)\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn e164(phoneDigits, prevCountry, metadata) || ''\r\n\t\t}\r\n\t}\r\n\r\n\treturn phoneDigits\r\n}\r\n\r\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function e164(number, country, metadata) {\r\n\tif (!number) {\r\n\t\treturn\r\n\t}\r\n\t// If the phone number is being input in international format.\r\n\tif (number[0] === '+') {\r\n\t\t// If it's just the `+` sign then return nothing.\r\n\t\tif (number === '+') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Return a E.164 phone number.\r\n\t\t//\r\n\t\t// Could return `number` \"as is\" here, but there's a possibility\r\n\t\t// that some user might incorrectly input an international number\r\n\t\t// with a \"national prefix\". Such numbers aren't considered valid,\r\n\t\t// but `libphonenumber-js` is \"forgiving\" when it comes to parsing\r\n\t\t// user's input, and this input component follows that behavior.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country, metadata)\r\n\t\tasYouType.input(number)\r\n\t\t// This function would return `undefined` only when `number` is `\"+\"`,\r\n\t\t// but at this point it is known that `number` is not `\"+\"`.\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\t// For non-international phone numbers\r\n\t// an accompanying country code is required.\r\n\t// The situation when `country` is `undefined`\r\n\t// and a non-international phone number is passed\r\n\t// to this function shouldn't happen.\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\tconst partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata)\r\n\t//\r\n\t// Even if no \"national (significant) number\" digits have been input,\r\n\t// still return a non-`undefined` value.\r\n\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t//\r\n\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t// a \"weird\" behavior.\r\n\t//\r\n\t// if (partial_national_significant_number) {\r\n\t\treturn `+${getCountryCallingCode(country, metadata)}${partial_national_significant_number || ''}`\r\n\t// }\r\n}\r\n\r\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\r\nexport function trimNumber(number, country, metadata) {\r\n\tconst nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata)\r\n\tif (nationalSignificantNumberPart) {\r\n\t\tconst overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata)\r\n\t\tif (overflowDigitsCount > 0) {\r\n\t\t\treturn number.slice(0, number.length - overflowDigitsCount)\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}\r\n\r\nfunction getMaxNumberLength(country, metadata) {\r\n\t// Get \"possible lengths\" for a phone number of the country.\r\n\tmetadata = new Metadata(metadata)\r\n\tmetadata.selectNumberingPlan(country)\r\n\t// Return the last \"possible length\".\r\n\treturn metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1]\r\n}\r\n\r\n// If the phone number being input is an international one\r\n// then tries to derive the country from the phone number.\r\n// (regardless of whether there's any country currently selected)\r\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryForPartialE164Number(partialE164Number, {\r\n\tcountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tif (partialE164Number === '+') {\r\n\t\t// Don't change the currently selected country yet.\r\n\t\treturn country\r\n\t}\r\n\r\n\tconst derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata)\r\n\r\n\t// If a phone number is being input in international form\r\n\t// and the country can already be derived from it,\r\n\t// then select that country.\r\n\tif (derived_country && (!countries || (countries.indexOf(derived_country) >= 0))) {\r\n\t\treturn derived_country\r\n\t}\r\n\t// If \"International\" country option has not been disabled\r\n\t// and the international phone number entered doesn't correspond\r\n\t// to the currently selected country then reset the currently selected country.\r\n\telse if (country &&\r\n\t\t!required &&\r\n\t\t!couldNumberBelongToCountry(partialE164Number, country, metadata)) {\r\n\t\treturn undefined\r\n\t}\r\n\r\n\t// Don't change the currently selected country.\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\r\nexport function onPhoneDigitsChange(phoneDigits, {\r\n\tprevPhoneDigits,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tcountryRequired,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\tinternational,\r\n\tlimitMaxLength,\r\n\tcountryCallingCodeEditable,\r\n\tmetadata\r\n}) {\r\n\tif (international && countryCallingCodeEditable === false) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t// The `<input/>` value must start with the country calling code.\r\n\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\tlet value\r\n\t\t\t// If a phone number input is declared as\r\n\t\t\t// `international` and `withCountryCallingCode`,\r\n\t\t\t// then it's gonna be non-empty even before the user\r\n\t\t\t// has input anything in it.\r\n\t\t\t// This will result in its contents (the country calling code part)\r\n\t\t\t// being selected when the user tabs into such field.\r\n\t\t\t// If the user then starts inputting the national part digits,\r\n\t\t\t// then `<input/>` value changes from `+xxx` to `y`\r\n\t\t\t// because inputting anything while having the `<input/>` value\r\n\t\t\t// selected results in erasing the `<input/>` value.\r\n\t\t\t// So, the component handles such case by restoring\r\n\t\t\t// the intended `<input/>` value: `+xxxy`.\r\n\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t\t} else {\r\n\t\t\t\tphoneDigits = prefix\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tphoneDigits,\r\n\t\t\t\tvalue,\r\n\t\t\t\tcountry\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `international` property is `false`, then it means\r\n\t// \"enforce national-only format during input\",\r\n\t// so, if that's the case, then remove all `+` characters,\r\n\t// but only if some country is currently selected.\r\n\t// (not if \"International\" country is selected).\r\n\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// Trim the input to not exceed the maximum possible number length.\r\n\tif (phoneDigits && country && limitMaxLength) {\r\n\t\tphoneDigits = trimNumber(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// If this `onChange()` event was triggered\r\n\t// as a result of selecting \"International\" country,\r\n\t// then force-prepend a `+` sign if the phone number\r\n\t// `<input/>` value isn't in international format.\r\n\t// Also, force-prepend a `+` sign if international\r\n\t// phone number input format is set.\r\n\tif (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\r\n\t\tphoneDigits = '+' + phoneDigits\r\n\t}\r\n\r\n\t// If the previously entered phone number\r\n\t// has been entered in international format\r\n\t// and the user decides to erase it,\r\n\t// then also reset the `country`\r\n\t// because it was most likely automatically selected\r\n\t// while the user was typing in the phone number\r\n\t// in international format.\r\n\t// This fixes the issue when a user is presented\r\n\t// with a phone number input with no country selected\r\n\t// and then types in their local phone number\r\n\t// then discovers that the input's messed up\r\n\t// (a `+` has been prepended at the start of their input\r\n\t//  and a random country has been selected),\r\n\t// decides to undo it all by erasing everything\r\n\t// and then types in their local phone number again\r\n\t// resulting in a seemingly correct phone number\r\n\t// but in reality that phone number has incorrect country.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/273\r\n\tif (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\r\n\t\tif (international) {\r\n\t\t\tcountry = undefined\r\n\t\t} else {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\t// Also resets such \"randomly\" selected country\r\n\t// as soon as the user erases the number\r\n\t// digit-by-digit up to the leading `+` sign.\r\n\tif (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// Generate the new `value` property.\r\n\tlet value\r\n\tif (phoneDigits) {\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\tif (phoneDigits === '+') {\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else if (country && getInternationalPhoneNumberPrefix(country, metadata).indexOf(phoneDigits) === 0) {\r\n\t\t\t\t// Selected a `country` but started inputting an\r\n\t\t\t\t// international phone number for another country.\r\n\t\t\t\t// Even though the input value is non-empty,\r\n\t\t\t\t// the `value` is assumed `undefined` in such case.\r\n\t\t\t\t// The `country` will be reset (or re-selected)\r\n\t\t\t\t// immediately after such mismatch has been detected\r\n\t\t\t\t// by the phone number input component, and `value`\r\n\t\t\t\t// will be set to the currently entered international prefix.\r\n\t\t\t\t//\r\n\t\t\t\t// For example, if selected `country` `\"US\"`\r\n\t\t\t\t// and started inputting phone number `\"+2\"`\r\n\t\t\t\t// then `value` `undefined` will be returned from this function,\r\n\t\t\t\t// and then, immediately after that, `country` will be reset\r\n\t\t\t\t// and the `value` will be set to `\"+2\"`.\r\n\t\t\t\t//\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else {\r\n\t\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// Derive the country from the phone number.\r\n\t// (regardless of whether there's any country currently selected,\r\n\t//  because there could be several countries corresponding to one country calling code)\r\n\tif (value) {\r\n\t\tcountry = getCountryForPartialE164Number(value, {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\t// If `international` property is `false`, then it means\r\n\t\t// \"enforce national-only format during input\",\r\n\t\t// so, if that's the case, then remove all `+` characters,\r\n\t\t// but only if some country is currently selected.\r\n\t\t// (not if \"International\" country is selected).\r\n\t\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t\t\t// Re-calculate `value` because `phoneDigits` has changed.\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!country && countryRequired) {\r\n\t\tcountry = defaultCountry || getAnyCountry()\r\n\t}\r\n\r\n\treturn {\r\n\t\tphoneDigits,\r\n\t\tcountry,\r\n\t\tvalue\r\n\t}\r\n}\r\n\r\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\r\n\t// Handle the case when a user might have pasted\r\n\t// a phone number in international format.\r\n\tif (input.indexOf(getInternationalPhoneNumberPrefix(country, metadata)) === 0) {\r\n\t\t// Create \"as you type\" formatter.\r\n\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t// Input partial national phone number.\r\n\t\tformatter.input(input)\r\n\t\t// Return the parsed partial national phone number.\r\n\t\tconst phoneNumber = formatter.getNumber()\r\n\t\tif (phoneNumber) {\r\n\t\t\t// Transform the number to a national one,\r\n\t\t\t// and remove all non-digits.\r\n\t\t\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n\t\t} else {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t} else {\r\n\t\t// Just remove the `+` sign.\r\n\t\treturn input.replace(/\\D/g, '')\r\n\t}\r\n}\r\n\r\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\r\n\tconst formatter = new AsYouType(null, metadata)\r\n\tformatter.input(number)\r\n\t// // `001` is a special \"non-geograpical entity\" code\r\n\t// // in Google's `libphonenumber` library.\r\n\t// if (formatter.getCountry() === '001') {\r\n\t// \treturn\r\n\t// }\r\n\treturn formatter.getCountry()\r\n}\r\n\r\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\r\nexport function compareStrings(a, b, locales) {\r\n  // Use `String.localeCompare` if it's available.\r\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\r\n  // Which means everyone except IE <= 10 and Safari <= 10.\r\n  // `localeCompare()` is available in latest Node.js versions.\r\n  /* istanbul ignore else */\r\n  if (String.prototype.localeCompare) {\r\n    return a.localeCompare(b, locales);\r\n  }\r\n  /* istanbul ignore next */\r\n  return a < b ? -1 : (a > b ? 1 : 0);\r\n}\r\n\r\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\r\nexport function stripCountryCallingCode(number, country, metadata) {\r\n\t// Just an optimization, so that it\r\n\t// doesn't have to iterate through all country calling codes.\r\n\tif (country) {\r\n\t\tconst countryCallingCodePrefix = '+' + getCountryCallingCode(country, metadata)\r\n\r\n\t\t// If `country` fits the actual `number`.\r\n\t\tif (number.length < countryCallingCodePrefix.length) {\r\n\t\t\tif (countryCallingCodePrefix.indexOf(number) === 0) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (number.indexOf(countryCallingCodePrefix) === 0) {\r\n\t\t\t\treturn number.slice(countryCallingCodePrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `country` doesn't fit the actual `number`.\r\n\t// Try all available country calling codes.\r\n\tfor (const country_calling_code of Object.keys(metadata.country_calling_codes)) {\r\n\t\tif (number.indexOf(country_calling_code) === '+'.length) {\r\n\t\t\treturn number.slice('+'.length + country_calling_code.length)\r\n\t\t}\r\n\t}\r\n\r\n\treturn ''\r\n}\r\n\r\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\r\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\r\n\t// Create \"as you type\" formatter.\r\n\tconst formatter = new AsYouType(country, metadata)\r\n\t// Input partial national phone number.\r\n\tformatter.input(number)\r\n\t// Return the parsed partial national phone number.\r\n\tconst phoneNumber = formatter.getNumber()\r\n\treturn phoneNumber && phoneNumber.nationalNumber\r\n}\r\n\r\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\r\nexport function couldNumberBelongToCountry(number, country, metadata) {\r\n\tconst intlPhoneNumberPrefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\tlet i = 0\r\n\twhile (i < number.length && i < intlPhoneNumberPrefix.length) {\r\n\t\tif (number[i] !== intlPhoneNumberPrefix[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n\r\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\r\nexport function getInitialPhoneDigits({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\tuseNationalFormat,\r\n\tmetadata\r\n}) {\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `useNationalFormat` is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\r\n\t\treturn generateNationalNumberDigits(phoneNumber)\r\n\t}\r\n\t// If `international` property is `true`,\r\n\t// meaning \"enforce international phone number format\",\r\n\t// then always show country calling code in the input field.\r\n\tif (!value && international && defaultCountry) {\r\n\t\treturn getInternationalPhoneNumberPrefix(defaultCountry, metadata)\r\n\t}\r\n\treturn value\r\n}","import {\r\n\tgetInitialPhoneDigits,\r\n\tgetCountryForPartialE164Number,\r\n\tparsePhoneNumber\r\n} from './phoneInputHelpers'\r\n\r\nimport {\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries\r\n} from './countries'\r\n\r\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\r\n\tconst {\r\n\t\tmetadata,\r\n\t\tcountries,\r\n\t\tdefaultCountry: newDefaultCountry,\r\n\t\tvalue: newValue,\r\n\t\treset: newReset,\r\n\t\tinternational,\r\n\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t// superceded by `initialValueFormat` property.\r\n\t\tdisplayInitialValueAsLocalNumber,\r\n\t\tinitialValueFormat\r\n\t} = props\r\n\r\n\tconst {\r\n\t\tdefaultCountry: prevDefaultCountry,\r\n\t\tvalue: prevValue,\r\n\t\treset: prevReset\r\n\t} = prevProps\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tvalue,\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\thasUserSelectedACountry\r\n\t} = state\r\n\r\n\tconst _getInitialPhoneDigits = (parameters) => getInitialPhoneDigits({\r\n\t\t...parameters,\r\n\t\tinternational,\r\n\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\tmetadata\r\n\t})\r\n\r\n\t// Some users requested a way to reset the component\r\n\t// (both number `<input/>` and country `<select/>`).\r\n\t// Whenever `reset` property changes both number `<input/>`\r\n\t// and country `<select/>` are reset.\r\n\t// It's not implemented as some instance `.reset()` method\r\n\t// because `ref` is forwarded to `<input/>`.\r\n\t// It's also not replaced with just resetting `country` on\r\n\t// external `value` reset, because a user could select a country\r\n\t// and then not input any `value`, and so the selected country\r\n\t// would be \"stuck\", if not using this `reset` property.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\tif (newReset !== prevReset) {\r\n\t\treturn {\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: undefined,\r\n\t\t\tcountry: newDefaultCountry,\r\n\t\t\thasUserSelectedACountry: undefined\r\n\t\t}\r\n\t}\r\n\r\n\t// `value` is the value currently shown in the component:\r\n\t// it's stored in the component's `state`, and it's not the `value` property.\r\n\t// `prevValue` is \"previous `value` property\".\r\n\t// `newValue` is \"new `value` property\".\r\n\r\n\t// If the default country changed\r\n\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t// then select it, but only if the user hasn't already manually\r\n\t// selected a country, and no phone number has been manually entered so far.\r\n\t// Because if the user has already started inputting a phone number\r\n\t// then they're okay with no country being selected at all (\"International\")\r\n\t// and they don't want to be disturbed, don't want their input to be screwed, etc.\r\n\tif (newDefaultCountry !== prevDefaultCountry) {\r\n\t\tconst isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata)\r\n\t\tconst noValueHasBeenEnteredByTheUser = (\r\n\t\t\t// By default, \"no value has been entered\" means `value` is `undefined`.\r\n\t\t\t!value ||\r\n\t\t\t// When `international` is `true`, and some country has been pre-selected,\r\n\t\t\t// then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\r\n\t\t\t// so in case of `international` being `true`, \"the user hasn't entered anything\" situation\r\n\t\t\t// doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\r\n\t\t\t(international && value === _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: prevDefaultCountry\r\n\t\t\t}))\r\n\t\t)\r\n\t\t// Only update the `defaultCountry` property if no phone number\r\n\t\t// has been entered by the user or pre-set by the application.\r\n\t\tconst noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser\r\n\t\tif (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\r\n\t\t\treturn {\r\n\t\t\t\tcountry: newDefaultCountry,\r\n\t\t\t\t// If `phoneDigits` is empty, then automatically select the new `country`\r\n\t\t\t\t// and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\t// The code assumes that \"no phone number has been entered by the user\",\r\n\t\t\t\t// and no `value` property has been passed, so the `phoneNumber` parameter\r\n\t\t\t\t// of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\r\n\t\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\t\tvalue: undefined,\r\n\t\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t\t}),\r\n\t\t\t\t// `value` is `undefined` and it stays so.\r\n\t\t\t\tvalue: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If a new `value` is set externally.\r\n\t// (e.g. as a result of an ajax API request\r\n\t//  to get user's phone after page loaded)\r\n\t// The first part — `newValue !== prevValue` —\r\n\t// is basically `props.value !== prevProps.value`\r\n\t// so it means \"if value property was changed externally\".\r\n\t// The second part — `newValue !== value` —\r\n\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t// then the country flag would reset on each input.\r\n\tif (newValue !== prevValue && newValue !== value) {\r\n\t\tlet phoneNumber\r\n\t\tlet parsedCountry\r\n\t\tif (newValue) {\r\n\t\t\tphoneNumber = parsePhoneNumber(newValue, metadata)\r\n\t\t\tconst supportedCountries = getSupportedCountries(countries, metadata)\r\n\t\t\tif (phoneNumber && phoneNumber.country) {\r\n\t\t\t\t// Ignore `else` because all countries are supported in metadata.\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tif (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\r\n\t\t\t\t\tparsedCountry = phoneNumber.country\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tparsedCountry = getCountryForPartialE164Number(newValue, {\r\n\t\t\t\t\tcountry: undefined,\r\n\t\t\t\t\tcountries: supportedCountries,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet hasUserSelectedACountryUpdate\r\n\t\tif (!newValue) {\r\n\t\t\t// Reset `hasUserSelectedACountry` flag in `state`.\r\n\t\t\thasUserSelectedACountryUpdate = {\r\n\t\t\t\thasUserSelectedACountry: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\t...hasUserSelectedACountryUpdate,\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tvalue: newValue,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: newValue,\r\n\t\t\tcountry: newValue ? parsedCountry : newDefaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// `defaultCountry` didn't change.\r\n\t// `value` didn't change.\r\n\t// `phoneDigits` didn't change, because `value` didn't change.\r\n\t//\r\n\t// So no need to update state.\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect'\r\n\r\nimport Flag from './Flag'\r\nimport InternationalIcon from './InternationalIcon'\r\n\r\nimport {\r\n\tsortCountryOptions,\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries,\r\n\tgetSupportedCountryOptions,\r\n\tgetCountries\r\n} from './helpers/countries'\r\n\r\nimport { createCountryIconComponent } from './CountryIcon'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes'\r\n\r\nimport {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\tgetInitialPhoneDigits,\r\n\tonPhoneDigitsChange,\r\n\te164\r\n} from './helpers/phoneInputHelpers'\r\n\r\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps'\r\n\r\nclass PhoneNumberInput_ extends React.PureComponent {\r\n\tinputRef = React.createRef()\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\taddInternationalOption,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `defaultCountry`.\r\n\t\tif (defaultCountry) {\r\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\tdefaultCountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = getSupportedCountries(countries, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\r\n\r\n\t\tconst preSelectedCountry = getPreSelectedCountry({\r\n\t\t\tvalue,\r\n\t\t\tphoneNumber,\r\n\t\t\tdefaultCountry,\r\n\t\t\trequired: !addInternationalOption,\r\n\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tthis.state = {\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops: this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry: preSelectedCountry,\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\r\n\t\t\tphoneDigits: getInitialPhoneDigits({\r\n\t\t\t\tvalue,\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\t\t\tmetadata\r\n\t\t\t}),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `phoneDigits` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { defaultCountry } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\t\tdefaultCountry = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== defaultCountry) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tconst { country } = this.state\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && country !== prevState.country) {\r\n\t\t\tonCountryChange(country)\r\n\t\t}\r\n\t}\r\n\r\n\tsetInputRef = (instance) => {\r\n\t\tthis.inputRef.current = instance\r\n\t\tconst { inputRef: ref } = this.props\r\n\t\tif (ref) {\r\n\t\t\tif (typeof ref === 'function') {\r\n\t\t\t\tref(instance)\r\n\t\t\t} else {\r\n\t\t\t\tref.current = instance\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountrySelectOptions({ countries }) {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tlocales,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\t\treturn useMemoCountrySelectOptions(() => {\r\n\t\t\treturn sortCountryOptions(\r\n\t\t\t\tgetCountrySelectOptions({\r\n\t\t\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\t\t\tcountryNames: labels,\r\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\r\n\t\t\t\t\tcompareStringsLocales: locales,\r\n\t\t\t\t\t// compareStrings\r\n\t\t\t\t}),\r\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\r\n\t\t\t)\r\n\t\t}, [\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tmetadata\r\n\t\t])\r\n\t}\r\n\r\n\tgetFirstSupportedCountry({ countries }) {\r\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\r\n\t\treturn countryOptions[0].value\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (newCountry) => {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tfocusInputOnCountrySelection\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: prevCountry\r\n\t\t} = this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\r\n\t\t\tprevCountry,\r\n\t\t\tnewCountry,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\tuseNationalFormat: !international\r\n\t\t})\r\n\r\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tif (focusInputOnCountrySelection) {\r\n\t\t\tthis.inputRef.current.focus()\r\n\t\t}\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountry: newCountry,\r\n\t\t\thasUserSelectedACountry: true,\r\n\t\t\tphoneDigits: newPhoneDigits,\r\n\t\t\tvalue: newValue\r\n\t\t},\r\n\t\t() => {\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(newValue)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_phoneDigits) => {\r\n\t\tconst {\r\n\t\t\tdefaultCountry,\r\n\t\t\tonChange,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry\r\n\t\t} = this.state\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tcountryRequired: !addInternationalOption,\r\n\t\t\tdefaultCountry,\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst stateUpdate = {\r\n\t\t\tphoneDigits,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t}\r\n\r\n\t\tif (countryCallingCodeEditable === false) {\r\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\r\n\t\t\t// then it would have no effect when erasing an inital international prefix\r\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t// forcefully rerendered here.\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\r\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\r\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\r\n\t\t\t\tstateUpdate.forceRerender = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\tstateUpdate,\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\t() => onChange(value)\r\n\t\t)\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tthis._onBlur()\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\t// this.setState({ countrySelectFocused: true })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onFocus } = countrySelectProps\r\n\t\t\tif (onFocus) {\r\n\t\t\t\tonFocus(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryBlur = (event) => {\r\n\t\tthis._onBlur()\r\n\t\t// this.setState({ countrySelectFocused: false })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onBlur } = countrySelectProps\r\n\t\t\tif (onBlur) {\r\n\t\t\t\tonBlur(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\treturn {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\t// Generic HTML attributes.\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\tautoComplete,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\r\n\t\t\t// Number `<input/>` properties.\r\n\t\t\tinputRef,\r\n\t\t\tinputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\r\n\t\t\t// Country `<select/>` properties.\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\r\n\t\t\t// Container `<div/>` properties.\r\n\t\t\tcontainerComponent: ContainerComponent,\r\n\r\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries: countriesProperty,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagUrl,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternationalIcon,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tfocusInputOnCountrySelection,\r\n\t\t\treset,\r\n\t\t\tmetadata,\r\n\t\t\tinternational,\r\n\t\t\tlocales,\r\n\t\t\t// compareStrings,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\r\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\r\n\r\n\t\treturn (\r\n\t\t\t<ContainerComponent\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\r\n\t\t\t\t\t'PhoneInput--focus': isFocused\r\n\t\t\t\t})}>\r\n\r\n\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\r\n\t\t\t\t\taria-label={labels.country}\r\n\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\tvalue={country}\r\n\t\t\t\t\toptions={countrySelectOptions}\r\n\t\t\t\t\tonChange={this.onCountryChange}\r\n\t\t\t\t\tonFocus={this.onCountryFocus}\r\n\t\t\t\t\tonBlur={this.onCountryBlur}\r\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\r\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\r\n\r\n\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t<InputComponent\r\n\t\t\t\t\tref={this.setInputRef}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tmetadata={metadata}\r\n\t\t\t\t\tcountry={country}\r\n\t\t\t\t\tvalue={phoneDigits || ''}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\tinputComponent={inputComponent}\r\n\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t'PhoneInputInput',\r\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\r\n\t\t\t\t\t\trest.className\r\n\t\t\t\t\t)}/>\r\n\t\t\t</ContainerComponent>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\r\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\r\n\t<PhoneNumberInput_ {...props} inputRef={ref}/>\r\n))\r\n\r\nPhoneNumberInput.propTypes = {\r\n\t/**\r\n\t * Phone number in `E.164` format.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `\"+12223333333\"`\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t *\r\n\t * Updates the `value` property as the user inputs a phone number.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * Toggles the `--focus` CSS class.\r\n\t * @ignore\r\n\t */\r\n\tonFocus: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onBlur` is usually passed by `redux-form`.\r\n\t * @ignore\r\n\t */\r\n\tonBlur: PropTypes.func,\r\n\r\n\t/**\r\n\t * Set to `true` to disable both the phone number `<input/>`\r\n\t * and the country `<select/>`.\r\n\t */\r\n\tdisabled: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t *\r\n\t * Web browser's \"autocomplete\" feature\r\n\t * remembers the phone number being input\r\n\t * and can also autofill the `<input/>`\r\n\t * with previously remembered phone numbers.\r\n\t *\r\n\t * https://developers.google.com\r\n\t * /web/updates/2015/06/checkout-faster-with-autofill\r\n\t *\r\n\t * For example, can be used to turn it off:\r\n\t *\r\n\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t *  One example is when you've implemented your own version\r\n\t *  of autocomplete for search. Another example is any form field\r\n\t *  where users will input and submit different kinds of information\r\n\t *  where it would not be useful to have the browser remember\r\n\t *  what was submitted previously\".\r\n\t */\r\n\t// (is `\"tel\"` by default)\r\n\tautoComplete: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Set to `\"national\"` to show the initial `value` in\r\n\t * \"national\" format rather than \"international\".\r\n\t *\r\n\t * For example, if `initialValueFormat` is `\"national\"`\r\n\t * and the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t *\r\n\t * By default, `initialValueFormat` is `undefined`,\r\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t *\r\n\t * The reason for such default behaviour is that\r\n\t * the newer generation grows up when there are no stationary phones\r\n\t * and therefore everyone inputs phone numbers in international format\r\n\t * in their smartphones so people gradually get more accustomed to\r\n\t * writing phone numbers in international format rather than in local format.\r\n\t * Future people won't be using \"national\" format, only \"international\".\r\n\t */\r\n\t// (is `undefined` by default)\r\n\tinitialValueFormat: PropTypes.oneOf(['national']),\r\n\r\n\t// `displayInitialValueAsLocalNumber` property has been\r\n\t// superceded by `initialValueFormat` property.\r\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\r\n\r\n\t/**\r\n\t * The country to be selected by default.\r\n\t * For example, can be set after a GeoIP lookup.\r\n\t *\r\n\t * Example: `\"US\"`.\r\n\t */\r\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If specified, only these countries will be available for selection.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t */\r\n\tcountries: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * Custom country `<select/>` option names.\r\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t *\r\n\t * See the `locales` directory for examples.\r\n\t */\r\n\tlabels: labelsPropType.isRequired,\r\n\r\n\t/**\r\n\t * Country `<select/>` options are sorted by their labels.\r\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\r\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n\t * Some languages, like Chinese, support multiple sorting variants\r\n\t * (called \"collations\"), and the user might prefer one or another.\r\n\t * Also, sometimes the Operating System language is not always\r\n\t * the preferred language for a person using a website or an application,\r\n\t * so there should be a way to specify custom locale.\r\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n\t */\r\n\tlocales: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.arrayOf(PropTypes.string)\r\n\t]),\r\n\r\n\t/*\r\n\t * Custom country `<select/>` options sorting function.\r\n\t * The default one uses `a.localeCompare(b)`, and,\r\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\r\n\t * There have been requests to add custom sorter for cases\r\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n\tcompareStrings: PropTypes.func,\r\n\t */\r\n\r\n\t/**\r\n\t * A URL template of a country flag, where\r\n\t * \"{XX}\" is a two-letter country code in upper case,\r\n\t * or where \"{xx}\" is a two-letter country code in lower case.\r\n\t * By default it points to `country-flag-icons` gitlab pages website.\r\n\t * I imagine someone might want to download those country flag icons\r\n\t * and host them on their own servers instead\r\n\t * (all flags are available in the `country-flag-icons` library).\r\n\t * There's a catch though: new countries may be added in future,\r\n\t * so when hosting country flag icons on your own server\r\n\t * one should check the `CHANGELOG.md` every time before updating this library,\r\n\t * otherwise there's a possibility that some new country flag would be missing.\r\n\t */\r\n\tflagUrl: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Custom country flag icon components.\r\n\t * These flags will be used instead of the default ones.\r\n\t * The the \"Flags\" section of the readme for more info.\r\n\t *\r\n\t * The shape is an object where keys are country codes\r\n\t * and values are flag icon components.\r\n\t * Flag icon components receive the same properties\r\n\t * as `flagComponent` (see below).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `import flags from 'country-flag-icons/react/3x2'`\r\n\t *\r\n\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t *\r\n\t * `<PhoneInput flags={flags} .../>`\r\n\t */\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t/**\r\n\t * Country flag icon component.\r\n\t *\r\n\t * Takes properties:\r\n\t *\r\n\t * * `country: string` — The country code.\r\n\t * * `countryName: string` — The country name.\r\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\r\n\t * * `flags: object` — The `flags` property (see above).\r\n\t */\r\n\tflagComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n\t */\r\n\taddInternationalOption: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * \"International\" icon component.\r\n\t * Should have the same aspect ratio.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `title: string` — \"International\" country option label.\r\n\t */\r\n\tinternationalIcon: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t *\r\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\r\n\t * * `\"🌐\"` — inserts \"International\" option.\r\n\t * * `\"|\"` — inserts a separator.\r\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t */\r\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS style object.\r\n\t */\r\n\tstyle: PropTypes.object,\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS class.\r\n\t */\r\n\tclassName: PropTypes.string,\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `name: string?` — HTML `name` attribute.\r\n\t * * `value: string?` — The currently selected country code.\r\n\t * * `onChange(value: string?)` — Updates the `value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\r\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n\t * * `className: string` — CSS class name.\r\n\t */\r\n\tcountrySelectComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Country `<select/>` component props.\r\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n\t */\r\n\tcountrySelectProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `value: string` — The formatted `value`.\r\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t *\r\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t */\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `style: object` — A component CSS style object.\r\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n\t */\r\n\tcontainerComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component props.\r\n\t */\r\n\tnumberInputProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n\t * the caret position is moved right before the next available digit skipping\r\n\t * any punctuation in between. This is called \"smart\" caret positioning.\r\n\t * Another case would be the phone number format changing as a result of\r\n\t * the user inserting the digit somewhere in the middle, which would require\r\n\t * re-positioning the caret because all digit positions have changed.\r\n\t * This \"smart\" caret positioning feature can be turned off by passing\r\n\t * `smartCaret={false}` property: use it in case of any possible issues\r\n\t * with caret position during phone number input.\r\n\t */\r\n\t// Is `true` by default.\r\n\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * Set to `true` to force \"international\" phone number format.\r\n\t * Set to `false` to force \"national\" phone number format.\r\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `true`, the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t *\r\n\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t */\r\n\tmetadata: metadataPropType.isRequired,\r\n\r\n\t/**\r\n\t * Is called every time the selected country changes:\r\n\t * either programmatically or when user selects it manually from the list.\r\n\t */\r\n\t// People have been asking for a way to get the selected country.\r\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t// For some it's just a \"business requirement\".\r\n\t// I guess it's about gathering as much info on the user as a website can\r\n\t// without introducing any addional fields that would complicate the form\r\n\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t// Assuming that the phone number's country is the user's country\r\n\t// is not 100% correct but in most cases I guess it's valid.\r\n\tonCountryChange: PropTypes.func,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: PropTypes.bool.isRequired\r\n}\r\n\r\nPhoneNumberInput.defaultProps = {\r\n\t/**\r\n\t * Remember (and autofill) the value as a phone number.\r\n\t */\r\n\tautoComplete: 'tel',\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t */\r\n\tcountrySelectComponent: CountrySelect,\r\n\r\n\t/**\r\n\t * Flag icon component.\r\n\t */\r\n\tflagComponent: Flag,\r\n\r\n\t/**\r\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n\t */\r\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\r\n\t/**\r\n\t * Default \"International\" country `<select/>` option icon.\r\n\t */\r\n\tinternationalIcon: InternationalIcon,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t */\r\n\tinputComponent: 'input',\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t */\r\n\tcontainerComponent: 'div',\r\n\r\n\t/**\r\n\t * Some users requested a way to reset the component:\r\n\t * both number `<input/>` and country `<select/>`.\r\n\t * Whenever `reset` property changes both number `<input/>`\r\n\t * and country `<select/>` are reset.\r\n\t * It's not implemented as some instance `.reset()` method\r\n\t * because `ref` is forwarded to `<input/>`.\r\n\t * It's also not replaced with just resetting `country` on\r\n\t * external `value` reset, because a user could select a country\r\n\t * and then not input any `value`, and so the selected country\r\n\t * would be \"stuck\", if not using this `reset` property.\r\n\t */\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\treset: PropTypes.any,\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t */\r\n\tsmartCaret: true,\r\n\r\n\t/**\r\n\t * Whether to add the \"International\" option\r\n\t * to the list of countries.\r\n\t */\r\n\taddInternationalOption: true,\r\n\r\n\t/**\r\n\t * If set to `true` the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: false,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: true,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: true\r\n}\r\n\r\nexport default PhoneNumberInput\r\n\r\nlet countrySelectOptionsMemo\r\nlet countrySelectOptionsMemoDependencies\r\nfunction useMemoCountrySelectOptions(generator, dependencies) {\r\n\tif (!countrySelectOptionsMemoDependencies ||\r\n\t\t!areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\r\n\t\tcountrySelectOptionsMemo = generator()\r\n\t\tcountrySelectOptionsMemoDependencies = dependencies\r\n\t}\r\n\treturn countrySelectOptionsMemo\r\n}\r\n\r\nfunction areEqualArrays(a, b) {\r\n\tif (a.length !== b.length) {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 0\r\n\twhile (i < a.length) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport labels from '../locale/en.json'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes'\r\n\r\nimport PhoneInput from './PhoneInputWithCountry'\r\n\r\nexport function createPhoneInput(defaultMetadata) {\r\n\tconst PhoneInputDefault = React.forwardRef((props, ref) => (\r\n\t\t<PhoneInput ref={ref} {...props}/>\r\n\t))\r\n\r\n\tPhoneInputDefault.propTypes = {\r\n\t\tmetadata: metadataPropType.isRequired,\r\n\t\tlabels: labelsPropType.isRequired\r\n\t}\r\n\r\n\tPhoneInputDefault.defaultProps = {\r\n\t\tmetadata: defaultMetadata,\r\n\t\tlabels\r\n\t}\r\n\r\n\treturn PhoneInputDefault\r\n}\r\n\r\nexport default createPhoneInput()","import metadata from 'libphonenumber-js/metadata.min.json'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tisSupportedCountry as _isSupportedCountry\r\n} from '../core/index'\r\n\r\nimport { createPhoneInput } from '../modules/PhoneInputWithCountryDefault'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createPhoneInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\r\n//\r\n// Example:\r\n//\r\n// value - '88005553535'\r\n// caret - 2 // starting from 0; is positioned before the first zero\r\n// operation - 'Backspace'\r\n//\r\n// Returns\r\n// {\r\n// \tvalue: '8005553535'\r\n// \tcaret: 1\r\n// }\r\n//\r\n// Currently supports just 'Delete' and 'Backspace' operations\r\n//\r\nexport default function edit(value, caret, operation)\r\n{\r\n\tswitch (operation)\r\n\t{\r\n\t\tcase 'Backspace':\r\n\t\t\t// If there exists the previous character,\r\n\t\t\t// then erase it and reposition the caret.\r\n\t\t\tif (caret > 0)\r\n\t\t\t{\r\n\t\t\t\t// Remove the previous character\r\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret)\r\n\t\t\t\t// Position the caret where the previous (erased) character was\r\n\t\t\t\tcaret--\r\n\t\t\t}\r\n\t\t\tbreak\r\n\r\n\t\tcase 'Delete':\r\n\t\t\t// Remove current digit (if any)\r\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1)\r\n\t\t\tbreak\r\n\t}\r\n\r\n\treturn { value, caret }\r\n}","// Parses the `text`.\r\n//\r\n// Returns `{ value, caret }` where `caret` is\r\n// the caret position inside `value`\r\n// corresponding to the `caret_position` inside `text`.\r\n//\r\n// The `text` is parsed by feeding each character sequentially to\r\n// `parse_character(character, value)` function\r\n// and appending the result (if it's not `undefined`) to `value`.\r\n//\r\n// Example:\r\n//\r\n// `text` is `8 (800) 555-35-35`,\r\n// `caret_position` is `4` (before the first `0`).\r\n// `parse_character` is `(character, value) =>\r\n//   if (character >= '0' && character <= '9') { return character }`.\r\n//\r\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\r\n//\r\nexport default function parse(text, caret_position, parse_character)\r\n{\r\n\tlet value = ''\r\n\r\n\tlet focused_input_character_index = 0\r\n\r\n\tlet index = 0\r\n\twhile (index < text.length)\r\n\t{\r\n\t\tconst character = parse_character(text[index], value)\r\n\r\n\t\tif (character !== undefined)\r\n\t\t{\r\n\t\t\tvalue += character\r\n\r\n\t\t\tif (caret_position !== undefined)\r\n\t\t\t{\r\n\t\t\t\tif (caret_position === index)\r\n\t\t\t\t{\r\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (caret_position > index)\r\n\t\t\t\t{\r\n\t\t\t\t\tfocused_input_character_index = value.length\r\n\t\t\t\t}\r\n\t\t\t }\r\n\t\t}\r\n\r\n\t\tindex++\r\n\t}\r\n\r\n\t// If caret position wasn't specified\r\n\tif (caret_position === undefined)\r\n\t{\r\n\t\t// Then set caret position to \"after the last input character\"\r\n\t\tfocused_input_character_index = value.length\r\n\t}\r\n\r\n\tconst result =\r\n\t{\r\n\t\tvalue,\r\n\t\tcaret : focused_input_character_index\r\n\t}\r\n\r\n\treturn result\r\n}","// Counts all occurences of a symbol in a string\r\nexport function count_occurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes)\r\n\t// but template placeholder characters don't fall into that range\r\n\t// so skipping such miscellaneous \"exotic\" characters\r\n\t// won't matter here for just counting placeholder character occurrences.\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}","import { count_occurences } from './helpers'\r\n\r\nexport default function closeBraces(retained_template, template, placeholder = 'x', empty_placeholder = ' ')\r\n{\r\n\tlet cut_before = retained_template.length\r\n\r\n\tconst opening_braces = count_occurences('(', retained_template)\r\n\tconst closing_braces = count_occurences(')', retained_template)\r\n\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\r\n\twhile (dangling_braces > 0 && cut_before < template.length)\r\n\t{\r\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder)\r\n\r\n\t\tif (template[cut_before] === ')')\r\n\t\t{\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\r\n\t\tcut_before++\r\n\t}\r\n\r\n\treturn retained_template\r\n}\r\n","import { count_occurences } from './helpers'\r\nimport close_braces from './closeBraces'\r\n\r\n// Takes a `template` where character placeholders\r\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\r\n//\r\n// Returns a function which takes `value` characters\r\n// and returns the `template` filled with those characters.\r\n// If the `template` can only be partially filled\r\n// then it is cut off.\r\n//\r\n// If `should_close_braces` is `true`,\r\n// then it will also make sure all dangling braces are closed,\r\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\r\n//\r\nexport default function(template, placeholder = 'x', should_close_braces)\r\n{\r\n\tif (!template)\r\n\t{\r\n\t\treturn value => ({ text: value })\r\n\t}\r\n\r\n\tconst characters_in_template = count_occurences(placeholder, template)\r\n\r\n\treturn function(value)\r\n\t{\r\n\t\tif (!value)\r\n\t\t{\r\n\t\t\treturn { text: '', template }\r\n\t\t}\r\n\r\n\t\tlet value_character_index = 0\r\n\t\tlet filled_in_template = ''\r\n\r\n\t\t// Using `.split('')` here instead of normal `for ... of`\r\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t\t// (the ones consisting of four bytes)\r\n\t\t// but template placeholder characters don't fall into that range\r\n\t\t// and appending UTF-8 characters to a string in parts still works.\r\n\t\tfor (const character of template.split(''))\r\n\t\t{\r\n\t\t\tif (character !== placeholder)\r\n\t\t\t{\r\n\t\t\t\tfilled_in_template += character\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tfilled_in_template += value[value_character_index]\r\n\t\t\tvalue_character_index++\r\n\r\n\t\t\t// If the last available value character has been filled in,\r\n\t\t\t// then return the filled in template\r\n\t\t\t// (either trim the right part or retain it,\r\n\t\t\t//  if no more character placeholders in there)\r\n\t\t\tif (value_character_index === value.length)\r\n\t\t\t{\r\n\t\t\t\t// If there are more character placeholders\r\n\t\t\t\t// in the right part of the template\r\n\t\t\t\t// then simply trim it.\r\n\t\t\t\tif (value.length < characters_in_template)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (should_close_braces)\r\n\t\t{\r\n\t\t\tfilled_in_template = close_braces(filled_in_template, template)\r\n\t\t}\r\n\r\n\t\treturn { text: filled_in_template, template }\r\n\t}\r\n}","import template_formatter from './templateFormatter'\r\n\r\n// Formats `value` value preserving `caret` at the same character.\r\n//\r\n// `{ value, caret }` attribute is the result of `parse()` function call.\r\n//\r\n// Returns `{ text, caret }` where the new `caret` is the caret position\r\n// inside `text` text corresponding to the original `caret` position inside `value`.\r\n//\r\n// `formatter(value)` is a function returning `{ text, template }`.\r\n//\r\n// `text` is the `value` value formatted using `template`.\r\n// It may either cut off the non-filled right part of the `template`\r\n// or it may fill the non-filled character placeholders\r\n// in the right part of the `template` with `spacer`\r\n// which is a space (' ') character by default.\r\n//\r\n// `template` is the template used to format the `value`.\r\n// It can be either a full-length template or a partial template.\r\n//\r\n// `formatter` can also be a string — a `template`\r\n// where character placeholders are denoted by 'x'es.\r\n// In this case `formatter` function is automatically created.\r\n//\r\n// Example:\r\n//\r\n// `value` is '880',\r\n// `caret` is `2` (before the first `0`)\r\n//\r\n// `formatter` is `'880' =>\r\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\r\n//\r\n// The result is `{ text: '8 (80 )', caret: 4 }`.\r\n//\r\nexport default function format(value, caret, formatter)\r\n{\r\n\tif (typeof formatter === 'string')\r\n\t{\r\n\t\tformatter = template_formatter(formatter)\r\n\t}\r\n\r\n\tlet { text, template } = formatter(value) || {}\r\n\r\n\tif (text === undefined)\r\n\t{\r\n\t\t text = value\r\n\t}\r\n\r\n\tif (template)\r\n\t{\r\n\t\tif (caret === undefined)\r\n\t\t{\r\n\t\t\tcaret = text.length\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlet index = 0\r\n\t\t\tlet found = false\r\n\r\n\t\t\tlet possibly_last_input_character_index = -1\r\n\r\n\t\t\twhile (index < text.length && index < template.length)\r\n\t\t\t{\r\n\t\t\t\t// Character placeholder found\r\n\t\t\t\tif (text[index] !== template[index])\r\n\t\t\t\t{\r\n\t\t\t\t\tif (caret === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true\r\n\t\t\t\t\t\tcaret = index\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpossibly_last_input_character_index = index\r\n\r\n\t\t\t\t\tcaret--\r\n\t\t\t\t}\r\n\r\n\t\t\t\tindex++\r\n\t\t\t}\r\n\r\n\t\t\t// If the caret was positioned after last input character,\r\n\t\t\t// then the text caret index is just after the last input character.\r\n\t\t\tif (!found)\r\n\t\t\t{\r\n\t\t\t\tcaret = possibly_last_input_character_index + 1\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { text, caret }\r\n}","export function isReadOnly(element)\r\n{\r\n\treturn element.hasAttribute('readonly')\r\n}\r\n\r\n// Gets <input/> selection bounds\r\nexport function getSelection(element)\r\n{\r\n\t// If no selection, return nothing\r\n\tif (element.selectionStart === element.selectionEnd)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\treturn { start: element.selectionStart, end: element.selectionEnd }\r\n}\r\n\r\n// Key codes\r\nexport const Keys =\r\n{\r\n\tBackspace : 8,\r\n\tDelete    : 46\r\n}\r\n\r\n// Finds out the operation to be intercepted and performed\r\n// based on the key down event `keyCode`.\r\nexport function getOperation(event)\r\n{\r\n\tswitch (event.keyCode)\r\n\t{\r\n\t\tcase Keys.Backspace:\r\n\t\t\treturn 'Backspace'\r\n\r\n\t\tcase Keys.Delete:\r\n\t\t\treturn 'Delete'\r\n\t}\r\n}\r\n\r\n// Gets <input/> caret position\r\nexport function getCaretPosition(element)\r\n{\r\n\treturn element.selectionStart\r\n}\r\n\r\n// Sets <input/> caret position\r\nexport function setCaretPosition(element, caret_position)\r\n{\r\n\t// Sanity check\r\n\tif (caret_position === undefined)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Set caret position.\r\n\t// There has been an issue with caret positioning on Android devices.\r\n\t// https://github.com/catamphetamine/input-format/issues/2\r\n\t// I was revisiting this issue and looked for similar issues in other libraries.\r\n\t// For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\r\n\t// They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\r\n\t// The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\r\n\t// https://github.com/text-mask/text-mask/issues/300\r\n\t// They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\r\n\t// https://github.com/text-mask/text-mask/pull/400/files\r\n\t// I've implemented the same workaround here.\r\n\tif (isAndroid()) {\r\n      setTimeout(() => element.setSelectionRange(caret_position, caret_position), 0)\r\n\t} else {\r\n\t\telement.setSelectionRange(caret_position, caret_position)\r\n\t}\r\n}\r\n\r\nfunction isAndroid() {\r\n\t// `navigator` is not defined when running mocha tests.\r\n\tif (typeof navigator !== 'undefined') {\r\n\t\treturn ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent)\r\n\t}\r\n}\r\n\r\nconst ANDROID_USER_AGENT_REG_EXP = /Android/i","import edit   from './edit'\r\nimport parse  from './parse'\r\nimport format from './format'\r\n\r\nimport\r\n{\r\n\tisReadOnly,\r\n\tgetOperation,\r\n\tgetSelection,\r\n\tgetCaretPosition,\r\n\tsetCaretPosition\r\n}\r\nfrom './dom'\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onCut(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// The actual cut hasn't happened just yet hence the timeout.\r\n\tsetTimeout(() => formatInputText(input, _parse, _format, undefined, on_change), 0)\r\n}\r\n\r\n// Deprecated.\r\n// I don't know why this function exists.\r\nexport function onPaste(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst selection = getSelection(input)\r\n\r\n\t// If selection is made,\r\n\t// just erase the selected text\r\n\t// prior to pasting\r\n\tif (selection)\r\n\t{\r\n\t\teraseSelection(input, selection)\r\n\t}\r\n\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\nexport function onChange(event, input, _parse, _format, on_change)\r\n{\r\n\tformatInputText(input, _parse, _format, undefined, on_change)\r\n}\r\n\r\n// \"Delete\" and \"Backspace\" keys are special\r\n// in a way that they're not handled by the regular `onChange()` handler\r\n// and instead are intercepted and re-applied manually.\r\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\r\n// results in erasing a character, but that character might be any character,\r\n// while it would be a better \"user experience\" if it erased not just any character\r\n// but the closest \"meaningful\" character.\r\n// For example, if a template is `(xxx) xxx-xxxx`,\r\n// and the `<input/>` value is `(111) 222-3333`,\r\n// then, if a user begins erasing the `3333` part via \"Backspace\"\r\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\r\n// Nothing wrong with that, but it would be a better \"user experience\"\r\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\r\n// character, which would be the rightmost `2`.\r\n// So, what this `onKeyDown()` handler does is it intercepts\r\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\r\n// following the logic described above.\r\nexport function onKeyDown(event, input, _parse, _format, on_change)\r\n{\r\n\tif (isReadOnly(input)) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst operation = getOperation(event)\r\n\tswitch (operation)\r\n\t{\r\n\t\tcase 'Delete':\r\n\t\tcase 'Backspace':\r\n\t\t\t// Intercept this operation and perform it manually.\r\n\t\t\tevent.preventDefault()\r\n\r\n\t\t\tconst selection = getSelection(input)\r\n\r\n\t\t\t// If a selection is made, just erase the selected text.\r\n\t\t\tif (selection)\r\n\t\t\t{\r\n\t\t\t\teraseSelection(input, selection)\r\n\t\t\t\treturn formatInputText(input, _parse, _format, undefined, on_change)\r\n\t\t\t}\r\n\r\n\t\t\t// Else, perform the (character erasing) operation manually.\r\n\t\t\treturn formatInputText(input, _parse, _format, operation, on_change)\r\n\r\n\t\tdefault:\r\n\t\t\t// Will be handled normally as part of the `onChange` handler.\r\n\t}\r\n}\r\n\r\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\r\nfunction eraseSelection(input, selection)\r\n{\r\n\tlet text = input.value\r\n\ttext = text.slice(0, selection.start) + text.slice(selection.end)\r\n\r\n\tinput.value = text\r\n\tsetCaretPosition(input, selection.start)\r\n}\r\n\r\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\r\nfunction formatInputText(input, _parse, _format, operation, on_change)\r\n{\r\n\t// Parse `<input/>` textual value.\r\n\t// Get the `value` and `caret` position.\r\n\tlet { value, caret } = parse(input.value, getCaretPosition(input), _parse)\r\n\r\n\t// If a user performed an operation (\"Backspace\", \"Delete\")\r\n\t// then apply that operation and get the new `value` and `caret` position.\r\n\tif (operation)\r\n\t{\r\n\t\tconst newValueAndCaret = edit(value, caret, operation)\r\n\r\n\t\tvalue = newValueAndCaret.value\r\n\t\tcaret = newValueAndCaret.caret\r\n\t}\r\n\r\n\t// Format the `value`.\r\n\t// (and reposition the caret accordingly)\r\n\tconst formatted = format(value, caret, _format)\r\n\r\n\tconst text = formatted.text\r\n\tcaret      = formatted.caret\r\n\r\n\t// Set `<input/>` textual value manually\r\n\t// to prevent React from resetting the caret position\r\n\t// later inside a subsequent `render()`.\r\n\t// Doesn't work for custom `inputComponent`s for some reason.\r\n\tinput.value = text\r\n\t// Position the caret properly.\r\n\tsetCaretPosition(input, caret)\r\n\r\n\t// If the `<input/>` textual value did change,\r\n\t// then the parsed `value` may have changed too.\r\n\ton_change(value)\r\n}","// This is just `./ReactInput.js` rewritten in Hooks.\r\n\r\nimport React, { useCallback, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n\tonChange as onInputChange,\r\n\tonKeyDown as onInputKeyDown\r\n} from '../inputControl'\r\n\r\n// Usage:\r\n//\r\n// <ReactInput\r\n// \tvalue={this.state.phone}\r\n// \tonChange={phone => this.setState({ phone })}\r\n// \tparse={character => character}\r\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\r\n//\r\nfunction Input({\r\n\tvalue,\r\n\tparse,\r\n\tformat,\r\n\tinputComponent: InputComponent,\r\n\tonChange,\r\n\tonKeyDown,\r\n\t...rest\r\n}, ref) {\r\n\tconst internalRef = useRef();\r\n\tconst setRef = useCallback((instance) => {\r\n\t\tinternalRef.current = instance;\r\n\t\tif (ref) {\r\n\t\t\tif (typeof ref === 'function') {\r\n\t\t\t\tref(instance)\r\n\t\t\t} else {\r\n\t\t\t\tref.current = instance\r\n\t\t\t}\r\n\t\t}\r\n\t}, [ref]);\r\n\tconst _onChange = useCallback((event) => {\r\n\t\treturn onInputChange(\r\n\t\t\tevent,\r\n\t\t\tinternalRef.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [internalRef, parse, format, onChange])\r\n\r\n\tconst _onKeyDown = useCallback((event) => {\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t\treturn onInputKeyDown(\r\n\t\t\tevent,\r\n\t\t\tinternalRef.current,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tonChange\r\n\t\t)\r\n\t}, [internalRef, parse, format, onChange, onKeyDown])\r\n\r\n\treturn (\r\n\t\t<InputComponent\r\n\t\t\t{...rest}\r\n\t\t\tref={setRef}\r\n\t\t\tvalue={format(isEmptyValue(value) ? '' : value).text}\r\n\t\t\tonKeyDown={_onKeyDown}\r\n\t\t\tonChange={_onChange}/>\r\n\t)\r\n}\r\n\r\nInput = React.forwardRef(Input)\r\n\r\nInput.propTypes = {\r\n\t// Parses a single characher of `<input/>` text.\r\n\tparse: PropTypes.func.isRequired,\r\n\r\n\t// Formats `value` into `<input/>` text.\r\n\tformat: PropTypes.func.isRequired,\r\n\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: PropTypes.string.isRequired,\r\n\r\n\t// Is parsed from <input/> text.\r\n\tvalue: PropTypes.string,\r\n\r\n\t// This handler is called each time `<input/>` text is changed.\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// Passthrough\r\n\tonKeyDown: PropTypes.func,\r\n\tonCut: PropTypes.func,\r\n\tonPaste: PropTypes.func\r\n}\r\n\r\nInput.defaultProps = {\r\n\t// Renders `<input/>` by default.\r\n\tinputComponent: 'input',\r\n\r\n\t// `<input/>` `type` attribute.\r\n\ttype: 'text'\r\n}\r\n\r\nexport default Input\r\n\r\nfunction isEmptyValue(value) {\r\n\treturn value === undefined || value === null\r\n}","import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Input from 'input-format/react'\r\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix'\r\n\r\nexport function createInput(defaultMetadata)\r\n{\r\n\t/**\r\n\t * `InputSmart` is a \"smarter\" implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's and maintains the caret's position in the process.\r\n\t * The caret positioning is maintained using `input-format` library.\r\n\t * Relies on being run in a DOM environment for calling caret positioning functions.\r\n\t */\r\n\tfunction InputSmart({\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst format = useCallback((value) => {\r\n\t\t\t// \"As you type\" formatter.\r\n\t\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t\tconst prefix = getInputValuePrefix({\r\n\t\t\t\tcountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\twithCountryCallingCode,\r\n\t\t\t\tmetadata\r\n\t\t\t})\r\n\t\t\t// Format the number.\r\n\t\t\tlet text = formatter.input(prefix + value)\r\n\t\t\tlet template = formatter.getTemplate()\r\n\t\t\tif (prefix) {\r\n\t\t\t\ttext = removeInputValuePrefix(text, prefix)\r\n\t\t\t\t// `AsYouType.getTemplate()` can be `undefined`.\r\n\t\t\t\tif (template) {\r\n\t\t\t\t\ttemplate = removeInputValuePrefix(template, prefix)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ttext,\r\n\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}, [country, metadata])\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tparse={parsePhoneNumberCharacter}\r\n\t\t\t\tformat={format}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputSmart = React.forwardRef(InputSmart)\r\n\r\n\tInputSmart.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tInputSmart.defaultProps = {\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn InputSmart\r\n}\r\n\r\nexport default createInput()","import { useRef, useState, useCallback, useEffect } from 'react'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix'\r\n\r\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\r\nexport default function usePhoneDigits({\r\n\tvalue,\r\n\tonChange,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n}) {\r\n\tconst countryMismatchDetected = useRef()\r\n\tconst onCountryMismatch = (value, country, actualCountry) => {\r\n\t\tconsole.error(`[react-phone-number-input] Expected phone number ${value} to correspond to country ${country} but ${actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t'}.`)\r\n\t\tcountryMismatchDetected.current = true\r\n\t}\r\n\r\n\tconst getInitialPhoneDigits = (options) => {\r\n\t\treturn getPhoneDigitsForValue(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tdefaultCountry,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata,\r\n\t\t\t(...args) => {\r\n\t\t\t\tif (options && options.onCountryMismatch) {\r\n\t\t\t\t\toptions.onCountryMismatch()\r\n\t\t\t\t}\r\n\t\t\t\tonCountryMismatch.apply(this, args)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\t// This is only used to detect `country` property change.\r\n\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\t// This is only used to detect `defaultCountry` property change.\r\n\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\t// `phoneDigits` is the `value` passed to the `<input/>`.\r\n\tconst [phoneDigits, setPhoneDigits] = useState(getInitialPhoneDigits())\r\n\t// This is only used to detect `value` property changes.\r\n\tconst [valueForPhoneDigits, setValueForPhoneDigits] = useState(value)\r\n\r\n\t// Rerender hack.\r\n\tconst [rerenderTrigger, setRerenderTrigger] = useState()\r\n\tconst rerender = useCallback(() => setRerenderTrigger({}), [setRerenderTrigger])\r\n\r\n\tfunction getValueForPhoneDigits(phoneDigits) {\r\n\t\t// If the user hasn't input any digits then `value` is `undefined`.\r\n\t\tif (!phoneDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (country && international && !withCountryCallingCode) {\r\n\t\t\tphoneDigits = `+${getCountryCallingCode(country, metadata)}${phoneDigits}`\r\n\t\t}\r\n\t\t// Return the E.164 phone number value.\r\n\t\t//\r\n\t\t// Even if no \"national (significant) number\" digits have been input,\r\n\t\t// still return a non-`undefined` value.\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t\t//\r\n\t\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t\t// a \"weird\" behavior.\r\n\t\t//\r\n\t\t// The only case when there's any input and `getNumberValue()` still returns `undefined`\r\n\t\t// is when that input is `\"+\"`.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\tasYouType.input(phoneDigits)\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\r\n\t// If `value` property has been changed externally\r\n\t// then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (value !== valueForPhoneDigits) {\r\n\t\t\tsetValueForPhoneDigits(value)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [value])\r\n\r\n\t// If the `country` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (country !== prevCountry) {\r\n\t\t\tsetPrevCountry(country)\r\n\t\t\tlet countryMismatchDetected\r\n\t\t\tconst phoneDigits = getInitialPhoneDigits({\r\n\t\t\t\tonCountryMismatch() {\r\n\t\t\t\t\tcountryMismatchDetected = true\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetPhoneDigits(phoneDigits)\r\n\t\t\tif (countryMismatchDetected) {\r\n\t\t\t\tsetValueForPhoneDigits(getValueForPhoneDigits(phoneDigits))\r\n\t\t\t}\r\n\t\t}\r\n\t}, [country])\r\n\r\n\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [defaultCountry])\r\n\r\n\t// Update the `value` after `valueForPhoneDigits` has been updated.\r\n\tuseEffect(() => {\r\n\t\tif (valueForPhoneDigits !== value) {\r\n\t\t\tonChange(valueForPhoneDigits)\r\n\t\t}\r\n\t}, [valueForPhoneDigits])\r\n\r\n\tconst onSetPhoneDigits = useCallback((phoneDigits) => {\r\n\t\tlet value\r\n\t\tif (country) {\r\n\t\t\tif (international && withCountryCallingCode) {\r\n\t\t\t\t// The `<input/>` value must start with the country calling code.\r\n\t\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t\t\t// If a user tabs into a phone number input field\r\n\t\t\t\t\t// that is `international` and `withCountryCallingCode`,\r\n\t\t\t\t\t// and then starts inputting local phone number digits,\r\n\t\t\t\t\t// the first digit would get \"swallowed\" if the fix below wasn't implemented.\r\n\t\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// // Reset phone digits if they don't start with the correct prefix.\r\n\t\t\t\t\t\t// // Undo the `<input/>` value change if it doesn't.\r\n\t\t\t\t\t\tif (countryMismatchDetected.current) {\r\n\t\t\t\t\t\t\t// In case of a `country`/`value` mismatch,\r\n\t\t\t\t\t\t\t// if it performed an \"undo\" here, then\r\n\t\t\t\t\t\t\t// it wouldn't let a user edit their phone number at all,\r\n\t\t\t\t\t\t\t// so this special case at least allows phone number editing\r\n\t\t\t\t\t\t\t// when `value` already doesn't match the `country`.\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// If it simply did `phoneDigits = prefix` here,\r\n\t\t\t\t\t\t\t// then it could have no effect when erasing phone number\r\n\t\t\t\t\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t\t\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t\t\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t\t\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t\t\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t\t\t\t\t// forcefully rerendered here.\r\n\t\t\t\t\t\t\tsetPhoneDigits(prefix)\r\n\t\t\t\t\t\t\tsetValueForPhoneDigits(undefined)\r\n\t\t\t\t\t\t\t// Force a re-render of the `<input/>` with previous `phoneDigits` value.\r\n\t\t\t\t\t\t\treturn rerender()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Entering phone number either in \"national\" format\r\n\t\t\t\t// when `country` has been specified, or in \"international\" format\r\n\t\t\t\t// when `country` has been specified but `withCountryCallingCode` hasn't.\r\n\t\t\t\t// Therefore, `+` is not allowed.\r\n\t\t\t\tif (phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\t\t\t// Remove the `+`.\r\n\t\t\t\t\tphoneDigits = phoneDigits.slice(1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (!defaultCountry) {\r\n\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t// Prepend a `+`.\r\n\t\t\t\tphoneDigits = '+' + phoneDigits\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Convert `phoneDigits` to `value`.\r\n\t\tif (phoneDigits) {\r\n\t\t\tvalue = getValueForPhoneDigits(phoneDigits)\r\n\t\t}\r\n\t\tsetPhoneDigits(phoneDigits)\r\n\t\tsetValueForPhoneDigits(value)\r\n\t}, [\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tdefaultCountry,\r\n\t\tmetadata,\r\n\t\tsetPhoneDigits,\r\n\t\tsetValueForPhoneDigits,\r\n\t\trerender,\r\n\t\tcountryMismatchDetected\r\n\t])\r\n\r\n\treturn [\r\n\t\tphoneDigits,\r\n\t\tonSetPhoneDigits\r\n\t]\r\n}\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {boolean} [withCountryCallingCode]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getPhoneDigitsForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata,\r\n\tonCountryMismatch\r\n) {\r\n\tif (country && international && withCountryCallingCode) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\tif (value) {\r\n\t\t\tif (value.indexOf(prefix) !== 0) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t\treturn prefix\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tonCountryMismatch(value, country, phoneNumber.country)\r\n\t\t\t} else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\tif (international) {\r\n\t\t\t\treturn phoneNumber.nationalNumber\r\n\t\t\t}\r\n\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t} else {\r\n\t\t\t// `phoneNumber.countryCallingCode` is compared here  instead of\r\n\t\t\t// `phoneNumber.country`, because, for example, a person could have\r\n\t\t\t// previously input a phone number (in \"national\" format) that isn't\r\n\t\t\t// 100% valid for the `defaultCountry`, and if `phoneNumber.country`\r\n\t\t\t// was compared, then it wouldn't match, and such phone number\r\n\t\t\t// wouldn't be formatted as a \"national\" one, and instead would be\r\n\t\t\t// formatted as an \"international\" one, confusing the user.\r\n\t\t\t// Comparing `phoneNumber.countryCallingCode` works around such issues.\r\n\t\t\t//\r\n\t\t\t// Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\r\n\t\t\t// The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\r\n\t\t\t// The user then clicks \"Save\", the page is refreshed, and the user sees\r\n\t\t\t// that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\r\n\t\t\t// the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\r\n\t\t\t// was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\r\n\t\t\t// is not a valid national number for US, and `phoneNumber.country` is compared\r\n\t\t\t// instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\r\n\t\t\t// comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\r\n\t\t\t// is no longer the case.\r\n\t\t\t//\r\n\t\t\tif (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === getCountryCallingCode(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport usePhoneDigits from './usePhoneDigits'\r\n\r\nfunction PhoneInput({\r\n\tComponent,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tvalue,\r\n\tonChange,\r\n\tmetadata,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\t...rest\r\n}, ref) {\r\n\t// \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n\tconst [\r\n\t\tphoneDigits,\r\n\t\tsetPhoneDigits\r\n\t] = usePhoneDigits({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tmetadata\r\n\t})\r\n\treturn (\r\n\t\t<Component\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tmetadata={metadata}\r\n\t\t\tinternational={international}\r\n\t\t\twithCountryCallingCode={withCountryCallingCode}\r\n\t\t\tcountry={country || defaultCountry}\r\n\t\t\tvalue={phoneDigits}\r\n\t\t\tonChange={setPhoneDigits} />\r\n\t)\r\n}\r\n\r\nPhoneInput = React.forwardRef(PhoneInput)\r\n\r\nPhoneInput.propTypes = {\r\n\t/**\r\n\t * The phone number (in E.164 format).\r\n\t * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t * Updates the `value` property.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * as a national phone number (example: `(213) 373-4253`),\r\n\t * or as an international phone number without \"country calling code\"\r\n\t * if `international` property is passed (example: `213 373 4253`).\r\n\t * Example: \"US\".\r\n\t * If no `country` is passed then `value`\r\n\t * is formatted as an international phone number.\r\n\t * (example: `+1 213 373 4253`)\r\n\t */\r\n\tcountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t * The user can still input a phone number in international format.\r\n\t * Example: \"US\".\r\n\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t */\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If `country` property is passed along with `international={true}` property\r\n\t * then the phone number will be input in \"international\" format for that `country`\r\n\t * (without \"country calling code\").\r\n\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t * (without \"country calling code\" `+1`).\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If `country` and `international` properties are set,\r\n\t * then by default it won't include \"country calling code\" in the input field.\r\n\t * To change that, pass `withCountryCallingCode` property,\r\n\t * and it will include \"country calling code\" in the input field.\r\n\t */\r\n\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t/**\r\n\t * A component that renders the `<input/>` itself and also\r\n\t * parses and formats its `value` as the user inputs it.\r\n\t */\r\n\tComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t * then the `value` will be formatted as a national phone number by default.\r\n\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t */\r\n\tmetadata: PropTypes.object.isRequired\r\n}\r\n\r\nPhoneInput.defaultProps = {\r\n\t/**\r\n\t * Set to `true` to force international phone number format\r\n\t * (without \"country calling code\") when `country` is specified.\r\n\t */\r\n\t// international: false,\r\n\r\n\t/**\r\n\t * Prefer national format when formatting E.164 phone number `value`\r\n\t * corresponding to `defaultCountry`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: true\r\n}\r\n\r\nexport default PhoneInput","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport PhoneInput_ from './PhoneInput'\r\nimport InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\tsmartCaret,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\treturn (\r\n\t\t\t<PhoneInput_\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tComponent={smartCaret ? InputSmart : InputBasic} />\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tPhoneInput.defaultProps = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type=\"tel\"`.\r\n\t\t */\r\n\t\ttype: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t\t */\r\n\t\tsmartCaret: true,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()","import metadata from 'libphonenumber-js/metadata.min.json'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tisSupportedCountry as _isSupportedCountry\r\n} from '../core/index'\r\n\r\nimport { createInput } from '../modules/PhoneInputBrowser'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}","import Metadata from './metadata'\r\nimport matchesEntirely from './helpers/matchesEntirely'\r\nimport getNumberType from './helpers/getNumberType'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// This is just to support `isValidNumber({})`\r\n\t// for cases when `parseNumber()` returns `{}`.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes())\r\n\t{\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst national_number = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(national_number, metadata.nationalNumberPattern())\r\n}","import Metadata from '../metadata'\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport default function getIddPrefix(country, callingCode, metadata) {\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tif (countryMetadata.defaultIDDPrefix()) {\r\n\t\treturn countryMetadata.defaultIDDPrefix()\r\n\t}\r\n\tif (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n}\r\n","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport matchesEntirely from './helpers/matchesEntirely'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat'\r\nimport Metadata, { getCountryCallingCode } from './metadata'\r\nimport getIddPrefix from './helpers/getIddPrefix'\r\nimport { formatRFC3966 } from './helpers/RFC3966'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// formatNumber('+78005553535', 'NATIONAL')\r\n// formatNumber('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...DEFAULT_OPTIONS, ...options }\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\t// For reference, here's Google's IDD formatter:\r\n\t\t// https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\r\n\t\t// Not saying that this IDD formatter replicates it 1:1, but it seems to work.\r\n\t\t// Who would even need to format phone numbers in IDD format anyway?\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst formattedNumber = formatIDD(\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tinput.carrierCode,\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\toptions.fromCountry,\r\n\t\t\t\tmetadata\r\n\t\t\t)\r\n\t\t\treturn addExtension(formattedNumber, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tuseInternationalFormat: formatAs === 'INTERNATIONAL',\r\n\t\t\twithNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && (options && options.nationalPrefix === false) ? false : true,\r\n\t\t\tcarrierCode,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n}\r\n\r\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\r\n\tfor (const format of availableFormats) {\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDD(\r\n\tnationalNumber,\r\n\tcarrierCode,\r\n\tcountryCallingCode,\r\n\tfromCountry,\r\n\tmetadata\r\n) {\r\n\tconst fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata)\r\n\t// When calling within the same country calling code.\r\n\tif (fromCountryCallingCode === countryCallingCode) {\r\n\t\tconst formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata)\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (countryCallingCode === '1') {\r\n\t\t\treturn countryCallingCode + ' ' + formattedNumber\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formattedNumber\r\n\t}\r\n\tconst iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata)\r\n\tif (iddPrefix) {\r\n\t\treturn `${iddPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata)}`\r\n\t}\r\n}","import Metadata from './metadata'\r\nimport isPossibleNumber from './isPossibleNumber_'\r\nimport isValidNumber from './validate_'\r\nimport isValidNumberForRegion from './isValidNumberForRegion_'\r\nimport getNumberType from './helpers/getNumberType'\r\nimport formatNumber from './format_'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`country` or `countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\tif (!metadata) {\r\n\t\t\tthrow new TypeError('`metadata` not passed')\r\n\t\t}\r\n\t\tconst _metadata = new Metadata(metadata)\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\t\tthis.country = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.metadata)\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// // Is just an alias for `this.isValid() && this.country === country`.\r\n\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n\t// isValidForRegion(country) {\r\n\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)","import createExtensionPattern from './createExtensionPattern'\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport default function extractExtension(number) {\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst numberWithoutExtension = number.slice(0, start)\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length) {\r\n\t\tif (matches[i]) {\r\n\t\t\treturn {\r\n\t\t\t\tnumber: numberWithoutExtension,\r\n\t\t\t\text: matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN\r\n} from './constants'\r\n\r\nimport ParseError from './ParseError'\r\nimport Metadata from './metadata'\r\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber'\r\nimport extractExtension from './helpers/extension/extractExtension'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\nimport getCountryCallingCode from './getCountryCallingCode'\r\nimport { isPossibleNumber } from './isPossibleNumber_'\r\nimport { parseRFC3966 } from './helpers/RFC3966'\r\nimport PhoneNumber from './PhoneNumber'\r\nimport matchesEntirely from './helpers/matchesEntirely'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign'\r\nimport extractNationalNumber from './helpers/extractNationalNumber'\r\nimport stripIddPrefix from './helpers/stripIddPrefix'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\r\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$')\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\n// Examples:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parse(text, options, metadata) {\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formattedPhoneNumber, ext, error } = parseInput(text, options.v2, options.extract)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formattedPhoneNumber) {\r\n\t\tif (options.v2) {\r\n\t\t\tif (error === 'TOO_SHORT') {\r\n\t\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t\t}\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tnationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode\r\n\t} = parsePhoneNumber(\r\n\t\tformattedPhoneNumber,\r\n\t\toptions.defaultCountry,\r\n\t\toptions.defaultCallingCode,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.hasSelectedNumberingPlan()) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2) {\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ?\r\n\t\tmatchesEntirely(nationalNumber, metadata.nationalNumberPattern()) :\r\n\t\tfalse\r\n\r\n\tif (!options.extended) {\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\t// isInternational: countryCallingCode !== undefined\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible: valid ? true : (\r\n\t\t\toptions.extended === true &&\r\n\t\t\tmetadata.possibleLengths() &&\r\n\t\t\tisPossibleNumber(nationalNumber, metadata) ? true : false\r\n\t\t),\r\n\t\tphone: nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\r\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\r\n\tif (!text) {\r\n\t\treturn\r\n\t}\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\r\n\t\tif (throwOnError) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\tif (extract === false) {\r\n\t\treturn text\r\n\t}\r\n\t// Attempt to extract a possible number from the string passed in\r\n\tconst startsAt = text.search(PHONE_NUMBER_START_PATTERN)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(startsAt)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parseInput(text, v2, extract) {\r\n\t// Parse RFC 3966 phone number URI.\r\n\tif (text && text.indexOf('tel:') === 0) {\r\n\t\treturn parseRFC3966(text)\r\n\t}\r\n\tlet number = extractFormattedPhoneNumber(text, extract, v2)\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\tif (isViablePhoneNumberStart(number)) {\r\n\t\t\treturn { error: 'TOO_SHORT' }\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst withExtensionStripped = extractExtension(number)\r\n\tif (withExtensionStripped.ext) {\r\n\t\treturn withExtensionStripped\r\n\t}\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, nationalNumber, ext) {\r\n\tconst result = {\r\n\t\tcountry,\r\n\t\tphone: nationalNumber\r\n\t}\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\r\nfunction parsePhoneNumber(\r\n\tformattedPhoneNumber,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\t// Extract calling code from phone number.\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\tparseIncompletePhoneNumber(formattedPhoneNumber),\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata.metadata\r\n\t)\r\n\r\n\t// Choose a country by `countryCallingCode`.\r\n\tlet country\r\n\tif (countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t}\r\n\t// If `formattedPhoneNumber` is in \"national\" format\r\n\t// then `number` is defined and `countryCallingCode` isn't.\r\n\telse if (number && (defaultCountry || defaultCallingCode)) {\r\n\t\tmetadata.selectNumberingPlan(defaultCountry, defaultCallingCode)\r\n\t\tif (defaultCountry) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tcountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcountryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tif (!number) {\r\n\t\treturn { countryCallingCode }\r\n\t}\r\n\r\n\tconst {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t} = extractNationalNumber(\r\n\t\tparseIncompletePhoneNumber(number),\r\n\t\tmetadata\r\n\t)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata)\r\n\tif (exactCountry) {\r\n\t\tcountry = exactCountry\r\n\t\t/* istanbul ignore if */\r\n\t\tif (exactCountry === '001') {\r\n\t\t\t// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\r\n\t\t\t// If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\r\n\t\t\t// then remove the \"istanbul ignore if\".\r\n\t\t} else {\r\n\t\t\tmetadata.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}","import parseNumber from './parse_'\r\n\r\nexport default function parsePhoneNumber(text, options, metadata) {\r\n\treturn parseNumber(text, { ...options, v2: true }, metadata)\r\n}","import AsYouType from './AsYouType'\r\n\r\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\r\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\r\n\tif (!metadata) {\r\n\t\tmetadata = country\r\n\t\tcountry = undefined\r\n\t}\r\n\treturn new AsYouType(country, metadata).input(value)\r\n}","import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\t/**\r\n\t * `InputBasic` is the most basic implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's input but doesn't control the caret in the process:\r\n\t * when erasing or inserting digits in the middle of a phone number\r\n\t * the caret usually jumps to the end (this is the expected behavior).\r\n\t * Why does `InputBasic` exist when there's `InputSmart`?\r\n\t * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n\t * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n\t */\r\n\tfunction InputBasic({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata,\r\n\t\tinputComponent: Input,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst prefix = getInputValuePrefix({\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst _onChange = useCallback((event) => {\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t// Working around this issue with this simple hack.\r\n\t\t\tif (newValue === value) {\r\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\r\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tonChange(newValue)\r\n\t\t}, [\r\n\t\t\tprefix,\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t])\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\r\n\t\t\t\tonChange={_onChange}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputBasic = React.forwardRef(InputBasic)\r\n\r\n\tInputBasic.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType.isRequired\r\n\t}\r\n\r\n\tInputBasic.defaultProps = {\r\n\t\tmetadata: defaultMetadata,\r\n\t\tinputComponent: 'input'\r\n\t}\r\n\r\n\treturn InputBasic\r\n}\r\n\r\nexport default createInput()\r\n\r\nfunction format(prefix, value, country, metadata) {\r\n\treturn removeInputValuePrefix(\r\n\t\tformatIncompletePhoneNumber(\r\n\t\t\tprefix + value,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t),\r\n\t\tprefix\r\n\t)\r\n}","import { parseDigit } from './helpers/parseDigits'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+') {\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (prevParsedCharacters) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}","export default class AsYouTypeState {\r\n\tconstructor({ onCountryChange, onCallingCodeChange }) {\r\n\t\tthis.onCountryChange = onCountryChange\r\n\t\tthis.onCallingCodeChange = onCallingCodeChange\r\n\t}\r\n\r\n\treset(defaultCountry, defaultCallingCode) {\r\n\t\tthis.international = false\r\n\t\tthis.IDDPrefix = undefined\r\n\t\tthis.missingPlus = undefined\r\n\t\tthis.callingCode = undefined\r\n\t\tthis.digits = ''\r\n\t\tthis.resetNationalSignificantNumber()\r\n\t\tthis.initCountryAndCallingCode(defaultCountry, defaultCallingCode)\r\n\t}\r\n\r\n\tresetNationalSignificantNumber() {\r\n\t\tthis.nationalSignificantNumber = this.getNationalDigits()\r\n\t\tthis.nationalSignificantNumberMatchesInput = true\r\n\t\tthis.nationalPrefix = undefined\r\n\t\tthis.carrierCode = undefined\r\n\t\tthis.complexPrefixBeforeNationalSignificantNumber = undefined\r\n\t}\r\n\r\n\tupdate = (properties) => {\r\n\t\tfor (const key of Object.keys(properties)) {\r\n\t\t\tthis[key] = properties[key]\r\n\t\t}\r\n\t}\r\n\r\n\tinitCountryAndCallingCode(country, callingCode) {\r\n\t\tthis.setCountry(country)\r\n\t\tthis.setCallingCode(callingCode)\r\n\t}\r\n\r\n\tsetCountry(country) {\r\n\t\tthis.country = country\r\n\t\tthis.onCountryChange(country)\r\n\t}\r\n\r\n\tsetCallingCode(callingCode) {\r\n\t\tthis.callingCode = callingCode\r\n\t\treturn this.onCallingCodeChange(this.country, callingCode)\r\n\t}\r\n\r\n\tstartInternationalNumber() {\r\n\t\t// Prepend the `+` to parsed input.\r\n\t\tthis.international = true\r\n\t\t// If a default country was set then reset it\r\n\t\t// because an explicitly international phone\r\n\t\t// number is being entered.\r\n\t\tthis.initCountryAndCallingCode()\r\n\t}\r\n\r\n\tappendDigits(nextDigits) {\r\n\t\tthis.digits += nextDigits\r\n\t}\r\n\r\n\tappendNationalSignificantNumberDigits(nextDigits) {\r\n\t\tthis.nationalSignificantNumber += nextDigits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the part of `this.digits` that corresponds to the national number.\r\n\t * Basically, all digits that have been input by the user, except for the\r\n\t * international prefix and the country calling code part\r\n\t * (if the number is an international one).\r\n\t * @return {string}\r\n\t */\r\n\tgetNationalDigits() {\r\n\t\tif (this.international) {\r\n\t\t\treturn this.digits.slice(\r\n\t\t\t\t(this.IDDPrefix ? this.IDDPrefix.length : 0) +\r\n\t\t\t\t(this.callingCode ? this.callingCode.length : 0)\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n\r\n\tgetDigitsWithoutInternationalPrefix() {\r\n\t\tif (this.international) {\r\n\t\t\tif (this.IDDPrefix) {\r\n\t\t\t\treturn this.digits.slice(this.IDDPrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n}","// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function countOccurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times) {\r\n\tif (times < 1) {\r\n\t\treturn ''\r\n\t}\r\n\tlet result = ''\r\n\twhile (times > 1) {\r\n\t\tif (times & 1) {\r\n\t\t\tresult += string\r\n\t\t}\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\treturn result + string\r\n}\r\n\r\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\r\n\tif (string[cutBeforeIndex] === ')') {\r\n\t\tcutBeforeIndex++\r\n\t}\r\n\treturn stripNonPairedParens(string.slice(0, cutBeforeIndex))\r\n}\r\n\r\nexport function closeNonPairedParens(template, cut_before) {\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\tconst opening_braces = countOccurences('(', retained_template)\r\n\tconst closing_braces = countOccurences(')', retained_template)\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length) {\r\n\t\tif (template[cut_before] === ')') {\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\nexport function stripNonPairedParens(string) {\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length) {\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces) {\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\treturn cleared_string\r\n}\r\n\r\nexport function populateTemplateWithDigits(template, position, digits) {\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for `digits` it is safe.\r\n\t// for (const digit of digits)\r\n\tfor (const digit of digits.split('')) {\r\n\t\t// If there is room for more digits in current `template`,\r\n\t\t// then set the next digit in the `template`,\r\n\t\t// and return the formatted digits so far.\r\n\t\t// If more digits are entered than the current format could handle.\r\n\t\tif (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tposition = template.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\ttemplate = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t}\r\n\treturn [template, position]\r\n}","import checkNumberLength from './helpers/checkNumberLength'\r\nimport parseDigits from './helpers/parseDigits'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat'\r\n\r\nexport default function formatCompleteNumber(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\tif (matcher.test(state.nationalSignificantNumber)) {\r\n\t\treturn formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(\r\n\t\t\tstate,\r\n\t\t\tformat,\r\n\t\t\t{\r\n\t\t\t\tmetadata,\r\n\t\t\t\tshouldTryNationalPrefixFormattingRule,\r\n\t\t\t\tgetSeparatorAfterNationalPrefix\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\r\n\treturn checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE'\r\n}\r\n\r\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\t// `format` has already been checked for `nationalPrefix` requirement.\r\n\r\n\tconst {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode\r\n\t} = state\r\n\r\n\t// Format the number with using `national_prefix_formatting_rule`.\r\n\t// If the resulting formatted number is a valid formatted number, then return it.\r\n\t//\r\n\t// Google's AsYouType formatter is different in a way that it doesn't try\r\n\t// to format using the \"national prefix formatting rule\", and instead it\r\n\t// simply prepends a national prefix followed by a \" \" character.\r\n\t// This code does that too, but as a fallback.\r\n\t// The reason is that \"national prefix formatting rule\" may use parentheses,\r\n\t// which wouldn't be included has it used the simpler Google's way.\r\n\t//\r\n\tif (shouldTryNationalPrefixFormattingRule(format)) {\r\n\t\tconst formattedNumber = formatNationalNumber(state, format, {\r\n\t\t\tuseNationalPrefixFormattingRule: true,\r\n\t\t\tgetSeparatorAfterNationalPrefix,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\tif (formattedNumber) {\r\n\t\t\treturn formattedNumber\r\n\t\t}\r\n\t}\r\n\r\n\t// Format the number without using `national_prefix_formatting_rule`.\r\n\treturn formatNationalNumber(state, format, {\r\n\t\tuseNationalPrefixFormattingRule: false,\r\n\t\tgetSeparatorAfterNationalPrefix,\r\n\t\tmetadata\r\n\t})\r\n}\r\n\r\nfunction formatNationalNumber(state, format, {\r\n\tmetadata,\r\n\tuseNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tlet formattedNationalNumber = formatNationalNumberUsingFormat(\r\n\t\tstate.nationalSignificantNumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tcarrierCode: state.carrierCode,\r\n\t\t\tuseInternationalFormat: state.international,\r\n\t\t\twithNationalPrefix: useNationalPrefixFormattingRule,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n\tif (!useNationalPrefixFormattingRule) {\r\n\t\tif (state.nationalPrefix) {\r\n\t\t\t// If a national prefix was extracted, then just prepend it,\r\n\t\t\t// followed by a \" \" character.\r\n\t\t\tformattedNationalNumber = state.nationalPrefix +\r\n\t\t\t\tgetSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t} else if (state.complexPrefixBeforeNationalSignificantNumber) {\r\n\t\t\tformattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber +\r\n\t\t\t\t' ' +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t}\r\n\t}\r\n\tif (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n}\r\n\r\n// Check that the formatted phone number contains exactly\r\n// the same digits that have been input by the user.\r\n// For example, when \"0111523456789\" is input for `AR` country,\r\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\r\n// which means that the national part of `this.digits` isn't simply equal to\r\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\r\n//\r\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\r\n// being formatted via `metadata[country].national_prefix_transform_rule`.\r\n// For example, for `VI` country, it prepends `340` to the national number,\r\n// and if this check hasn't been implemented, then there would be a bug\r\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\r\n//\r\n// So, all these \"gotchas\" are filtered out.\r\n//\r\n// In the original Google's code, the comments say:\r\n// \"Check that we didn't remove nor add any extra digits when we matched\r\n// this formatting pattern. This usually happens after we entered the last\r\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\r\n// formatted but AYTF should retain all the number entered and not change\r\n// in order to match a format (of same leading digits and length) display\r\n// in that way.\"\r\n// \"If it's the same (i.e entered number and format is same), then it's\r\n// safe to return this in formatted number as nothing is lost / added.\"\r\n// Otherwise, don't use this format.\r\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\r\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\r\n//\r\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\r\n\treturn parseDigits(formattedNationalNumber) === state.getNationalDigits()\r\n}","export default class PatternMatcher {\r\n\tconstructor(pattern) {\r\n\t\tthis.matchTree = new PatternParser().parse(pattern)\r\n\t\t// console.log(JSON.stringify(this.matchTree, null, 2))\r\n\t}\r\n\r\n\tmatch(string, { allowOverflow } = {}) {\r\n\t\tif (!string) {\r\n\t\t\tthrow new Error('String is required')\r\n\t\t}\r\n\t\tconst result = match(string.split(''), this.matchTree, true)\r\n\t\tif (result && result.match) {\r\n\t\t\tdelete result.matchedChars\r\n\t\t}\r\n\t\tif (result && result.overflow) {\r\n\t\t\tif (!allowOverflow) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n}\r\n\r\nfunction match(characters, tree, last) {\r\n\tif (typeof tree === 'string') {\r\n\t\tif (last) {\r\n\t\t\tif (characters.length > tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\toverflow: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst characterString = characters.join('')\r\n\t\tif (tree.indexOf(characterString) === 0) {\r\n\t\t\tif (characters.length === tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmatch: true,\r\n\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tpartialMatch: true,\r\n\t\t\t\t// matchedChars: characters\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (characterString.indexOf(tree) === 0) {\r\n\t\t\treturn {\r\n\t\t\t\tmatch: true,\r\n\t\t\t\tmatchedChars: characters.slice(0, tree.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\tif (Array.isArray(tree)) {\r\n\t\tlet restCharacters = characters.slice()\r\n\t\tlet i = 0\r\n\t\twhile (i < tree.length) {\r\n\t\t\tconst subtree = tree[i]\r\n\t\t\tconst result = match(restCharacters, subtree, last && (i === tree.length - 1))\r\n\t\t\tif (!result || result.overflow) {\r\n\t\t\t\treturn result\r\n\t\t\t}\r\n\t\t\tif (result.match) {\r\n\t\t\t\t// Continue with the next subtree with the rest of the characters.\r\n\t\t\t\trestCharacters = restCharacters.slice(result.matchedChars.length)\r\n\t\t\t\tif (restCharacters.length === 0) {\r\n\t\t\t\t\tif (i === tree.length - 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (result.partialMatch) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t}\r\n\t\t\ti++\r\n\t\t}\r\n\t\tif (last) {\r\n\t\t\treturn {\r\n\t\t\t\toverflow: true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tmatch: true,\r\n\t\t\tmatchedChars: characters.slice(0, characters.length - restCharacters.length)\r\n\t\t}\r\n\t}\r\n\r\n\tswitch (tree.op) {\r\n\t\tcase '|':\r\n\t\t\tlet partialMatch\r\n\t\t\tfor (const branch of tree.args) {\r\n\t\t\t\tconst result = match(characters, branch, last)\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tif (result.overflow) {\r\n\t\t\t\t\t\treturn result\r\n\t\t\t\t\t} else if (result.match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: result.matchedChars\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (result.partialMatch) {\r\n\t\t\t\t\t\tpartialMatch = true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (partialMatch) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t// matchedChars: ...\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Not even a partial match.\r\n\t\t\treturn\r\n\r\n\t\tcase '[]':\r\n\t\t\tfor (const char of tree.args) {\r\n\t\t\t\tif (characters[0] === char) {\r\n\t\t\t\t\tif (characters.length === 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\tmatchedChars: [char]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No character matches.\r\n\t\t\treturn\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unsupported instruction tree: ${tree}`)\r\n\t}\r\n}\r\n\r\nconst OPERATOR = new RegExp(\r\n\t// any of:\r\n\t'(' +\r\n\t\t// or operator\r\n\t\t'\\\\|' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group start\r\n\t\t'\\\\(\\\\?\\\\:' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group end\r\n\t\t'\\\\)' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set start\r\n\t\t'\\\\[' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set end\r\n\t\t'\\\\]' +\r\n\t')'\r\n)\r\n\r\nclass PatternParser {\r\n\tparse(pattern) {\r\n\t\tthis.context = [{\r\n\t\t\tor: true,\r\n\t\t\tinstructions: []\r\n\t\t}]\r\n\r\n\t\tthis.parsePattern(pattern)\r\n\r\n\t\tif (this.context.length !== 1) {\r\n\t\t\tthrow new Error('Non-finalized contexts left when pattern parse ended')\r\n\t\t}\r\n\r\n\t\tconst { branches, instructions } = this.context[0]\r\n\r\n\t\tif (branches) {\r\n\t\t\treturn [{\r\n\t\t\t\top: '|',\r\n\t\t\t\targs: branches.concat([instructions])\r\n\t\t\t}]\r\n\t\t}\r\n\r\n\t\tif (instructions.length === 0) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\treturn instructions\r\n\t}\r\n\r\n\tstartContext(context) {\r\n\t\tthis.context.push(context)\r\n\t}\r\n\r\n\tendContext() {\r\n\t\tthis.context.pop()\r\n\t}\r\n\r\n\tgetContext() {\r\n\t\treturn this.context[this.context.length - 1]\r\n\t}\r\n\r\n\tparsePattern(pattern) {\r\n\t\tif (!pattern) {\r\n\t\t\tthrow new Error('Empty pattern passed')\r\n\t\t}\r\n\r\n\t\tconst match = pattern.match(OPERATOR)\r\n\t\tif (!match) {\r\n\t\t\tthis.getContext().instructions = this.getContext().instructions.concat(\r\n\t\t\t\tpattern.split('')\r\n\t\t\t)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst operator = match[1]\r\n\t\tconst before = pattern.slice(0, match.index)\r\n\t\tconst rightPart = pattern.slice(match.index + operator.length)\r\n\r\n\t\tswitch (operator) {\r\n\t\t\tcase '(?:':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\tor: true,\r\n\t\t\t\t\tinstructions: [],\r\n\t\t\t\t\tbranches: []\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ')':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\")\" operator must be preceded by \"(?:\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tif (this.getContext().instructions.length === 0) {\r\n\t\t\t\t\tthrow new Error('No instructions found after \"|\" operator in an \"or\" group')\r\n\t\t\t\t}\r\n\t\t\t\tconst { branches } = this.getContext()\r\n\t\t\t\tbranches.push(\r\n\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t)\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '|',\r\n\t\t\t\t\targs: branches\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '|':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\"|\" operator can only be used inside \"or\" groups')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\t// The top-level is an implicit \"or\" group, if required.\r\n\t\t\t\tif (!this.getContext().branches) {\r\n\t\t\t\t\tif (this.context.length === 1) {\r\n\t\t\t\t\t\tthis.getContext().branches = []\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('\"branches\" not found in an \"or\" group context')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.getContext().branches.push(\r\n\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t)\r\n\t\t\t\tthis.getContext().instructions = []\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '[':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\toneOfSet: true\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ']':\r\n\t\t\t\tif (!this.getContext().oneOfSet) {\r\n\t\t\t\t\tthrow new Error('\"]\" operator must be preceded by \"[\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '[]',\r\n\t\t\t\t\targs: parseOneOfSet(before)\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown operator: ${operator}`)\r\n\t\t}\r\n\r\n\t\tif (rightPart) {\r\n\t\t\tthis.parsePattern(rightPart)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction parseOneOfSet(pattern) {\r\n\tconst values = []\r\n\tlet i = 0\r\n\twhile (i < pattern.length) {\r\n\t\tif (pattern[i] === '-') {\r\n\t\t\tif (i === 0 || i === pattern.length - 1) {\r\n\t\t\t\tthrow new Error(`Couldn't parse a one-of set pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tconst prevValue = pattern[i - 1].charCodeAt(0) + 1\r\n\t\t\tconst nextValue = pattern[i + 1].charCodeAt(0) - 1\r\n\t\t\tlet value = prevValue\r\n\t\t\twhile (value <= nextValue) {\r\n\t\t\t\tvalues.push(String.fromCharCode(value))\r\n\t\t\t\tvalue++\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalues.push(pattern[i])\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn values\r\n}","import {\r\n\tDIGIT_PLACEHOLDER,\r\n\tcountOccurences,\r\n\trepeat,\r\n\tcutAndStripNonPairedParens,\r\n\tcloseNonPairedParens,\r\n\tstripNonPairedParens,\r\n\tpopulateTemplateWithDigits\r\n} from './AsYouTypeFormatter.util'\r\n\r\nimport formatCompleteNumber, {\r\n\tcanFormatCompleteNumber\r\n} from './AsYouTypeFormatter.complete'\r\n\r\nimport PatternMatcher from './AsYouTypeFormatter.PatternMatcher'\r\n\r\nimport parseDigits from './helpers/parseDigits'\r\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util'\r\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat'\r\nimport { VALID_PUNCTUATION } from './constants'\r\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// A set of characters that, if found in a national prefix formatting rules, are an indicator to\r\n// us that we should separate the national prefix from the number when formatting.\r\nconst NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/\r\n\r\n// Deprecated: Google has removed some formatting pattern related code from their repo.\r\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\r\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\r\n// Because this library supports generating custom metadata\r\n// some users may still be using old metadata so the relevant\r\n// code seems to stay until some next major version update.\r\nconst SUPPORT_LEGACY_FORMATTING_PATTERNS = true\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\[([^\\[\\]])*\\]/g)\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\d(?=[^,}][^,}])/g)\r\n\r\n// A regular expression that is used to determine if a `format` is\r\n// suitable to be used in the \"as you type formatter\".\r\n// A `format` is suitable when the resulting formatted number has\r\n// the same digits as the user has entered.\r\n//\r\n// In the simplest case, that would mean that the format\r\n// doesn't add any additional digits when formatting a number.\r\n// Google says that it also shouldn't add \"star\" (`*`) characters,\r\n// like it does in some Israeli formats.\r\n// Such basic format would only contain \"valid punctuation\"\r\n// and \"captured group\" identifiers ($1, $2, etc).\r\n//\r\n// An example of a format that adds additional digits:\r\n//\r\n// Country: `AR` (Argentina).\r\n// Format:\r\n// {\r\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n//    \"leading_digits_patterns\": [\"91\"],\r\n//    \"national_prefix_formatting_rule\": \"0$1\",\r\n//    \"format\": \"$2 15-$3-$4\",\r\n//    \"international_format\": \"$1 $2 $3-$4\"\r\n// }\r\n//\r\n// In the format above, the `format` adds `15` to the digits when formatting a number.\r\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\r\n// has previously removed `15` from a national number, so re-adding `15` in `format`\r\n// doesn't actually result in any extra digits added to user's input.\r\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\r\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\r\n//\r\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\r\n// `libphonenumber` code.\r\n//\r\nconst NON_ALTERING_FORMAT_REG_EXP = new RegExp(\r\n\t'^' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nexport default class AsYouTypeFormatter {\r\n\tconstructor({\r\n\t\tstate,\r\n\t\tmetadata\r\n\t}) {\r\n\t\tthis.metadata = metadata\r\n\t\tthis.resetFormat()\r\n\t}\r\n\r\n\tresetFormat() {\r\n\t\tthis.chosenFormat = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.nationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t}\r\n\r\n\treset(numberingPlan, state) {\r\n\t\tthis.resetFormat()\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.isNANP = numberingPlan.callingCode() === '1'\r\n\t\t\tthis.matchingFormats = numberingPlan.formats()\r\n\t\t\tif (state.nationalSignificantNumber) {\r\n\t\t\t\tthis.narrowDownMatchingFormats(state)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.isNANP = undefined\r\n\t\t\tthis.matchingFormats = []\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats an updated phone number.\r\n\t * @param  {string} nextDigits — Additional phone number digits.\r\n\t * @param  {object} state — `AsYouType` state.\r\n\t * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n\t */\r\n\tformat(nextDigits, state) {\r\n\t\t// See if the phone number digits can be formatted as a complete phone number.\r\n\t\t// If not, use the results from `formatNationalNumberWithNextDigits()`,\r\n\t\t// which formats based on the chosen formatting pattern.\r\n\t\t//\r\n\t\t// Attempting to format complete phone number first is how it's done\r\n\t\t// in Google's `libphonenumber`, so this library just follows it.\r\n\t\t// Google's `libphonenumber` code doesn't explain in detail why does it\r\n\t\t// attempt to format digits as a complete phone number\r\n\t\t// instead of just going with a previoulsy (or newly) chosen `format`:\r\n\t\t//\r\n\t\t// \"Checks to see if there is an exact pattern match for these digits.\r\n\t\t//  If so, we should use this instead of any other formatting template\r\n\t\t//  whose leadingDigitsPattern also matches the input.\"\r\n\t\t//\r\n\t\tif (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\r\n\t\t\tfor (const format of this.matchingFormats) {\r\n\t\t\t\tconst formattedCompleteNumber = formatCompleteNumber(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmetadata: this.metadata,\r\n\t\t\t\t\t\tshouldTryNationalPrefixFormattingRule: format => this.shouldTryNationalPrefixFormattingRule(format, {\r\n\t\t\t\t\t\t\tinternational: state.international,\r\n\t\t\t\t\t\t\tnationalPrefix: state.nationalPrefix\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tgetSeparatorAfterNationalPrefix: this.getSeparatorAfterNationalPrefix\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t\tif (formattedCompleteNumber) {\r\n\t\t\t\t\tthis.resetFormat()\r\n\t\t\t\t\tthis.chosenFormat = format\r\n\t\t\t\t\tthis.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state)\r\n\t\t\t\t\tthis.populatedNationalNumberTemplate = formattedCompleteNumber\r\n\t\t\t\t\t// With a new formatting template, the matched position\r\n\t\t\t\t\t// using the old template needs to be reset.\r\n\t\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER)\r\n\t\t\t\t\treturn formattedCompleteNumber\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Format the digits as a partial (incomplete) phone number\r\n\t\t// using the previously chosen formatting pattern (or a newly chosen one).\r\n\t\treturn this.formatNationalNumberWithNextDigits(nextDigits, state)\r\n\t}\r\n\r\n\t// Formats the next phone number digits.\r\n\tformatNationalNumberWithNextDigits(nextDigits, state) {\r\n\t\tconst previouslyChosenFormat = this.chosenFormat\r\n\t\t// Choose a format from the list of matching ones.\r\n\t\tconst newlyChosenFormat = this.chooseFormat(state)\r\n\t\tif (newlyChosenFormat) {\r\n\t\t\tif (newlyChosenFormat === previouslyChosenFormat) {\r\n\t\t\t\t// If it can format the next (current) digits\r\n\t\t\t\t// using the previously chosen phone number format\r\n\t\t\t\t// then return the updated formatted number.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(nextDigits)\r\n\t\t\t} else {\r\n\t\t\t\t// If a more appropriate phone number format\r\n\t\t\t\t// has been chosen for these \"leading digits\",\r\n\t\t\t\t// then re-format the national phone number part\r\n\t\t\t\t// using the newly selected format.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(state.getNationalDigits())\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tnarrowDownMatchingFormats({\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalPrefix,\r\n\t\tinternational\r\n\t}) {\r\n\t\tconst leadingDigits = nationalSignificantNumber\r\n\r\n\t\t// \"leading digits\" pattern list starts with a\r\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\r\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\r\n\t\t// this national (significant) number can already be formatted.\r\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\r\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\r\n\r\n\t\t// This implementation is different from Google's\r\n\t\t// in that it searches for a fitting format\r\n\t\t// even if the user has entered less than\r\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\r\n\t\t// Because some leading digit patterns already match for a single first digit.\r\n\t\tlet leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH\r\n\t\tif (leadingDigitsPatternIndex < 0) {\r\n\t\t\tleadingDigitsPatternIndex = 0\r\n\t\t}\r\n\r\n\t\tthis.matchingFormats = this.matchingFormats.filter(\r\n\t\t\tformat => this.formatSuits(format, international, nationalPrefix)\r\n\t\t\t\t&& this.formatMatches(format, leadingDigits, leadingDigitsPatternIndex)\r\n\t\t)\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t}\r\n\r\n\tformatSuits(format, international, nationalPrefix) {\r\n\t\t// When a prefix before a national (significant) number is\r\n\t\t// simply a national prefix, then it's parsed as `this.nationalPrefix`.\r\n\t\t// In more complex cases, a prefix before national (significant) number\r\n\t\t// could include a national prefix as well as some \"capturing groups\",\r\n\t\t// and in that case there's no info whether a national prefix has been parsed.\r\n\t\t// If national prefix is not used when formatting a phone number\r\n\t\t// using this format, but a national prefix has been entered by the user,\r\n\t\t// and was extracted, then discard such phone number format.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\r\n\t\tif (nationalPrefix &&\r\n\t\t\t!format.usesNationalPrefix() &&\r\n\t\t\t// !format.domesticCarrierCodeFormattingRule() &&\r\n\t\t\t!format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// If national prefix is mandatory for this phone number format\r\n\t\t// and there're no guarantees that a national prefix is present in user input\r\n\t\t// then discard this phone number format as not suitable.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\r\n\t\tif (!international &&\r\n\t\t\t!nationalPrefix &&\r\n\t\t\tformat.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tformatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\r\n\t\tconst leadingDigitsPatternsCount = format.leadingDigitsPatterns().length\r\n\r\n\t\t// If this format is not restricted to a certain\r\n\t\t// leading digits pattern then it fits.\r\n\t\tif (leadingDigitsPatternsCount === 0) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// Start narrowing down the list of possible formats based on the leading digits.\r\n\t\t// (only previously matched formats take part in the narrowing down process)\r\n\r\n\t\t// `leading_digits_patterns` start with 3 digits min\r\n\t\t// and then go up from there one digit at a time.\r\n\t\tleadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1)\r\n\t\tconst leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]\r\n\r\n\t\t// Google imposes a requirement on the leading digits\r\n\t\t// to be minimum 3 digits long in order to be eligible\r\n\t\t// for checking those with a leading digits pattern.\r\n\t\t//\r\n\t\t// Since `leading_digits_patterns` start with 3 digits min,\r\n\t\t// Google's original `libphonenumber` library only starts\r\n\t\t// excluding any non-matching formats only when the\r\n\t\t// national number entered so far is at least 3 digits long,\r\n\t\t// otherwise format matching would give false negatives.\r\n\t\t//\r\n\t\t// For example, when the digits entered so far are `2`\r\n\t\t// and the leading digits pattern is `21` –\r\n\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t// but due to the absence of further digits it would give false negative.\r\n\t\t//\r\n\t\t// Also, `leading_digits_patterns` doesn't always correspond to a single\r\n\t\t// digits count. For example, `60|8` pattern would already match `8`\r\n\t\t// but the `60` part would require having at least two leading digits,\r\n\t\t// so the whole pattern would require inputting two digits first in order to\r\n\t\t// decide on whether it matches the input, even when the input is \"80\".\r\n\t\t//\r\n\t\t// This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\r\n\t\t// even when there's only 1 or 2 digits of the national (significant) number.\r\n\t\t// To do that, it uses a non-strict pattern matcher written specifically for that.\r\n\t\t//\r\n\t\tif (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\r\n\t\t\t// Before leading digits < 3 matching was implemented:\r\n\t\t\t// return true\r\n\t\t\t//\r\n\t\t\t// After leading digits < 3 matching was implemented:\r\n\t\t\ttry {\r\n\t\t\t\treturn new PatternMatcher(leadingDigitsPattern).match(leadingDigits, { allowOverflow: true }) !== undefined\r\n\t\t\t} catch (error) {\r\n\t\t\t\t// There's a slight possibility that there could be some undiscovered bug\r\n\t\t\t\t// in the pattern matcher code. Since the \"leading digits < 3 matching\"\r\n\t\t\t\t// feature is not \"essential\" for operation, it can fall back to the old way\r\n\t\t\t\t// in case of any issues rather than halting the application's execution.\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\r\n\t\t// available then use the usual regular expression matching.\r\n\t\t//\r\n\t\t// The whole pattern is wrapped in round brackets (`()`) because\r\n\t\t// the pattern can use \"or\" operator (`|`) at the top level of the pattern.\r\n\t\t//\r\n\t\treturn new RegExp(`^(${leadingDigitsPattern})`).test(leadingDigits)\r\n\t}\r\n\r\n\tgetFormatFormat(format, international) {\r\n\t\treturn international ? format.internationalFormat() : format.format()\r\n\t}\r\n\r\n\tchooseFormat(state) {\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\tfor (const format of this.matchingFormats.slice()) {\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still suitable, then stick to it.\r\n\t\t\tif (this.chosenFormat === format) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t// Sometimes, a formatting rule inserts additional digits in a phone number,\r\n\t\t\t// and \"as you type\" formatter can't do that: it should only use the digits\r\n\t\t\t// that the user has input.\r\n\t\t\t//\r\n\t\t\t// For example, in Argentina, there's a format for mobile phone numbers:\r\n\t\t\t//\r\n\t\t\t// {\r\n\t\t\t//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n\t\t\t//    \"leading_digits_patterns\": [\"91\"],\r\n\t\t\t//    \"national_prefix_formatting_rule\": \"0$1\",\r\n\t\t\t//    \"format\": \"$2 15-$3-$4\",\r\n\t\t\t//    \"international_format\": \"$1 $2 $3-$4\"\r\n\t\t\t// }\r\n\t\t\t//\r\n\t\t\t// In that format, `international_format` is used instead of `format`\r\n\t\t\t// because `format` inserts `15` in the formatted number,\r\n\t\t\t// and `AsYouType` formatter should only use the digits\r\n\t\t\t// the user has actually input, without adding any extra digits.\r\n\t\t\t// In this case, it wouldn't make a difference, because the `15`\r\n\t\t\t// is first stripped when applying `national_prefix_for_parsing`\r\n\t\t\t// and then re-added when using `format`, so in reality it doesn't\r\n\t\t\t// add any new digits to the number, but to detect that, the code\r\n\t\t\t// would have to be more complex: it would have to try formatting\r\n\t\t\t// the digits using the format and then see if any digits have\r\n\t\t\t// actually been added or removed, and then, every time a new digit\r\n\t\t\t// is input, it should re-check whether the chosen format doesn't\r\n\t\t\t// alter the digits.\r\n\t\t\t//\r\n\t\t\t// Google's code doesn't go that far, and so does this library:\r\n\t\t\t// it simply requires that a `format` doesn't add any additonal\r\n\t\t\t// digits to user's input.\r\n\t\t\t//\r\n\t\t\t// Also, people in general should move from inputting phone numbers\r\n\t\t\t// in national format (possibly with national prefixes)\r\n\t\t\t// and use international phone number format instead:\r\n\t\t\t// it's a logical thing in the modern age of mobile phones,\r\n\t\t\t// globalization and the internet.\r\n\t\t\t//\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (!NON_ALTERING_FORMAT_REG_EXP.test(this.getFormatFormat(format, state.international))) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tif (!this.createTemplateForFormat(format, state)) {\r\n\t\t\t\t// Remove the format if it can't generate a template.\r\n\t\t\t\tthis.matchingFormats = this.matchingFormats.filter(_ => _ !== format)\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tthis.chosenFormat = format\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tif (!this.chosenFormat) {\r\n\t\t\t// No format matches the national (significant) phone number.\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t\treturn this.chosenFormat\r\n\t}\r\n\r\n\tcreateTemplateForFormat(format, state) {\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Get formatting template for this phone number format\r\n\t\tconst template = this.getTemplateForFormat(format, state)\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (template) {\r\n\t\t\tthis.setNationalNumberTemplate(template, state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tgetSeparatorAfterNationalPrefix = (format) => {\r\n\t\t// `US` metadata doesn't have a `national_prefix_formatting_rule`,\r\n\t\t// so the `if` condition below doesn't apply to `US`,\r\n\t\t// but in reality there shoudl be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\t// So `US` national prefix separator is a \"special\" \"hardcoded\" case.\r\n\t\tif (this.isNANP) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// If a `format` has a `national_prefix_formatting_rule`\r\n\t\t// and that rule has a separator after a national prefix,\r\n\t\t// then it means that there should be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\tif (format &&\r\n\t\t\tformat.nationalPrefixFormattingRule() &&\r\n\t\t\tNATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// At this point, there seems to be no clear evidence that\r\n\t\t// there should be a separator between a national prefix\r\n\t\t// and a national (significant) number. So don't insert one.\r\n\t\treturn ''\r\n\t}\r\n\r\n\tgetInternationalPrefixBeforeCountryCallingCode({ IDDPrefix, missingPlus }, options) {\r\n\t\tif (IDDPrefix) {\r\n\t\t\treturn options && options.spacing === false ? IDDPrefix : IDDPrefix + ' '\r\n\t\t}\r\n\t\tif (missingPlus) {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\r\n\tgetTemplate(state) {\r\n\t\tif (!this.template) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// `this.template` holds the template for a \"complete\" phone number.\r\n\t\t// The currently entered phone number is most likely not \"complete\",\r\n\t\t// so trim all non-populated digits.\r\n\t\tlet index = -1\r\n\t\tlet i = 0\r\n\t\tconst internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, { spacing: false }) : ''\r\n\t\twhile (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\t\treturn cutAndStripNonPairedParens(this.template, index + 1)\r\n\t}\r\n\r\n\tsetNationalNumberTemplate(template, state) {\r\n\t\tthis.nationalNumberTemplate = template\r\n\t\tthis.populatedNationalNumberTemplate = template\r\n\t\t// With a new formatting template, the matched position\r\n\t\t// using the old template needs to be reset.\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (state.international) {\r\n\t\t\tthis.template =\r\n\t\t\t\tthis.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) +\r\n\t\t\t\trepeat(DIGIT_PLACEHOLDER, state.callingCode.length) +\r\n\t\t\t\t' ' +\r\n\t\t\t\ttemplate\r\n\t\t} else {\r\n\t\t\tthis.template = template\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates formatting template for a national phone number,\r\n\t * optionally containing a national prefix, for a format.\r\n\t * @param  {Format} format\r\n\t * @param  {string} nationalPrefix\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplateForFormat(format, {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tcomplexPrefixBeforeNationalSignificantNumber\r\n\t}) {\r\n\t\tlet pattern = format.pattern()\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\r\n\t\t\tpattern = pattern\r\n\t\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\r\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\r\n\t\t}\r\n\r\n\t\t// Generate a dummy national number (consisting of `9`s)\r\n\t\t// that fits this format's `pattern`.\r\n\t\t//\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\t//\r\n\t\tlet digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (nationalSignificantNumber.length > digits.length) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strictPattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strictPattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.nationalSignificantNumber : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// format : `$1 $2 $3`\r\n\t\t// digits : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then `this.nationalSignificantNumber`\r\n\t\t// is used instead of `digits`.\r\n\r\n\t\tconst strictPattern = new RegExp('^' + pattern + '$')\r\n\t\tconst nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then use it\r\n\t\t// instead of `digits`.\r\n\t\tif (strictPattern.test(nationalNumberDummyDigits)) {\r\n\t\t\tdigits = nationalNumberDummyDigits\r\n\t\t}\r\n\r\n\t\tlet numberFormat = this.getFormatFormat(format, international)\r\n\t\tlet nationalPrefixIncludedInTemplate\r\n\r\n\t\t// If a user did input a national prefix (and that's guaranteed),\r\n\t\t// and if a `format` does have a national prefix formatting rule,\r\n\t\t// then see if that national prefix formatting rule\r\n\t\t// prepends exactly the same national prefix the user has input.\r\n\t\t// If that's the case, then use the `format` with the national prefix formatting rule.\r\n\t\t// Otherwise, use  the `format` without the national prefix formatting rule,\r\n\t\t// and prepend a national prefix manually to it.\r\n\t\tif (this.shouldTryNationalPrefixFormattingRule(format, { international, nationalPrefix })) {\r\n\t\t\tconst numberFormatWithNationalPrefix = numberFormat.replace(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tformat.nationalPrefixFormattingRule()\r\n\t\t\t)\r\n\t\t\t// If `national_prefix_formatting_rule` of a `format` simply prepends\r\n\t\t\t// national prefix at the start of a national (significant) number,\r\n\t\t\t// then such formatting can be used with `AsYouType` formatter.\r\n\t\t\t// There seems to be no `else` case: everywhere in metadata,\r\n\t\t\t// national prefix formatting rule is national prefix + $1,\r\n\t\t\t// or `($1)`, in which case such format isn't even considered\r\n\t\t\t// when the user has input a national prefix.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\r\n\t\t\t\tnumberFormat = numberFormatWithNationalPrefix\r\n\t\t\t\tnationalPrefixIncludedInTemplate = true\r\n\t\t\t\t// Replace all digits of the national prefix in the formatting template\r\n\t\t\t\t// with `DIGIT_PLACEHOLDER`s.\r\n\t\t\t\tif (nationalPrefix) {\r\n\t\t\t\t\tlet i = nationalPrefix.length\r\n\t\t\t\t\twhile (i > 0) {\r\n\t\t\t\t\t\tnumberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER)\r\n\t\t\t\t\t\ti--\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format.\r\n\t\tlet template = digits\r\n\t\t\t// Format the dummy phone number according to the format.\r\n\t\t\t.replace(new RegExp(pattern), numberFormat)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER.\r\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\r\n\r\n\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t// as just a basic national prefix, then just prepend such prefix\r\n\t\t// before the national (significant) number, optionally spacing\r\n\t\t// the two with a whitespace.\r\n\t\tif (!nationalPrefixIncludedInTemplate) {\r\n\t\t\tif (complexPrefixBeforeNationalSignificantNumber) {\r\n\t\t\t\t// Prepend the prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) +\r\n\t\t\t\t\t' ' +\r\n\t\t\t\t\ttemplate\r\n\t\t\t} else if (nationalPrefix) {\r\n\t\t\t\t// Prepend national prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) +\r\n\t\t\t\t\tthis.getSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (international) {\r\n\t\t\ttemplate = applyInternationalSeparatorStyle(template)\r\n\t\t}\r\n\r\n\t\treturn template\r\n\t}\r\n\r\n\tformatNextNationalNumberDigits(digits) {\r\n\t\tconst result = populateTemplateWithDigits(\r\n\t\t\tthis.populatedNationalNumberTemplate,\r\n\t\t\tthis.populatedNationalNumberTemplatePosition,\r\n\t\t\tdigits\r\n\t\t)\r\n\r\n\t\tif (!result) {\r\n\t\t\t// Reset the format.\r\n\t\t\tthis.resetFormat()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.populatedNationalNumberTemplate = result[0]\r\n\t\tthis.populatedNationalNumberTemplatePosition = result[1]\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\t\t// \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\r\n\t}\r\n\r\n\tshouldTryNationalPrefixFormattingRule = (format, { international, nationalPrefix }) => {\r\n\t\tif (format.nationalPrefixFormattingRule()) {\r\n\t\t\t// In some countries, `national_prefix_formatting_rule` is `($1)`,\r\n\t\t\t// so it applies even if the user hasn't input a national prefix.\r\n\t\t\t// `format.usesNationalPrefix()` detects such cases.\r\n\t\t\tconst usesNationalPrefix = format.usesNationalPrefix()\r\n\t\t\tif ((usesNationalPrefix && nationalPrefix) ||\r\n\t\t\t\t(!usesNationalPrefix && !international)) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","import extractCountryCallingCode from './helpers/extractCountryCallingCode'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign'\r\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber'\r\nimport stripIddPrefix from './helpers/stripIddPrefix'\r\nimport parseDigits from './helpers/parseDigits'\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART =\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i')\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_PART =\r\n\t'(?:' +\r\n\t\t'[' + PLUS_CHARS + ']' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']*' +\r\n\t\t'|' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']+' +\r\n\t')'\r\n\r\nconst AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp(\r\n\t'[^' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+' +\r\n\t'.*' +\r\n\t'$'\r\n)\r\n\r\n// Tests whether `national_prefix_for_parsing` could match\r\n// different national prefixes.\r\n// Matches anything that's not a digit or a square bracket.\r\nconst COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/\r\n\r\nexport default class AsYouTypeParser {\r\n\tconstructor({\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata,\r\n\t\tonNationalSignificantNumberChange\r\n\t}) {\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.metadata = metadata\r\n\t\tthis.onNationalSignificantNumberChange = onNationalSignificantNumberChange\r\n\t}\r\n\r\n\tinput(text, state) {\r\n\t\tconst [formattedDigits, hasPlus] = extractFormattedDigitsAndPlus(text)\r\n\t\tconst digits = parseDigits(formattedDigits)\r\n\t\t// Checks for a special case: just a leading `+` has been entered.\r\n\t\tlet justLeadingPlus\r\n\t\tif (hasPlus) {\r\n\t\t\tif (!state.digits) {\r\n\t\t\t\tstate.startInternationalNumber()\r\n\t\t\t\tif (!digits) {\r\n\t\t\t\t\tjustLeadingPlus = true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (digits) {\r\n\t\t\tthis.inputDigits(digits, state)\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number digits.\r\n\t * @param  {string} digits\r\n\t * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n\t */\r\n\tinputDigits(nextDigits, state) {\r\n\t\tconst { digits } = state\r\n\t\tconst hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3\r\n\r\n\t\t// Append phone number digits.\r\n\t\tstate.appendDigits(nextDigits)\r\n\r\n\t\t// Attempt to extract IDD prefix:\r\n\t\t// Some users input their phone number in international format,\r\n\t\t// but in an \"out-of-country\" dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers as soon as there're at least 3 digits.\r\n\t\t// Google's library attempts to extract IDD prefix at 3 digits,\r\n\t\t// so this library just copies that behavior.\r\n\t\t// I guess that's because the most commot IDD prefixes are\r\n\t\t// `00` (Europe) and `011` (US).\r\n\t\t// There exist really long IDD prefixes too:\r\n\t\t// for example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t// An IDD prefix is extracted here, and then every time when\r\n\t\t// there's a new digit and the number couldn't be formatted.\r\n\t\tif (hasReceivedThreeLeadingDigits) {\r\n\t\t\tthis.extractIddPrefix(state)\r\n\t\t}\r\n\r\n\t\tif (this.isWaitingForCountryCallingCode(state)) {\r\n\t\t\tif (!this.extractCountryCallingCode(state)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tstate.appendNationalSignificantNumberDigits(nextDigits)\r\n\t\t}\r\n\r\n\t\t// If a phone number is being input in international format,\r\n\t\t// then it's not valid for it to have a national prefix.\r\n\t\t// Still, some people incorrectly input such numbers with a national prefix.\r\n\t\t// In such cases, only attempt to strip a national prefix if the number becomes too long.\r\n\t\t// (but that is done later, not here)\r\n\t\tif (!state.international) {\r\n\t\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\t\tthis.extractNationalSignificantNumber(state.getNationalDigits(), state.update)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisWaitingForCountryCallingCode({ international, callingCode }) {\r\n\t\treturn international && !callingCode\r\n\t}\r\n\r\n\t// Extracts a country calling code from a number\r\n\t// being entered in internatonal format.\r\n\textractCountryCallingCode(state) {\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\t\t'+' + state.getDigitsWithoutInternationalPrefix(),\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (countryCallingCode) {\r\n\t\t\tstate.setCallingCode(countryCallingCode)\r\n\t\t\tstate.update({\r\n\t\t\t\tnationalSignificantNumber: number\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\treset(numberingPlan) {\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.hasSelectedNumberingPlan = true\r\n\t\t\tconst nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing()\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing)\r\n\t\t} else {\r\n\t\t\tthis.hasSelectedNumberingPlan = undefined\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts a national (significant) number from user input.\r\n\t * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n\t * and doesn't apply `national_prefix_transform_rule` after that.\r\n\t * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n\t * @return {boolean} [extracted]\r\n\t */\r\n\textractNationalSignificantNumber(nationalDigits, setState) {\r\n\t\tif (!this.hasSelectedNumberingPlan) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\tif (nationalNumber === nationalDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\t/**\r\n\t * In Google's code this function is called \"attempt to extract longer NDD\".\r\n\t * \"Some national prefixes are a substring of others\", they say.\r\n\t * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n\t */\r\n\textractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\r\n\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\treturn this.extractNationalSignificantNumber(nationalDigits, setState)\r\n\t\t}\r\n\t\tif (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\t// If a national prefix has been extracted previously,\r\n\t\t// then it's always extracted as additional digits are added.\r\n\t\t// That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\r\n\t\t// doesn't do anything different from what it currently does.\r\n\t\t// So, just in case, here's this check, though it doesn't occur.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (nationalNumber === prevNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\tonExtractedNationalNumber(\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalDigits,\r\n\t\tsetState\r\n\t) {\r\n\t\tlet complexPrefixBeforeNationalSignificantNumber\r\n\t\tlet nationalSignificantNumberMatchesInput\r\n\t\t// This check also works with empty `this.nationalSignificantNumber`.\r\n\t\tconst nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber)\r\n\t\t// If the extracted national (significant) number is the\r\n\t\t// last substring of the `digits`, then it means that it hasn't been altered:\r\n\t\t// no digits have been removed from the national (significant) number\r\n\t\t// while applying `national_prefix_transform_rule`.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\tif (nationalSignificantNumberIndex >= 0 &&\r\n\t\t\tnationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\r\n\t\t\tnationalSignificantNumberMatchesInput = true\r\n\t\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t\t// as just a basic national prefix, then such prefix is stored in\r\n\t\t\t// `this.complexPrefixBeforeNationalSignificantNumber` property and will be\r\n\t\t\t// prepended \"as is\" to the national (significant) number to produce\r\n\t\t\t// a formatted result.\r\n\t\t\tconst prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex)\r\n\t\t\t// `prefixBeforeNationalNumber` is always non-empty,\r\n\t\t\t// because `onExtractedNationalNumber()` isn't called\r\n\t\t\t// when a national (significant) number hasn't been actually \"extracted\":\r\n\t\t\t// when a national (significant) number is equal to the national part of `digits`,\r\n\t\t\t// then `onExtractedNationalNumber()` doesn't get called.\r\n\t\t\tif (prefixBeforeNationalNumber !== nationalPrefix) {\r\n\t\t\t\tcomplexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetState({\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tnationalSignificantNumberMatchesInput,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber\r\n\t\t})\r\n\t\t// `onExtractedNationalNumber()` is only called when\r\n\t\t// the national (significant) number actually did change.\r\n\t\tthis.hasExtractedNationalSignificantNumber = true\r\n\t\tthis.onNationalSignificantNumberChange()\r\n\t}\r\n\r\n\treExtractNationalSignificantNumber(state) {\r\n\t\t// Attempt to extract a national prefix.\r\n\t\t//\r\n\t\t// Some people incorrectly input national prefix\r\n\t\t// in an international phone number.\r\n\t\t// For example, some people write British phone numbers as `+44(0)...`.\r\n\t\t//\r\n\t\t// Also, in some rare cases, it is valid for a national prefix\r\n\t\t// to be a part of an international phone number.\r\n\t\t// For example, mobile phone numbers in Mexico are supposed to be\r\n\t\t// dialled internationally using a `1` national prefix,\r\n\t\t// so the national prefix will be part of an international number.\r\n\t\t//\r\n\t\t// Quote from:\r\n\t\t// https://www.mexperience.com/dialing-cell-phones-in-mexico/\r\n\t\t//\r\n\t\t// \"Dialing a Mexican cell phone from abroad\r\n\t\t// When you are calling a cell phone number in Mexico from outside Mexico,\r\n\t\t// it’s necessary to dial an additional “1” after Mexico’s country code\r\n\t\t// (which is “52”) and before the area code.\r\n\t\t// You also ignore the 045, and simply dial the area code and the\r\n\t\t// cell phone’s number.\r\n\t\t//\r\n\t\t// If you don’t add the “1”, you’ll receive a recorded announcement\r\n\t\t// asking you to redial using it.\r\n\t\t//\r\n\t\t// For example, if you are calling from the USA to a cell phone\r\n\t\t// in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\r\n\t\t// (Note that this is different to calling a land line in Mexico City\r\n\t\t// from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\r\n\t\t//\r\n\t\t// Google's demo output:\r\n\t\t// https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\r\n\t\t//\r\n\t\tif (this.extractAnotherNationalSignificantNumber(\r\n\t\t\tstate.getNationalDigits(),\r\n\t\t\tstate.nationalSignificantNumber,\r\n\t\t\tstate.update\r\n\t\t)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// If no format matches the phone number, then it could be\r\n\t\t// \"a really long IDD\" (quote from a comment in Google's library).\r\n\t\t// An IDD prefix is first extracted when the user has entered at least 3 digits,\r\n\t\t// and then here — every time when there's a new digit and the number\r\n\t\t// couldn't be formatted.\r\n\t\t// For example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t//\r\n\t\t// Could also check `!hasReceivedThreeLeadingDigits` here\r\n\t\t// to filter out the case when this check duplicates the one\r\n\t\t// already performed when there're 3 leading digits,\r\n\t\t// but it's not a big deal, and in most cases there\r\n\t\t// will be a suitable `format` when there're 3 leading digits.\r\n\t\t//\r\n\t\tif (this.extractIddPrefix(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// Google's AsYouType formatter supports sort of an \"autocorrection\" feature\r\n\t\t// when it \"autocorrects\" numbers that have been input for a country\r\n\t\t// with that country's calling code.\r\n\t\t// Such \"autocorrection\" feature looks weird, but different people have been requesting it:\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/375\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/316\r\n\t\tif (this.fixMissingPlus(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\textractIddPrefix(state) {\r\n\t\t// An IDD prefix can't be present in a number written with a `+`.\r\n\t\t// Also, don't re-extract an IDD prefix if has already been extracted.\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tIDDPrefix,\r\n\t\t\tdigits,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = state\r\n\t\tif (international || IDDPrefix) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Some users input their phone number in \"out-of-country\"\r\n\t\t// dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(\r\n\t\t\tdigits,\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\r\n\t\t\t// If an IDD prefix was stripped then convert the IDD-prefixed number\r\n\t\t\t// to international number for subsequent parsing.\r\n\t\t\tstate.update({\r\n\t\t\t\tIDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\r\n\t\t\t})\r\n\t\t\tthis.startInternationalNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tfixMissingPlus(state) {\r\n\t\tif (!state.international) {\r\n\t\t\tconst {\r\n\t\t\t\tcountryCallingCode: newCallingCode,\r\n\t\t\t\tnumber\r\n\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\tstate.digits,\r\n\t\t\t\tthis.defaultCountry,\r\n\t\t\t\tthis.defaultCallingCode,\r\n\t\t\t\tthis.metadata.metadata\r\n\t\t\t)\r\n\t\t\tif (newCallingCode) {\r\n\t\t\t\tstate.update({\r\n\t\t\t\t\tmissingPlus: true\r\n\t\t\t\t})\r\n\t\t\t\tthis.startInternationalNumber(state)\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstartInternationalNumber(state) {\r\n\t\tstate.startInternationalNumber()\r\n\t\t// If a national (significant) number has been extracted before, reset it.\r\n\t\tif (state.nationalSignificantNumber) {\r\n\t\t\tstate.resetNationalSignificantNumber()\r\n\t\t\tthis.onNationalSignificantNumberChange()\r\n\t\t\tthis.hasExtractedNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\textractCallingCodeAndNationalSignificantNumber(state) {\r\n\t\tif (this.extractCountryCallingCode(state)) {\r\n\t\t\t// `this.extractCallingCode()` is currently called when the number\r\n\t\t\t// couldn't be formatted during the standard procedure.\r\n\t\t\t// Normally, the national prefix would be re-extracted\r\n\t\t\t// for an international number if such number couldn't be formatted,\r\n\t\t\t// but since it's already not able to be formatted,\r\n\t\t\t// there won't be yet another retry, so also extract national prefix here.\r\n\t\t\tthis.extractNationalSignificantNumber(state.getNationalDigits(), state.update)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\r\nfunction extractFormattedPhoneNumber(text) {\r\n\t// Attempt to extract a possible number from the string passed in.\r\n\tconst startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\t// Trim everything to the left of the phone number.\r\n\ttext = text.slice(startsAt)\r\n\t// Trim the `+`.\r\n\tlet hasPlus\r\n\tif (text[0] === '+') {\r\n\t\thasPlus = true\r\n\t\ttext = text.slice('+'.length)\r\n\t}\r\n\t// Trim everything to the right of the phone number.\r\n\ttext = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, '')\r\n\t// Re-add the previously trimmed `+`.\r\n\tif (hasPlus) {\r\n\t\ttext = '+' + text\r\n\t}\r\n\treturn text\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nfunction _extractFormattedDigitsAndPlus(text) {\r\n\t// Extract a formatted phone number part from text.\r\n\tconst extractedNumber = extractFormattedPhoneNumber(text) || ''\r\n\t// Trim a `+`.\r\n\tif (extractedNumber[0] === '+') {\r\n\t\treturn [extractedNumber.slice('+'.length), true]\r\n\t}\r\n\treturn [extractedNumber]\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nexport function extractFormattedDigitsAndPlus(text) {\r\n\tlet [formattedDigits, hasPlus] = _extractFormattedDigitsAndPlus(text)\r\n\t// If the extracted phone number part\r\n\t// can possibly be a part of some valid phone number\r\n\t// then parse phone number characters from a formatted phone number.\r\n\tif (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\r\n\t\tformattedDigits = ''\r\n\t}\r\n\treturn [formattedDigits, hasPlus]\r\n}","import Metadata from './metadata'\r\nimport PhoneNumber from './PhoneNumber'\r\nimport AsYouTypeState from './AsYouTypeState'\r\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter'\r\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class AsYouType {\r\n\t/**\r\n\t * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(optionsOrDefaultCountry, metadata) {\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\t\tconst [defaultCountry, defaultCallingCode] = this.getCountryAndCallingCode(optionsOrDefaultCountry)\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tgetCountryAndCallingCode(optionsOrDefaultCountry) {\r\n\t\t// Set `defaultCountry` and `defaultCallingCode` options.\r\n\t\tlet defaultCountry\r\n\t\tlet defaultCallingCode\r\n\t\t// Turns out `null` also has type \"object\". Weird.\r\n\t\tif (optionsOrDefaultCountry) {\r\n\t\t\tif (typeof optionsOrDefaultCountry === 'object') {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry.defaultCountry\r\n\t\t\t\tdefaultCallingCode = optionsOrDefaultCountry.defaultCallingCode\r\n\t\t\t} else {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tdefaultCountry = undefined\r\n\t\t}\r\n\t\tif (defaultCallingCode) {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tdefaultCountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [defaultCountry, defaultCallingCode]\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number characters.\r\n\t * @param  {string} text\r\n\t * @return {string} Formatted phone number characters that have been input so far.\r\n\t */\r\n\tinput(text) {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t} = this.parser.input(text, this.state)\r\n\t\tif (justLeadingPlus) {\r\n\t\t\tthis.formattedOutput = '+'\r\n\t\t} else if (digits) {\r\n\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t// Match the available formats by the currently available leading digits.\r\n\t\t\tif (this.state.nationalSignificantNumber) {\r\n\t\t\t\tthis.formatter.narrowDownMatchingFormats(this.state)\r\n\t\t\t}\r\n\t\t\tlet formattedNationalNumber\r\n\t\t\tif (this.metadata.hasSelectedNumberingPlan()) {\r\n\t\t\t\tformattedNationalNumber = this.formatter.format(digits, this.state)\r\n\t\t\t}\r\n\t\t\tif (formattedNationalNumber === undefined) {\r\n\t\t\t\t// See if another national (significant) number could be re-extracted.\r\n\t\t\t\tif (this.parser.reExtractNationalSignificantNumber(this.state)) {\r\n\t\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\t\t// If it could, then re-try formatting the new national (significant) number.\r\n\t\t\t\t\tconst nationalDigits = this.state.getNationalDigits()\r\n\t\t\t\t\tif (nationalDigits) {\r\n\t\t\t\t\t\tformattedNationalNumber = this.formatter.format(nationalDigits, this.state)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.formattedOutput = formattedNationalNumber\r\n\t\t\t\t? this.getFullNumber(formattedNationalNumber)\r\n\t\t\t\t: this.getNonFormattedNumber()\r\n\t\t}\r\n\t\treturn this.formattedOutput\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.state = new AsYouTypeState({\r\n\t\t\tonCountryChange: (country) => {\r\n\t\t\t\t// Before version `1.6.0`, the official `AsYouType` formatter API\r\n\t\t\t\t// included the `.country` property of an `AsYouType` instance.\r\n\t\t\t\t// Since that property (along with the others) have been moved to\r\n\t\t\t\t// `this.state`, `this.country` property is emulated for compatibility\r\n\t\t\t\t// with the old versions.\r\n\t\t\t\tthis.country = country\r\n\t\t\t},\r\n\t\t\tonCallingCodeChange: (country, callingCode) => {\r\n\t\t\t\tthis.metadata.selectNumberingPlan(country, callingCode)\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t\tthis.parser.reset(this.metadata.numberingPlan)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.formatter = new AsYouTypeFormatter({\r\n\t\t\tstate: this.state,\r\n\t\t\tmetadata: this.metadata\r\n\t\t})\r\n\t\tthis.parser = new AsYouTypeParser({\r\n\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\tdefaultCallingCode: this.defaultCallingCode,\r\n\t\t\tmetadata: this.metadata,\r\n\t\t\tstate: this.state,\r\n\t\t\tonNationalSignificantNumberChange: () => {\r\n\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.state.reset(this.defaultCountry, this.defaultCallingCode)\r\n\t\tthis.formattedOutput = ''\r\n\t\treturn this\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is being input in international format.\r\n\t * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisInternational() {\r\n\t\treturn this.state.international\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the \"calling code\" part of the phone number when it's being input\r\n\t * in an international format.\r\n\t * If no valid calling code has been entered so far, returns `undefined`.\r\n\t * @return {string} [callingCode]\r\n\t */\r\n\tgetCallingCode() {\r\n\t\t // If the number is being input in national format and some \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then `this.state.callingCode`\r\n\t\t // is equal to that \"default calling code\".\r\n\t\t //\r\n\t\t // If the number is being input in national format and no \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then returns `undefined`,\r\n\t\t // even if a \"default country\" has been passed to `AsYouType` constructor.\r\n\t\t //\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn this.state.callingCode\r\n\t\t}\r\n\t}\r\n\r\n\t// A legacy alias.\r\n\tgetCountryCallingCode() {\r\n\t\treturn this.getCallingCode()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * Returns `undefined` if no phone number has been input yet.\r\n\t * @return {string} [country]\r\n\t */\r\n\tgetCountry() {\r\n\t\tconst { digits } = this.state\r\n\t\t// Return `undefined` if no digits have been input yet.\r\n\t\tif (digits) {\r\n\t\t\treturn this._getCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * @return {string} [country]\r\n\t */\r\n\t_getCountry() {\r\n\t\tconst { country } = this.state\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t// `AsYouType.getCountry()` returns `undefined`\r\n\t\t\t// for \"non-geographic\" phone numbering plans.\r\n\t\t\tif (country === '001') {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn country\r\n\t}\r\n\r\n\tdetermineTheCountryIfNeeded() {\r\n\t\t// Suppose a user enters a phone number in international format,\r\n\t\t// and there're several countries corresponding to that country calling code,\r\n\t\t// and a country has been derived from the number, and then\r\n\t\t// a user enters one more digit and the number is no longer\r\n\t\t// valid for the derived country, so the country should be re-derived\r\n\t\t// on every new digit in those cases.\r\n\t\t//\r\n\t\t// If the phone number is being input in national format,\r\n\t\t// then it could be a case when `defaultCountry` wasn't specified\r\n\t\t// when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\r\n\t\t// and that \"calling code\" could correspond to a \"non-geographic entity\",\r\n\t\t// or there could be several countries corresponding to that country calling code.\r\n\t\t// In those cases, `this.country` is `undefined` and should be derived\r\n\t\t// from the number. Again, if country calling code is ambiguous, then\r\n\t\t// `this.country` should be re-derived with each new digit.\r\n\t\t//\r\n\t\tif (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\r\n\t\t\tthis.determineTheCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode ` in case of an international phone number\r\n\tgetFullNumber(formattedNationalNumber) {\r\n\t\tif (this.isInternational()) {\r\n\t\t\tconst prefix = (text) => this.formatter.getInternationalPrefixBeforeCountryCallingCode(this.state, {\r\n\t\t\t\tspacing: text ? true : false\r\n\t\t\t}) + text\r\n\t\t\tconst { callingCode } = this.state\r\n\t\t\tif (!callingCode) {\r\n\t\t\t\treturn prefix(`${this.state.getDigitsWithoutInternationalPrefix()}`)\r\n\t\t\t}\r\n\t\t\tif (!formattedNationalNumber) {\r\n\t\t\t\treturn prefix(callingCode)\r\n\t\t\t}\r\n\t\t\treturn prefix(`${callingCode} ${formattedNationalNumber}`)\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\tgetNonFormattedNationalNumberWithPrefix() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber,\r\n\t\t\tnationalPrefix\r\n\t\t} = this.state\r\n\t\tlet number = nationalSignificantNumber\r\n\t\tconst prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix\r\n\t\tif (prefix) {\r\n\t\t\tnumber = prefix + number\r\n\t\t}\r\n\t\treturn number\r\n\t}\r\n\r\n\tgetNonFormattedNumber() {\r\n\t\tconst { nationalSignificantNumberMatchesInput } = this.state\r\n\t\treturn this.getFullNumber(\r\n\t\t\tnationalSignificantNumberMatchesInput\r\n\t\t\t\t? this.getNonFormattedNationalNumberWithPrefix()\r\n\t\t\t\t: this.state.getNationalDigits()\r\n\t\t)\r\n\t}\r\n\r\n\tgetNonFormattedTemplate() {\r\n\t\tconst number = this.getNonFormattedNumber()\r\n\t\tif (number) {\r\n\t\t\treturn number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\t}\r\n\r\n\tisCountryCallingCodeAmbiguous() {\r\n\t\tconst { callingCode } = this.state\r\n\t\tconst countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode)\r\n\t\treturn countryCodes && countryCodes.length > 1\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.state.setCountry(getCountryByCallingCode(\r\n\t\t\tthis.isInternational() ? this.state.callingCode : this.defaultCallingCode,\r\n\t\t\tthis.state.nationalSignificantNumber,\r\n\t\t\tthis.metadata\r\n\t\t))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a E.164 phone number value for the user's input.\r\n\t *\r\n\t * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n\t * it will return `\"+12223334444\"`.\r\n\t *\r\n\t * For international phone number input, it will also auto-correct\r\n\t * some minor errors such as using a national prefix when writing\r\n\t * an international phone number. For example, if the user inputs\r\n\t * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n\t * `\"+447400000000\"` phone number value.\r\n\t *\r\n\t * Will return `undefined` if no digits have been input,\r\n\t * or when inputting a phone number in national format and no\r\n\t * default country or default \"country calling code\" have been set.\r\n\t *\r\n\t * @return {string} [value]\r\n\t */\r\n\tgetNumberValue() {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tcallingCode,\r\n\t\t\tcountry,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = this.state\r\n\r\n\t \t// Will return `undefined` if no digits have been input.\r\n\t\tif (!digits) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (this.isInternational()) {\r\n\t\t\tif (callingCode) {\r\n\t\t\t\treturn '+' + callingCode + nationalSignificantNumber\r\n\t\t\t} else {\r\n\t\t\t\treturn '+' + digits\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst callingCode_ = country ? this.metadata.countryCallingCode() : callingCode\r\n\t\t\t\treturn '+' + callingCode_ + nationalSignificantNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcarrierCode,\r\n\t\t\tcallingCode\r\n\t\t} = this.state\r\n\r\n\t\t// `this._getCountry()` is basically same as `this.state.country`\r\n\t\t// with the only change that it return `undefined` in case of a\r\n\t\t// \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\r\n\t\tconst country = this._getCountry()\r\n\r\n\t\tif (!nationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (!country && !callingCode) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountry || callingCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"possible\".\r\n\t * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisPossible() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isPossible()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"valid\".\r\n\t * Is just a shortcut for `PhoneNumber.isValid()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisValid() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isValid()\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * This method is used in `react-phone-number-input/source/input-control.js`\r\n\t * in versions before `3.0.16`.\r\n\t */\r\n\tgetNationalNumber() {\r\n\t\treturn this.state.nationalSignificantNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the phone number characters entered by the user.\r\n\t * @return {string}\r\n\t */\r\n\tgetChars() {\r\n\t\treturn (this.state.international ? '+' : '') + this.state.digits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the template for the formatted phone number.\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplate() {\r\n\t\treturn this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || ''\r\n\t}\r\n}","import { normalizeArguments } from './parsePhoneNumber'\r\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_'\r\n\r\nexport default function parsePhoneNumberFromString() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumberFromString_(text, options, metadata)\r\n}\r\n","import parsePhoneNumber from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function formatPhoneNumber(value, format, metadata) {\r\n\tif (!metadata) {\r\n\t\tif (typeof format === 'object') {\r\n\t\t\tmetadata = format\r\n\t\t\tformat = 'NATIONAL'\r\n\t\t}\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\tif (!phoneNumber) {\r\n\t\treturn ''\r\n\t}\r\n\t// Deprecated.\r\n\t// Legacy `format`s.\r\n\tswitch (format) {\r\n\t\tcase 'National':\r\n\t\t\tformat = 'NATIONAL'\r\n\t\t\tbreak\r\n\t\tcase 'International':\r\n\t\t\tformat = 'INTERNATIONAL'\r\n\t\t\tbreak\r\n\t}\r\n\treturn phoneNumber.format(format)\r\n}\r\n\r\nexport function formatPhoneNumberIntl(value, metadata) {\r\n\treturn formatPhoneNumber(value, 'INTERNATIONAL', metadata)\r\n}","import { normalizeArguments } from './parsePhoneNumber'\r\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_'\r\n\r\nexport default function isValidPhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumberFromString(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isValid() || false\r\n}","import { normalizeArguments } from './parsePhoneNumber'\r\nimport parsePhoneNumberFromString from './parsePhoneNumberFromString_'\r\n\r\nexport default function isPossiblePhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumberFromString(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isPossible() || false\r\n}","import Metadata from './metadata'\r\n\r\nexport default function getCountries(metadata) {\r\n\treturn new Metadata(metadata).getCountries()\r\n}"]}}